
Projet_Proto2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005628  08005628  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005628  08005628  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000007c  080056ac  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  080056ac  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010948  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe4  00000000  00000000  000309f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000329d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016932  00000000  00000000  000342d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f60a  00000000  00000000  0004ac02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089924  00000000  00000000  0005a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3b30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000e3b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800548c 	.word	0x0800548c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800548c 	.word	0x0800548c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fef6 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f824 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f91a 	bl	80004b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f878 	bl	8000374 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f8e6 	bl	8000454 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000288:	480a      	ldr	r0, [pc, #40]	; (80002b4 <main+0x44>)
 800028a:	f002 fd91 	bl	8002db0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800028e:	2100      	movs	r1, #0
 8000290:	4808      	ldr	r0, [pc, #32]	; (80002b4 <main+0x44>)
 8000292:	f002 fe43 	bl	8002f1c <HAL_TIM_IC_Start_IT>

  //timer_val = __HAL_TIM_GET_COUNTER(&htim16);
  timer_val_get = timer_val;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <main+0x48>)
 8000298:	881a      	ldrh	r2, [r3, #0]
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <main+0x4c>)
 800029c:	801a      	strh	r2, [r3, #0]
  {
//		HAL_GPIO_WritePin(GPIOB, LD3_Pin, 1);
//		HAL_Delay(500);
//		HAL_GPIO_WritePin(GPIOB, LD3_Pin, 0);
//		HAL_Delay(500);
	  if (level==1) {
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <main+0x50>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d101      	bne.n	80002aa <main+0x3a>
	  	     generate_sequence();
 80002a6:	f000 fa8d 	bl	80007c4 <generate_sequence>
	  }
	  show_sequence();
 80002aa:	f000 fad9 	bl	8000860 <show_sequence>
	  get_sequence();
 80002ae:	f000 fb65 	bl	800097c <get_sequence>
	  if (level==1) {
 80002b2:	e7f4      	b.n	800029e <main+0x2e>
 80002b4:	20000434 	.word	0x20000434
 80002b8:	200000dc 	.word	0x200000dc
 80002bc:	200000de 	.word	0x200000de
 80002c0:	20000004 	.word	0x20000004

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09c      	sub	sp, #112	; 0x70
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ce:	2228      	movs	r2, #40	; 0x28
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 f8a2 	bl	800441c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2230      	movs	r2, #48	; 0x30
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f004 f894 	bl	800441c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	2302      	movs	r3, #2
 80002f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fc:	2310      	movs	r3, #16
 80002fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000300:	2300      	movs	r3, #0
 8000302:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fa03 	bl	8001714 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000314:	f000 fcbc 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800031c:	2300      	movs	r3, #0
 800031e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800032c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f002 f8f6 	bl	8002524 <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800033e:	f000 fca7 	bl	8000c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 8000342:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000346:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	4618      	mov	r0, r3
 8000350:	f002 fb52 	bl	80029f8 <HAL_RCCEx_PeriphCLKConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800035a:	f000 fc99 	bl	8000c90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800035e:	2200      	movs	r2, #0
 8000360:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000364:	2000      	movs	r0, #0
 8000366:	f002 fa59 	bl	800281c <HAL_RCC_MCOConfig>
}
 800036a:	bf00      	nop
 800036c:	3770      	adds	r7, #112	; 0x70
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08c      	sub	sp, #48	; 0x30
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	f107 0320 	add.w	r3, r7, #32
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ae:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003b6:	f04f 32ff 	mov.w	r2, #4294967295
 80003ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c2:	4b23      	ldr	r3, [pc, #140]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c8:	4821      	ldr	r0, [pc, #132]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003ca:	f002 fc99 	bl	8002d00 <HAL_TIM_Base_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80003d4:	f000 fc5c 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003de:	f107 0320 	add.w	r3, r7, #32
 80003e2:	4619      	mov	r1, r3
 80003e4:	481a      	ldr	r0, [pc, #104]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003e6:	f003 f882 	bl	80034ee <HAL_TIM_ConfigClockSource>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80003f0:	f000 fc4e 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_TIM2_Init+0xdc>)
 80003f6:	f002 fd2f 	bl	8002e58 <HAL_TIM_IC_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000400:	f000 fc46 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040c:	f107 0314 	add.w	r3, r7, #20
 8000410:	4619      	mov	r1, r3
 8000412:	480f      	ldr	r0, [pc, #60]	; (8000450 <MX_TIM2_Init+0xdc>)
 8000414:	f003 fb8c 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800041e:	f000 fc37 	bl	8000c90 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000426:	2301      	movs	r3, #1
 8000428:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2200      	movs	r2, #0
 8000436:	4619      	mov	r1, r3
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_TIM2_Init+0xdc>)
 800043a:	f002 ffbc 	bl	80033b6 <HAL_TIM_IC_ConfigChannel>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000444:	f000 fc24 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	3730      	adds	r7, #48	; 0x30
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000434 	.word	0x20000434

08000454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <MX_USART2_UART_Init+0x5c>)
 800045c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000496:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_USART2_UART_Init+0x58>)
 8000498:	f003 fbce 	bl	8003c38 <HAL_UART_Init>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004a2:	f000 fbf5 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000480 	.word	0x20000480
 80004b0:	40004400 	.word	0x40004400

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b38      	ldr	r3, [pc, #224]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a37      	ldr	r2, [pc, #220]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b35      	ldr	r3, [pc, #212]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a31      	ldr	r2, [pc, #196]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_GPIO_Init+0xf8>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <MX_GPIO_Init+0xf8>)
 8000500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_GPIO_Init+0xf8>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	21c0      	movs	r1, #192	; 0xc0
 8000516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051a:	f001 f8c9 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	212b      	movs	r1, #43	; 0x2b
 8000522:	4823      	ldr	r0, [pc, #140]	; (80005b0 <MX_GPIO_Init+0xfc>)
 8000524:	f001 f8c4 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000528:	23c0      	movs	r3, #192	; 0xc0
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	2301      	movs	r3, #1
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 ff2b 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin|BUZZER_Pin;
 8000546:	232b      	movs	r3, #43	; 0x2b
 8000548:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	2301      	movs	r3, #1
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 030c 	add.w	r3, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	4814      	ldr	r0, [pc, #80]	; (80005b0 <MX_GPIO_Init+0xfc>)
 800055e:	f000 ff1d 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000568:	2302      	movs	r3, #2
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	4619      	mov	r1, r3
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 ff0b 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_1_Pin BT_2_Pin BT_3_Pin BT_4_Pin */
  GPIO_InitStruct.Pin = BT_1_Pin|BT_2_Pin|BT_3_Pin|BT_4_Pin;
 8000586:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	4619      	mov	r1, r3
 800059a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059e:	f000 fefd 	bl	800139c <HAL_GPIO_Init>

}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400

080005b4 <start>:
	sprintf(temp, "%d", x);
	UART_SendText(temp);
}

void start()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	  uint16_t start_rand=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	80fb      	strh	r3, [r7, #6]

	  while(ALLUME_START == 1)
 80005be:	e02c      	b.n	800061a <start+0x66>
	  {
		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c6:	f001 f88b 	bl	80016e0 <HAL_GPIO_TogglePin>
		  HAL_Delay(25);
 80005ca:	2019      	movs	r0, #25
 80005cc:	f000 fdb0 	bl	8001130 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 f883 	bl	80016e0 <HAL_GPIO_TogglePin>
		  HAL_Delay(25);
 80005da:	2019      	movs	r0, #25
 80005dc:	f000 fda8 	bl	8001130 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80005e0:	2101      	movs	r1, #1
 80005e2:	4825      	ldr	r0, [pc, #148]	; (8000678 <start+0xc4>)
 80005e4:	f001 f87c 	bl	80016e0 <HAL_GPIO_TogglePin>
		  HAL_Delay(25);
 80005e8:	2019      	movs	r0, #25
 80005ea:	f000 fda1 	bl	8001130 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 80005ee:	2102      	movs	r1, #2
 80005f0:	4821      	ldr	r0, [pc, #132]	; (8000678 <start+0xc4>)
 80005f2:	f001 f875 	bl	80016e0 <HAL_GPIO_TogglePin>
		  HAL_Delay(25);
 80005f6:	2019      	movs	r0, #25
 80005f8:	f000 fd9a 	bl	8001130 <HAL_Delay>
		  start_rand++;
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	3301      	adds	r3, #1
 8000600:	80fb      	strh	r3, [r7, #6]
		  if(HAL_GPIO_ReadPin(BT_1_GPIO_Port,BT_1_Pin) == GPIO_PIN_SET){
 8000602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f001 f839 	bl	8001680 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b01      	cmp	r3, #1
 8000612:	d102      	bne.n	800061a <start+0x66>
			  ALLUME_START = 0;
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <start+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
	  while(ALLUME_START == 1)
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <start+0xc8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d0ce      	beq.n	80005c0 <start+0xc>
		  }
	  }
	  BEEP(100,1);
 8000622:	2101      	movs	r1, #1
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 faa9 	bl	8000b7c <BEEP>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2101      	movs	r1, #1
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <start+0xc4>)
 8000630:	f001 f83e 	bl	80016b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f001 f838 	bl	80016b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2102      	movs	r1, #2
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <start+0xc4>)
 8000646:	f001 f833 	bl	80016b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 f82d 	bl	80016b0 <HAL_GPIO_WritePin>
	  srand(start_rand);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fee7 	bl	800442c <srand>
	  ALLUME_LED = 0;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <start+0xcc>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2108      	movs	r1, #8
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <start+0xc4>)
 800066a:	f001 f821 	bl	80016b0 <HAL_GPIO_WritePin>

}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	48000400 	.word	0x48000400
 800067c:	20000000 	.word	0x20000000
 8000680:	200000d8 	.word	0x200000d8

08000684 <right_sequence>:

void right_sequence()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2101      	movs	r1, #1
 800068c:	4822      	ldr	r0, [pc, #136]	; (8000718 <right_sequence+0x94>)
 800068e:	f001 f80f 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f001 f809 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2102      	movs	r1, #2
 80006a2:	481d      	ldr	r0, [pc, #116]	; (8000718 <right_sequence+0x94>)
 80006a4:	f001 f804 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b0:	f000 fffe 	bl	80016b0 <HAL_GPIO_WritePin>
	BEEP(300,1);
 80006b4:	2101      	movs	r1, #1
 80006b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80006ba:	f000 fa5f 	bl	8000b7c <BEEP>
	HAL_Delay(5);
 80006be:	2005      	movs	r0, #5
 80006c0:	f000 fd36 	bl	8001130 <HAL_Delay>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2101      	movs	r1, #1
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <right_sequence+0x94>)
 80006ca:	f000 fff1 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 ffeb 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <right_sequence+0x94>)
 80006e0:	f000 ffe6 	bl	80016b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 ffe0 	bl	80016b0 <HAL_GPIO_WritePin>
	if (level<MAX_LEVEL) {
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <right_sequence+0x98>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b63      	cmp	r3, #99	; 0x63
 80006f6:	dc04      	bgt.n	8000702 <right_sequence+0x7e>
	  level++;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <right_sequence+0x98>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <right_sequence+0x98>)
 8000700:	6013      	str	r3, [r2, #0]
	}
	velocity -=5;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <right_sequence+0x9c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3b05      	subs	r3, #5
 8000708:	4a05      	ldr	r2, [pc, #20]	; (8000720 <right_sequence+0x9c>)
 800070a:	6013      	str	r3, [r2, #0]
	HAL_Delay(25);
 800070c:	2019      	movs	r0, #25
 800070e:	f000 fd0f 	bl	8001130 <HAL_Delay>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	48000400 	.word	0x48000400
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <wrong_sequence>:

void wrong_sequence()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i<3; i++)
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	e035      	b.n	800079c <wrong_sequence+0x78>
	{

		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2101      	movs	r1, #1
 8000734:	4820      	ldr	r0, [pc, #128]	; (80007b8 <wrong_sequence+0x94>)
 8000736:	f000 ffbb 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f000 ffb5 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	481b      	ldr	r0, [pc, #108]	; (80007b8 <wrong_sequence+0x94>)
 800074c:	f000 ffb0 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 ffaa 	bl	80016b0 <HAL_GPIO_WritePin>
		BEEP(200,1);
 800075c:	2101      	movs	r1, #1
 800075e:	20c8      	movs	r0, #200	; 0xc8
 8000760:	f000 fa0c 	bl	8000b7c <BEEP>
		//HAL_Delay(10);
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4813      	ldr	r0, [pc, #76]	; (80007b8 <wrong_sequence+0x94>)
 800076a:	f000 ffa1 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 ff9b 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2102      	movs	r1, #2
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <wrong_sequence+0x94>)
 8000780:	f000 ff96 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f000 ff90 	bl	80016b0 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fccd 	bl	8001130 <HAL_Delay>
	for(i = 0; i<3; i++)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	ddc6      	ble.n	8000730 <wrong_sequence+0xc>
	}
	level = 1;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <wrong_sequence+0x98>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	601a      	str	r2, [r3, #0]
	velocity = 250;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <wrong_sequence+0x9c>)
 80007aa:	22fa      	movs	r2, #250	; 0xfa
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	48000400 	.word	0x48000400
 80007bc:	20000004 	.word	0x20000004
 80007c0:	20000008 	.word	0x20000008

080007c4 <generate_sequence>:

void generate_sequence(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	start();
 80007ca:	f7ff fef3 	bl	80005b4 <start>
	 int i;
	 int random = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
	 for (i = 0; i < MAX_LEVEL; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e039      	b.n	800084c <generate_sequence+0x88>
		random = rand() % 4;
 80007d8:	f003 fe56 	bl	8004488 <rand>
 80007dc:	4603      	mov	r3, r0
 80007de:	425a      	negs	r2, r3
 80007e0:	f003 0303 	and.w	r3, r3, #3
 80007e4:	f002 0203 	and.w	r2, r2, #3
 80007e8:	bf58      	it	pl
 80007ea:	4253      	negpl	r3, r2
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d823      	bhi.n	800083c <generate_sequence+0x78>
 80007f4:	a201      	add	r2, pc, #4	; (adr r2, 80007fc <generate_sequence+0x38>)
 80007f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fa:	bf00      	nop
 80007fc:	0800080d 	.word	0x0800080d
 8000800:	08000819 	.word	0x08000819
 8000804:	08000825 	.word	0x08000825
 8000808:	08000831 	.word	0x08000831
		switch(random)
		{
			case 0:
				sequence[i]=LED1_hex;
 800080c:	4a13      	ldr	r2, [pc, #76]	; (800085c <generate_sequence+0x98>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000816:	e016      	b.n	8000846 <generate_sequence+0x82>
			case 1:
				sequence[i]=LED2_hex;
 8000818:	4a10      	ldr	r2, [pc, #64]	; (800085c <generate_sequence+0x98>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000822:	e010      	b.n	8000846 <generate_sequence+0x82>
			case 2:
				sequence[i]=LED3_hex;
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <generate_sequence+0x98>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2102      	movs	r1, #2
 800082a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800082e:	e00a      	b.n	8000846 <generate_sequence+0x82>
			case 3:
				sequence[i]=LED4_hex;
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <generate_sequence+0x98>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2101      	movs	r1, #1
 8000836:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800083a:	e004      	b.n	8000846 <generate_sequence+0x82>
			default:
				sequence[i]=LED1_hex;
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <generate_sequence+0x98>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i < MAX_LEVEL; i++) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b63      	cmp	r3, #99	; 0x63
 8000850:	ddc2      	ble.n	80007d8 <generate_sequence+0x14>
//	 for (i = 0; i <5; i++) {
//		 sequence[i] = LED1_hex;
//	 }
//	 sequence[5] = LED2_hex;
//	 level++;
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200000f0 	.word	0x200000f0

08000860 <show_sequence>:

void show_sequence()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	 int i;
	 for(i=0; i < level; i++)
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	e075      	b.n	8000958 <show_sequence+0xf8>
	 //for(i=0; i < 6; i++)
	 {
		 switch(sequence[i])
 800086c:	4a3f      	ldr	r2, [pc, #252]	; (800096c <show_sequence+0x10c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000874:	2b80      	cmp	r3, #128	; 0x80
 8000876:	d023      	beq.n	80008c0 <show_sequence+0x60>
 8000878:	2b80      	cmp	r3, #128	; 0x80
 800087a:	dc68      	bgt.n	800094e <show_sequence+0xee>
 800087c:	2b40      	cmp	r3, #64	; 0x40
 800087e:	d006      	beq.n	800088e <show_sequence+0x2e>
 8000880:	2b40      	cmp	r3, #64	; 0x40
 8000882:	dc64      	bgt.n	800094e <show_sequence+0xee>
 8000884:	2b01      	cmp	r3, #1
 8000886:	d04b      	beq.n	8000920 <show_sequence+0xc0>
 8000888:	2b02      	cmp	r3, #2
 800088a:	d032      	beq.n	80008f2 <show_sequence+0x92>
 800088c:	e05f      	b.n	800094e <show_sequence+0xee>
			{
				case LED1_hex: //O
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f000 ff0b 	bl	80016b0 <HAL_GPIO_WritePin>
					BEEP(100,1);
 800089a:	2101      	movs	r1, #1
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	f000 f96d 	bl	8000b7c <BEEP>
					HAL_Delay(velocity);
 80008a2:	4b33      	ldr	r3, [pc, #204]	; (8000970 <show_sequence+0x110>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 fc42 	bl	8001130 <HAL_Delay>
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fefc 	bl	80016b0 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 80008b8:	2032      	movs	r0, #50	; 0x32
 80008ba:	f000 fc39 	bl	8001130 <HAL_Delay>
					break;
 80008be:	e048      	b.n	8000952 <show_sequence+0xf2>
				case LED2_hex: //1
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fef2 	bl	80016b0 <HAL_GPIO_WritePin>
					BEEP(100,1);
 80008cc:	2101      	movs	r1, #1
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 f954 	bl	8000b7c <BEEP>
					HAL_Delay(velocity);
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <show_sequence+0x110>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fc29 	bl	8001130 <HAL_Delay>
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 fee3 	bl	80016b0 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 80008ea:	2032      	movs	r0, #50	; 0x32
 80008ec:	f000 fc20 	bl	8001130 <HAL_Delay>
					break;
 80008f0:	e02f      	b.n	8000952 <show_sequence+0xf2>
				case LED3_hex: //2
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2101      	movs	r1, #1
 80008f6:	481f      	ldr	r0, [pc, #124]	; (8000974 <show_sequence+0x114>)
 80008f8:	f000 feda 	bl	80016b0 <HAL_GPIO_WritePin>
					BEEP(100,1);
 80008fc:	2101      	movs	r1, #1
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f000 f93c 	bl	8000b7c <BEEP>
					HAL_Delay(velocity);
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <show_sequence+0x110>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fc11 	bl	8001130 <HAL_Delay>
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2101      	movs	r1, #1
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <show_sequence+0x114>)
 8000914:	f000 fecc 	bl	80016b0 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 8000918:	2032      	movs	r0, #50	; 0x32
 800091a:	f000 fc09 	bl	8001130 <HAL_Delay>
					break;
 800091e:	e018      	b.n	8000952 <show_sequence+0xf2>
				case LED4_hex: //3
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2102      	movs	r1, #2
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <show_sequence+0x114>)
 8000926:	f000 fec3 	bl	80016b0 <HAL_GPIO_WritePin>
					BEEP(100,1);
 800092a:	2101      	movs	r1, #1
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 f925 	bl	8000b7c <BEEP>
					HAL_Delay(velocity);
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <show_sequence+0x110>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 fbfa 	bl	8001130 <HAL_Delay>
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2102      	movs	r1, #2
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <show_sequence+0x114>)
 8000942:	f000 feb5 	bl	80016b0 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 8000946:	2032      	movs	r0, #50	; 0x32
 8000948:	f000 fbf2 	bl	8001130 <HAL_Delay>
					break;
 800094c:	e001      	b.n	8000952 <show_sequence+0xf2>
				default:
					wrong_sequence();
 800094e:	f7ff fee9 	bl	8000724 <wrong_sequence>
	 for(i=0; i < level; i++)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <show_sequence+0x118>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	db84      	blt.n	800086c <show_sequence+0xc>
			}
	 }
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000f0 	.word	0x200000f0
 8000970:	20000008 	.word	0x20000008
 8000974:	48000400 	.word	0x48000400
 8000978:	20000004 	.word	0x20000004

0800097c <get_sequence>:

void get_sequence()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
	bool flag;
	int i;
	int temp_freq = Frequency;
 8000982:	4b79      	ldr	r3, [pc, #484]	; (8000b68 <get_sequence+0x1ec>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	607b      	str	r3, [r7, #4]
	for(i=0; i<level;i++)
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	e0e1      	b.n	8000b52 <get_sequence+0x1d6>
	{
			flag = false;
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]
			while(flag == false)
 8000992:	e0d4      	b.n	8000b3e <get_sequence+0x1c2>
			{HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2108      	movs	r1, #8
 8000998:	4874      	ldr	r0, [pc, #464]	; (8000b6c <get_sequence+0x1f0>)
 800099a:	f000 fe89 	bl	80016b0 <HAL_GPIO_WritePin>

					if(HAL_GPIO_ReadPin(BT_1_GPIO_Port,BT_1_Pin) == GPIO_PIN_SET)
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fe6b 	bl	8001680 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d12b      	bne.n	8000a08 <get_sequence+0x8c>
					{
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f000 fe7a 	bl	80016b0 <HAL_GPIO_WritePin>
						BEEP(100,1);
 80009bc:	2101      	movs	r1, #1
 80009be:	2064      	movs	r0, #100	; 0x64
 80009c0:	f000 f8dc 	bl	8000b7c <BEEP>
						your_sequence[i] = LED1_hex;
 80009c4:	4a6a      	ldr	r2, [pc, #424]	; (8000b70 <get_sequence+0x1f4>)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(25);
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 fbac 	bl	8001130 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2108      	movs	r1, #8
 80009dc:	4863      	ldr	r0, [pc, #396]	; (8000b6c <get_sequence+0x1f0>)
 80009de:	f000 fe67 	bl	80016b0 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 80009e2:	4a63      	ldr	r2, [pc, #396]	; (8000b70 <get_sequence+0x1f4>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ea:	4962      	ldr	r1, [pc, #392]	; (8000b74 <get_sequence+0x1f8>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d002      	beq.n	80009fc <get_sequence+0x80>
						{
							wrong_sequence();
 80009f6:	f7ff fe95 	bl	8000724 <wrong_sequence>
							return;
 80009fa:	e0b2      	b.n	8000b62 <get_sequence+0x1e6>
						}
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fe54 	bl	80016b0 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_2_GPIO_Port,BT_2_Pin) == GPIO_PIN_SET)
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a10:	f000 fe36 	bl	8001680 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d12b      	bne.n	8000a72 <get_sequence+0xf6>
					{
						HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f000 fe45 	bl	80016b0 <HAL_GPIO_WritePin>
						BEEP(100,1);
 8000a26:	2101      	movs	r1, #1
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f000 f8a7 	bl	8000b7c <BEEP>
						your_sequence[i] = LED2_hex;
 8000a2e:	4a50      	ldr	r2, [pc, #320]	; (8000b70 <get_sequence+0x1f4>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(25);
 8000a3c:	2019      	movs	r0, #25
 8000a3e:	f000 fb77 	bl	8001130 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2108      	movs	r1, #8
 8000a46:	4849      	ldr	r0, [pc, #292]	; (8000b6c <get_sequence+0x1f0>)
 8000a48:	f000 fe32 	bl	80016b0 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000a4c:	4a48      	ldr	r2, [pc, #288]	; (8000b70 <get_sequence+0x1f4>)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a54:	4947      	ldr	r1, [pc, #284]	; (8000b74 <get_sequence+0x1f8>)
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d002      	beq.n	8000a66 <get_sequence+0xea>
						{
							wrong_sequence();
 8000a60:	f7ff fe60 	bl	8000724 <wrong_sequence>
							return;
 8000a64:	e07d      	b.n	8000b62 <get_sequence+0x1e6>
						}
						HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fe1f 	bl	80016b0 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_3_GPIO_Port,BT_3_Pin) == GPIO_PIN_SET)
 8000a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f000 fe01 	bl	8001680 <HAL_GPIO_ReadPin>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d129      	bne.n	8000ad8 <get_sequence+0x15c>
					{
						HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	4838      	ldr	r0, [pc, #224]	; (8000b6c <get_sequence+0x1f0>)
 8000a8a:	f000 fe11 	bl	80016b0 <HAL_GPIO_WritePin>
						BEEP(100,1);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f000 f873 	bl	8000b7c <BEEP>
						your_sequence[i] = LED3_hex;
 8000a96:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <get_sequence+0x1f4>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(25);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f000 fb43 	bl	8001130 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2108      	movs	r1, #8
 8000aae:	482f      	ldr	r0, [pc, #188]	; (8000b6c <get_sequence+0x1f0>)
 8000ab0:	f000 fdfe 	bl	80016b0 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000ab4:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <get_sequence+0x1f4>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000abc:	492d      	ldr	r1, [pc, #180]	; (8000b74 <get_sequence+0x1f8>)
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d002      	beq.n	8000ace <get_sequence+0x152>
						{
							wrong_sequence();
 8000ac8:	f7ff fe2c 	bl	8000724 <wrong_sequence>
							return;
 8000acc:	e049      	b.n	8000b62 <get_sequence+0x1e6>
						}
						HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	4826      	ldr	r0, [pc, #152]	; (8000b6c <get_sequence+0x1f0>)
 8000ad4:	f000 fdec 	bl	80016b0 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_4_GPIO_Port,BT_4_Pin) == GPIO_PIN_SET)
 8000ad8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fdce 	bl	8001680 <HAL_GPIO_ReadPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d129      	bne.n	8000b3e <get_sequence+0x1c2>
					{
						HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	2102      	movs	r1, #2
 8000aee:	481f      	ldr	r0, [pc, #124]	; (8000b6c <get_sequence+0x1f0>)
 8000af0:	f000 fdde 	bl	80016b0 <HAL_GPIO_WritePin>
						BEEP(100,1);
 8000af4:	2101      	movs	r1, #1
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f000 f840 	bl	8000b7c <BEEP>
						your_sequence[i] = LED4_hex;
 8000afc:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <get_sequence+0x1f4>)
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2101      	movs	r1, #1
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(25);
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fb10 	bl	8001130 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2108      	movs	r1, #8
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <get_sequence+0x1f0>)
 8000b16:	f000 fdcb 	bl	80016b0 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <get_sequence+0x1f4>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b22:	4914      	ldr	r1, [pc, #80]	; (8000b74 <get_sequence+0x1f8>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d002      	beq.n	8000b34 <get_sequence+0x1b8>
						{
							wrong_sequence();
 8000b2e:	f7ff fdf9 	bl	8000724 <wrong_sequence>
							return;
 8000b32:	e016      	b.n	8000b62 <get_sequence+0x1e6>
						}
						HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2102      	movs	r1, #2
 8000b38:	480c      	ldr	r0, [pc, #48]	; (8000b6c <get_sequence+0x1f0>)
 8000b3a:	f000 fdb9 	bl	80016b0 <HAL_GPIO_WritePin>
			while(flag == false)
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f083 0301 	eor.w	r3, r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f af24 	bne.w	8000994 <get_sequence+0x18>
	for(i=0; i<level;i++)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <get_sequence+0x1fc>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f6ff af18 	blt.w	800098e <get_sequence+0x12>
			//timer_val_get = __HAL_TIM_GET_COUNTER(&htim16);

		}

	}
	 right_sequence();
 8000b5e:	f7ff fd91 	bl	8000684 <right_sequence>
}
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000d4 	.word	0x200000d4
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	200002a4 	.word	0x200002a4
 8000b74:	200000f0 	.word	0x200000f0
 8000b78:	20000004 	.word	0x20000004

08000b7c <BEEP>:

void BEEP( uint16_t tone, uint16_t time) { // The function takes the value of the sound tone and the duration of the sound
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	80fb      	strh	r3, [r7, #6]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	80bb      	strh	r3, [r7, #4]
 uint16_t j;
 for (j =  0 ; j < time; ++ j) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	81fb      	strh	r3, [r7, #14]
 8000b90:	e00c      	b.n	8000bac <BEEP+0x30>
	 BUZZER_GPIO_Port->BSRR = BUZZER_Pin;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <BEEP+0x44>)
 8000b94:	2220      	movs	r2, #32
 8000b96:	619a      	str	r2, [r3, #24]
	 HAL_Delay(tone);
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fac8 	bl	8001130 <HAL_Delay>
	 BUZZER_GPIO_Port->BRR = BUZZER_Pin;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <BEEP+0x44>)
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
 for (j =  0 ; j < time; ++ j) {
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	81fb      	strh	r3, [r7, #14]
 8000bac:	89fa      	ldrh	r2, [r7, #14]
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d3ee      	bcc.n	8000b92 <BEEP+0x16>
	 //HAL_Delay(tone);
 }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	48000400 	.word	0x48000400

08000bc4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    if(gu8_State == IDLE)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <HAL_TIM_IC_CaptureCallback+0x2a>
    {
        gu32_T1 = TIM2->CCR1;
 8000bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000bde:	6013      	str	r3, [r2, #0]
        gu16_TIM2_OVC = 0;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	801a      	strh	r2, [r3, #0]
        gu8_State = DONE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
//        	  ALLUME_START=0;
//          }
        }
        gu8_State = IDLE;
    }
}
 8000bec:	e026      	b.n	8000c3c <HAL_TIM_IC_CaptureCallback+0x78>
    else if(gu8_State == DONE)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d121      	bne.n	8000c3c <HAL_TIM_IC_CaptureCallback+0x78>
        gu32_T2 = TIM2->CCR1;
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000c00:	6013      	str	r3, [r2, #0]
        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * 4294967296)) - gu32_T1;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x88>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x84>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000c12:	6013      	str	r3, [r2, #0]
        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c20:	6013      	str	r3, [r2, #0]
        if(gu32_Freq != 0)
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d005      	beq.n	8000c36 <HAL_TIM_IC_CaptureCallback+0x72>
          HAL_UART_Transmit(&huart2, gu8_MSG, sizeof(gu8_MSG), 100);
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2223      	movs	r2, #35	; 0x23
 8000c2e:	490c      	ldr	r1, [pc, #48]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000c32:	f003 f84f 	bl	8003cd4 <HAL_UART_Transmit>
        gu8_State = IDLE;
 8000c36:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000098 	.word	0x20000098
 8000c48:	200000c0 	.word	0x200000c0
 8000c4c:	200000cc 	.word	0x200000cc
 8000c50:	200000c4 	.word	0x200000c4
 8000c54:	200000c8 	.word	0x200000c8
 8000c58:	01e84800 	.word	0x01e84800
 8000c5c:	200000d0 	.word	0x200000d0
 8000c60:	2000009c 	.word	0x2000009c
 8000c64:	20000480 	.word	0x20000480

08000c68 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    gu16_TIM2_OVC++;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c7c:	801a      	strh	r2, [r3, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	200000cc 	.word	0x200000cc

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6193      	str	r3, [r2, #24]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d130      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	61d3      	str	r3, [r2, #28]
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d28:	6153      	str	r3, [r2, #20]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d46:	2301      	movs	r3, #1
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d54:	f000 fb22 	bl	800139c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	201c      	movs	r0, #28
 8000d5e:	f000 fae6 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d62:	201c      	movs	r0, #28
 8000d64:	f000 faff 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0x7c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d128      	bne.n	8000de8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	61d3      	str	r3, [r2, #28]
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 fada 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f954 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM2_IRQHandler+0x10>)
 8000e52:	f002 f991 	bl	8003178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000434 	.word	0x20000434

08000e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	return 1;
 8000e64:	2301      	movs	r3, #1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_kill>:

int _kill(int pid, int sig)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e7a:	f003 faa5 	bl	80043c8 <__errno>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2216      	movs	r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
	return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_exit>:

void _exit (int status)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffe7 	bl	8000e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ea2:	e7fe      	b.n	8000ea2 <_exit+0x12>

08000ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
	}

return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e009      	b.n	8000f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf1      	blt.n	8000ef0 <_write+0x12>
	}
	return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_close>:

int _close(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_isatty>:

int _isatty(int file)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	return 1;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 fa0a 	bl	80043c8 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20004000 	.word	0x20004000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	200000e0 	.word	0x200000e0
 8000fe8:	20000568 	.word	0x20000568

08000fec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0b      	ldr	r4, [pc, #44]	; (800105c <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103a:	f7ff ffd7 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 f9c9 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001042:	f7ff f915 	bl	8000270 <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001048:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001054:	08005630 	.word	0x08005630
  ldr r2, =_sbss
 8001058:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800105c:	20000564 	.word	0x20000564

08001060 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_IRQHandler>
	...

08001064 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_Init+0x28>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <HAL_Init+0x28>)
 800106e:	f043 0310 	orr.w	r3, r3, #16
 8001072:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f94f 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107a:	200f      	movs	r0, #15
 800107c:	f000 f808 	bl	8001090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001080:	f7ff fe0c 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x54>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x58>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f967 	bl	8001382 <HAL_SYSTICK_Config>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00e      	b.n	80010dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d80a      	bhi.n	80010da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f92f 	bl	800132e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_InitTick+0x5c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e000      	b.n	80010dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000000c 	.word	0x2000000c
 80010e8:	20000014 	.word	0x20000014
 80010ec:	20000010 	.word	0x20000010

080010f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000014 	.word	0x20000014
 8001114:	20000550 	.word	0x20000550

08001118 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;  
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000550 	.word	0x20000550

08001130 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000014 	.word	0x20000014

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff3e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff31 	bl	80011dc <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e14e      	b.n	800164a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8140 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d017      	beq.n	800147a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d123      	bne.n	80014ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	220f      	movs	r2, #15
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	08da      	lsrs	r2, r3, #3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3208      	adds	r2, #8
 80014c8:	6939      	ldr	r1, [r7, #16]
 80014ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0203 	and.w	r2, r3, #3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 809a 	beq.w	8001644 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001510:	4b55      	ldr	r3, [pc, #340]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a54      	ldr	r2, [pc, #336]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b52      	ldr	r3, [pc, #328]	; (8001668 <HAL_GPIO_Init+0x2cc>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001528:	4a50      	ldr	r2, [pc, #320]	; (800166c <HAL_GPIO_Init+0x2d0>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001552:	d013      	beq.n	800157c <HAL_GPIO_Init+0x1e0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a46      	ldr	r2, [pc, #280]	; (8001670 <HAL_GPIO_Init+0x2d4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a45      	ldr	r2, [pc, #276]	; (8001674 <HAL_GPIO_Init+0x2d8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1d8>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a44      	ldr	r2, [pc, #272]	; (8001678 <HAL_GPIO_Init+0x2dc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1d4>
 800156c:	2303      	movs	r3, #3
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001570:	2305      	movs	r3, #5
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1e2>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_GPIO_Init+0x2d0>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2e0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c0:	4a2e      	ldr	r2, [pc, #184]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ea:	4a24      	ldr	r2, [pc, #144]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <HAL_GPIO_Init+0x2e0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_GPIO_Init+0x2e0>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_GPIO_Init+0x2e0>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_GPIO_Init+0x2e0>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f aea9 	bne.w	80013ac <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	40010400 	.word	0x40010400

08001680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	887b      	ldrh	r3, [r7, #2]
 8001692:	4013      	ands	r3, r2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e001      	b.n	80016a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43d9      	mvns	r1, r3
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	400b      	ands	r3, r1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800171a:	af00      	add	r7, sp, #0
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	f000 bef4 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 816a 	beq.w	8001a12 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800173e:	4bb3      	ldr	r3, [pc, #716]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800174a:	4bb0      	ldr	r3, [pc, #704]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b08      	cmp	r3, #8
 8001754:	d159      	bne.n	800180a <HAL_RCC_OscConfig+0xf6>
 8001756:	4bad      	ldr	r3, [pc, #692]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d152      	bne.n	800180a <HAL_RCC_OscConfig+0xf6>
 8001764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001768:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001778:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0x82>
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0xae>
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017be:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017ce:	fa92 f2a2 	rbit	r2, r2
 80017d2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f002 021f 	and.w	r2, r2, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 810c 	beq.w	8001a10 <HAL_RCC_OscConfig+0x2fc>
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8106 	bne.w	8001a10 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	f000 be86 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001814:	d106      	bne.n	8001824 <HAL_RCC_OscConfig+0x110>
 8001816:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e030      	b.n	8001886 <HAL_RCC_OscConfig+0x172>
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x134>
 800182e:	4b77      	ldr	r3, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a76      	ldr	r2, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a73      	ldr	r2, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01e      	b.n	8001886 <HAL_RCC_OscConfig+0x172>
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x15a>
 8001854:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6c      	ldr	r2, [pc, #432]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x172>
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001886:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	495d      	ldr	r1, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d059      	beq.n	8001958 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc38 	bl	8001118 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7ff fc33 	bl	8001118 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d902      	bls.n	80018c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	f000 be29 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
 80018c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x1e2>
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x20e>
 80018f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800190a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001912:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001926:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800192a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800192e:	fa92 f2a2 	rbit	r2, r2
 8001932:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001936:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800193a:	fab2 f282 	clz	r2, r2
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f042 0220 	orr.w	r2, r2, #32
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f002 021f 	and.w	r2, r2, #31
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ab      	beq.n	80018ae <HAL_RCC_OscConfig+0x19a>
 8001956:	e05c      	b.n	8001a12 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fbde 	bl	8001118 <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001960:	e00a      	b.n	8001978 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001962:	f7ff fbd9 	bl	8001118 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d902      	bls.n	8001978 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	f000 bdcf 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
 8001978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800197c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001980:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800198c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_OscConfig+0x296>
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x2c2>
 80019aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019ca:	fa93 f3a3 	rbit	r3, r3
 80019ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_RCC_OscConfig+0x2f8>)
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019e2:	fa92 f2a2 	rbit	r2, r2
 80019e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f042 0220 	orr.w	r2, r2, #32
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f002 021f 	and.w	r2, r2, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f202 	lsl.w	r2, r1, r2
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ab      	bne.n	8001962 <HAL_RCC_OscConfig+0x24e>
 8001a0a:	e002      	b.n	8001a12 <HAL_RCC_OscConfig+0x2fe>
 8001a0c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 816f 	beq.w	8001d00 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a22:	4bd0      	ldr	r3, [pc, #832]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a2e:	4bcd      	ldr	r3, [pc, #820]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d16c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x400>
 8001a3a:	4bca      	ldr	r3, [pc, #808]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d166      	bne.n	8001b14 <HAL_RCC_OscConfig+0x400>
 8001a46:	2302      	movs	r3, #2
 8001a48:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_OscConfig+0x362>
 8001a70:	4bbc      	ldr	r3, [pc, #752]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e013      	b.n	8001a9e <HAL_RCC_OscConfig+0x38a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a8e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a9a:	4bb2      	ldr	r3, [pc, #712]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aa4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001aa8:	fa92 f2a2 	rbit	r2, r2
 8001aac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ab0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ab4:	fab2 f282 	clz	r2, r2
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f002 021f 	and.w	r2, r2, #31
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f000 bd1b 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	21f8      	movs	r1, #248	; 0xf8
 8001af0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001af8:	fa91 f1a1 	rbit	r1, r1
 8001afc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b00:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b04:	fab1 f181 	clz	r1, r1
 8001b08:	b2c9      	uxtb	r1, r1
 8001b0a:	408b      	lsls	r3, r1
 8001b0c:	4995      	ldr	r1, [pc, #596]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e0f5      	b.n	8001d00 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8085 	beq.w	8001c2a <HAL_RCC_OscConfig+0x516>
 8001b20:	2301      	movs	r3, #1
 8001b22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b36:	fab3 f383 	clz	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	461a      	mov	r2, r3
 8001b48:	2301      	movs	r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fae4 	bl	8001118 <HAL_GetTick>
 8001b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fadf 	bl	8001118 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d902      	bls.n	8001b6c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	f000 bcd5 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x488>
 8001b96:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e013      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4b0>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bb4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bce:	fa92 f2a2 	rbit	r2, r2
 8001bd2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bd6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bda:	fab2 f282 	clz	r2, r2
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	f042 0220 	orr.w	r2, r2, #32
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f002 021f 	and.w	r2, r2, #31
 8001bea:	2101      	movs	r1, #1
 8001bec:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0af      	beq.n	8001b56 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	21f8      	movs	r1, #248	; 0xf8
 8001c06:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c0e:	fa91 f1a1 	rbit	r1, r1
 8001c12:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c16:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c1a:	fab1 f181 	clz	r1, r1
 8001c1e:	b2c9      	uxtb	r1, r1
 8001c20:	408b      	lsls	r3, r1
 8001c22:	4950      	ldr	r1, [pc, #320]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]
 8001c28:	e06a      	b.n	8001d00 <HAL_RCC_OscConfig+0x5ec>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	461a      	mov	r2, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff fa5f 	bl	8001118 <HAL_GetTick>
 8001c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fa5a 	bl	8001118 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d902      	bls.n	8001c76 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f000 bc50 	b.w	8002516 <HAL_RCC_OscConfig+0xe02>
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x592>
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e013      	b.n	8001cce <HAL_RCC_OscConfig+0x5ba>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cb8:	2302      	movs	r3, #2
 8001cba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x650>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001cd8:	fa92 f2a2 	rbit	r2, r2
 8001cdc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ce0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f042 0220 	orr.w	r2, r2, #32
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1af      	bne.n	8001c60 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80da 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d069      	beq.n	8001dee <HAL_RCC_OscConfig+0x6da>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_RCC_OscConfig+0x654>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f9e8 	bl	8001118 <HAL_GetTick>
 8001d48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4c:	e00e      	b.n	8001d6c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4e:	f7ff f9e3 	bl	8001118 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d906      	bls.n	8001d6c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e3d9      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	10908120 	.word	0x10908120
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d82:	2202      	movs	r2, #2
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fa93 f2a3 	rbit	r2, r3
 8001da8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001db6:	2102      	movs	r1, #2
 8001db8:	6019      	str	r1, [r3, #0]
 8001dba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	fa93 f1a3 	rbit	r1, r3
 8001dc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dc8:	6019      	str	r1, [r3, #0]
  return result;
 8001dca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0b0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x63a>
 8001dec:	e06a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x7b0>
 8001dee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e04:	601a      	str	r2, [r3, #0]
  return result;
 8001e06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b8c      	ldr	r3, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x934>)
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e20:	f7ff f97a 	bl	8001118 <HAL_GetTick>
 8001e24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff f975 	bl	8001118 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e36b      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 8001e3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e42:	2202      	movs	r2, #2
 8001e44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fa93 f2a3 	rbit	r2, r3
 8001e50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e8e:	2102      	movs	r1, #2
 8001e90:	6019      	str	r1, [r3, #0]
 8001e92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	fa93 f1a3 	rbit	r1, r3
 8001e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea0:	6019      	str	r1, [r3, #0]
  return result;
 8001ea2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1b2      	bne.n	8001e2a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 8158 	beq.w	8002184 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a56      	ldr	r2, [pc, #344]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	61d3      	str	r3, [r2, #28]
 8001ef2:	4b54      	ldr	r3, [pc, #336]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001efa:	f107 0308 	add.w	r3, r7, #8
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f107 0308 	add.w	r3, r7, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	4b4f      	ldr	r3, [pc, #316]	; (800204c <HAL_RCC_OscConfig+0x938>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11a      	bne.n	8001f4e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f18:	4b4c      	ldr	r3, [pc, #304]	; (800204c <HAL_RCC_OscConfig+0x938>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_RCC_OscConfig+0x938>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f24:	f7ff f8f8 	bl	8001118 <HAL_GetTick>
 8001f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2c:	e009      	b.n	8001f42 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff f8f3 	bl	8001118 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e2e9      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b42      	ldr	r3, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x938>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0ef      	beq.n	8001f2e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x852>
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e02f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x8b2>
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10c      	bne.n	8001f8a <HAL_RCC_OscConfig+0x876>
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	4a33      	ldr	r2, [pc, #204]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6213      	str	r3, [r2, #32]
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	6213      	str	r3, [r2, #32]
 8001f88:	e01d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x8b2>
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d10c      	bne.n	8001fae <HAL_RCC_OscConfig+0x89a>
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x8b2>
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6213      	str	r3, [r2, #32]
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d06b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd0:	f7ff f8a2 	bl	8001118 <HAL_GetTick>
 8001fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7ff f89d 	bl	8001118 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e291      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 8001ff2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002020:	601a      	str	r2, [r3, #0]
  return result;
 8002022:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002026:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	b2db      	uxtb	r3, r3
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d109      	bne.n	8002050 <HAL_RCC_OscConfig+0x93c>
 800203c:	4b01      	ldr	r3, [pc, #4]	; (8002044 <HAL_RCC_OscConfig+0x930>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x958>
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	10908120 	.word	0x10908120
 800204c:	40007000 	.word	0x40007000
 8002050:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002054:	2202      	movs	r2, #2
 8002056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4bbb      	ldr	r3, [pc, #748]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002070:	2102      	movs	r1, #2
 8002072:	6011      	str	r1, [r2, #0]
 8002074:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	fa92 f1a2 	rbit	r1, r2
 800207e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002082:	6011      	str	r1, [r2, #0]
  return result;
 8002084:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	fab2 f282 	clz	r2, r2
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f002 021f 	and.w	r2, r2, #31
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f202 	lsl.w	r2, r1, r2
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d099      	beq.n	8001fda <HAL_RCC_OscConfig+0x8c6>
 80020a6:	e063      	b.n	8002170 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff f836 	bl	8001118 <HAL_GetTick>
 80020ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff f831 	bl	8001118 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e225      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 80020ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020ce:	2202      	movs	r2, #2
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fa93 f2a3 	rbit	r2, r3
 80020dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020f8:	601a      	str	r2, [r3, #0]
  return result;
 80020fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80020fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	b2db      	uxtb	r3, r3
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d102      	bne.n	800211a <HAL_RCC_OscConfig+0xa06>
 8002114:	4b90      	ldr	r3, [pc, #576]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	e00d      	b.n	8002136 <HAL_RCC_OscConfig+0xa22>
 800211a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	4b89      	ldr	r3, [pc, #548]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800213a:	2102      	movs	r1, #2
 800213c:	6011      	str	r1, [r2, #0]
 800213e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	fa92 f1a2 	rbit	r1, r2
 8002148:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800214c:	6011      	str	r1, [r2, #0]
  return result;
 800214e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	f002 021f 	and.w	r2, r2, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f202 	lsl.w	r2, r1, r2
 800216a:	4013      	ands	r3, r2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1a0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002170:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b77      	ldr	r3, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4a76      	ldr	r2, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 81c2 	beq.w	8002514 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	4b71      	ldr	r3, [pc, #452]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 030c 	and.w	r3, r3, #12
 8002198:	2b08      	cmp	r3, #8
 800219a:	f000 819c 	beq.w	80024d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	f040 8114 	bne.w	80023d2 <HAL_RCC_OscConfig+0xcbe>
 80021aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021c2:	601a      	str	r2, [r3, #0]
  return result;
 80021c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	461a      	mov	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff9a 	bl	8001118 <HAL_GetTick>
 80021e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	e009      	b.n	80021fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe ff95 	bl	8001118 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e18b      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 80021fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002202:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	fa93 f2a3 	rbit	r2, r3
 8002212:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002216:	601a      	str	r2, [r3, #0]
  return result;
 8002218:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800221c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <HAL_RCC_OscConfig+0xb24>
 8002232:	4b49      	ldr	r3, [pc, #292]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0xb5c>
 8002238:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800223c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002274:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002278:	6011      	str	r1, [r2, #0]
 800227a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fa92 f1a2 	rbit	r1, r2
 8002284:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002288:	6011      	str	r1, [r2, #0]
  return result;
 800228a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d19e      	bne.n	80021ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ac:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	4925      	ldr	r1, [pc, #148]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e0:	601a      	str	r2, [r3, #0]
  return result;
 80022e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	2301      	movs	r3, #1
 80022fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe ff0b 	bl	8001118 <HAL_GetTick>
 8002302:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002306:	e009      	b.n	800231c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe ff06 	bl	8001118 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0fc      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 800231c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	fa93 f2a3 	rbit	r2, r3
 8002330:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002334:	601a      	str	r2, [r3, #0]
  return result;
 8002336:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800233a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0xc48>
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_RCC_OscConfig+0xc44>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	e01e      	b.n	8002394 <HAL_RCC_OscConfig+0xc80>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002360:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800237a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	fa93 f2a3 	rbit	r2, r3
 800238a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_OscConfig+0xe0c>)
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002398:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800239c:	6011      	str	r1, [r2, #0]
 800239e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	fa92 f1a2 	rbit	r1, r2
 80023a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023ac:	6011      	str	r1, [r2, #0]
  return result;
 80023ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	fab2 f282 	clz	r2, r2
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	f042 0220 	orr.w	r2, r2, #32
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f002 021f 	and.w	r2, r2, #31
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d09b      	beq.n	8002308 <HAL_RCC_OscConfig+0xbf4>
 80023d0:	e0a0      	b.n	8002514 <HAL_RCC_OscConfig+0xe00>
 80023d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ea:	601a      	str	r2, [r3, #0]
  return result;
 80023ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fe86 	bl	8001118 <HAL_GetTick>
 800240c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e009      	b.n	8002426 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fe81 	bl	8001118 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e077      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
 8002426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800242a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243e:	601a      	str	r2, [r3, #0]
  return result;
 8002440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002444:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d102      	bne.n	8002460 <HAL_RCC_OscConfig+0xd4c>
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_OscConfig+0xe0c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e01b      	b.n	8002498 <HAL_RCC_OscConfig+0xd84>
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f107 0320 	add.w	r3, r7, #32
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f107 0318 	add.w	r3, r7, #24
 800247e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	f107 0318 	add.w	r3, r7, #24
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <HAL_RCC_OscConfig+0xe0c>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	f107 0210 	add.w	r2, r7, #16
 800249c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	f107 0210 	add.w	r2, r7, #16
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	fa92 f1a2 	rbit	r1, r2
 80024ac:	f107 020c 	add.w	r2, r7, #12
 80024b0:	6011      	str	r1, [r2, #0]
  return result;
 80024b2:	f107 020c 	add.w	r2, r7, #12
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fab2 f282 	clz	r2, r2
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	f002 021f 	and.w	r2, r2, #31
 80024c8:	2101      	movs	r1, #1
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d19e      	bne.n	8002412 <HAL_RCC_OscConfig+0xcfe>
 80024d4:	e01e      	b.n	8002514 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e018      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_RCC_OscConfig+0xe0c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002502:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09e      	sub	sp, #120	; 0x78
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e162      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b90      	ldr	r3, [pc, #576]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d910      	bls.n	800256c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b8d      	ldr	r3, [pc, #564]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	498b      	ldr	r1, [pc, #556]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e14a      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	497f      	ldr	r1, [pc, #508]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80dc 	beq.w	8002750 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d13c      	bne.n	800261a <HAL_RCC_ClockConfig+0xf6>
 80025a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_RCC_ClockConfig+0xa6>
 80025c4:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	e00f      	b.n	80025ea <HAL_RCC_ClockConfig+0xc6>
 80025ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	667b      	str	r3, [r7, #100]	; 0x64
 80025d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025dc:	663b      	str	r3, [r7, #96]	; 0x60
 80025de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80025f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025f2:	fa92 f2a2 	rbit	r2, r2
 80025f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0220 	orr.w	r2, r2, #32
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d17b      	bne.n	800270e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e0f3      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d13c      	bne.n	800269c <HAL_RCC_ClockConfig+0x178>
 8002622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_RCC_ClockConfig+0x128>
 8002646:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e00f      	b.n	800266c <HAL_RCC_ClockConfig+0x148>
 800264c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002650:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	647b      	str	r3, [r7, #68]	; 0x44
 800265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
 8002660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002668:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002670:	63ba      	str	r2, [r7, #56]	; 0x38
 8002672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002674:	fa92 f2a2 	rbit	r2, r2
 8002678:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800267a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800267c:	fab2 f282 	clz	r2, r2
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	f002 021f 	and.w	r2, r2, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f202 	lsl.w	r2, r1, r2
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13a      	bne.n	800270e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b2      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
 800269c:	2302      	movs	r3, #2
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1a0>
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e00d      	b.n	80026e0 <HAL_RCC_ClockConfig+0x1bc>
 80026c4:	2302      	movs	r3, #2
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	2302      	movs	r3, #2
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2202      	movs	r2, #2
 80026e2:	61ba      	str	r2, [r7, #24]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	fa92 f2a2 	rbit	r2, r2
 80026ea:	617a      	str	r2, [r7, #20]
  return result;
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	fab2 f282 	clz	r2, r2
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	f042 0220 	orr.w	r2, r2, #32
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f002 021f 	and.w	r2, r2, #31
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f202 	lsl.w	r2, r1, r2
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e079      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	491a      	ldr	r1, [pc, #104]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fcfa 	bl	8001118 <HAL_GetTick>
 8002724:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fcf6 	bl	8001118 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e061      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <HAL_RCC_ClockConfig+0x260>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d214      	bcs.n	8002788 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4906      	ldr	r1, [pc, #24]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b04      	ldr	r3, [pc, #16]	; (8002780 <HAL_RCC_ClockConfig+0x25c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e040      	b.n	8002802 <HAL_RCC_ClockConfig+0x2de>
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCC_ClockConfig+0x2e8>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	491a      	ldr	r1, [pc, #104]	; (800280c <HAL_RCC_ClockConfig+0x2e8>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x2e8>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4912      	ldr	r1, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x2e8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027c6:	f000 f85d 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 80027ca:	4601      	mov	r1, r0
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_RCC_ClockConfig+0x2e8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d4:	22f0      	movs	r2, #240	; 0xf0
 80027d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	fa92 f2a2 	rbit	r2, r2
 80027de:	60fa      	str	r2, [r7, #12]
  return result;
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	fab2 f282 	clz	r2, r2
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	40d3      	lsrs	r3, r2
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <HAL_RCC_ClockConfig+0x2ec>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	fa21 f303 	lsr.w	r3, r1, r3
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_RCC_ClockConfig+0x2f0>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCC_ClockConfig+0x2f4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fc48 	bl	8001090 <HAL_InitTick>
  
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3778      	adds	r7, #120	; 0x78
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	080054a4 	.word	0x080054a4
 8002814:	2000000c 	.word	0x2000000c
 8002818:	20000010 	.word	0x20000010

0800281c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002838:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCC_MCOConfig+0x64>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <HAL_RCC_MCOConfig+0x64>)
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	6153      	str	r3, [r2, #20]
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_RCC_MCOConfig+0x64>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002860:	f7fe fd9c 	bl	800139c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_RCC_MCOConfig+0x64>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	430b      	orrs	r3, r1
 8002872:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_MCOConfig+0x64>)
 8002874:	4313      	orrs	r3, r2
 8002876:	604b      	str	r3, [r1, #4]
}
 8002878:	bf00      	nop
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	b08b      	sub	sp, #44	; 0x2c
 8002888:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d002      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x30>
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0x36>
 80028b2:	e03c      	b.n	800292e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028b6:	623b      	str	r3, [r7, #32]
      break;
 80028b8:	e03c      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	607a      	str	r2, [r7, #4]
  return result;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	40d3      	lsrs	r3, r2
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028de:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	220f      	movs	r2, #15
 80028e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	60fa      	str	r2, [r7, #12]
  return result;
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	fab2 f282 	clz	r2, r2
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	40d3      	lsrs	r3, r2
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	fbb2 f2f3 	udiv	r2, r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	e004      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	623b      	str	r3, [r7, #32]
      break;
 800292c:	e002      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002930:	623b      	str	r3, [r7, #32]
      break;
 8002932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002934:	6a3b      	ldr	r3, [r7, #32]
}
 8002936:	4618      	mov	r0, r3
 8002938:	372c      	adds	r7, #44	; 0x2c
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	080054bc 	.word	0x080054bc
 8002950:	080054cc 	.word	0x080054cc
 8002954:	003d0900 	.word	0x003d0900

08002958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002976:	f7ff ffef 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 800297a:	4601      	mov	r1, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002984:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002988:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	fa92 f2a2 	rbit	r2, r2
 8002990:	603a      	str	r2, [r7, #0]
  return result;
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	40d3      	lsrs	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800299e:	5cd3      	ldrb	r3, [r2, r3]
 80029a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	080054b4 	.word	0x080054b4

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80029ba:	f7ff ffcd 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80029c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80029cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	fa92 f2a2 	rbit	r2, r2
 80029d4:	603a      	str	r2, [r7, #0]
  return result;
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	fab2 f282 	clz	r2, r2
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	40d3      	lsrs	r3, r2
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029e8:	4618      	mov	r0, r3
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080054b4 	.word	0x080054b4

080029f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b092      	sub	sp, #72	; 0x48
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80d4 	beq.w	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1c:	4b4e      	ldr	r3, [pc, #312]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10e      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	61d3      	str	r3, [r2, #28]
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d118      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a52:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a41      	ldr	r2, [pc, #260]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fb5b 	bl	8001118 <HAL_GetTick>
 8002a62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	e008      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7fe fb57 	bl	8001118 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b64      	cmp	r3, #100	; 0x64
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e13c      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	4b38      	ldr	r3, [pc, #224]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a84:	4b34      	ldr	r3, [pc, #208]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8084 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d07c      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	461a      	mov	r2, r3
 8002ace:	2301      	movs	r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	461a      	mov	r2, r3
 8002af2:	2300      	movs	r3, #0
 8002af4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d04b      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fb07 	bl	8001118 <HAL_GetTick>
 8002b0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fb03 	bl	8001118 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0e6      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002b24:	2302      	movs	r3, #2
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b30:	2302      	movs	r3, #2
 8002b32:	623b      	str	r3, [r7, #32]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d108      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b52:	4b01      	ldr	r3, [pc, #4]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	e00d      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	10908100 	.word	0x10908100
 8002b64:	2302      	movs	r3, #2
 8002b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	4b62      	ldr	r3, [pc, #392]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2202      	movs	r2, #2
 8002b76:	613a      	str	r2, [r7, #16]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	fa92 f2a2 	rbit	r2, r2
 8002b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0b7      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b9e:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4954      	ldr	r1, [pc, #336]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd0:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f023 0203 	bic.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4947      	ldr	r1, [pc, #284]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bee:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f023 0210 	bic.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4940      	ldr	r1, [pc, #256]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	f023 0220 	bic.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4931      	ldr	r1, [pc, #196]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c48:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4929      	ldr	r1, [pc, #164]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4922      	ldr	r1, [pc, #136]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	4913      	ldr	r1, [pc, #76]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	490b      	ldr	r1, [pc, #44]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	4904      	ldr	r1, [pc, #16]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3748      	adds	r7, #72	; 0x48
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e049      	b.n	8002da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd ffdc 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fcbc 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e03b      	b.n	8002e40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d009      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d004      	beq.n	8002dfe <HAL_TIM_Base_Start_IT+0x4e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d115      	bne.n	8002e2a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d015      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e16:	d011      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	e008      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e000      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40014000 	.word	0x40014000
 8002e54:	00010007 	.word	0x00010007

08002e58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e049      	b.n	8002efe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f841 	bl	8002f06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 fc10 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_IC_Start_IT+0x1e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e023      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x66>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_IC_Start_IT+0x2e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e01b      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x66>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_IC_Start_IT+0x3e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x66>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_IC_Start_IT+0x4e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x66>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0x5e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_IC_Start_IT+0x66>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d104      	bne.n	8002f94 <HAL_TIM_IC_Start_IT+0x78>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	e013      	b.n	8002fbc <HAL_TIM_IC_Start_IT+0xa0>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d104      	bne.n	8002fa4 <HAL_TIM_IC_Start_IT+0x88>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	e00b      	b.n	8002fbc <HAL_TIM_IC_Start_IT+0xa0>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d104      	bne.n	8002fb4 <HAL_TIM_IC_Start_IT+0x98>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	e003      	b.n	8002fbc <HAL_TIM_IC_Start_IT+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fbe:	7bbb      	ldrb	r3, [r7, #14]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d102      	bne.n	8002fca <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fc4:	7b7b      	ldrb	r3, [r7, #13]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0c9      	b.n	8003162 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_IC_Start_IT+0xc2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fdc:	e023      	b.n	8003026 <HAL_TIM_IC_Start_IT+0x10a>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d104      	bne.n	8002fee <HAL_TIM_IC_Start_IT+0xd2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	e01b      	b.n	8003026 <HAL_TIM_IC_Start_IT+0x10a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d104      	bne.n	8002ffe <HAL_TIM_IC_Start_IT+0xe2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffc:	e013      	b.n	8003026 <HAL_TIM_IC_Start_IT+0x10a>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d104      	bne.n	800300e <HAL_TIM_IC_Start_IT+0xf2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800300c:	e00b      	b.n	8003026 <HAL_TIM_IC_Start_IT+0x10a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b10      	cmp	r3, #16
 8003012:	d104      	bne.n	800301e <HAL_TIM_IC_Start_IT+0x102>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	e003      	b.n	8003026 <HAL_TIM_IC_Start_IT+0x10a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d104      	bne.n	8003036 <HAL_TIM_IC_Start_IT+0x11a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003034:	e013      	b.n	800305e <HAL_TIM_IC_Start_IT+0x142>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d104      	bne.n	8003046 <HAL_TIM_IC_Start_IT+0x12a>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003044:	e00b      	b.n	800305e <HAL_TIM_IC_Start_IT+0x142>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d104      	bne.n	8003056 <HAL_TIM_IC_Start_IT+0x13a>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003054:	e003      	b.n	800305e <HAL_TIM_IC_Start_IT+0x142>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d841      	bhi.n	80030e8 <HAL_TIM_IC_Start_IT+0x1cc>
 8003064:	a201      	add	r2, pc, #4	; (adr r2, 800306c <HAL_TIM_IC_Start_IT+0x150>)
 8003066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306a:	bf00      	nop
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030e9 	.word	0x080030e9
 8003074:	080030e9 	.word	0x080030e9
 8003078:	080030e9 	.word	0x080030e9
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030e9 	.word	0x080030e9
 8003084:	080030e9 	.word	0x080030e9
 8003088:	080030e9 	.word	0x080030e9
 800308c:	080030c5 	.word	0x080030c5
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030e9 	.word	0x080030e9
 8003098:	080030e9 	.word	0x080030e9
 800309c:	080030d7 	.word	0x080030d7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0202 	orr.w	r2, r2, #2
 80030ae:	60da      	str	r2, [r3, #12]
      break;
 80030b0:	e01d      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0204 	orr.w	r2, r2, #4
 80030c0:	60da      	str	r2, [r3, #12]
      break;
 80030c2:	e014      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0208 	orr.w	r2, r2, #8
 80030d2:	60da      	str	r2, [r3, #12]
      break;
 80030d4:	e00b      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0210 	orr.w	r2, r2, #16
 80030e4:	60da      	str	r2, [r3, #12]
      break;
 80030e6:	e002      	b.n	80030ee <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d135      	bne.n	8003160 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fcf1 	bl	8003ae4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_TIM_IC_Start_IT+0x250>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_TIM_IC_Start_IT+0x204>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003114:	d004      	beq.n	8003120 <HAL_TIM_IC_Start_IT+0x204>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <HAL_TIM_IC_Start_IT+0x254>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d115      	bne.n	800314c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <HAL_TIM_IC_Start_IT+0x258>)
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b06      	cmp	r3, #6
 8003130:	d015      	beq.n	800315e <HAL_TIM_IC_Start_IT+0x242>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003138:	d011      	beq.n	800315e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0201 	orr.w	r2, r2, #1
 8003148:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314a:	e008      	b.n	800315e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e000      	b.n	8003160 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40014000 	.word	0x40014000
 8003174:	00010007 	.word	0x00010007

08003178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0202 	mvn.w	r2, #2
 80031a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fd02 	bl	8000bc4 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa5c 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fa63 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0204 	mvn.w	r2, #4
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd fcd8 	bl	8000bc4 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa32 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fa39 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b08      	cmp	r3, #8
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0208 	mvn.w	r2, #8
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2204      	movs	r2, #4
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fcae 	bl	8000bc4 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa08 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa0f 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b10      	cmp	r3, #16
 8003288:	d122      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d11b      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2208      	movs	r2, #8
 80032a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fc84 	bl	8000bc4 <HAL_TIM_IC_CaptureCallback>
 80032bc:	e005      	b.n	80032ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9de 	bl	8003680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f9e5 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0201 	mvn.w	r2, #1
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fcb6 	bl	8000c68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 fc74 	bl	8003c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 fc67 	bl	8003c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d10e      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d107      	bne.n	8003382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f993 	bl	80036a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d10e      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b20      	cmp	r3, #32
 800339c:	d107      	bne.n	80033ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0220 	mvn.w	r2, #32
 80033a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fc27 	bl	8003bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e088      	b.n	80034e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11b      	bne.n	800341a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6819      	ldr	r1, [r3, #0]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f000 f9d1 	bl	8003798 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 020c 	bic.w	r2, r2, #12
 8003404:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6999      	ldr	r1, [r3, #24]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
 8003418:	e060      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d11c      	bne.n	800345a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f000 fa37 	bl	80038a2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003442:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]
 8003458:	e040      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d11b      	bne.n	8003498 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f000 fa84 	bl	800397c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 020c 	bic.w	r2, r2, #12
 8003482:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69d9      	ldr	r1, [r3, #28]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	61da      	str	r2, [r3, #28]
 8003496:	e021      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d11c      	bne.n	80034d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f000 faa1 	bl	80039f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	61da      	str	r2, [r3, #28]
 80034d6:	e001      	b.n	80034dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_TIM_ConfigClockSource+0x1c>
 8003506:	2302      	movs	r3, #2
 8003508:	e0b6      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x18a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800352c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003534:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003546:	d03e      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xd8>
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354c:	f200 8087 	bhi.w	800365e <HAL_TIM_ConfigClockSource+0x170>
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	f000 8086 	beq.w	8003664 <HAL_TIM_ConfigClockSource+0x176>
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d87f      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 800355e:	2b70      	cmp	r3, #112	; 0x70
 8003560:	d01a      	beq.n	8003598 <HAL_TIM_ConfigClockSource+0xaa>
 8003562:	2b70      	cmp	r3, #112	; 0x70
 8003564:	d87b      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 8003566:	2b60      	cmp	r3, #96	; 0x60
 8003568:	d050      	beq.n	800360c <HAL_TIM_ConfigClockSource+0x11e>
 800356a:	2b60      	cmp	r3, #96	; 0x60
 800356c:	d877      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 800356e:	2b50      	cmp	r3, #80	; 0x50
 8003570:	d03c      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xfe>
 8003572:	2b50      	cmp	r3, #80	; 0x50
 8003574:	d873      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d058      	beq.n	800362c <HAL_TIM_ConfigClockSource+0x13e>
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d86f      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 800357e:	2b30      	cmp	r3, #48	; 0x30
 8003580:	d064      	beq.n	800364c <HAL_TIM_ConfigClockSource+0x15e>
 8003582:	2b30      	cmp	r3, #48	; 0x30
 8003584:	d86b      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 8003586:	2b20      	cmp	r3, #32
 8003588:	d060      	beq.n	800364c <HAL_TIM_ConfigClockSource+0x15e>
 800358a:	2b20      	cmp	r3, #32
 800358c:	d867      	bhi.n	800365e <HAL_TIM_ConfigClockSource+0x170>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d05c      	beq.n	800364c <HAL_TIM_ConfigClockSource+0x15e>
 8003592:	2b10      	cmp	r3, #16
 8003594:	d05a      	beq.n	800364c <HAL_TIM_ConfigClockSource+0x15e>
 8003596:	e062      	b.n	800365e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6899      	ldr	r1, [r3, #8]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f000 fa7c 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	609a      	str	r2, [r3, #8]
      break;
 80035c4:	e04f      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 fa65 	bl	8003aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e03c      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f000 f923 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2150      	movs	r1, #80	; 0x50
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fa32 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 800360a:	e02c      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	f000 f97f 	bl	800391c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2160      	movs	r1, #96	; 0x60
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fa22 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 800362a:	e01c      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	461a      	mov	r2, r3
 800363a:	f000 f903 	bl	8003844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2140      	movs	r1, #64	; 0x40
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fa12 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 800364a:	e00c      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f000 fa09 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 800365c:	e003      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
      break;
 8003662:	e000      	b.n	8003666 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003676:	7bfb      	ldrb	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <TIM_Base_SetConfig+0xcc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x20>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a25      	ldr	r2, [pc, #148]	; (8003788 <TIM_Base_SetConfig+0xcc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00f      	beq.n	8003716 <TIM_Base_SetConfig+0x5a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d00b      	beq.n	8003716 <TIM_Base_SetConfig+0x5a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a22      	ldr	r2, [pc, #136]	; (800378c <TIM_Base_SetConfig+0xd0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_Base_SetConfig+0x5a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a21      	ldr	r2, [pc, #132]	; (8003790 <TIM_Base_SetConfig+0xd4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_Base_SetConfig+0x5a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <TIM_Base_SetConfig+0xd8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a0e      	ldr	r2, [pc, #56]	; (8003788 <TIM_Base_SetConfig+0xcc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0d      	ldr	r2, [pc, #52]	; (800378c <TIM_Base_SetConfig+0xd0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <TIM_Base_SetConfig+0xd4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0xb0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <TIM_Base_SetConfig+0xd8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]
}
 800377a:	bf00      	nop
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40014000 	.word	0x40014000
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800

08003798 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0201 	bic.w	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	; (800383c <TIM_TI1_SetConfig+0xa4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_TI1_SetConfig+0x3e>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d003      	beq.n	80037d6 <TIM_TI1_SetConfig+0x3e>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <TIM_TI1_SetConfig+0xa8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <TIM_TI1_SetConfig+0x42>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <TIM_TI1_SetConfig+0x44>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e003      	b.n	80037fa <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	b2db      	uxtb	r3, r3
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f023 030a 	bic.w	r3, r3, #10
 8003814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 030a 	and.w	r3, r3, #10
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40014000 	.word	0x40014000

08003844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f023 0201 	bic.w	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800386e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 030a 	bic.w	r3, r3, #10
 8003880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b087      	sub	sp, #28
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f023 0210 	bic.w	r2, r3, #16
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	031b      	lsls	r3, r3, #12
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	f023 0210 	bic.w	r2, r3, #16
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003946:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	031b      	lsls	r3, r3, #12
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 0303 	bic.w	r3, r3, #3
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	021b      	lsls	r3, r3, #8
 80039d2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	621a      	str	r2, [r3, #32]
}
 80039e8:	bf00      	nop
 80039ea:	371c      	adds	r7, #28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	031b      	lsls	r3, r3, #12
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003a46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	031b      	lsls	r3, r3, #12
 8003a4c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2201      	movs	r2, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1a      	ldr	r2, [r3, #32]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	401a      	ands	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e04f      	b.n	8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d004      	beq.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a10      	ldr	r2, [pc, #64]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10c      	bne.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40014000 	.word	0x40014000

08003bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e040      	b.n	8003ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd f88a 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8c0 	bl	8003dfc <UART_SetConfig>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e022      	b.n	8003ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9ea 	bl	8004068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa71 	bl	80041ac <UART_CheckIdleState>
 8003cca:	4603      	mov	r3, r0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	f040 8082 	bne.w	8003df2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_Transmit+0x26>
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07a      	b.n	8003df4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Transmit+0x38>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e073      	b.n	8003df4 <HAL_UART_Transmit+0x120>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d22:	f7fd f9f9 	bl	8001118 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d40:	d108      	bne.n	8003d54 <HAL_UART_Transmit+0x80>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e003      	b.n	8003d5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d64:	e02d      	b.n	8003dc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	; 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fa64 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e039      	b.n	8003df4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d92:	b292      	uxth	r2, r2
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e008      	b.n	8003db0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b292      	uxth	r2, r2
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3301      	adds	r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fa30 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e005      	b.n	8003df4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b8a      	ldr	r3, [pc, #552]	; (8004050 <UART_SetConfig+0x254>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a78      	ldr	r2, [pc, #480]	; (8004054 <UART_SetConfig+0x258>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d120      	bne.n	8003eba <UART_SetConfig+0xbe>
 8003e78:	4b77      	ldr	r3, [pc, #476]	; (8004058 <UART_SetConfig+0x25c>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d817      	bhi.n	8003eb4 <UART_SetConfig+0xb8>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0x90>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea9 	.word	0x08003ea9
 8003e94:	08003eaf 	.word	0x08003eaf
 8003e98:	08003ea3 	.word	0x08003ea3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e01d      	b.n	8003ede <UART_SetConfig+0xe2>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	77fb      	strb	r3, [r7, #31]
 8003ea6:	e01a      	b.n	8003ede <UART_SetConfig+0xe2>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	77fb      	strb	r3, [r7, #31]
 8003eac:	e017      	b.n	8003ede <UART_SetConfig+0xe2>
 8003eae:	2308      	movs	r3, #8
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e014      	b.n	8003ede <UART_SetConfig+0xe2>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e011      	b.n	8003ede <UART_SetConfig+0xe2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a67      	ldr	r2, [pc, #412]	; (800405c <UART_SetConfig+0x260>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d102      	bne.n	8003eca <UART_SetConfig+0xce>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e009      	b.n	8003ede <UART_SetConfig+0xe2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a64      	ldr	r2, [pc, #400]	; (8004060 <UART_SetConfig+0x264>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d102      	bne.n	8003eda <UART_SetConfig+0xde>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e001      	b.n	8003ede <UART_SetConfig+0xe2>
 8003eda:	2310      	movs	r3, #16
 8003edc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee6:	d15b      	bne.n	8003fa0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003ee8:	7ffb      	ldrb	r3, [r7, #31]
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d827      	bhi.n	8003f3e <UART_SetConfig+0x142>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0xf8>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe fd2a 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e013      	b.n	8003f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe fd48 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003f24:	61b8      	str	r0, [r7, #24]
        break;
 8003f26:	e00f      	b.n	8003f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <UART_SetConfig+0x268>)
 8003f2a:	61bb      	str	r3, [r7, #24]
        break;
 8003f2c:	e00c      	b.n	8003f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fca9 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8003f32:	61b8      	str	r0, [r7, #24]
        break;
 8003f34:	e008      	b.n	8003f48 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	61bb      	str	r3, [r7, #24]
        break;
 8003f3c:	e004      	b.n	8003f48 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	77bb      	strb	r3, [r7, #30]
        break;
 8003f46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d074      	beq.n	8004038 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	005a      	lsls	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	441a      	add	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d916      	bls.n	8003f9a <UART_SetConfig+0x19e>
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d212      	bcs.n	8003f9a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f023 030f 	bic.w	r3, r3, #15
 8003f7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	89fb      	ldrh	r3, [r7, #14]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	89fa      	ldrh	r2, [r7, #14]
 8003f96:	60da      	str	r2, [r3, #12]
 8003f98:	e04e      	b.n	8004038 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	77bb      	strb	r3, [r7, #30]
 8003f9e:	e04b      	b.n	8004038 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa0:	7ffb      	ldrb	r3, [r7, #31]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d827      	bhi.n	8003ff6 <UART_SetConfig+0x1fa>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <UART_SetConfig+0x1b0>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fe1 	.word	0x08003fe1
 8003fb8:	08003ff7 	.word	0x08003ff7
 8003fbc:	08003fe7 	.word	0x08003fe7
 8003fc0:	08003ff7 	.word	0x08003ff7
 8003fc4:	08003ff7 	.word	0x08003ff7
 8003fc8:	08003ff7 	.word	0x08003ff7
 8003fcc:	08003fef 	.word	0x08003fef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7fe fcce 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003fd4:	61b8      	str	r0, [r7, #24]
        break;
 8003fd6:	e013      	b.n	8004000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd8:	f7fe fcec 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003fdc:	61b8      	str	r0, [r7, #24]
        break;
 8003fde:	e00f      	b.n	8004000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <UART_SetConfig+0x268>)
 8003fe2:	61bb      	str	r3, [r7, #24]
        break;
 8003fe4:	e00c      	b.n	8004000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fe6:	f7fe fc4d 	bl	8002884 <HAL_RCC_GetSysClockFreq>
 8003fea:	61b8      	str	r0, [r7, #24]
        break;
 8003fec:	e008      	b.n	8004000 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ff2:	61bb      	str	r3, [r7, #24]
        break;
 8003ff4:	e004      	b.n	8004000 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ffe:	bf00      	nop
    }

    if (pclk != 0U)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085a      	lsrs	r2, r3, #1
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	441a      	add	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d908      	bls.n	8004034 <UART_SetConfig+0x238>
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d204      	bcs.n	8004034 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	e001      	b.n	8004038 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004044:	7fbb      	ldrb	r3, [r7, #30]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	efff69f3 	.word	0xefff69f3
 8004054:	40013800 	.word	0x40013800
 8004058:	40021000 	.word	0x40021000
 800405c:	40004400 	.word	0x40004400
 8004060:	40004800 	.word	0x40004800
 8004064:	007a1200 	.word	0x007a1200

08004068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004166:	d10a      	bne.n	800417e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fc ffac 	bl	8001118 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d10e      	bne.n	80041ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f82d 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e023      	b.n	8004236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d10e      	bne.n	800421a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f817 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00d      	b.n	8004236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2220      	movs	r2, #32
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b09c      	sub	sp, #112	; 0x70
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	e0a5      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	f000 80a1 	beq.w	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fc ff5d 	bl	8001118 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <UART_WaitOnFlagUntilTimeout+0x32>
 800426a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800426c:	2b00      	cmp	r3, #0
 800426e:	d13e      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004284:	667b      	str	r3, [r7, #100]	; 0x64
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004290:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800429c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e6      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80042c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e5      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e067      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d04f      	beq.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d147      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004314:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800432a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
 8004336:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800433a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	613b      	str	r3, [r7, #16]
   return(result);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004368:	623a      	str	r2, [r7, #32]
 800436a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69f9      	ldr	r1, [r7, #28]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	61bb      	str	r3, [r7, #24]
   return(result);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e010      	b.n	80043be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4013      	ands	r3, r2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	f43f af4a 	beq.w	8004250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3770      	adds	r7, #112	; 0x70
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <__errno>:
 80043c8:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <__errno+0x8>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000018 	.word	0x20000018

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	; (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	; (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	; (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	; (8004418 <__libc_init_array+0x44>)
 80043e8:	f001 f850 	bl	800548c <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	08005628 	.word	0x08005628
 8004410:	08005628 	.word	0x08005628
 8004414:	08005628 	.word	0x08005628
 8004418:	0800562c 	.word	0x0800562c

0800441c <memset>:
 800441c:	4402      	add	r2, r0
 800441e:	4603      	mov	r3, r0
 8004420:	4293      	cmp	r3, r2
 8004422:	d100      	bne.n	8004426 <memset+0xa>
 8004424:	4770      	bx	lr
 8004426:	f803 1b01 	strb.w	r1, [r3], #1
 800442a:	e7f9      	b.n	8004420 <memset+0x4>

0800442c <srand>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <srand+0x44>)
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004434:	4604      	mov	r4, r0
 8004436:	b9b3      	cbnz	r3, 8004466 <srand+0x3a>
 8004438:	2018      	movs	r0, #24
 800443a:	f000 f895 	bl	8004568 <malloc>
 800443e:	4602      	mov	r2, r0
 8004440:	63a8      	str	r0, [r5, #56]	; 0x38
 8004442:	b920      	cbnz	r0, 800444e <srand+0x22>
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <srand+0x48>)
 8004446:	480c      	ldr	r0, [pc, #48]	; (8004478 <srand+0x4c>)
 8004448:	2142      	movs	r1, #66	; 0x42
 800444a:	f000 f85d 	bl	8004508 <__assert_func>
 800444e:	490b      	ldr	r1, [pc, #44]	; (800447c <srand+0x50>)
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <srand+0x54>)
 8004452:	e9c0 1300 	strd	r1, r3, [r0]
 8004456:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <srand+0x58>)
 8004458:	6083      	str	r3, [r0, #8]
 800445a:	230b      	movs	r3, #11
 800445c:	8183      	strh	r3, [r0, #12]
 800445e:	2100      	movs	r1, #0
 8004460:	2001      	movs	r0, #1
 8004462:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004466:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004468:	2200      	movs	r2, #0
 800446a:	611c      	str	r4, [r3, #16]
 800446c:	615a      	str	r2, [r3, #20]
 800446e:	bd38      	pop	{r3, r4, r5, pc}
 8004470:	20000018 	.word	0x20000018
 8004474:	080054e0 	.word	0x080054e0
 8004478:	080054f7 	.word	0x080054f7
 800447c:	abcd330e 	.word	0xabcd330e
 8004480:	e66d1234 	.word	0xe66d1234
 8004484:	0005deec 	.word	0x0005deec

08004488 <rand>:
 8004488:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <rand+0x60>)
 800448a:	b510      	push	{r4, lr}
 800448c:	681c      	ldr	r4, [r3, #0]
 800448e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004490:	b9b3      	cbnz	r3, 80044c0 <rand+0x38>
 8004492:	2018      	movs	r0, #24
 8004494:	f000 f868 	bl	8004568 <malloc>
 8004498:	63a0      	str	r0, [r4, #56]	; 0x38
 800449a:	b928      	cbnz	r0, 80044a8 <rand+0x20>
 800449c:	4602      	mov	r2, r0
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <rand+0x64>)
 80044a0:	4813      	ldr	r0, [pc, #76]	; (80044f0 <rand+0x68>)
 80044a2:	214e      	movs	r1, #78	; 0x4e
 80044a4:	f000 f830 	bl	8004508 <__assert_func>
 80044a8:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <rand+0x6c>)
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <rand+0x70>)
 80044ac:	e9c0 2300 	strd	r2, r3, [r0]
 80044b0:	4b12      	ldr	r3, [pc, #72]	; (80044fc <rand+0x74>)
 80044b2:	6083      	str	r3, [r0, #8]
 80044b4:	230b      	movs	r3, #11
 80044b6:	8183      	strh	r3, [r0, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	2300      	movs	r3, #0
 80044bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80044c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80044c2:	480f      	ldr	r0, [pc, #60]	; (8004500 <rand+0x78>)
 80044c4:	690a      	ldr	r2, [r1, #16]
 80044c6:	694b      	ldr	r3, [r1, #20]
 80044c8:	4c0e      	ldr	r4, [pc, #56]	; (8004504 <rand+0x7c>)
 80044ca:	4350      	muls	r0, r2
 80044cc:	fb04 0003 	mla	r0, r4, r3, r0
 80044d0:	fba2 3404 	umull	r3, r4, r2, r4
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	4404      	add	r4, r0
 80044d8:	f144 0000 	adc.w	r0, r4, #0
 80044dc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80044e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80044e4:	bd10      	pop	{r4, pc}
 80044e6:	bf00      	nop
 80044e8:	20000018 	.word	0x20000018
 80044ec:	080054e0 	.word	0x080054e0
 80044f0:	080054f7 	.word	0x080054f7
 80044f4:	abcd330e 	.word	0xabcd330e
 80044f8:	e66d1234 	.word	0xe66d1234
 80044fc:	0005deec 	.word	0x0005deec
 8004500:	5851f42d 	.word	0x5851f42d
 8004504:	4c957f2d 	.word	0x4c957f2d

08004508 <__assert_func>:
 8004508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800450a:	4614      	mov	r4, r2
 800450c:	461a      	mov	r2, r3
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <__assert_func+0x2c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4605      	mov	r5, r0
 8004514:	68d8      	ldr	r0, [r3, #12]
 8004516:	b14c      	cbz	r4, 800452c <__assert_func+0x24>
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <__assert_func+0x30>)
 800451a:	9100      	str	r1, [sp, #0]
 800451c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004520:	4906      	ldr	r1, [pc, #24]	; (800453c <__assert_func+0x34>)
 8004522:	462b      	mov	r3, r5
 8004524:	f000 f80e 	bl	8004544 <fiprintf>
 8004528:	f000 fc8e 	bl	8004e48 <abort>
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <__assert_func+0x38>)
 800452e:	461c      	mov	r4, r3
 8004530:	e7f3      	b.n	800451a <__assert_func+0x12>
 8004532:	bf00      	nop
 8004534:	20000018 	.word	0x20000018
 8004538:	08005556 	.word	0x08005556
 800453c:	08005563 	.word	0x08005563
 8004540:	08005591 	.word	0x08005591

08004544 <fiprintf>:
 8004544:	b40e      	push	{r1, r2, r3}
 8004546:	b503      	push	{r0, r1, lr}
 8004548:	4601      	mov	r1, r0
 800454a:	ab03      	add	r3, sp, #12
 800454c:	4805      	ldr	r0, [pc, #20]	; (8004564 <fiprintf+0x20>)
 800454e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004552:	6800      	ldr	r0, [r0, #0]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	f000 f8e3 	bl	8004720 <_vfiprintf_r>
 800455a:	b002      	add	sp, #8
 800455c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004560:	b003      	add	sp, #12
 8004562:	4770      	bx	lr
 8004564:	20000018 	.word	0x20000018

08004568 <malloc>:
 8004568:	4b02      	ldr	r3, [pc, #8]	; (8004574 <malloc+0xc>)
 800456a:	4601      	mov	r1, r0
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f000 b853 	b.w	8004618 <_malloc_r>
 8004572:	bf00      	nop
 8004574:	20000018 	.word	0x20000018

08004578 <_free_r>:
 8004578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800457a:	2900      	cmp	r1, #0
 800457c:	d048      	beq.n	8004610 <_free_r+0x98>
 800457e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004582:	9001      	str	r0, [sp, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f1a1 0404 	sub.w	r4, r1, #4
 800458a:	bfb8      	it	lt
 800458c:	18e4      	addlt	r4, r4, r3
 800458e:	f000 fe81 	bl	8005294 <__malloc_lock>
 8004592:	4a20      	ldr	r2, [pc, #128]	; (8004614 <_free_r+0x9c>)
 8004594:	9801      	ldr	r0, [sp, #4]
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	4615      	mov	r5, r2
 800459a:	b933      	cbnz	r3, 80045aa <_free_r+0x32>
 800459c:	6063      	str	r3, [r4, #4]
 800459e:	6014      	str	r4, [r2, #0]
 80045a0:	b003      	add	sp, #12
 80045a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a6:	f000 be7b 	b.w	80052a0 <__malloc_unlock>
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	d90b      	bls.n	80045c6 <_free_r+0x4e>
 80045ae:	6821      	ldr	r1, [r4, #0]
 80045b0:	1862      	adds	r2, r4, r1
 80045b2:	4293      	cmp	r3, r2
 80045b4:	bf04      	itt	eq
 80045b6:	681a      	ldreq	r2, [r3, #0]
 80045b8:	685b      	ldreq	r3, [r3, #4]
 80045ba:	6063      	str	r3, [r4, #4]
 80045bc:	bf04      	itt	eq
 80045be:	1852      	addeq	r2, r2, r1
 80045c0:	6022      	streq	r2, [r4, #0]
 80045c2:	602c      	str	r4, [r5, #0]
 80045c4:	e7ec      	b.n	80045a0 <_free_r+0x28>
 80045c6:	461a      	mov	r2, r3
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b10b      	cbz	r3, 80045d0 <_free_r+0x58>
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d9fa      	bls.n	80045c6 <_free_r+0x4e>
 80045d0:	6811      	ldr	r1, [r2, #0]
 80045d2:	1855      	adds	r5, r2, r1
 80045d4:	42a5      	cmp	r5, r4
 80045d6:	d10b      	bne.n	80045f0 <_free_r+0x78>
 80045d8:	6824      	ldr	r4, [r4, #0]
 80045da:	4421      	add	r1, r4
 80045dc:	1854      	adds	r4, r2, r1
 80045de:	42a3      	cmp	r3, r4
 80045e0:	6011      	str	r1, [r2, #0]
 80045e2:	d1dd      	bne.n	80045a0 <_free_r+0x28>
 80045e4:	681c      	ldr	r4, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	6053      	str	r3, [r2, #4]
 80045ea:	4421      	add	r1, r4
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	e7d7      	b.n	80045a0 <_free_r+0x28>
 80045f0:	d902      	bls.n	80045f8 <_free_r+0x80>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6003      	str	r3, [r0, #0]
 80045f6:	e7d3      	b.n	80045a0 <_free_r+0x28>
 80045f8:	6825      	ldr	r5, [r4, #0]
 80045fa:	1961      	adds	r1, r4, r5
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf04      	itt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	6063      	str	r3, [r4, #4]
 8004606:	bf04      	itt	eq
 8004608:	1949      	addeq	r1, r1, r5
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	6054      	str	r4, [r2, #4]
 800460e:	e7c7      	b.n	80045a0 <_free_r+0x28>
 8004610:	b003      	add	sp, #12
 8004612:	bd30      	pop	{r4, r5, pc}
 8004614:	200000e4 	.word	0x200000e4

08004618 <_malloc_r>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	1ccd      	adds	r5, r1, #3
 800461c:	f025 0503 	bic.w	r5, r5, #3
 8004620:	3508      	adds	r5, #8
 8004622:	2d0c      	cmp	r5, #12
 8004624:	bf38      	it	cc
 8004626:	250c      	movcc	r5, #12
 8004628:	2d00      	cmp	r5, #0
 800462a:	4606      	mov	r6, r0
 800462c:	db01      	blt.n	8004632 <_malloc_r+0x1a>
 800462e:	42a9      	cmp	r1, r5
 8004630:	d903      	bls.n	800463a <_malloc_r+0x22>
 8004632:	230c      	movs	r3, #12
 8004634:	6033      	str	r3, [r6, #0]
 8004636:	2000      	movs	r0, #0
 8004638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463a:	f000 fe2b 	bl	8005294 <__malloc_lock>
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <_malloc_r+0xac>)
 8004640:	680a      	ldr	r2, [r1, #0]
 8004642:	4614      	mov	r4, r2
 8004644:	b99c      	cbnz	r4, 800466e <_malloc_r+0x56>
 8004646:	4f20      	ldr	r7, [pc, #128]	; (80046c8 <_malloc_r+0xb0>)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b923      	cbnz	r3, 8004656 <_malloc_r+0x3e>
 800464c:	4621      	mov	r1, r4
 800464e:	4630      	mov	r0, r6
 8004650:	f000 fb2a 	bl	8004ca8 <_sbrk_r>
 8004654:	6038      	str	r0, [r7, #0]
 8004656:	4629      	mov	r1, r5
 8004658:	4630      	mov	r0, r6
 800465a:	f000 fb25 	bl	8004ca8 <_sbrk_r>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	d123      	bne.n	80046aa <_malloc_r+0x92>
 8004662:	230c      	movs	r3, #12
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	4630      	mov	r0, r6
 8004668:	f000 fe1a 	bl	80052a0 <__malloc_unlock>
 800466c:	e7e3      	b.n	8004636 <_malloc_r+0x1e>
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	1b5b      	subs	r3, r3, r5
 8004672:	d417      	bmi.n	80046a4 <_malloc_r+0x8c>
 8004674:	2b0b      	cmp	r3, #11
 8004676:	d903      	bls.n	8004680 <_malloc_r+0x68>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	441c      	add	r4, r3
 800467c:	6025      	str	r5, [r4, #0]
 800467e:	e004      	b.n	800468a <_malloc_r+0x72>
 8004680:	6863      	ldr	r3, [r4, #4]
 8004682:	42a2      	cmp	r2, r4
 8004684:	bf0c      	ite	eq
 8004686:	600b      	streq	r3, [r1, #0]
 8004688:	6053      	strne	r3, [r2, #4]
 800468a:	4630      	mov	r0, r6
 800468c:	f000 fe08 	bl	80052a0 <__malloc_unlock>
 8004690:	f104 000b 	add.w	r0, r4, #11
 8004694:	1d23      	adds	r3, r4, #4
 8004696:	f020 0007 	bic.w	r0, r0, #7
 800469a:	1ac2      	subs	r2, r0, r3
 800469c:	d0cc      	beq.n	8004638 <_malloc_r+0x20>
 800469e:	1a1b      	subs	r3, r3, r0
 80046a0:	50a3      	str	r3, [r4, r2]
 80046a2:	e7c9      	b.n	8004638 <_malloc_r+0x20>
 80046a4:	4622      	mov	r2, r4
 80046a6:	6864      	ldr	r4, [r4, #4]
 80046a8:	e7cc      	b.n	8004644 <_malloc_r+0x2c>
 80046aa:	1cc4      	adds	r4, r0, #3
 80046ac:	f024 0403 	bic.w	r4, r4, #3
 80046b0:	42a0      	cmp	r0, r4
 80046b2:	d0e3      	beq.n	800467c <_malloc_r+0x64>
 80046b4:	1a21      	subs	r1, r4, r0
 80046b6:	4630      	mov	r0, r6
 80046b8:	f000 faf6 	bl	8004ca8 <_sbrk_r>
 80046bc:	3001      	adds	r0, #1
 80046be:	d1dd      	bne.n	800467c <_malloc_r+0x64>
 80046c0:	e7cf      	b.n	8004662 <_malloc_r+0x4a>
 80046c2:	bf00      	nop
 80046c4:	200000e4 	.word	0x200000e4
 80046c8:	200000e8 	.word	0x200000e8

080046cc <__sfputc_r>:
 80046cc:	6893      	ldr	r3, [r2, #8]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	b410      	push	{r4}
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	da08      	bge.n	80046ea <__sfputc_r+0x1e>
 80046d8:	6994      	ldr	r4, [r2, #24]
 80046da:	42a3      	cmp	r3, r4
 80046dc:	db01      	blt.n	80046e2 <__sfputc_r+0x16>
 80046de:	290a      	cmp	r1, #10
 80046e0:	d103      	bne.n	80046ea <__sfputc_r+0x1e>
 80046e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e6:	f000 baef 	b.w	8004cc8 <__swbuf_r>
 80046ea:	6813      	ldr	r3, [r2, #0]
 80046ec:	1c58      	adds	r0, r3, #1
 80046ee:	6010      	str	r0, [r2, #0]
 80046f0:	7019      	strb	r1, [r3, #0]
 80046f2:	4608      	mov	r0, r1
 80046f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <__sfputs_r>:
 80046fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fc:	4606      	mov	r6, r0
 80046fe:	460f      	mov	r7, r1
 8004700:	4614      	mov	r4, r2
 8004702:	18d5      	adds	r5, r2, r3
 8004704:	42ac      	cmp	r4, r5
 8004706:	d101      	bne.n	800470c <__sfputs_r+0x12>
 8004708:	2000      	movs	r0, #0
 800470a:	e007      	b.n	800471c <__sfputs_r+0x22>
 800470c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004710:	463a      	mov	r2, r7
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff ffda 	bl	80046cc <__sfputc_r>
 8004718:	1c43      	adds	r3, r0, #1
 800471a:	d1f3      	bne.n	8004704 <__sfputs_r+0xa>
 800471c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004720 <_vfiprintf_r>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	460d      	mov	r5, r1
 8004726:	b09d      	sub	sp, #116	; 0x74
 8004728:	4614      	mov	r4, r2
 800472a:	4698      	mov	r8, r3
 800472c:	4606      	mov	r6, r0
 800472e:	b118      	cbz	r0, 8004738 <_vfiprintf_r+0x18>
 8004730:	6983      	ldr	r3, [r0, #24]
 8004732:	b90b      	cbnz	r3, 8004738 <_vfiprintf_r+0x18>
 8004734:	f000 fcaa 	bl	800508c <__sinit>
 8004738:	4b89      	ldr	r3, [pc, #548]	; (8004960 <_vfiprintf_r+0x240>)
 800473a:	429d      	cmp	r5, r3
 800473c:	d11b      	bne.n	8004776 <_vfiprintf_r+0x56>
 800473e:	6875      	ldr	r5, [r6, #4]
 8004740:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004742:	07d9      	lsls	r1, r3, #31
 8004744:	d405      	bmi.n	8004752 <_vfiprintf_r+0x32>
 8004746:	89ab      	ldrh	r3, [r5, #12]
 8004748:	059a      	lsls	r2, r3, #22
 800474a:	d402      	bmi.n	8004752 <_vfiprintf_r+0x32>
 800474c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800474e:	f000 fd3b 	bl	80051c8 <__retarget_lock_acquire_recursive>
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	071b      	lsls	r3, r3, #28
 8004756:	d501      	bpl.n	800475c <_vfiprintf_r+0x3c>
 8004758:	692b      	ldr	r3, [r5, #16]
 800475a:	b9eb      	cbnz	r3, 8004798 <_vfiprintf_r+0x78>
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f000 fb04 	bl	8004d6c <__swsetup_r>
 8004764:	b1c0      	cbz	r0, 8004798 <_vfiprintf_r+0x78>
 8004766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004768:	07dc      	lsls	r4, r3, #31
 800476a:	d50e      	bpl.n	800478a <_vfiprintf_r+0x6a>
 800476c:	f04f 30ff 	mov.w	r0, #4294967295
 8004770:	b01d      	add	sp, #116	; 0x74
 8004772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004776:	4b7b      	ldr	r3, [pc, #492]	; (8004964 <_vfiprintf_r+0x244>)
 8004778:	429d      	cmp	r5, r3
 800477a:	d101      	bne.n	8004780 <_vfiprintf_r+0x60>
 800477c:	68b5      	ldr	r5, [r6, #8]
 800477e:	e7df      	b.n	8004740 <_vfiprintf_r+0x20>
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <_vfiprintf_r+0x248>)
 8004782:	429d      	cmp	r5, r3
 8004784:	bf08      	it	eq
 8004786:	68f5      	ldreq	r5, [r6, #12]
 8004788:	e7da      	b.n	8004740 <_vfiprintf_r+0x20>
 800478a:	89ab      	ldrh	r3, [r5, #12]
 800478c:	0598      	lsls	r0, r3, #22
 800478e:	d4ed      	bmi.n	800476c <_vfiprintf_r+0x4c>
 8004790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004792:	f000 fd1a 	bl	80051ca <__retarget_lock_release_recursive>
 8004796:	e7e9      	b.n	800476c <_vfiprintf_r+0x4c>
 8004798:	2300      	movs	r3, #0
 800479a:	9309      	str	r3, [sp, #36]	; 0x24
 800479c:	2320      	movs	r3, #32
 800479e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047a6:	2330      	movs	r3, #48	; 0x30
 80047a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800496c <_vfiprintf_r+0x24c>
 80047ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b0:	f04f 0901 	mov.w	r9, #1
 80047b4:	4623      	mov	r3, r4
 80047b6:	469a      	mov	sl, r3
 80047b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047bc:	b10a      	cbz	r2, 80047c2 <_vfiprintf_r+0xa2>
 80047be:	2a25      	cmp	r2, #37	; 0x25
 80047c0:	d1f9      	bne.n	80047b6 <_vfiprintf_r+0x96>
 80047c2:	ebba 0b04 	subs.w	fp, sl, r4
 80047c6:	d00b      	beq.n	80047e0 <_vfiprintf_r+0xc0>
 80047c8:	465b      	mov	r3, fp
 80047ca:	4622      	mov	r2, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	4630      	mov	r0, r6
 80047d0:	f7ff ff93 	bl	80046fa <__sfputs_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	f000 80aa 	beq.w	800492e <_vfiprintf_r+0x20e>
 80047da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047dc:	445a      	add	r2, fp
 80047de:	9209      	str	r2, [sp, #36]	; 0x24
 80047e0:	f89a 3000 	ldrb.w	r3, [sl]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a2 	beq.w	800492e <_vfiprintf_r+0x20e>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295
 80047f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047f4:	f10a 0a01 	add.w	sl, sl, #1
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	9307      	str	r3, [sp, #28]
 80047fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004800:	931a      	str	r3, [sp, #104]	; 0x68
 8004802:	4654      	mov	r4, sl
 8004804:	2205      	movs	r2, #5
 8004806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480a:	4858      	ldr	r0, [pc, #352]	; (800496c <_vfiprintf_r+0x24c>)
 800480c:	f7fb fce0 	bl	80001d0 <memchr>
 8004810:	9a04      	ldr	r2, [sp, #16]
 8004812:	b9d8      	cbnz	r0, 800484c <_vfiprintf_r+0x12c>
 8004814:	06d1      	lsls	r1, r2, #27
 8004816:	bf44      	itt	mi
 8004818:	2320      	movmi	r3, #32
 800481a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800481e:	0713      	lsls	r3, r2, #28
 8004820:	bf44      	itt	mi
 8004822:	232b      	movmi	r3, #43	; 0x2b
 8004824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004828:	f89a 3000 	ldrb.w	r3, [sl]
 800482c:	2b2a      	cmp	r3, #42	; 0x2a
 800482e:	d015      	beq.n	800485c <_vfiprintf_r+0x13c>
 8004830:	9a07      	ldr	r2, [sp, #28]
 8004832:	4654      	mov	r4, sl
 8004834:	2000      	movs	r0, #0
 8004836:	f04f 0c0a 	mov.w	ip, #10
 800483a:	4621      	mov	r1, r4
 800483c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004840:	3b30      	subs	r3, #48	; 0x30
 8004842:	2b09      	cmp	r3, #9
 8004844:	d94e      	bls.n	80048e4 <_vfiprintf_r+0x1c4>
 8004846:	b1b0      	cbz	r0, 8004876 <_vfiprintf_r+0x156>
 8004848:	9207      	str	r2, [sp, #28]
 800484a:	e014      	b.n	8004876 <_vfiprintf_r+0x156>
 800484c:	eba0 0308 	sub.w	r3, r0, r8
 8004850:	fa09 f303 	lsl.w	r3, r9, r3
 8004854:	4313      	orrs	r3, r2
 8004856:	9304      	str	r3, [sp, #16]
 8004858:	46a2      	mov	sl, r4
 800485a:	e7d2      	b.n	8004802 <_vfiprintf_r+0xe2>
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	1d19      	adds	r1, r3, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	9103      	str	r1, [sp, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	bfbb      	ittet	lt
 8004868:	425b      	neglt	r3, r3
 800486a:	f042 0202 	orrlt.w	r2, r2, #2
 800486e:	9307      	strge	r3, [sp, #28]
 8004870:	9307      	strlt	r3, [sp, #28]
 8004872:	bfb8      	it	lt
 8004874:	9204      	strlt	r2, [sp, #16]
 8004876:	7823      	ldrb	r3, [r4, #0]
 8004878:	2b2e      	cmp	r3, #46	; 0x2e
 800487a:	d10c      	bne.n	8004896 <_vfiprintf_r+0x176>
 800487c:	7863      	ldrb	r3, [r4, #1]
 800487e:	2b2a      	cmp	r3, #42	; 0x2a
 8004880:	d135      	bne.n	80048ee <_vfiprintf_r+0x1ce>
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	1d1a      	adds	r2, r3, #4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	9203      	str	r2, [sp, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004892:	3402      	adds	r4, #2
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800497c <_vfiprintf_r+0x25c>
 800489a:	7821      	ldrb	r1, [r4, #0]
 800489c:	2203      	movs	r2, #3
 800489e:	4650      	mov	r0, sl
 80048a0:	f7fb fc96 	bl	80001d0 <memchr>
 80048a4:	b140      	cbz	r0, 80048b8 <_vfiprintf_r+0x198>
 80048a6:	2340      	movs	r3, #64	; 0x40
 80048a8:	eba0 000a 	sub.w	r0, r0, sl
 80048ac:	fa03 f000 	lsl.w	r0, r3, r0
 80048b0:	9b04      	ldr	r3, [sp, #16]
 80048b2:	4303      	orrs	r3, r0
 80048b4:	3401      	adds	r4, #1
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048bc:	482c      	ldr	r0, [pc, #176]	; (8004970 <_vfiprintf_r+0x250>)
 80048be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c2:	2206      	movs	r2, #6
 80048c4:	f7fb fc84 	bl	80001d0 <memchr>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d03f      	beq.n	800494c <_vfiprintf_r+0x22c>
 80048cc:	4b29      	ldr	r3, [pc, #164]	; (8004974 <_vfiprintf_r+0x254>)
 80048ce:	bb1b      	cbnz	r3, 8004918 <_vfiprintf_r+0x1f8>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	3307      	adds	r3, #7
 80048d4:	f023 0307 	bic.w	r3, r3, #7
 80048d8:	3308      	adds	r3, #8
 80048da:	9303      	str	r3, [sp, #12]
 80048dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048de:	443b      	add	r3, r7
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
 80048e2:	e767      	b.n	80047b4 <_vfiprintf_r+0x94>
 80048e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048e8:	460c      	mov	r4, r1
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7a5      	b.n	800483a <_vfiprintf_r+0x11a>
 80048ee:	2300      	movs	r3, #0
 80048f0:	3401      	adds	r4, #1
 80048f2:	9305      	str	r3, [sp, #20]
 80048f4:	4619      	mov	r1, r3
 80048f6:	f04f 0c0a 	mov.w	ip, #10
 80048fa:	4620      	mov	r0, r4
 80048fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004900:	3a30      	subs	r2, #48	; 0x30
 8004902:	2a09      	cmp	r2, #9
 8004904:	d903      	bls.n	800490e <_vfiprintf_r+0x1ee>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0c5      	beq.n	8004896 <_vfiprintf_r+0x176>
 800490a:	9105      	str	r1, [sp, #20]
 800490c:	e7c3      	b.n	8004896 <_vfiprintf_r+0x176>
 800490e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004912:	4604      	mov	r4, r0
 8004914:	2301      	movs	r3, #1
 8004916:	e7f0      	b.n	80048fa <_vfiprintf_r+0x1da>
 8004918:	ab03      	add	r3, sp, #12
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	462a      	mov	r2, r5
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <_vfiprintf_r+0x258>)
 8004920:	a904      	add	r1, sp, #16
 8004922:	4630      	mov	r0, r6
 8004924:	f3af 8000 	nop.w
 8004928:	4607      	mov	r7, r0
 800492a:	1c78      	adds	r0, r7, #1
 800492c:	d1d6      	bne.n	80048dc <_vfiprintf_r+0x1bc>
 800492e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004930:	07d9      	lsls	r1, r3, #31
 8004932:	d405      	bmi.n	8004940 <_vfiprintf_r+0x220>
 8004934:	89ab      	ldrh	r3, [r5, #12]
 8004936:	059a      	lsls	r2, r3, #22
 8004938:	d402      	bmi.n	8004940 <_vfiprintf_r+0x220>
 800493a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800493c:	f000 fc45 	bl	80051ca <__retarget_lock_release_recursive>
 8004940:	89ab      	ldrh	r3, [r5, #12]
 8004942:	065b      	lsls	r3, r3, #25
 8004944:	f53f af12 	bmi.w	800476c <_vfiprintf_r+0x4c>
 8004948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494a:	e711      	b.n	8004770 <_vfiprintf_r+0x50>
 800494c:	ab03      	add	r3, sp, #12
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	462a      	mov	r2, r5
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <_vfiprintf_r+0x258>)
 8004954:	a904      	add	r1, sp, #16
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f880 	bl	8004a5c <_printf_i>
 800495c:	e7e4      	b.n	8004928 <_vfiprintf_r+0x208>
 800495e:	bf00      	nop
 8004960:	080055e8 	.word	0x080055e8
 8004964:	08005608 	.word	0x08005608
 8004968:	080055c8 	.word	0x080055c8
 800496c:	08005592 	.word	0x08005592
 8004970:	0800559c 	.word	0x0800559c
 8004974:	00000000 	.word	0x00000000
 8004978:	080046fb 	.word	0x080046fb
 800497c:	08005598 	.word	0x08005598

08004980 <_printf_common>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4616      	mov	r6, r2
 8004986:	4699      	mov	r9, r3
 8004988:	688a      	ldr	r2, [r1, #8]
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004990:	4293      	cmp	r3, r2
 8004992:	bfb8      	it	lt
 8004994:	4613      	movlt	r3, r2
 8004996:	6033      	str	r3, [r6, #0]
 8004998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800499c:	4607      	mov	r7, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	b10a      	cbz	r2, 80049a6 <_printf_common+0x26>
 80049a2:	3301      	adds	r3, #1
 80049a4:	6033      	str	r3, [r6, #0]
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	0699      	lsls	r1, r3, #26
 80049aa:	bf42      	ittt	mi
 80049ac:	6833      	ldrmi	r3, [r6, #0]
 80049ae:	3302      	addmi	r3, #2
 80049b0:	6033      	strmi	r3, [r6, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	f015 0506 	ands.w	r5, r5, #6
 80049b8:	d106      	bne.n	80049c8 <_printf_common+0x48>
 80049ba:	f104 0a19 	add.w	sl, r4, #25
 80049be:	68e3      	ldr	r3, [r4, #12]
 80049c0:	6832      	ldr	r2, [r6, #0]
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	42ab      	cmp	r3, r5
 80049c6:	dc26      	bgt.n	8004a16 <_printf_common+0x96>
 80049c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049cc:	1e13      	subs	r3, r2, #0
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	bf18      	it	ne
 80049d2:	2301      	movne	r3, #1
 80049d4:	0692      	lsls	r2, r2, #26
 80049d6:	d42b      	bmi.n	8004a30 <_printf_common+0xb0>
 80049d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049dc:	4649      	mov	r1, r9
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	3001      	adds	r0, #1
 80049e4:	d01e      	beq.n	8004a24 <_printf_common+0xa4>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	68e5      	ldr	r5, [r4, #12]
 80049ea:	6832      	ldr	r2, [r6, #0]
 80049ec:	f003 0306 	and.w	r3, r3, #6
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	bf08      	it	eq
 80049f4:	1aad      	subeq	r5, r5, r2
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	6922      	ldr	r2, [r4, #16]
 80049fa:	bf0c      	ite	eq
 80049fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a00:	2500      	movne	r5, #0
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bfc4      	itt	gt
 8004a06:	1a9b      	subgt	r3, r3, r2
 8004a08:	18ed      	addgt	r5, r5, r3
 8004a0a:	2600      	movs	r6, #0
 8004a0c:	341a      	adds	r4, #26
 8004a0e:	42b5      	cmp	r5, r6
 8004a10:	d11a      	bne.n	8004a48 <_printf_common+0xc8>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e008      	b.n	8004a28 <_printf_common+0xa8>
 8004a16:	2301      	movs	r3, #1
 8004a18:	4652      	mov	r2, sl
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	47c0      	blx	r8
 8004a20:	3001      	adds	r0, #1
 8004a22:	d103      	bne.n	8004a2c <_printf_common+0xac>
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2c:	3501      	adds	r5, #1
 8004a2e:	e7c6      	b.n	80049be <_printf_common+0x3e>
 8004a30:	18e1      	adds	r1, r4, r3
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	2030      	movs	r0, #48	; 0x30
 8004a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a3a:	4422      	add	r2, r4
 8004a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a44:	3302      	adds	r3, #2
 8004a46:	e7c7      	b.n	80049d8 <_printf_common+0x58>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	4638      	mov	r0, r7
 8004a50:	47c0      	blx	r8
 8004a52:	3001      	adds	r0, #1
 8004a54:	d0e6      	beq.n	8004a24 <_printf_common+0xa4>
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7d9      	b.n	8004a0e <_printf_common+0x8e>
	...

08004a5c <_printf_i>:
 8004a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	460c      	mov	r4, r1
 8004a62:	4691      	mov	r9, r2
 8004a64:	7e27      	ldrb	r7, [r4, #24]
 8004a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a68:	2f78      	cmp	r7, #120	; 0x78
 8004a6a:	4680      	mov	r8, r0
 8004a6c:	469a      	mov	sl, r3
 8004a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a72:	d807      	bhi.n	8004a84 <_printf_i+0x28>
 8004a74:	2f62      	cmp	r7, #98	; 0x62
 8004a76:	d80a      	bhi.n	8004a8e <_printf_i+0x32>
 8004a78:	2f00      	cmp	r7, #0
 8004a7a:	f000 80d8 	beq.w	8004c2e <_printf_i+0x1d2>
 8004a7e:	2f58      	cmp	r7, #88	; 0x58
 8004a80:	f000 80a3 	beq.w	8004bca <_printf_i+0x16e>
 8004a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a8c:	e03a      	b.n	8004b04 <_printf_i+0xa8>
 8004a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a92:	2b15      	cmp	r3, #21
 8004a94:	d8f6      	bhi.n	8004a84 <_printf_i+0x28>
 8004a96:	a001      	add	r0, pc, #4	; (adr r0, 8004a9c <_printf_i+0x40>)
 8004a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a9c:	08004af5 	.word	0x08004af5
 8004aa0:	08004b09 	.word	0x08004b09
 8004aa4:	08004a85 	.word	0x08004a85
 8004aa8:	08004a85 	.word	0x08004a85
 8004aac:	08004a85 	.word	0x08004a85
 8004ab0:	08004a85 	.word	0x08004a85
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004a85 	.word	0x08004a85
 8004abc:	08004a85 	.word	0x08004a85
 8004ac0:	08004a85 	.word	0x08004a85
 8004ac4:	08004a85 	.word	0x08004a85
 8004ac8:	08004c15 	.word	0x08004c15
 8004acc:	08004b39 	.word	0x08004b39
 8004ad0:	08004bf7 	.word	0x08004bf7
 8004ad4:	08004a85 	.word	0x08004a85
 8004ad8:	08004a85 	.word	0x08004a85
 8004adc:	08004c37 	.word	0x08004c37
 8004ae0:	08004a85 	.word	0x08004a85
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004a85 	.word	0x08004a85
 8004aec:	08004a85 	.word	0x08004a85
 8004af0:	08004bff 	.word	0x08004bff
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	1d1a      	adds	r2, r3, #4
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	600a      	str	r2, [r1, #0]
 8004afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0a3      	b.n	8004c50 <_printf_i+0x1f4>
 8004b08:	6825      	ldr	r5, [r4, #0]
 8004b0a:	6808      	ldr	r0, [r1, #0]
 8004b0c:	062e      	lsls	r6, r5, #24
 8004b0e:	f100 0304 	add.w	r3, r0, #4
 8004b12:	d50a      	bpl.n	8004b2a <_printf_i+0xce>
 8004b14:	6805      	ldr	r5, [r0, #0]
 8004b16:	600b      	str	r3, [r1, #0]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	da03      	bge.n	8004b24 <_printf_i+0xc8>
 8004b1c:	232d      	movs	r3, #45	; 0x2d
 8004b1e:	426d      	negs	r5, r5
 8004b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b24:	485e      	ldr	r0, [pc, #376]	; (8004ca0 <_printf_i+0x244>)
 8004b26:	230a      	movs	r3, #10
 8004b28:	e019      	b.n	8004b5e <_printf_i+0x102>
 8004b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b2e:	6805      	ldr	r5, [r0, #0]
 8004b30:	600b      	str	r3, [r1, #0]
 8004b32:	bf18      	it	ne
 8004b34:	b22d      	sxthne	r5, r5
 8004b36:	e7ef      	b.n	8004b18 <_printf_i+0xbc>
 8004b38:	680b      	ldr	r3, [r1, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	1d18      	adds	r0, r3, #4
 8004b3e:	6008      	str	r0, [r1, #0]
 8004b40:	0628      	lsls	r0, r5, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xec>
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	e002      	b.n	8004b4e <_printf_i+0xf2>
 8004b48:	0669      	lsls	r1, r5, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xe8>
 8004b4c:	881d      	ldrh	r5, [r3, #0]
 8004b4e:	4854      	ldr	r0, [pc, #336]	; (8004ca0 <_printf_i+0x244>)
 8004b50:	2f6f      	cmp	r7, #111	; 0x6f
 8004b52:	bf0c      	ite	eq
 8004b54:	2308      	moveq	r3, #8
 8004b56:	230a      	movne	r3, #10
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b5e:	6866      	ldr	r6, [r4, #4]
 8004b60:	60a6      	str	r6, [r4, #8]
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	bfa2      	ittt	ge
 8004b66:	6821      	ldrge	r1, [r4, #0]
 8004b68:	f021 0104 	bicge.w	r1, r1, #4
 8004b6c:	6021      	strge	r1, [r4, #0]
 8004b6e:	b90d      	cbnz	r5, 8004b74 <_printf_i+0x118>
 8004b70:	2e00      	cmp	r6, #0
 8004b72:	d04d      	beq.n	8004c10 <_printf_i+0x1b4>
 8004b74:	4616      	mov	r6, r2
 8004b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8004b7e:	5dc7      	ldrb	r7, [r0, r7]
 8004b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b84:	462f      	mov	r7, r5
 8004b86:	42bb      	cmp	r3, r7
 8004b88:	460d      	mov	r5, r1
 8004b8a:	d9f4      	bls.n	8004b76 <_printf_i+0x11a>
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d10b      	bne.n	8004ba8 <_printf_i+0x14c>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	07df      	lsls	r7, r3, #31
 8004b94:	d508      	bpl.n	8004ba8 <_printf_i+0x14c>
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	6861      	ldr	r1, [r4, #4]
 8004b9a:	4299      	cmp	r1, r3
 8004b9c:	bfde      	ittt	le
 8004b9e:	2330      	movle	r3, #48	; 0x30
 8004ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ba8:	1b92      	subs	r2, r2, r6
 8004baa:	6122      	str	r2, [r4, #16]
 8004bac:	f8cd a000 	str.w	sl, [sp]
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f7ff fee2 	bl	8004980 <_printf_common>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d14c      	bne.n	8004c5a <_printf_i+0x1fe>
 8004bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc4:	b004      	add	sp, #16
 8004bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bca:	4835      	ldr	r0, [pc, #212]	; (8004ca0 <_printf_i+0x244>)
 8004bcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	680e      	ldr	r6, [r1, #0]
 8004bd4:	061f      	lsls	r7, r3, #24
 8004bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bda:	600e      	str	r6, [r1, #0]
 8004bdc:	d514      	bpl.n	8004c08 <_printf_i+0x1ac>
 8004bde:	07d9      	lsls	r1, r3, #31
 8004be0:	bf44      	itt	mi
 8004be2:	f043 0320 	orrmi.w	r3, r3, #32
 8004be6:	6023      	strmi	r3, [r4, #0]
 8004be8:	b91d      	cbnz	r5, 8004bf2 <_printf_i+0x196>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f023 0320 	bic.w	r3, r3, #32
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	e7b0      	b.n	8004b58 <_printf_i+0xfc>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f043 0320 	orr.w	r3, r3, #32
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	2378      	movs	r3, #120	; 0x78
 8004c00:	4828      	ldr	r0, [pc, #160]	; (8004ca4 <_printf_i+0x248>)
 8004c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c06:	e7e3      	b.n	8004bd0 <_printf_i+0x174>
 8004c08:	065e      	lsls	r6, r3, #25
 8004c0a:	bf48      	it	mi
 8004c0c:	b2ad      	uxthmi	r5, r5
 8004c0e:	e7e6      	b.n	8004bde <_printf_i+0x182>
 8004c10:	4616      	mov	r6, r2
 8004c12:	e7bb      	b.n	8004b8c <_printf_i+0x130>
 8004c14:	680b      	ldr	r3, [r1, #0]
 8004c16:	6826      	ldr	r6, [r4, #0]
 8004c18:	6960      	ldr	r0, [r4, #20]
 8004c1a:	1d1d      	adds	r5, r3, #4
 8004c1c:	600d      	str	r5, [r1, #0]
 8004c1e:	0635      	lsls	r5, r6, #24
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0x1cc>
 8004c24:	6018      	str	r0, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0x1d2>
 8004c28:	0671      	lsls	r1, r6, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0x1c8>
 8004c2c:	8018      	strh	r0, [r3, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6123      	str	r3, [r4, #16]
 8004c32:	4616      	mov	r6, r2
 8004c34:	e7ba      	b.n	8004bac <_printf_i+0x150>
 8004c36:	680b      	ldr	r3, [r1, #0]
 8004c38:	1d1a      	adds	r2, r3, #4
 8004c3a:	600a      	str	r2, [r1, #0]
 8004c3c:	681e      	ldr	r6, [r3, #0]
 8004c3e:	6862      	ldr	r2, [r4, #4]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4630      	mov	r0, r6
 8004c44:	f7fb fac4 	bl	80001d0 <memchr>
 8004c48:	b108      	cbz	r0, 8004c4e <_printf_i+0x1f2>
 8004c4a:	1b80      	subs	r0, r0, r6
 8004c4c:	6060      	str	r0, [r4, #4]
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	2300      	movs	r3, #0
 8004c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c58:	e7a8      	b.n	8004bac <_printf_i+0x150>
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4640      	mov	r0, r8
 8004c62:	47d0      	blx	sl
 8004c64:	3001      	adds	r0, #1
 8004c66:	d0ab      	beq.n	8004bc0 <_printf_i+0x164>
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	079b      	lsls	r3, r3, #30
 8004c6c:	d413      	bmi.n	8004c96 <_printf_i+0x23a>
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	9b03      	ldr	r3, [sp, #12]
 8004c72:	4298      	cmp	r0, r3
 8004c74:	bfb8      	it	lt
 8004c76:	4618      	movlt	r0, r3
 8004c78:	e7a4      	b.n	8004bc4 <_printf_i+0x168>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4632      	mov	r2, r6
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d09b      	beq.n	8004bc0 <_printf_i+0x164>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	9903      	ldr	r1, [sp, #12]
 8004c8e:	1a5b      	subs	r3, r3, r1
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dcf2      	bgt.n	8004c7a <_printf_i+0x21e>
 8004c94:	e7eb      	b.n	8004c6e <_printf_i+0x212>
 8004c96:	2500      	movs	r5, #0
 8004c98:	f104 0619 	add.w	r6, r4, #25
 8004c9c:	e7f5      	b.n	8004c8a <_printf_i+0x22e>
 8004c9e:	bf00      	nop
 8004ca0:	080055a3 	.word	0x080055a3
 8004ca4:	080055b4 	.word	0x080055b4

08004ca8 <_sbrk_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d06      	ldr	r5, [pc, #24]	; (8004cc4 <_sbrk_r+0x1c>)
 8004cac:	2300      	movs	r3, #0
 8004cae:	4604      	mov	r4, r0
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc f964 	bl	8000f80 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_sbrk_r+0x1a>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_sbrk_r+0x1a>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000560 	.word	0x20000560

08004cc8 <__swbuf_r>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	460e      	mov	r6, r1
 8004ccc:	4614      	mov	r4, r2
 8004cce:	4605      	mov	r5, r0
 8004cd0:	b118      	cbz	r0, 8004cda <__swbuf_r+0x12>
 8004cd2:	6983      	ldr	r3, [r0, #24]
 8004cd4:	b90b      	cbnz	r3, 8004cda <__swbuf_r+0x12>
 8004cd6:	f000 f9d9 	bl	800508c <__sinit>
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <__swbuf_r+0x98>)
 8004cdc:	429c      	cmp	r4, r3
 8004cde:	d12b      	bne.n	8004d38 <__swbuf_r+0x70>
 8004ce0:	686c      	ldr	r4, [r5, #4]
 8004ce2:	69a3      	ldr	r3, [r4, #24]
 8004ce4:	60a3      	str	r3, [r4, #8]
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	071a      	lsls	r2, r3, #28
 8004cea:	d52f      	bpl.n	8004d4c <__swbuf_r+0x84>
 8004cec:	6923      	ldr	r3, [r4, #16]
 8004cee:	b36b      	cbz	r3, 8004d4c <__swbuf_r+0x84>
 8004cf0:	6923      	ldr	r3, [r4, #16]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1ac0      	subs	r0, r0, r3
 8004cf6:	6963      	ldr	r3, [r4, #20]
 8004cf8:	b2f6      	uxtb	r6, r6
 8004cfa:	4283      	cmp	r3, r0
 8004cfc:	4637      	mov	r7, r6
 8004cfe:	dc04      	bgt.n	8004d0a <__swbuf_r+0x42>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 f92e 	bl	8004f64 <_fflush_r>
 8004d08:	bb30      	cbnz	r0, 8004d58 <__swbuf_r+0x90>
 8004d0a:	68a3      	ldr	r3, [r4, #8]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	60a3      	str	r3, [r4, #8]
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	6022      	str	r2, [r4, #0]
 8004d16:	701e      	strb	r6, [r3, #0]
 8004d18:	6963      	ldr	r3, [r4, #20]
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	4283      	cmp	r3, r0
 8004d1e:	d004      	beq.n	8004d2a <__swbuf_r+0x62>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	07db      	lsls	r3, r3, #31
 8004d24:	d506      	bpl.n	8004d34 <__swbuf_r+0x6c>
 8004d26:	2e0a      	cmp	r6, #10
 8004d28:	d104      	bne.n	8004d34 <__swbuf_r+0x6c>
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 f919 	bl	8004f64 <_fflush_r>
 8004d32:	b988      	cbnz	r0, 8004d58 <__swbuf_r+0x90>
 8004d34:	4638      	mov	r0, r7
 8004d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d38:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <__swbuf_r+0x9c>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d101      	bne.n	8004d42 <__swbuf_r+0x7a>
 8004d3e:	68ac      	ldr	r4, [r5, #8]
 8004d40:	e7cf      	b.n	8004ce2 <__swbuf_r+0x1a>
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <__swbuf_r+0xa0>)
 8004d44:	429c      	cmp	r4, r3
 8004d46:	bf08      	it	eq
 8004d48:	68ec      	ldreq	r4, [r5, #12]
 8004d4a:	e7ca      	b.n	8004ce2 <__swbuf_r+0x1a>
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f000 f80c 	bl	8004d6c <__swsetup_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d0cb      	beq.n	8004cf0 <__swbuf_r+0x28>
 8004d58:	f04f 37ff 	mov.w	r7, #4294967295
 8004d5c:	e7ea      	b.n	8004d34 <__swbuf_r+0x6c>
 8004d5e:	bf00      	nop
 8004d60:	080055e8 	.word	0x080055e8
 8004d64:	08005608 	.word	0x08005608
 8004d68:	080055c8 	.word	0x080055c8

08004d6c <__swsetup_r>:
 8004d6c:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <__swsetup_r+0xcc>)
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	681d      	ldr	r5, [r3, #0]
 8004d72:	4606      	mov	r6, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	b125      	cbz	r5, 8004d82 <__swsetup_r+0x16>
 8004d78:	69ab      	ldr	r3, [r5, #24]
 8004d7a:	b913      	cbnz	r3, 8004d82 <__swsetup_r+0x16>
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 f985 	bl	800508c <__sinit>
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <__swsetup_r+0xd0>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d10f      	bne.n	8004da8 <__swsetup_r+0x3c>
 8004d88:	686c      	ldr	r4, [r5, #4]
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d90:	0719      	lsls	r1, r3, #28
 8004d92:	d42c      	bmi.n	8004dee <__swsetup_r+0x82>
 8004d94:	06dd      	lsls	r5, r3, #27
 8004d96:	d411      	bmi.n	8004dbc <__swsetup_r+0x50>
 8004d98:	2309      	movs	r3, #9
 8004d9a:	6033      	str	r3, [r6, #0]
 8004d9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	f04f 30ff 	mov.w	r0, #4294967295
 8004da6:	e03e      	b.n	8004e26 <__swsetup_r+0xba>
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <__swsetup_r+0xd4>)
 8004daa:	429c      	cmp	r4, r3
 8004dac:	d101      	bne.n	8004db2 <__swsetup_r+0x46>
 8004dae:	68ac      	ldr	r4, [r5, #8]
 8004db0:	e7eb      	b.n	8004d8a <__swsetup_r+0x1e>
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <__swsetup_r+0xd8>)
 8004db4:	429c      	cmp	r4, r3
 8004db6:	bf08      	it	eq
 8004db8:	68ec      	ldreq	r4, [r5, #12]
 8004dba:	e7e6      	b.n	8004d8a <__swsetup_r+0x1e>
 8004dbc:	0758      	lsls	r0, r3, #29
 8004dbe:	d512      	bpl.n	8004de6 <__swsetup_r+0x7a>
 8004dc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dc2:	b141      	cbz	r1, 8004dd6 <__swsetup_r+0x6a>
 8004dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	d002      	beq.n	8004dd2 <__swsetup_r+0x66>
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff fbd3 	bl	8004578 <_free_r>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	2300      	movs	r3, #0
 8004de0:	6063      	str	r3, [r4, #4]
 8004de2:	6923      	ldr	r3, [r4, #16]
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f043 0308 	orr.w	r3, r3, #8
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	b94b      	cbnz	r3, 8004e06 <__swsetup_r+0x9a>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dfc:	d003      	beq.n	8004e06 <__swsetup_r+0x9a>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 fa07 	bl	8005214 <__smakebuf_r>
 8004e06:	89a0      	ldrh	r0, [r4, #12]
 8004e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e0c:	f010 0301 	ands.w	r3, r0, #1
 8004e10:	d00a      	beq.n	8004e28 <__swsetup_r+0xbc>
 8004e12:	2300      	movs	r3, #0
 8004e14:	60a3      	str	r3, [r4, #8]
 8004e16:	6963      	ldr	r3, [r4, #20]
 8004e18:	425b      	negs	r3, r3
 8004e1a:	61a3      	str	r3, [r4, #24]
 8004e1c:	6923      	ldr	r3, [r4, #16]
 8004e1e:	b943      	cbnz	r3, 8004e32 <__swsetup_r+0xc6>
 8004e20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e24:	d1ba      	bne.n	8004d9c <__swsetup_r+0x30>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	0781      	lsls	r1, r0, #30
 8004e2a:	bf58      	it	pl
 8004e2c:	6963      	ldrpl	r3, [r4, #20]
 8004e2e:	60a3      	str	r3, [r4, #8]
 8004e30:	e7f4      	b.n	8004e1c <__swsetup_r+0xb0>
 8004e32:	2000      	movs	r0, #0
 8004e34:	e7f7      	b.n	8004e26 <__swsetup_r+0xba>
 8004e36:	bf00      	nop
 8004e38:	20000018 	.word	0x20000018
 8004e3c:	080055e8 	.word	0x080055e8
 8004e40:	08005608 	.word	0x08005608
 8004e44:	080055c8 	.word	0x080055c8

08004e48 <abort>:
 8004e48:	b508      	push	{r3, lr}
 8004e4a:	2006      	movs	r0, #6
 8004e4c:	f000 fa56 	bl	80052fc <raise>
 8004e50:	2001      	movs	r0, #1
 8004e52:	f7fc f81d 	bl	8000e90 <_exit>
	...

08004e58 <__sflush_r>:
 8004e58:	898a      	ldrh	r2, [r1, #12]
 8004e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	4605      	mov	r5, r0
 8004e60:	0710      	lsls	r0, r2, #28
 8004e62:	460c      	mov	r4, r1
 8004e64:	d458      	bmi.n	8004f18 <__sflush_r+0xc0>
 8004e66:	684b      	ldr	r3, [r1, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dc05      	bgt.n	8004e78 <__sflush_r+0x20>
 8004e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dc02      	bgt.n	8004e78 <__sflush_r+0x20>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	2e00      	cmp	r6, #0
 8004e7c:	d0f9      	beq.n	8004e72 <__sflush_r+0x1a>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e84:	682f      	ldr	r7, [r5, #0]
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	d032      	beq.n	8004ef0 <__sflush_r+0x98>
 8004e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	075a      	lsls	r2, r3, #29
 8004e90:	d505      	bpl.n	8004e9e <__sflush_r+0x46>
 8004e92:	6863      	ldr	r3, [r4, #4]
 8004e94:	1ac0      	subs	r0, r0, r3
 8004e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e98:	b10b      	cbz	r3, 8004e9e <__sflush_r+0x46>
 8004e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e9c:	1ac0      	subs	r0, r0, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea4:	6a21      	ldr	r1, [r4, #32]
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b0      	blx	r6
 8004eaa:	1c43      	adds	r3, r0, #1
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	d106      	bne.n	8004ebe <__sflush_r+0x66>
 8004eb0:	6829      	ldr	r1, [r5, #0]
 8004eb2:	291d      	cmp	r1, #29
 8004eb4:	d82c      	bhi.n	8004f10 <__sflush_r+0xb8>
 8004eb6:	4a2a      	ldr	r2, [pc, #168]	; (8004f60 <__sflush_r+0x108>)
 8004eb8:	40ca      	lsrs	r2, r1
 8004eba:	07d6      	lsls	r6, r2, #31
 8004ebc:	d528      	bpl.n	8004f10 <__sflush_r+0xb8>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6062      	str	r2, [r4, #4]
 8004ec2:	04d9      	lsls	r1, r3, #19
 8004ec4:	6922      	ldr	r2, [r4, #16]
 8004ec6:	6022      	str	r2, [r4, #0]
 8004ec8:	d504      	bpl.n	8004ed4 <__sflush_r+0x7c>
 8004eca:	1c42      	adds	r2, r0, #1
 8004ecc:	d101      	bne.n	8004ed2 <__sflush_r+0x7a>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	b903      	cbnz	r3, 8004ed4 <__sflush_r+0x7c>
 8004ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed6:	602f      	str	r7, [r5, #0]
 8004ed8:	2900      	cmp	r1, #0
 8004eda:	d0ca      	beq.n	8004e72 <__sflush_r+0x1a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__sflush_r+0x92>
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f7ff fb47 	bl	8004578 <_free_r>
 8004eea:	2000      	movs	r0, #0
 8004eec:	6360      	str	r0, [r4, #52]	; 0x34
 8004eee:	e7c1      	b.n	8004e74 <__sflush_r+0x1c>
 8004ef0:	6a21      	ldr	r1, [r4, #32]
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b0      	blx	r6
 8004ef8:	1c41      	adds	r1, r0, #1
 8004efa:	d1c7      	bne.n	8004e8c <__sflush_r+0x34>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0c4      	beq.n	8004e8c <__sflush_r+0x34>
 8004f02:	2b1d      	cmp	r3, #29
 8004f04:	d001      	beq.n	8004f0a <__sflush_r+0xb2>
 8004f06:	2b16      	cmp	r3, #22
 8004f08:	d101      	bne.n	8004f0e <__sflush_r+0xb6>
 8004f0a:	602f      	str	r7, [r5, #0]
 8004f0c:	e7b1      	b.n	8004e72 <__sflush_r+0x1a>
 8004f0e:	89a3      	ldrh	r3, [r4, #12]
 8004f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	e7ad      	b.n	8004e74 <__sflush_r+0x1c>
 8004f18:	690f      	ldr	r7, [r1, #16]
 8004f1a:	2f00      	cmp	r7, #0
 8004f1c:	d0a9      	beq.n	8004e72 <__sflush_r+0x1a>
 8004f1e:	0793      	lsls	r3, r2, #30
 8004f20:	680e      	ldr	r6, [r1, #0]
 8004f22:	bf08      	it	eq
 8004f24:	694b      	ldreq	r3, [r1, #20]
 8004f26:	600f      	str	r7, [r1, #0]
 8004f28:	bf18      	it	ne
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	eba6 0807 	sub.w	r8, r6, r7
 8004f30:	608b      	str	r3, [r1, #8]
 8004f32:	f1b8 0f00 	cmp.w	r8, #0
 8004f36:	dd9c      	ble.n	8004e72 <__sflush_r+0x1a>
 8004f38:	6a21      	ldr	r1, [r4, #32]
 8004f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	463a      	mov	r2, r7
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b0      	blx	r6
 8004f44:	2800      	cmp	r0, #0
 8004f46:	dc06      	bgt.n	8004f56 <__sflush_r+0xfe>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	e78e      	b.n	8004e74 <__sflush_r+0x1c>
 8004f56:	4407      	add	r7, r0
 8004f58:	eba8 0800 	sub.w	r8, r8, r0
 8004f5c:	e7e9      	b.n	8004f32 <__sflush_r+0xda>
 8004f5e:	bf00      	nop
 8004f60:	20400001 	.word	0x20400001

08004f64 <_fflush_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	b913      	cbnz	r3, 8004f74 <_fflush_r+0x10>
 8004f6e:	2500      	movs	r5, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	b118      	cbz	r0, 8004f7e <_fflush_r+0x1a>
 8004f76:	6983      	ldr	r3, [r0, #24]
 8004f78:	b90b      	cbnz	r3, 8004f7e <_fflush_r+0x1a>
 8004f7a:	f000 f887 	bl	800508c <__sinit>
 8004f7e:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <_fflush_r+0x6c>)
 8004f80:	429c      	cmp	r4, r3
 8004f82:	d11b      	bne.n	8004fbc <_fflush_r+0x58>
 8004f84:	686c      	ldr	r4, [r5, #4]
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ef      	beq.n	8004f6e <_fflush_r+0xa>
 8004f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	d404      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f94:	0599      	lsls	r1, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_fflush_r+0x3a>
 8004f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9a:	f000 f915 	bl	80051c8 <__retarget_lock_acquire_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff ff59 	bl	8004e58 <__sflush_r>
 8004fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa8:	07da      	lsls	r2, r3, #31
 8004faa:	4605      	mov	r5, r0
 8004fac:	d4e0      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d4dd      	bmi.n	8004f70 <_fflush_r+0xc>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb6:	f000 f908 	bl	80051ca <__retarget_lock_release_recursive>
 8004fba:	e7d9      	b.n	8004f70 <_fflush_r+0xc>
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <_fflush_r+0x70>)
 8004fbe:	429c      	cmp	r4, r3
 8004fc0:	d101      	bne.n	8004fc6 <_fflush_r+0x62>
 8004fc2:	68ac      	ldr	r4, [r5, #8]
 8004fc4:	e7df      	b.n	8004f86 <_fflush_r+0x22>
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <_fflush_r+0x74>)
 8004fc8:	429c      	cmp	r4, r3
 8004fca:	bf08      	it	eq
 8004fcc:	68ec      	ldreq	r4, [r5, #12]
 8004fce:	e7da      	b.n	8004f86 <_fflush_r+0x22>
 8004fd0:	080055e8 	.word	0x080055e8
 8004fd4:	08005608 	.word	0x08005608
 8004fd8:	080055c8 	.word	0x080055c8

08004fdc <std>:
 8004fdc:	2300      	movs	r3, #0
 8004fde:	b510      	push	{r4, lr}
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fea:	6083      	str	r3, [r0, #8]
 8004fec:	8181      	strh	r1, [r0, #12]
 8004fee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ff0:	81c2      	strh	r2, [r0, #14]
 8004ff2:	6183      	str	r3, [r0, #24]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	305c      	adds	r0, #92	; 0x5c
 8004ffa:	f7ff fa0f 	bl	800441c <memset>
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x38>)
 8005000:	6263      	str	r3, [r4, #36]	; 0x24
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x3c>)
 8005004:	62a3      	str	r3, [r4, #40]	; 0x28
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x40>)
 8005008:	62e3      	str	r3, [r4, #44]	; 0x2c
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <std+0x44>)
 800500c:	6224      	str	r4, [r4, #32]
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005335 	.word	0x08005335
 8005018:	08005357 	.word	0x08005357
 800501c:	0800538f 	.word	0x0800538f
 8005020:	080053b3 	.word	0x080053b3

08005024 <_cleanup_r>:
 8005024:	4901      	ldr	r1, [pc, #4]	; (800502c <_cleanup_r+0x8>)
 8005026:	f000 b8af 	b.w	8005188 <_fwalk_reent>
 800502a:	bf00      	nop
 800502c:	08004f65 	.word	0x08004f65

08005030 <__sfmoreglue>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	1e4a      	subs	r2, r1, #1
 8005034:	2568      	movs	r5, #104	; 0x68
 8005036:	4355      	muls	r5, r2
 8005038:	460e      	mov	r6, r1
 800503a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503e:	f7ff faeb 	bl	8004618 <_malloc_r>
 8005042:	4604      	mov	r4, r0
 8005044:	b140      	cbz	r0, 8005058 <__sfmoreglue+0x28>
 8005046:	2100      	movs	r1, #0
 8005048:	e9c0 1600 	strd	r1, r6, [r0]
 800504c:	300c      	adds	r0, #12
 800504e:	60a0      	str	r0, [r4, #8]
 8005050:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005054:	f7ff f9e2 	bl	800441c <memset>
 8005058:	4620      	mov	r0, r4
 800505a:	bd70      	pop	{r4, r5, r6, pc}

0800505c <__sfp_lock_acquire>:
 800505c:	4801      	ldr	r0, [pc, #4]	; (8005064 <__sfp_lock_acquire+0x8>)
 800505e:	f000 b8b3 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 8005062:	bf00      	nop
 8005064:	2000055c 	.word	0x2000055c

08005068 <__sfp_lock_release>:
 8005068:	4801      	ldr	r0, [pc, #4]	; (8005070 <__sfp_lock_release+0x8>)
 800506a:	f000 b8ae 	b.w	80051ca <__retarget_lock_release_recursive>
 800506e:	bf00      	nop
 8005070:	2000055c 	.word	0x2000055c

08005074 <__sinit_lock_acquire>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__sinit_lock_acquire+0x8>)
 8005076:	f000 b8a7 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	20000557 	.word	0x20000557

08005080 <__sinit_lock_release>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__sinit_lock_release+0x8>)
 8005082:	f000 b8a2 	b.w	80051ca <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	20000557 	.word	0x20000557

0800508c <__sinit>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4604      	mov	r4, r0
 8005090:	f7ff fff0 	bl	8005074 <__sinit_lock_acquire>
 8005094:	69a3      	ldr	r3, [r4, #24]
 8005096:	b11b      	cbz	r3, 80050a0 <__sinit+0x14>
 8005098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509c:	f7ff bff0 	b.w	8005080 <__sinit_lock_release>
 80050a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a4:	6523      	str	r3, [r4, #80]	; 0x50
 80050a6:	4b13      	ldr	r3, [pc, #76]	; (80050f4 <__sinit+0x68>)
 80050a8:	4a13      	ldr	r2, [pc, #76]	; (80050f8 <__sinit+0x6c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	bf04      	itt	eq
 80050b2:	2301      	moveq	r3, #1
 80050b4:	61a3      	streq	r3, [r4, #24]
 80050b6:	4620      	mov	r0, r4
 80050b8:	f000 f820 	bl	80050fc <__sfp>
 80050bc:	6060      	str	r0, [r4, #4]
 80050be:	4620      	mov	r0, r4
 80050c0:	f000 f81c 	bl	80050fc <__sfp>
 80050c4:	60a0      	str	r0, [r4, #8]
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f818 	bl	80050fc <__sfp>
 80050cc:	2200      	movs	r2, #0
 80050ce:	60e0      	str	r0, [r4, #12]
 80050d0:	2104      	movs	r1, #4
 80050d2:	6860      	ldr	r0, [r4, #4]
 80050d4:	f7ff ff82 	bl	8004fdc <std>
 80050d8:	68a0      	ldr	r0, [r4, #8]
 80050da:	2201      	movs	r2, #1
 80050dc:	2109      	movs	r1, #9
 80050de:	f7ff ff7d 	bl	8004fdc <std>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	2202      	movs	r2, #2
 80050e6:	2112      	movs	r1, #18
 80050e8:	f7ff ff78 	bl	8004fdc <std>
 80050ec:	2301      	movs	r3, #1
 80050ee:	61a3      	str	r3, [r4, #24]
 80050f0:	e7d2      	b.n	8005098 <__sinit+0xc>
 80050f2:	bf00      	nop
 80050f4:	080054dc 	.word	0x080054dc
 80050f8:	08005025 	.word	0x08005025

080050fc <__sfp>:
 80050fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fe:	4607      	mov	r7, r0
 8005100:	f7ff ffac 	bl	800505c <__sfp_lock_acquire>
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <__sfp+0x84>)
 8005106:	681e      	ldr	r6, [r3, #0]
 8005108:	69b3      	ldr	r3, [r6, #24]
 800510a:	b913      	cbnz	r3, 8005112 <__sfp+0x16>
 800510c:	4630      	mov	r0, r6
 800510e:	f7ff ffbd 	bl	800508c <__sinit>
 8005112:	3648      	adds	r6, #72	; 0x48
 8005114:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005118:	3b01      	subs	r3, #1
 800511a:	d503      	bpl.n	8005124 <__sfp+0x28>
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	b30b      	cbz	r3, 8005164 <__sfp+0x68>
 8005120:	6836      	ldr	r6, [r6, #0]
 8005122:	e7f7      	b.n	8005114 <__sfp+0x18>
 8005124:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005128:	b9d5      	cbnz	r5, 8005160 <__sfp+0x64>
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <__sfp+0x88>)
 800512c:	60e3      	str	r3, [r4, #12]
 800512e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005132:	6665      	str	r5, [r4, #100]	; 0x64
 8005134:	f000 f847 	bl	80051c6 <__retarget_lock_init_recursive>
 8005138:	f7ff ff96 	bl	8005068 <__sfp_lock_release>
 800513c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005144:	6025      	str	r5, [r4, #0]
 8005146:	61a5      	str	r5, [r4, #24]
 8005148:	2208      	movs	r2, #8
 800514a:	4629      	mov	r1, r5
 800514c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005150:	f7ff f964 	bl	800441c <memset>
 8005154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800515c:	4620      	mov	r0, r4
 800515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005160:	3468      	adds	r4, #104	; 0x68
 8005162:	e7d9      	b.n	8005118 <__sfp+0x1c>
 8005164:	2104      	movs	r1, #4
 8005166:	4638      	mov	r0, r7
 8005168:	f7ff ff62 	bl	8005030 <__sfmoreglue>
 800516c:	4604      	mov	r4, r0
 800516e:	6030      	str	r0, [r6, #0]
 8005170:	2800      	cmp	r0, #0
 8005172:	d1d5      	bne.n	8005120 <__sfp+0x24>
 8005174:	f7ff ff78 	bl	8005068 <__sfp_lock_release>
 8005178:	230c      	movs	r3, #12
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	e7ee      	b.n	800515c <__sfp+0x60>
 800517e:	bf00      	nop
 8005180:	080054dc 	.word	0x080054dc
 8005184:	ffff0001 	.word	0xffff0001

08005188 <_fwalk_reent>:
 8005188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800518c:	4606      	mov	r6, r0
 800518e:	4688      	mov	r8, r1
 8005190:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005194:	2700      	movs	r7, #0
 8005196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800519a:	f1b9 0901 	subs.w	r9, r9, #1
 800519e:	d505      	bpl.n	80051ac <_fwalk_reent+0x24>
 80051a0:	6824      	ldr	r4, [r4, #0]
 80051a2:	2c00      	cmp	r4, #0
 80051a4:	d1f7      	bne.n	8005196 <_fwalk_reent+0xe>
 80051a6:	4638      	mov	r0, r7
 80051a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ac:	89ab      	ldrh	r3, [r5, #12]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d907      	bls.n	80051c2 <_fwalk_reent+0x3a>
 80051b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b6:	3301      	adds	r3, #1
 80051b8:	d003      	beq.n	80051c2 <_fwalk_reent+0x3a>
 80051ba:	4629      	mov	r1, r5
 80051bc:	4630      	mov	r0, r6
 80051be:	47c0      	blx	r8
 80051c0:	4307      	orrs	r7, r0
 80051c2:	3568      	adds	r5, #104	; 0x68
 80051c4:	e7e9      	b.n	800519a <_fwalk_reent+0x12>

080051c6 <__retarget_lock_init_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__retarget_lock_acquire_recursive>:
 80051c8:	4770      	bx	lr

080051ca <__retarget_lock_release_recursive>:
 80051ca:	4770      	bx	lr

080051cc <__swhatbuf_r>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	460e      	mov	r6, r1
 80051d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d4:	2900      	cmp	r1, #0
 80051d6:	b096      	sub	sp, #88	; 0x58
 80051d8:	4614      	mov	r4, r2
 80051da:	461d      	mov	r5, r3
 80051dc:	da07      	bge.n	80051ee <__swhatbuf_r+0x22>
 80051de:	2300      	movs	r3, #0
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	89b3      	ldrh	r3, [r6, #12]
 80051e4:	061a      	lsls	r2, r3, #24
 80051e6:	d410      	bmi.n	800520a <__swhatbuf_r+0x3e>
 80051e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ec:	e00e      	b.n	800520c <__swhatbuf_r+0x40>
 80051ee:	466a      	mov	r2, sp
 80051f0:	f000 f906 	bl	8005400 <_fstat_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	dbf2      	blt.n	80051de <__swhatbuf_r+0x12>
 80051f8:	9a01      	ldr	r2, [sp, #4]
 80051fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005202:	425a      	negs	r2, r3
 8005204:	415a      	adcs	r2, r3
 8005206:	602a      	str	r2, [r5, #0]
 8005208:	e7ee      	b.n	80051e8 <__swhatbuf_r+0x1c>
 800520a:	2340      	movs	r3, #64	; 0x40
 800520c:	2000      	movs	r0, #0
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	b016      	add	sp, #88	; 0x58
 8005212:	bd70      	pop	{r4, r5, r6, pc}

08005214 <__smakebuf_r>:
 8005214:	898b      	ldrh	r3, [r1, #12]
 8005216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005218:	079d      	lsls	r5, r3, #30
 800521a:	4606      	mov	r6, r0
 800521c:	460c      	mov	r4, r1
 800521e:	d507      	bpl.n	8005230 <__smakebuf_r+0x1c>
 8005220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	2301      	movs	r3, #1
 800522a:	6163      	str	r3, [r4, #20]
 800522c:	b002      	add	sp, #8
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	ab01      	add	r3, sp, #4
 8005232:	466a      	mov	r2, sp
 8005234:	f7ff ffca 	bl	80051cc <__swhatbuf_r>
 8005238:	9900      	ldr	r1, [sp, #0]
 800523a:	4605      	mov	r5, r0
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff f9eb 	bl	8004618 <_malloc_r>
 8005242:	b948      	cbnz	r0, 8005258 <__smakebuf_r+0x44>
 8005244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d4ef      	bmi.n	800522c <__smakebuf_r+0x18>
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	e7e3      	b.n	8005220 <__smakebuf_r+0xc>
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <__smakebuf_r+0x7c>)
 800525a:	62b3      	str	r3, [r6, #40]	; 0x28
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	6020      	str	r0, [r4, #0]
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	6163      	str	r3, [r4, #20]
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	6120      	str	r0, [r4, #16]
 800526e:	b15b      	cbz	r3, 8005288 <__smakebuf_r+0x74>
 8005270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005274:	4630      	mov	r0, r6
 8005276:	f000 f8d5 	bl	8005424 <_isatty_r>
 800527a:	b128      	cbz	r0, 8005288 <__smakebuf_r+0x74>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	89a0      	ldrh	r0, [r4, #12]
 800528a:	4305      	orrs	r5, r0
 800528c:	81a5      	strh	r5, [r4, #12]
 800528e:	e7cd      	b.n	800522c <__smakebuf_r+0x18>
 8005290:	08005025 	.word	0x08005025

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bf97 	b.w	80051c8 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	20000558 	.word	0x20000558

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bf92 	b.w	80051ca <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000558 	.word	0x20000558

080052ac <_raise_r>:
 80052ac:	291f      	cmp	r1, #31
 80052ae:	b538      	push	{r3, r4, r5, lr}
 80052b0:	4604      	mov	r4, r0
 80052b2:	460d      	mov	r5, r1
 80052b4:	d904      	bls.n	80052c0 <_raise_r+0x14>
 80052b6:	2316      	movs	r3, #22
 80052b8:	6003      	str	r3, [r0, #0]
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295
 80052be:	bd38      	pop	{r3, r4, r5, pc}
 80052c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052c2:	b112      	cbz	r2, 80052ca <_raise_r+0x1e>
 80052c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052c8:	b94b      	cbnz	r3, 80052de <_raise_r+0x32>
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 f830 	bl	8005330 <_getpid_r>
 80052d0:	462a      	mov	r2, r5
 80052d2:	4601      	mov	r1, r0
 80052d4:	4620      	mov	r0, r4
 80052d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052da:	f000 b817 	b.w	800530c <_kill_r>
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d00a      	beq.n	80052f8 <_raise_r+0x4c>
 80052e2:	1c59      	adds	r1, r3, #1
 80052e4:	d103      	bne.n	80052ee <_raise_r+0x42>
 80052e6:	2316      	movs	r3, #22
 80052e8:	6003      	str	r3, [r0, #0]
 80052ea:	2001      	movs	r0, #1
 80052ec:	e7e7      	b.n	80052be <_raise_r+0x12>
 80052ee:	2400      	movs	r4, #0
 80052f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052f4:	4628      	mov	r0, r5
 80052f6:	4798      	blx	r3
 80052f8:	2000      	movs	r0, #0
 80052fa:	e7e0      	b.n	80052be <_raise_r+0x12>

080052fc <raise>:
 80052fc:	4b02      	ldr	r3, [pc, #8]	; (8005308 <raise+0xc>)
 80052fe:	4601      	mov	r1, r0
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	f7ff bfd3 	b.w	80052ac <_raise_r>
 8005306:	bf00      	nop
 8005308:	20000018 	.word	0x20000018

0800530c <_kill_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	; (800532c <_kill_r+0x20>)
 8005310:	2300      	movs	r3, #0
 8005312:	4604      	mov	r4, r0
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	602b      	str	r3, [r5, #0]
 800531a:	f7fb fda9 	bl	8000e70 <_kill>
 800531e:	1c43      	adds	r3, r0, #1
 8005320:	d102      	bne.n	8005328 <_kill_r+0x1c>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	b103      	cbz	r3, 8005328 <_kill_r+0x1c>
 8005326:	6023      	str	r3, [r4, #0]
 8005328:	bd38      	pop	{r3, r4, r5, pc}
 800532a:	bf00      	nop
 800532c:	20000560 	.word	0x20000560

08005330 <_getpid_r>:
 8005330:	f7fb bd96 	b.w	8000e60 <_getpid>

08005334 <__sread>:
 8005334:	b510      	push	{r4, lr}
 8005336:	460c      	mov	r4, r1
 8005338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800533c:	f000 f894 	bl	8005468 <_read_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	bfab      	itete	ge
 8005344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005346:	89a3      	ldrhlt	r3, [r4, #12]
 8005348:	181b      	addge	r3, r3, r0
 800534a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800534e:	bfac      	ite	ge
 8005350:	6563      	strge	r3, [r4, #84]	; 0x54
 8005352:	81a3      	strhlt	r3, [r4, #12]
 8005354:	bd10      	pop	{r4, pc}

08005356 <__swrite>:
 8005356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800535a:	461f      	mov	r7, r3
 800535c:	898b      	ldrh	r3, [r1, #12]
 800535e:	05db      	lsls	r3, r3, #23
 8005360:	4605      	mov	r5, r0
 8005362:	460c      	mov	r4, r1
 8005364:	4616      	mov	r6, r2
 8005366:	d505      	bpl.n	8005374 <__swrite+0x1e>
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	2302      	movs	r3, #2
 800536e:	2200      	movs	r2, #0
 8005370:	f000 f868 	bl	8005444 <_lseek_r>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	4632      	mov	r2, r6
 8005382:	463b      	mov	r3, r7
 8005384:	4628      	mov	r0, r5
 8005386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	f000 b817 	b.w	80053bc <_write_r>

0800538e <__sseek>:
 800538e:	b510      	push	{r4, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	f000 f855 	bl	8005444 <_lseek_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	bf15      	itete	ne
 80053a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053aa:	81a3      	strheq	r3, [r4, #12]
 80053ac:	bf18      	it	ne
 80053ae:	81a3      	strhne	r3, [r4, #12]
 80053b0:	bd10      	pop	{r4, pc}

080053b2 <__sclose>:
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 b813 	b.w	80053e0 <_close_r>
	...

080053bc <_write_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	; (80053dc <_write_r+0x20>)
 80053c0:	4604      	mov	r4, r0
 80053c2:	4608      	mov	r0, r1
 80053c4:	4611      	mov	r1, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	602a      	str	r2, [r5, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7fb fd87 	bl	8000ede <_write>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_write_r+0x1e>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_write_r+0x1e>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	20000560 	.word	0x20000560

080053e0 <_close_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d06      	ldr	r5, [pc, #24]	; (80053fc <_close_r+0x1c>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb fd93 	bl	8000f16 <_close>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_close_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_close_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000560 	.word	0x20000560

08005400 <_fstat_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d07      	ldr	r5, [pc, #28]	; (8005420 <_fstat_r+0x20>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	f7fb fd8e 	bl	8000f2e <_fstat>
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d102      	bne.n	800541c <_fstat_r+0x1c>
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	b103      	cbz	r3, 800541c <_fstat_r+0x1c>
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	bd38      	pop	{r3, r4, r5, pc}
 800541e:	bf00      	nop
 8005420:	20000560 	.word	0x20000560

08005424 <_isatty_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4d06      	ldr	r5, [pc, #24]	; (8005440 <_isatty_r+0x1c>)
 8005428:	2300      	movs	r3, #0
 800542a:	4604      	mov	r4, r0
 800542c:	4608      	mov	r0, r1
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	f7fb fd8d 	bl	8000f4e <_isatty>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d102      	bne.n	800543e <_isatty_r+0x1a>
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	b103      	cbz	r3, 800543e <_isatty_r+0x1a>
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	bd38      	pop	{r3, r4, r5, pc}
 8005440:	20000560 	.word	0x20000560

08005444 <_lseek_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_lseek_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fb fd86 	bl	8000f64 <_lseek>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_lseek_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_lseek_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000560 	.word	0x20000560

08005468 <_read_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d07      	ldr	r5, [pc, #28]	; (8005488 <_read_r+0x20>)
 800546c:	4604      	mov	r4, r0
 800546e:	4608      	mov	r0, r1
 8005470:	4611      	mov	r1, r2
 8005472:	2200      	movs	r2, #0
 8005474:	602a      	str	r2, [r5, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	f7fb fd14 	bl	8000ea4 <_read>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_read_r+0x1e>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_read_r+0x1e>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20000560 	.word	0x20000560

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr


Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e0  080050e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000074  0800515c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  0800515c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001071e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a7  00000000  00000000  000307c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001534e  00000000  00000000  00034298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001029b  00000000  00000000  000495e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864b1  00000000  00000000  00059881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfd32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000dfd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005048 	.word	0x08005048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005048 	.word	0x08005048

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fc87 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f855 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 f97b 	bl	8000578 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000282:	f000 f8a9 	bl	80003d8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000286:	f000 f93f 	bl	8000508 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800028a:	f000 f915 	bl	80004b8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028e:	481e      	ldr	r0, [pc, #120]	; (8000308 <main+0x98>)
 8000290:	f002 fb7e 	bl	8002990 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000294:	481d      	ldr	r0, [pc, #116]	; (800030c <main+0x9c>)
 8000296:	f002 fb7b 	bl	8002990 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800029a:	2100      	movs	r1, #0
 800029c:	481a      	ldr	r0, [pc, #104]	; (8000308 <main+0x98>)
 800029e:	f002 fc25 	bl	8002aec <HAL_TIM_IC_Start_IT>
  int f_test = 40000;
 80002a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80002a6:	607b      	str	r3, [r7, #4]
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a8:	4b18      	ldr	r3, [pc, #96]	; (800030c <main+0x9c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <main+0xa0>)
 80002b2:	801a      	strh	r2, [r3, #0]
//		  }
	  }
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);

	  HAL_Delay(1000);
 80002b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b8:	f000 fccc 	bl	8000c54 <HAL_Delay>
	  if(Frequency < 10000)
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <main+0xa4>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d80c      	bhi.n	80002e2 <main+0x72>
	  {
		  start();
 80002c8:	f000 fab6 	bl	8000838 <start>
		  if(ALLUME_LED == 1)
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <main+0xa8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d106      	bne.n	80002e2 <main+0x72>
		  {
			  ALLUME_LED = 0;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <main+0xa8>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80002da:	2108      	movs	r1, #8
 80002dc:	480f      	ldr	r0, [pc, #60]	; (800031c <main+0xac>)
 80002de:	f000 ffef 	bl	80012c0 <HAL_GPIO_TogglePin>
	  UART_SendNumber(timer_val);
	  HAL_Delay(1000);
	  UART_SendText("\r\n");
	  */

	  UART_SendText("Frequency ");
 80002e2:	480f      	ldr	r0, [pc, #60]	; (8000320 <main+0xb0>)
 80002e4:	f000 f9ba 	bl	800065c <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <main+0xa4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f9db 	bl	80006a8 <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002f2:	480c      	ldr	r0, [pc, #48]	; (8000324 <main+0xb4>)
 80002f4:	f000 f9b2 	bl	800065c <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002fc:	f000 fcaa 	bl	8000c54 <HAL_Delay>
	  Frequency = 0;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <main+0xa4>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 8000306:	e7d5      	b.n	80002b4 <main+0x44>
 8000308:	200000dc 	.word	0x200000dc
 800030c:	200001ac 	.word	0x200001ac
 8000310:	200000ac 	.word	0x200000ac
 8000314:	2000009c 	.word	0x2000009c
 8000318:	200000a8 	.word	0x200000a8
 800031c:	48000400 	.word	0x48000400
 8000320:	08005060 	.word	0x08005060
 8000324:	0800506c 	.word	0x0800506c

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b09c      	sub	sp, #112	; 0x70
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000332:	2228      	movs	r2, #40	; 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f004 fa50 	bl	80047dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2230      	movs	r2, #48	; 0x30
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fa42 	bl	80047dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000358:	2302      	movs	r3, #2
 800035a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	2301      	movs	r3, #1
 800035e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000360:	2310      	movs	r3, #16
 8000362:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000364:	2300      	movs	r3, #0
 8000366:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800036c:	4618      	mov	r0, r3
 800036e:	f000 ffc1 	bl	80012f4 <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000378:	f000 fa86 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
 800037e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000380:	2300      	movs	r3, #0
 8000382:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000390:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f001 feb4 	bl	8002104 <HAL_RCC_ClockConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003a2:	f000 fa71 	bl	8000888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80003a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003ac:	2300      	movs	r3, #0
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4618      	mov	r0, r3
 80003b4:	f002 f910 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003be:	f000 fa63 	bl	8000888 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003c8:	2000      	movs	r0, #0
 80003ca:	f002 f817 	bl	80023fc <HAL_RCC_MCOConfig>
}
 80003ce:	bf00      	nop
 80003d0:	3770      	adds	r7, #112	; 0x70
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08c      	sub	sp, #48	; 0x30
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003de:	f107 0320 	add.w	r3, r7, #32
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 0314 	add.w	r3, r7, #20
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <MX_TIM2_Init+0xdc>)
 8000406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <MX_TIM2_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800041a:	f04f 32ff 	mov.w	r2, #4294967295
 800041e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_TIM2_Init+0xdc>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MX_TIM2_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042c:	4821      	ldr	r0, [pc, #132]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800042e:	f002 fa57 	bl	80028e0 <HAL_TIM_Base_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000438:	f000 fa26 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000440:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000442:	f107 0320 	add.w	r3, r7, #32
 8000446:	4619      	mov	r1, r3
 8000448:	481a      	ldr	r0, [pc, #104]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800044a:	f002 fe38 	bl	80030be <HAL_TIM_ConfigClockSource>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000454:	f000 fa18 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000458:	4816      	ldr	r0, [pc, #88]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800045a:	f002 fae5 	bl	8002a28 <HAL_TIM_IC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000464:	f000 fa10 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000468:	2300      	movs	r3, #0
 800046a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	480f      	ldr	r0, [pc, #60]	; (80004b4 <MX_TIM2_Init+0xdc>)
 8000478:	f003 f990 	bl	800379c <HAL_TIMEx_MasterConfigSynchronization>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000482:	f000 fa01 	bl	8000888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000486:	2300      	movs	r3, #0
 8000488:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800048a:	2301      	movs	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2200      	movs	r2, #0
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM2_Init+0xdc>)
 800049e:	f002 fd72 	bl	8002f86 <HAL_TIM_IC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004a8:	f000 f9ee 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3730      	adds	r7, #48	; 0x30
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000dc 	.word	0x200000dc

080004b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_TIM16_Init+0x48>)
 80004be:	4a11      	ldr	r2, [pc, #68]	; (8000504 <MX_TIM16_Init+0x4c>)
 80004c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_TIM16_Init+0x48>)
 80004c4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_TIM16_Init+0x48>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004d0:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_TIM16_Init+0x48>)
 80004d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_TIM16_Init+0x48>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_TIM16_Init+0x48>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_TIM16_Init+0x48>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_TIM16_Init+0x48>)
 80004ec:	f002 f9f8 	bl	80028e0 <HAL_TIM_Base_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004f6:	f000 f9c7 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200001ac 	.word	0x200001ac
 8000504:	40014400 	.word	0x40014400

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_USART2_UART_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	; (8000570 <MX_USART2_UART_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b16      	ldr	r3, [pc, #88]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_USART2_UART_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_USART2_UART_Init+0x64>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_USART2_UART_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_USART2_UART_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054a:	4808      	ldr	r0, [pc, #32]	; (800056c <MX_USART2_UART_Init+0x64>)
 800054c:	f003 f9aa 	bl	80038a4 <HAL_UART_Init>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000556:	f000 f997 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART2_UART_Init+0x6c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a05      	ldr	r2, [pc, #20]	; (8000574 <MX_USART2_UART_Init+0x6c>)
 8000560:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000564:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000128 	.word	0x20000128
 8000570:	40004400 	.word	0x40004400
 8000574:	40013800 	.word	0x40013800

08000578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b31      	ldr	r3, [pc, #196]	; (8000654 <MX_GPIO_Init+0xdc>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a30      	ldr	r2, [pc, #192]	; (8000654 <MX_GPIO_Init+0xdc>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <MX_GPIO_Init+0xdc>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b22      	ldr	r3, [pc, #136]	; (8000654 <MX_GPIO_Init+0xdc>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	21c0      	movs	r1, #192	; 0xc0
 80005da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005de:	f000 fe57 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210b      	movs	r1, #11
 80005e6:	481c      	ldr	r0, [pc, #112]	; (8000658 <MX_GPIO_Init+0xe0>)
 80005e8:	f000 fe52 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005ec:	23c0      	movs	r3, #192	; 0xc0
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 fcd1 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 800060a:	230b      	movs	r3, #11
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_GPIO_Init+0xe0>)
 8000622:	f000 fcc3 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f000 fcb1 	bl	8000fac <HAL_GPIO_Init>

}
 800064a:	bf00      	nop
 800064c:	3720      	adds	r7, #32
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 800066c:	e005      	b.n	800067a <UART_SendText+0x1e>
	{
		size++;
 800066e:	89bb      	ldrh	r3, [r7, #12]
 8000670:	3301      	adds	r3, #1
 8000672:	81bb      	strh	r3, [r7, #12]
		i++;
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	3301      	adds	r3, #1
 8000678:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 800067a:	89fb      	ldrh	r3, [r7, #14]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f2      	bne.n	800066e <UART_SendText+0x12>
	}
	size++; // '\0'
 8000688:	89bb      	ldrh	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 800068e:	89ba      	ldrh	r2, [r7, #12]
 8000690:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000694:	6879      	ldr	r1, [r7, #4]
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <UART_SendText+0x48>)
 8000698:	f003 f952 	bl	8003940 <HAL_UART_Transmit>
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000128 	.word	0x20000128

080006a8 <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4906      	ldr	r1, [pc, #24]	; (80006d0 <UART_SendNumber+0x28>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 f897 	bl	80047ec <siprintf>
	UART_SendText(temp);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffca 	bl	800065c <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006c8:	bf00      	nop
 80006ca:	3770      	adds	r7, #112	; 0x70
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	08005070 	.word	0x08005070

080006d4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4a4a      	ldr	r2, [pc, #296]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	f040 808d 	bne.w	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7f1b      	ldrb	r3, [r3, #28]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	f040 8088 	bne.w	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <HAL_TIM_IC_CaptureCallback+0x138>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10a      	bne.n	800070e <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80006f8:	2100      	movs	r1, #0
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f002 fda8 	bl	8003250 <HAL_TIM_ReadCapturedValue>
 8000700:	4603      	mov	r3, r0
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000704:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 8000706:	4b41      	ldr	r3, [pc, #260]	; (800080c <HAL_TIM_IC_CaptureCallback+0x138>)
 8000708:	2201      	movs	r2, #1
 800070a:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 800070c:	e078      	b.n	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 800070e:	4b3f      	ldr	r3, [pc, #252]	; (800080c <HAL_TIM_IC_CaptureCallback+0x138>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d074      	beq.n	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000716:	2100      	movs	r1, #0
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f002 fd99 	bl	8003250 <HAL_TIM_ReadCapturedValue>
 800071e:	4603      	mov	r3, r0
 8000720:	4a3c      	ldr	r2, [pc, #240]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000722:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 8000724:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b39      	ldr	r3, [pc, #228]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d907      	bls.n	8000740 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b36      	ldr	r3, [pc, #216]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	4a37      	ldr	r2, [pc, #220]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x144>)
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e011      	b.n	8000764 <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000740:	4b34      	ldr	r3, [pc, #208]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d209      	bcs.n	8000760 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 800074c:	4b31      	ldr	r3, [pc, #196]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x140>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x144>)
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	e001      	b.n	8000764 <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000760:	f000 f892 	bl	8000888 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 8000764:	f001 fef4 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8000768:	4602      	mov	r2, r0
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x144>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <HAL_TIM_IC_CaptureCallback+0x148>)
 8000774:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <HAL_TIM_IC_CaptureCallback+0x138>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 800077c:	4b28      	ldr	r3, [pc, #160]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000782:	4a28      	ldr	r2, [pc, #160]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000784:	8812      	ldrh	r2, [r2, #0]
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800078c:	d338      	bcc.n	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a24      	ldr	r2, [pc, #144]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000796:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b20      	ldr	r3, [pc, #128]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x150>)
 80007a2:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <HAL_TIM_IC_CaptureCallback+0x148>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d827      	bhi.n	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <HAL_TIM_IC_CaptureCallback+0x158>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d106      	bne.n	80007c6 <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <HAL_TIM_IC_CaptureCallback+0x158>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007be:	2108      	movs	r1, #8
 80007c0:	481b      	ldr	r0, [pc, #108]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007c2:	f000 fd7d 	bl	80012c0 <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d118      	bne.n	8000800 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 fd58 	bl	8001290 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4812      	ldr	r0, [pc, #72]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007e6:	f000 fd53 	bl	8001290 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fd4d 	bl	8001290 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2101      	movs	r1, #1
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007fc:	f000 fd48 	bl	8001290 <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200000dc 	.word	0x200000dc
 800080c:	200000a4 	.word	0x200000a4
 8000810:	20000090 	.word	0x20000090
 8000814:	20000094 	.word	0x20000094
 8000818:	20000098 	.word	0x20000098
 800081c:	2000009c 	.word	0x2000009c
 8000820:	200001ac 	.word	0x200001ac
 8000824:	200000ac 	.word	0x200000ac
 8000828:	200000a0 	.word	0x200000a0
 800082c:	200000a8 	.word	0x200000a8
 8000830:	48000400 	.word	0x48000400
 8000834:	20000000 	.word	0x20000000

08000838 <start>:

void start()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	  if(ALLUME_START == 1)
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <start+0x48>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d11a      	bne.n	800087a <start+0x42>
	  {
		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 fd39 	bl	80012c0 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800084e:	20c8      	movs	r0, #200	; 0xc8
 8000850:	f000 fa00 	bl	8000c54 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000854:	2102      	movs	r1, #2
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <start+0x4c>)
 8000858:	f000 fd32 	bl	80012c0 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f000 f9f9 	bl	8000c54 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 fd2a 	bl	80012c0 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800086c:	20c8      	movs	r0, #200	; 0xc8
 800086e:	f000 f9f1 	bl	8000c54 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000872:	2101      	movs	r1, #1
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <start+0x4c>)
 8000876:	f000 fd23 	bl	80012c0 <HAL_GPIO_TogglePin>
	  }

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000
 8000884:	48000400 	.word	0x48000400

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x44>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <HAL_MspInit+0x44>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <HAL_MspInit+0x44>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x44>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x44>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x44>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008fc:	d131      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092e:	2301      	movs	r3, #1
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f000 fb2e 	bl	8000fac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	201c      	movs	r0, #28
 8000956:	f000 fa7c 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800095a:	201c      	movs	r0, #28
 800095c:	f000 fa95 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000960:	e010      	b.n	8000984 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_TIM_Base_MspInit+0xb4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d10b      	bne.n	8000984 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 8000972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_TIM_Base_MspInit+0xb0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	40014400 	.word	0x40014400

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <HAL_UART_MspInit+0x8c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d130      	bne.n	8000a18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <HAL_UART_MspInit+0x90>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009e6:	230c      	movs	r3, #12
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f000 fad2 	bl	8000fac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2026      	movs	r0, #38	; 0x26
 8000a0e:	f000 fa20 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a12:	2026      	movs	r0, #38	; 0x26
 8000a14:	f000 fa39 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 f8ce 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <TIM2_IRQHandler+0x10>)
 8000a82:	f002 f961 	bl	8002d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000dc 	.word	0x200000dc

08000a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <USART2_IRQHandler+0x10>)
 8000a96:	f002 ffe7 	bl	8003a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000128 	.word	0x20000128

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f003 fe58 	bl	8004788 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20004000 	.word	0x20004000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000b0 	.word	0x200000b0
 8000b0c:	20000210 	.word	0x20000210

08000b10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3a:	490e      	ldr	r1, [pc, #56]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b40:	e002      	b.n	8000b48 <LoopCopyDataInit>

08000b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b46:	3304      	adds	r3, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b4c:	d3f9      	bcc.n	8000b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b50:	4c0b      	ldr	r4, [pc, #44]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b54:	e001      	b.n	8000b5a <LoopFillZerobss>

08000b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b58:	3204      	adds	r2, #4

08000b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b5c:	d3fb      	bcc.n	8000b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5e:	f7ff ffd7 	bl	8000b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 fe17 	bl	8004794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fb83 	bl	8000270 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b6c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b78:	080050e8 	.word	0x080050e8
  ldr r2, =_sbss
 8000b7c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b80:	2000020c 	.word	0x2000020c

08000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f94f 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	200f      	movs	r0, #15
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe76 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f967 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f92f 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	2000000c 	.word	0x2000000c
 8000c38:	200001f8 	.word	0x200001f8

08000c3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200001f8 	.word	0x200001f8

08000c54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000000c 	.word	0x2000000c

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	; (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff3e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff31 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d008      	beq.n	8000ee2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e020      	b.n	8000f24 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 020e 	bic.w	r2, r2, #14
 8000ef0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d005      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e027      	b.n	8000fa2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 020e 	bic.w	r2, r2, #14
 8000f60:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	4798      	blx	r3
    } 
  }
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fba:	e14e      	b.n	800125a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f000 8140 	beq.w	8001254 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d005      	beq.n	8000fec <HAL_GPIO_Init+0x40>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b03      	cmp	r3, #3
 8001058:	d017      	beq.n	800108a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d123      	bne.n	80010de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	6939      	ldr	r1, [r7, #16]
 80010da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	2203      	movs	r2, #3
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0203 	and.w	r2, r3, #3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 809a 	beq.w	8001254 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001120:	4b55      	ldr	r3, [pc, #340]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a54      	ldr	r2, [pc, #336]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x2cc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a50      	ldr	r2, [pc, #320]	; (800127c <HAL_GPIO_Init+0x2d0>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d013      	beq.n	800118c <HAL_GPIO_Init+0x1e0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a46      	ldr	r2, [pc, #280]	; (8001280 <HAL_GPIO_Init+0x2d4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00d      	beq.n	8001188 <HAL_GPIO_Init+0x1dc>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a45      	ldr	r2, [pc, #276]	; (8001284 <HAL_GPIO_Init+0x2d8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <HAL_GPIO_Init+0x1d8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a44      	ldr	r2, [pc, #272]	; (8001288 <HAL_GPIO_Init+0x2dc>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d101      	bne.n	8001180 <HAL_GPIO_Init+0x1d4>
 800117c:	2303      	movs	r3, #3
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001180:	2305      	movs	r3, #5
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1e2>
 800118c:	2300      	movs	r3, #0
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800119e:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x2d0>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011d0:	4a2e      	ldr	r2, [pc, #184]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011fa:	4a24      	ldr	r2, [pc, #144]	; (800128c <HAL_GPIO_Init+0x2e0>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_GPIO_Init+0x2e0>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800124e:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_GPIO_Init+0x2e0>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f aea9 	bne.w	8000fbc <HAL_GPIO_Init+0x10>
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ac:	e002      	b.n	80012b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4013      	ands	r3, r2
 80012d8:	041a      	lsls	r2, r3, #16
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43d9      	mvns	r1, r3
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	400b      	ands	r3, r1
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f000 bef4 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 816a 	beq.w	80015f2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800131e:	4bb3      	ldr	r3, [pc, #716]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b04      	cmp	r3, #4
 8001328:	d00c      	beq.n	8001344 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800132a:	4bb0      	ldr	r3, [pc, #704]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b08      	cmp	r3, #8
 8001334:	d159      	bne.n	80013ea <HAL_RCC_OscConfig+0xf6>
 8001336:	4bad      	ldr	r3, [pc, #692]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001342:	d152      	bne.n	80013ea <HAL_RCC_OscConfig+0xf6>
 8001344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001348:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001358:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x82>
 8001370:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0xae>
 8001376:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800137a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800138a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001392:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800139e:	4b93      	ldr	r3, [pc, #588]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013aa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013ae:	fa92 f2a2 	rbit	r2, r2
 80013b2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013b6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013ba:	fab2 f282 	clz	r2, r2
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f042 0220 	orr.w	r2, r2, #32
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f002 021f 	and.w	r2, r2, #31
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 810c 	beq.w	80015f0 <HAL_RCC_OscConfig+0x2fc>
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8106 	bne.w	80015f0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f000 be86 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d106      	bne.n	8001404 <HAL_RCC_OscConfig+0x110>
 80013f6:	4b7d      	ldr	r3, [pc, #500]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7c      	ldr	r2, [pc, #496]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e030      	b.n	8001466 <HAL_RCC_OscConfig+0x172>
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x134>
 800140e:	4b77      	ldr	r3, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a76      	ldr	r2, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b74      	ldr	r3, [pc, #464]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a73      	ldr	r2, [pc, #460]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01e      	b.n	8001466 <HAL_RCC_OscConfig+0x172>
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001432:	d10c      	bne.n	800144e <HAL_RCC_OscConfig+0x15a>
 8001434:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6c      	ldr	r2, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 800143a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e00b      	b.n	8001466 <HAL_RCC_OscConfig+0x172>
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a66      	ldr	r2, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b64      	ldr	r3, [pc, #400]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a63      	ldr	r2, [pc, #396]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001466:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f023 020f 	bic.w	r2, r3, #15
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	495d      	ldr	r1, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001476:	4313      	orrs	r3, r2
 8001478:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d059      	beq.n	8001538 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fbda 	bl	8000c3c <HAL_GetTick>
 8001488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800148e:	f7ff fbd5 	bl	8000c3c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d902      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	f000 be29 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
 80014a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014b0:	fa93 f3a3 	rbit	r3, r3
 80014b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <HAL_RCC_OscConfig+0x1e2>
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0x20e>
 80014d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001506:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800150a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800150e:	fa92 f2a2 	rbit	r2, r2
 8001512:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001516:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800151a:	fab2 f282 	clz	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f042 0220 	orr.w	r2, r2, #32
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ab      	beq.n	800148e <HAL_RCC_OscConfig+0x19a>
 8001536:	e05c      	b.n	80015f2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb80 	bl	8000c3c <HAL_GetTick>
 800153c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001540:	e00a      	b.n	8001558 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001542:	f7ff fb7b 	bl	8000c3c <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d902      	bls.n	8001558 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	f000 bdcf 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001560:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001564:	fa93 f3a3 	rbit	r3, r3
 8001568:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800156c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d102      	bne.n	800158a <HAL_RCC_OscConfig+0x296>
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	e015      	b.n	80015b6 <HAL_RCC_OscConfig+0x2c2>
 800158a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001596:	fa93 f3a3 	rbit	r3, r3
 800159a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800159e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_RCC_OscConfig+0x2f8>)
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015c2:	fa92 f2a2 	rbit	r2, r2
 80015c6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015ce:	fab2 f282 	clz	r2, r2
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f002 021f 	and.w	r2, r2, #31
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f202 	lsl.w	r2, r1, r2
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ab      	bne.n	8001542 <HAL_RCC_OscConfig+0x24e>
 80015ea:	e002      	b.n	80015f2 <HAL_RCC_OscConfig+0x2fe>
 80015ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 816f 	beq.w	80018e0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001602:	4bd0      	ldr	r3, [pc, #832]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800160e:	4bcd      	ldr	r3, [pc, #820]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b08      	cmp	r3, #8
 8001618:	d16c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x400>
 800161a:	4bca      	ldr	r3, [pc, #808]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d166      	bne.n	80016f4 <HAL_RCC_OscConfig+0x400>
 8001626:	2302      	movs	r3, #2
 8001628:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001638:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <HAL_RCC_OscConfig+0x362>
 8001650:	4bbc      	ldr	r3, [pc, #752]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	e013      	b.n	800167e <HAL_RCC_OscConfig+0x38a>
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001668:	2302      	movs	r3, #2
 800166a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800166e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001672:	fa93 f3a3 	rbit	r3, r3
 8001676:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800167a:	4bb2      	ldr	r3, [pc, #712]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2202      	movs	r2, #2
 8001680:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001684:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001688:	fa92 f2a2 	rbit	r2, r2
 800168c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001690:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001694:	fab2 f282 	clz	r2, r2
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f042 0220 	orr.w	r2, r2, #32
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	f002 021f 	and.w	r2, r2, #31
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d002      	beq.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f000 bd1b 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	21f8      	movs	r1, #248	; 0xf8
 80016d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016d8:	fa91 f1a1 	rbit	r1, r1
 80016dc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016e0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016e4:	fab1 f181 	clz	r1, r1
 80016e8:	b2c9      	uxtb	r1, r1
 80016ea:	408b      	lsls	r3, r1
 80016ec:	4995      	ldr	r1, [pc, #596]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	e0f5      	b.n	80018e0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 8085 	beq.w	800180a <HAL_RCC_OscConfig+0x516>
 8001700:	2301      	movs	r3, #1
 8001702:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001706:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001712:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	461a      	mov	r2, r3
 8001728:	2301      	movs	r3, #1
 800172a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa86 	bl	8000c3c <HAL_GetTick>
 8001730:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fa81 	bl	8000c3c <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d902      	bls.n	800174c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	f000 bcd5 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001752:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001756:	fa93 f3a3 	rbit	r3, r3
 800175a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800175e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	095b      	lsrs	r3, r3, #5
 800176a:	b2db      	uxtb	r3, r3
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d102      	bne.n	800177c <HAL_RCC_OscConfig+0x488>
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e013      	b.n	80017a4 <HAL_RCC_OscConfig+0x4b0>
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001794:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	2202      	movs	r2, #2
 80017a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017ae:	fa92 f2a2 	rbit	r2, r2
 80017b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017ba:	fab2 f282 	clz	r2, r2
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	f042 0220 	orr.w	r2, r2, #32
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	f002 021f 	and.w	r2, r2, #31
 80017ca:	2101      	movs	r1, #1
 80017cc:	fa01 f202 	lsl.w	r2, r1, r2
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0af      	beq.n	8001736 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	21f8      	movs	r1, #248	; 0xf8
 80017e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017ee:	fa91 f1a1 	rbit	r1, r1
 80017f2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80017f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80017fa:	fab1 f181 	clz	r1, r1
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	408b      	lsls	r3, r1
 8001802:	4950      	ldr	r1, [pc, #320]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e06a      	b.n	80018e0 <HAL_RCC_OscConfig+0x5ec>
 800180a:	2301      	movs	r3, #1
 800180c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800181c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800182a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	461a      	mov	r2, r3
 8001832:	2300      	movs	r3, #0
 8001834:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fa01 	bl	8000c3c <HAL_GetTick>
 800183a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff f9fc 	bl	8000c3c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d902      	bls.n	8001856 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	f000 bc50 	b.w	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001856:	2302      	movs	r3, #2
 8001858:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x592>
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e013      	b.n	80018ae <HAL_RCC_OscConfig+0x5ba>
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800189e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <HAL_RCC_OscConfig+0x650>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	2202      	movs	r2, #2
 80018b0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018b8:	fa92 f2a2 	rbit	r2, r2
 80018bc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f042 0220 	orr.w	r2, r2, #32
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f002 021f 	and.w	r2, r2, #31
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1af      	bne.n	8001840 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80da 	beq.w	8001aa4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d069      	beq.n	80019ce <HAL_RCC_OscConfig+0x6da>
 80018fa:	2301      	movs	r3, #1
 80018fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800190c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x654>)
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	461a      	mov	r2, r3
 8001920:	2301      	movs	r3, #1
 8001922:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001924:	f7ff f98a 	bl	8000c3c <HAL_GetTick>
 8001928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192c:	e00e      	b.n	800194c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff f985 	bl	8000c3c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d906      	bls.n	800194c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e3d9      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	10908120 	.word	0x10908120
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800195e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800198c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	4ba5      	ldr	r3, [pc, #660]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001996:	2102      	movs	r1, #2
 8001998:	6019      	str	r1, [r3, #0]
 800199a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fa93 f1a3 	rbit	r1, r3
 80019a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019a8:	6019      	str	r1, [r3, #0]
  return result;
 80019aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0b0      	beq.n	800192e <HAL_RCC_OscConfig+0x63a>
 80019cc:	e06a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x7b0>
 80019ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019e4:	601a      	str	r2, [r3, #0]
  return result;
 80019e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019ea:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x934>)
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	461a      	mov	r2, r3
 80019fc:	2300      	movs	r3, #0
 80019fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff f91c 	bl	8000c3c <HAL_GetTick>
 8001a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	e009      	b.n	8001a1e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f917 	bl	8000c3c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e36b      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001a1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a66:	4b6f      	ldr	r3, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a6e:	2102      	movs	r1, #2
 8001a70:	6019      	str	r1, [r3, #0]
 8001a72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	fa93 f1a3 	rbit	r1, r3
 8001a7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a80:	6019      	str	r1, [r3, #0]
  return result;
 8001a82:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 031f 	and.w	r3, r3, #31
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1b2      	bne.n	8001a0a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8158 	beq.w	8001d64 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d112      	bne.n	8001aec <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_RCC_OscConfig+0x938>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11a      	bne.n	8001b2e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_RCC_OscConfig+0x938>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a4b      	ldr	r2, [pc, #300]	; (8001c2c <HAL_RCC_OscConfig+0x938>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b04:	f7ff f89a 	bl	8000c3c <HAL_GetTick>
 8001b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff f895 	bl	8000c3c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e2e9      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_RCC_OscConfig+0x938>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ef      	beq.n	8001b0e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x852>
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e02f      	b.n	8001ba6 <HAL_RCC_OscConfig+0x8b2>
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x876>
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a33      	ldr	r2, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e01d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x8b2>
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d10c      	bne.n	8001b8e <HAL_RCC_OscConfig+0x89a>
 8001b74:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a27      	ldr	r2, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	e00b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x8b2>
 8001b8e:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d06b      	beq.n	8001c88 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f844 	bl	8000c3c <HAL_GetTick>
 8001bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7ff f83f 	bl	8000c3c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e291      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001bd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bee:	2202      	movs	r2, #2
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	fa93 f2a3 	rbit	r2, r3
 8001bfc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c00:	601a      	str	r2, [r3, #0]
  return result;
 8001c02:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f043 0302 	orr.w	r3, r3, #2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_OscConfig+0x93c>
 8001c1c:	4b01      	ldr	r3, [pc, #4]	; (8001c24 <HAL_RCC_OscConfig+0x930>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x958>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	10908120 	.word	0x10908120
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c34:	2202      	movs	r2, #2
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	4bbb      	ldr	r3, [pc, #748]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c50:	2102      	movs	r1, #2
 8001c52:	6011      	str	r1, [r2, #0]
 8001c54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	fa92 f1a2 	rbit	r1, r2
 8001c5e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c62:	6011      	str	r1, [r2, #0]
  return result;
 8001c64:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fab2 f282 	clz	r2, r2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	f002 021f 	and.w	r2, r2, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d099      	beq.n	8001bba <HAL_RCC_OscConfig+0x8c6>
 8001c86:	e063      	b.n	8001d50 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c88:	f7fe ffd8 	bl	8000c3c <HAL_GetTick>
 8001c8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c90:	e00b      	b.n	8001caa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f7fe ffd3 	bl	8000c3c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e225      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001caa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cae:	2202      	movs	r2, #2
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	fa93 f2a3 	rbit	r2, r3
 8001cd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cd8:	601a      	str	r2, [r3, #0]
  return result;
 8001cda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cde:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d102      	bne.n	8001cfa <HAL_RCC_OscConfig+0xa06>
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	e00d      	b.n	8001d16 <HAL_RCC_OscConfig+0xa22>
 8001cfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001cfe:	2202      	movs	r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4b89      	ldr	r3, [pc, #548]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	6011      	str	r1, [r2, #0]
 8001d1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d2c:	6011      	str	r1, [r2, #0]
  return result;
 8001d2e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1a0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d105      	bne.n	8001d64 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d58:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	4a76      	ldr	r2, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 81c2 	beq.w	80020f4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	f000 819c 	beq.w	80020b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f040 8114 	bne.w	8001fb2 <HAL_RCC_OscConfig+0xcbe>
 8001d8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001da2:	601a      	str	r2, [r3, #0]
  return result;
 8001da4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001da8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ff3c 	bl	8000c3c <HAL_GetTick>
 8001dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	e009      	b.n	8001dde <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ff37 	bl	8000c3c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e18b      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001dde:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fa93 f2a3 	rbit	r2, r3
 8001df2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001df6:	601a      	str	r2, [r3, #0]
  return result;
 8001df8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dfc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfe:	fab3 f383 	clz	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_RCC_OscConfig+0xb24>
 8001e12:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	e01b      	b.n	8001e50 <HAL_RCC_OscConfig+0xb5c>
 8001e18:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e58:	6011      	str	r1, [r2, #0]
 8001e5a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e68:	6011      	str	r1, [r2, #0]
  return result;
 8001e6a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fab2 f282 	clz	r2, r2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	f042 0220 	orr.w	r2, r2, #32
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	f002 021f 	and.w	r2, r2, #31
 8001e80:	2101      	movs	r1, #1
 8001e82:	fa01 f202 	lsl.w	r2, r1, r2
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d19e      	bne.n	8001dca <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	4925      	ldr	r1, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fa93 f2a3 	rbit	r2, r3
 8001ebc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ec0:	601a      	str	r2, [r3, #0]
  return result;
 8001ec2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ec6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ed2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2301      	movs	r3, #1
 8001edc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe fead 	bl	8000c3c <HAL_GetTick>
 8001ee2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee6:	e009      	b.n	8001efc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7fe fea8 	bl	8000c3c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0fc      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8001efc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f14:	601a      	str	r2, [r3, #0]
  return result;
 8001f16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCC_OscConfig+0xc48>
 8001f30:	4b01      	ldr	r3, [pc, #4]	; (8001f38 <HAL_RCC_OscConfig+0xc44>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e01e      	b.n	8001f74 <HAL_RCC_OscConfig+0xc80>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0xe0c>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f7c:	6011      	str	r1, [r2, #0]
 8001f7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	fa92 f1a2 	rbit	r1, r2
 8001f88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f8c:	6011      	str	r1, [r2, #0]
  return result;
 8001f8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fab2 f282 	clz	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f002 021f 	and.w	r2, r2, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d09b      	beq.n	8001ee8 <HAL_RCC_OscConfig+0xbf4>
 8001fb0:	e0a0      	b.n	80020f4 <HAL_RCC_OscConfig+0xe00>
 8001fb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fca:	601a      	str	r2, [r3, #0]
  return result;
 8001fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fe28 	bl	8000c3c <HAL_GetTick>
 8001fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e009      	b.n	8002006 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fe23 	bl	8000c3c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e077      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
 8002006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800200e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	fa93 f2a3 	rbit	r2, r3
 800201a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201e:	601a      	str	r2, [r3, #0]
  return result;
 8002020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002024:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_RCC_OscConfig+0xd4c>
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_OscConfig+0xe0c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0xd84>
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002048:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	fa93 f2a3 	rbit	r2, r3
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f107 0318 	add.w	r3, r7, #24
 800205e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_RCC_OscConfig+0xe0c>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f107 0210 	add.w	r2, r7, #16
 800207c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	f107 0210 	add.w	r2, r7, #16
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f107 020c 	add.w	r2, r7, #12
 8002090:	6011      	str	r1, [r2, #0]
  return result;
 8002092:	f107 020c 	add.w	r2, r7, #12
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f042 0220 	orr.w	r2, r2, #32
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	f002 021f 	and.w	r2, r2, #31
 80020a8:	2101      	movs	r1, #1
 80020aa:	fa01 f202 	lsl.w	r2, r1, r2
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d19e      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xcfe>
 80020b4:	e01e      	b.n	80020f4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e018      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c4:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_RCC_OscConfig+0xe0c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d108      	bne.n	80020f0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000

08002104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b09e      	sub	sp, #120	; 0x78
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e162      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b90      	ldr	r3, [pc, #576]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b8d      	ldr	r3, [pc, #564]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	498b      	ldr	r1, [pc, #556]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e14a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b82      	ldr	r3, [pc, #520]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	497f      	ldr	r1, [pc, #508]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80dc 	beq.w	8002330 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d13c      	bne.n	80021fa <HAL_RCC_ClockConfig+0xf6>
 8002180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002184:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002188:	fa93 f3a3 	rbit	r3, r3
 800218c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800218e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_ClockConfig+0xa6>
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e00f      	b.n	80021ca <HAL_RCC_ClockConfig+0xc6>
 80021aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	667b      	str	r3, [r7, #100]	; 0x64
 80021b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021bc:	663b      	str	r3, [r7, #96]	; 0x60
 80021be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80021d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021d2:	fa92 f2a2 	rbit	r2, r2
 80021d6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f042 0220 	orr.w	r2, r2, #32
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f002 021f 	and.w	r2, r2, #31
 80021ea:	2101      	movs	r1, #1
 80021ec:	fa01 f202 	lsl.w	r2, r1, r2
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d17b      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0f3      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d13c      	bne.n	800227c <HAL_RCC_ClockConfig+0x178>
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_RCC_ClockConfig+0x128>
 8002226:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	e00f      	b.n	800224c <HAL_RCC_ClockConfig+0x148>
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	643b      	str	r3, [r7, #64]	; 0x40
 8002240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002242:	fa93 f3a3 	rbit	r3, r3
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	63ba      	str	r2, [r7, #56]	; 0x38
 8002252:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800225a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f042 0220 	orr.w	r2, r2, #32
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f002 021f 	and.w	r2, r2, #31
 800226c:	2101      	movs	r1, #1
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d13a      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b2      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
 800227c:	2302      	movs	r3, #2
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	fab3 f383 	clz	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x1a0>
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	e00d      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1bc>
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2202      	movs	r2, #2
 80022c2:	61ba      	str	r2, [r7, #24]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	617a      	str	r2, [r7, #20]
  return result;
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	fab2 f282 	clz	r2, r2
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	f042 0220 	orr.w	r2, r2, #32
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f002 021f 	and.w	r2, r2, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f202 	lsl.w	r2, r1, r2
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e079      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002300:	f7fe fc9c 	bl	8000c3c <HAL_GetTick>
 8002304:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe fc98 	bl	8000c3c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e061      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x260>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d214      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 0207 	bic.w	r2, r3, #7
 8002346:	4906      	ldr	r1, [pc, #24]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e040      	b.n	80023e2 <HAL_RCC_ClockConfig+0x2de>
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	491a      	ldr	r1, [pc, #104]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4912      	ldr	r1, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a6:	f000 f85d 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_RCC_ClockConfig+0x2e8>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b4:	22f0      	movs	r2, #240	; 0xf0
 80023b6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	fa92 f2a2 	rbit	r2, r2
 80023be:	60fa      	str	r2, [r7, #12]
  return result;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	fab2 f282 	clz	r2, r2
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	40d3      	lsrs	r3, r2
 80023ca:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x2ec>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	fa21 f303 	lsr.w	r3, r1, r3
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_RCC_ClockConfig+0x2f0>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <HAL_RCC_ClockConfig+0x2f4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fbea 	bl	8000bb4 <HAL_InitTick>
  
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3778      	adds	r7, #120	; 0x78
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08005074 	.word	0x08005074
 80023f4:	20000004 	.word	0x20000004
 80023f8:	20000008 	.word	0x20000008

080023fc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002418:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_MCOConfig+0x64>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <HAL_RCC_MCOConfig+0x64>)
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	6153      	str	r3, [r2, #20]
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_MCOConfig+0x64>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002440:	f7fe fdb4 	bl	8000fac <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_RCC_MCOConfig+0x64>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	430b      	orrs	r3, r1
 8002452:	4903      	ldr	r1, [pc, #12]	; (8002460 <HAL_RCC_MCOConfig+0x64>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e03c      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	623b      	str	r3, [r7, #32]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	607a      	str	r2, [r7, #4]
  return result;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	220f      	movs	r2, #15
 80024c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	60fa      	str	r2, [r7, #12]
  return result;
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	40d3      	lsrs	r3, r2
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	e004      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	623b      	str	r3, [r7, #32]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002510:	623b      	str	r3, [r7, #32]
      break;
 8002512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002514:	6a3b      	ldr	r3, [r7, #32]
}
 8002516:	4618      	mov	r0, r3
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	0800508c 	.word	0x0800508c
 8002530:	0800509c 	.word	0x0800509c
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002556:	f7ff ffef 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	603a      	str	r2, [r7, #0]
  return result;
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08005084 	.word	0x08005084

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800259a:	f7ff ffcd 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800259e:	4601      	mov	r1, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	fa92 f2a2 	rbit	r2, r2
 80025b4:	603a      	str	r2, [r7, #0]
  return result;
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	40d3      	lsrs	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08005084 	.word	0x08005084

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b092      	sub	sp, #72	; 0x48
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80d4 	beq.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10e      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a4a      	ldr	r2, [pc, #296]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	61d3      	str	r3, [r2, #28]
 8002614:	4b48      	ldr	r3, [pc, #288]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a41      	ldr	r2, [pc, #260]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe fafd 	bl	8000c3c <HAL_GetTick>
 8002642:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe faf9 	bl	8000c3c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e13c      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	4b38      	ldr	r3, [pc, #224]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8084 	beq.w	800277e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002680:	429a      	cmp	r2, r3
 8002682:	d07c      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800268e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	fa93 f3a3 	rbit	r3, r3
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	461a      	mov	r2, r3
 80026ae:	2301      	movs	r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	2300      	movs	r3, #0
 80026d4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d6:	4a18      	ldr	r2, [pc, #96]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04b      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe faa9 	bl	8000c3c <HAL_GetTick>
 80026ea:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ec:	e00a      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe faa5 	bl	8000c3c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0e6      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002704:	2302      	movs	r3, #2
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
 8002710:	2302      	movs	r3, #2
 8002712:	623b      	str	r3, [r7, #32]
 8002714:	6a3b      	ldr	r3, [r7, #32]
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	61fb      	str	r3, [r7, #28]
  return result;
 800271c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d108      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002732:	4b01      	ldr	r3, [pc, #4]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	e00d      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	10908100 	.word	0x10908100
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	4b62      	ldr	r3, [pc, #392]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2202      	movs	r2, #2
 8002756:	613a      	str	r2, [r7, #16]
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	fa92 f2a2 	rbit	r2, r2
 800275e:	60fa      	str	r2, [r7, #12]
  return result;
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	fab2 f282 	clz	r2, r2
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f002 021f 	and.w	r2, r2, #31
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0b7      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800277e:	4b57      	ldr	r3, [pc, #348]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4954      	ldr	r1, [pc, #336]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800278c:	4313      	orrs	r3, r2
 800278e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002790:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4947      	ldr	r1, [pc, #284]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f023 0210 	bic.w	r2, r3, #16
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4940      	ldr	r1, [pc, #256]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	f023 0220 	bic.w	r2, r3, #32
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4938      	ldr	r1, [pc, #224]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	4931      	ldr	r1, [pc, #196]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002818:	4313      	orrs	r3, r2
 800281a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4929      	ldr	r1, [pc, #164]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002846:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4922      	ldr	r1, [pc, #136]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002854:	4313      	orrs	r3, r2
 8002856:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	491a      	ldr	r1, [pc, #104]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002872:	4313      	orrs	r3, r2
 8002874:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	4913      	ldr	r1, [pc, #76]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002890:	4313      	orrs	r3, r2
 8002892:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	490b      	ldr	r1, [pc, #44]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	4904      	ldr	r1, [pc, #16]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3748      	adds	r7, #72	; 0x48
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e049      	b.n	8002986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd ffe8 	bl	80008dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 fd02 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e033      	b.n	8002a10 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_Base_Start+0x8c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_TIM_Base_Start+0x3e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d004      	beq.n	80029ce <HAL_TIM_Base_Start+0x3e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a15      	ldr	r2, [pc, #84]	; (8002a20 <HAL_TIM_Base_Start+0x90>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d115      	bne.n	80029fa <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_TIM_Base_Start+0x94>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	d015      	beq.n	8002a0c <HAL_TIM_Base_Start+0x7c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e6:	d011      	beq.n	8002a0c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f8:	e008      	b.n	8002a0c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e000      	b.n	8002a0e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40014000 	.word	0x40014000
 8002a24:	00010007 	.word	0x00010007

08002a28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e049      	b.n	8002ace <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f841 	bl	8002ad6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f000 fc5e 	bl	8003328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_IC_Start_IT+0x1e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e023      	b.n	8002b52 <HAL_TIM_IC_Start_IT+0x66>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start_IT+0x2e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e01b      	b.n	8002b52 <HAL_TIM_IC_Start_IT+0x66>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_IC_Start_IT+0x3e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e013      	b.n	8002b52 <HAL_TIM_IC_Start_IT+0x66>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Start_IT+0x4e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e00b      	b.n	8002b52 <HAL_TIM_IC_Start_IT+0x66>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d104      	bne.n	8002b4a <HAL_TIM_IC_Start_IT+0x5e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e003      	b.n	8002b52 <HAL_TIM_IC_Start_IT+0x66>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <HAL_TIM_IC_Start_IT+0x78>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e013      	b.n	8002b8c <HAL_TIM_IC_Start_IT+0xa0>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d104      	bne.n	8002b74 <HAL_TIM_IC_Start_IT+0x88>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	e00b      	b.n	8002b8c <HAL_TIM_IC_Start_IT+0xa0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d104      	bne.n	8002b84 <HAL_TIM_IC_Start_IT+0x98>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e003      	b.n	8002b8c <HAL_TIM_IC_Start_IT+0xa0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	7bbb      	ldrb	r3, [r7, #14]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d102      	bne.n	8002b9a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b94:	7b7b      	ldrb	r3, [r7, #13]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0c9      	b.n	8002d32 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_TIM_IC_Start_IT+0xc2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	e023      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x10a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d104      	bne.n	8002bbe <HAL_TIM_IC_Start_IT+0xd2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	e01b      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x10a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_IC_Start_IT+0xe2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bcc:	e013      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x10a>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b0c      	cmp	r3, #12
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_IC_Start_IT+0xf2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bdc:	e00b      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x10a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b10      	cmp	r3, #16
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_IC_Start_IT+0x102>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	e003      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x10a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_IC_Start_IT+0x11a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c04:	e013      	b.n	8002c2e <HAL_TIM_IC_Start_IT+0x142>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_IC_Start_IT+0x12a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c14:	e00b      	b.n	8002c2e <HAL_TIM_IC_Start_IT+0x142>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_IC_Start_IT+0x13a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c24:	e003      	b.n	8002c2e <HAL_TIM_IC_Start_IT+0x142>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d841      	bhi.n	8002cb8 <HAL_TIM_IC_Start_IT+0x1cc>
 8002c34:	a201      	add	r2, pc, #4	; (adr r2, 8002c3c <HAL_TIM_IC_Start_IT+0x150>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c71 	.word	0x08002c71
 8002c40:	08002cb9 	.word	0x08002cb9
 8002c44:	08002cb9 	.word	0x08002cb9
 8002c48:	08002cb9 	.word	0x08002cb9
 8002c4c:	08002c83 	.word	0x08002c83
 8002c50:	08002cb9 	.word	0x08002cb9
 8002c54:	08002cb9 	.word	0x08002cb9
 8002c58:	08002cb9 	.word	0x08002cb9
 8002c5c:	08002c95 	.word	0x08002c95
 8002c60:	08002cb9 	.word	0x08002cb9
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002cb9 	.word	0x08002cb9
 8002c6c:	08002ca7 	.word	0x08002ca7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0202 	orr.w	r2, r2, #2
 8002c7e:	60da      	str	r2, [r3, #12]
      break;
 8002c80:	e01d      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f042 0204 	orr.w	r2, r2, #4
 8002c90:	60da      	str	r2, [r3, #12]
      break;
 8002c92:	e014      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	60da      	str	r2, [r3, #12]
      break;
 8002ca4:	e00b      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0210 	orr.w	r2, r2, #16
 8002cb4:	60da      	str	r2, [r3, #12]
      break;
 8002cb6:	e002      	b.n	8002cbe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d135      	bne.n	8002d30 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	6839      	ldr	r1, [r7, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fd3f 	bl	8003750 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_TIM_IC_Start_IT+0x250>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_IC_Start_IT+0x204>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_IC_Start_IT+0x204>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <HAL_TIM_IC_Start_IT+0x254>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d115      	bne.n	8002d1c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <HAL_TIM_IC_Start_IT+0x258>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d015      	beq.n	8002d2e <HAL_TIM_IC_Start_IT+0x242>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d011      	beq.n	8002d2e <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0201 	orr.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e000      	b.n	8002d30 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014000 	.word	0x40014000
 8002d44:	00010007 	.word	0x00010007

08002d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0202 	mvn.w	r2, #2
 8002d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fca2 	bl	80006d4 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 faaa 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fab1 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0204 	mvn.w	r2, #4
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fc78 	bl	80006d4 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa80 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fa87 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0208 	mvn.w	r2, #8
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fc4e 	bl	80006d4 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa56 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa5d 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2208      	movs	r2, #8
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fc24 	bl	80006d4 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa2c 	bl	80032ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fa33 	bl	8003300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0201 	mvn.w	r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa06 	bl	80032d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fcc2 	bl	800387c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d10e      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fcb5 	bl	8003890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d10e      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f9e1 	bl	8003314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d10e      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d107      	bne.n	8002f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f06f 0220 	mvn.w	r2, #32
 8002f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fc75 	bl	8003868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e088      	b.n	80030b6 <HAL_TIM_IC_ConfigChannel+0x130>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11b      	bne.n	8002fea <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6819      	ldr	r1, [r3, #0]
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f000 fa1f 	bl	8003404 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699a      	ldr	r2, [r3, #24]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 020c 	bic.w	r2, r2, #12
 8002fd4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6999      	ldr	r1, [r3, #24]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
 8002fe8:	e060      	b.n	80030ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d11c      	bne.n	800302a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f000 fa85 	bl	800350e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699a      	ldr	r2, [r3, #24]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003012:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6999      	ldr	r1, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]
 8003028:	e040      	b.n	80030ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f000 fad2 	bl	80035e8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 020c 	bic.w	r2, r2, #12
 8003052:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69d9      	ldr	r1, [r3, #28]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
 8003066:	e021      	b.n	80030ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b0c      	cmp	r3, #12
 800306c:	d11c      	bne.n	80030a8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6819      	ldr	r1, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f000 faef 	bl	8003660 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003090:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	021a      	lsls	r2, r3, #8
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	61da      	str	r2, [r3, #28]
 80030a6:	e001      	b.n	80030ac <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_TIM_ConfigClockSource+0x1c>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e0b6      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x18a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003104:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	d03e      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0xd8>
 8003118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311c:	f200 8087 	bhi.w	800322e <HAL_TIM_ConfigClockSource+0x170>
 8003120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003124:	f000 8086 	beq.w	8003234 <HAL_TIM_ConfigClockSource+0x176>
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312c:	d87f      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 800312e:	2b70      	cmp	r3, #112	; 0x70
 8003130:	d01a      	beq.n	8003168 <HAL_TIM_ConfigClockSource+0xaa>
 8003132:	2b70      	cmp	r3, #112	; 0x70
 8003134:	d87b      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 8003136:	2b60      	cmp	r3, #96	; 0x60
 8003138:	d050      	beq.n	80031dc <HAL_TIM_ConfigClockSource+0x11e>
 800313a:	2b60      	cmp	r3, #96	; 0x60
 800313c:	d877      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 800313e:	2b50      	cmp	r3, #80	; 0x50
 8003140:	d03c      	beq.n	80031bc <HAL_TIM_ConfigClockSource+0xfe>
 8003142:	2b50      	cmp	r3, #80	; 0x50
 8003144:	d873      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d058      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x13e>
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d86f      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 800314e:	2b30      	cmp	r3, #48	; 0x30
 8003150:	d064      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x15e>
 8003152:	2b30      	cmp	r3, #48	; 0x30
 8003154:	d86b      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 8003156:	2b20      	cmp	r3, #32
 8003158:	d060      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x15e>
 800315a:	2b20      	cmp	r3, #32
 800315c:	d867      	bhi.n	800322e <HAL_TIM_ConfigClockSource+0x170>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d05c      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x15e>
 8003162:	2b10      	cmp	r3, #16
 8003164:	d05a      	beq.n	800321c <HAL_TIM_ConfigClockSource+0x15e>
 8003166:	e062      	b.n	800322e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6899      	ldr	r1, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f000 faca 	bl	8003710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800318a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	609a      	str	r2, [r3, #8]
      break;
 8003194:	e04f      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f000 fab3 	bl	8003710 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031b8:	609a      	str	r2, [r3, #8]
      break;
 80031ba:	e03c      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	f000 f971 	bl	80034b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2150      	movs	r1, #80	; 0x50
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fa80 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 80031da:	e02c      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	461a      	mov	r2, r3
 80031ea:	f000 f9cd 	bl	8003588 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2160      	movs	r1, #96	; 0x60
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fa70 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 80031fa:	e01c      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	461a      	mov	r2, r3
 800320a:	f000 f951 	bl	80034b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2140      	movs	r1, #64	; 0x40
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fa60 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 800321a:	e00c      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fa57 	bl	80036da <TIM_ITRx_SetConfig>
      break;
 800322c:	e003      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	73fb      	strb	r3, [r7, #15]
      break;
 8003232:	e000      	b.n	8003236 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d831      	bhi.n	80032c8 <HAL_TIM_ReadCapturedValue+0x78>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_TIM_ReadCapturedValue+0x1c>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032c9 	.word	0x080032c9
 8003274:	080032c9 	.word	0x080032c9
 8003278:	080032c9 	.word	0x080032c9
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032c9 	.word	0x080032c9
 8003284:	080032c9 	.word	0x080032c9
 8003288:	080032c9 	.word	0x080032c9
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032c9 	.word	0x080032c9
 8003294:	080032c9 	.word	0x080032c9
 8003298:	080032c9 	.word	0x080032c9
 800329c:	080032bf 	.word	0x080032bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a6:	60fb      	str	r3, [r7, #12]

      break;
 80032a8:	e00f      	b.n	80032ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	60fb      	str	r3, [r7, #12]

      break;
 80032b2:	e00a      	b.n	80032ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	60fb      	str	r3, [r7, #12]

      break;
 80032bc:	e005      	b.n	80032ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	60fb      	str	r3, [r7, #12]

      break;
 80032c6:	e000      	b.n	80032ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80032c8:	bf00      	nop
  }

  return tmpreg;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a2e      	ldr	r2, [pc, #184]	; (80033f4 <TIM_Base_SetConfig+0xcc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d003      	beq.n	8003348 <TIM_Base_SetConfig+0x20>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d108      	bne.n	800335a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a25      	ldr	r2, [pc, #148]	; (80033f4 <TIM_Base_SetConfig+0xcc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00f      	beq.n	8003382 <TIM_Base_SetConfig+0x5a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003368:	d00b      	beq.n	8003382 <TIM_Base_SetConfig+0x5a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a22      	ldr	r2, [pc, #136]	; (80033f8 <TIM_Base_SetConfig+0xd0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <TIM_Base_SetConfig+0x5a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a21      	ldr	r2, [pc, #132]	; (80033fc <TIM_Base_SetConfig+0xd4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d003      	beq.n	8003382 <TIM_Base_SetConfig+0x5a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a20      	ldr	r2, [pc, #128]	; (8003400 <TIM_Base_SetConfig+0xd8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d108      	bne.n	8003394 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0e      	ldr	r2, [pc, #56]	; (80033f4 <TIM_Base_SetConfig+0xcc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0xb0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <TIM_Base_SetConfig+0xd0>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0xb0>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <TIM_Base_SetConfig+0xd4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xb0>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0b      	ldr	r2, [pc, #44]	; (8003400 <TIM_Base_SetConfig+0xd8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800

08003404 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	f023 0201 	bic.w	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <TIM_TI1_SetConfig+0xa4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_TI1_SetConfig+0x3e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d003      	beq.n	8003442 <TIM_TI1_SetConfig+0x3e>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a1b      	ldr	r2, [pc, #108]	; (80034ac <TIM_TI1_SetConfig+0xa8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <TIM_TI1_SetConfig+0x42>
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <TIM_TI1_SetConfig+0x44>
 8003446:	2300      	movs	r3, #0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d008      	beq.n	800345e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e003      	b.n	8003466 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800346c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	b2db      	uxtb	r3, r3
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f003 030a 	and.w	r3, r3, #10
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40014000 	.word	0x40014000

080034b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 030a 	bic.w	r3, r3, #10
 80034ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	b29b      	uxth	r3, r3
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 0210 	bic.w	r2, r3, #16
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	621a      	str	r2, [r3, #32]
}
 80035dc:	bf00      	nop
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f023 0303 	bic.w	r3, r3, #3
 8003614:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	b2db      	uxtb	r3, r3
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003638:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	621a      	str	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800369e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	031b      	lsls	r3, r3, #12
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	031b      	lsls	r3, r3, #12
 80036b8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f043 0307 	orr.w	r3, r3, #7
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	609a      	str	r2, [r3, #8]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	021a      	lsls	r2, r3, #8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	431a      	orrs	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	bf00      	nop
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e04f      	b.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d009      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d004      	beq.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10c      	bne.n	8003842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40014000 	.word	0x40014000

08003868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e040      	b.n	8003938 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd f864 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fbbe 	bl	8004064 <UART_SetConfig>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e022      	b.n	8003938 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fce8 	bl	80042d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fd6f 	bl	8004414 <UART_CheckIdleState>
 8003936:	4603      	mov	r3, r0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003954:	2b20      	cmp	r3, #32
 8003956:	f040 8082 	bne.w	8003a5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_UART_Transmit+0x26>
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07a      	b.n	8003a60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_UART_Transmit+0x38>
 8003974:	2302      	movs	r3, #2
 8003976:	e073      	b.n	8003a60 <HAL_UART_Transmit+0x120>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2221      	movs	r2, #33	; 0x21
 800398c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398e:	f7fd f955 	bl	8000c3c <HAL_GetTick>
 8003992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x80>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039d0:	e02d      	b.n	8003a2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fd62 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e039      	b.n	8003a60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881a      	ldrh	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fe:	b292      	uxth	r2, r2
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e008      	b.n	8003a1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	b292      	uxth	r2, r2
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2140      	movs	r1, #64	; 0x40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 fd2e 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e005      	b.n	8003a60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b0ba      	sub	sp, #232	; 0xe8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a96:	4013      	ands	r3, r2
 8003a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d115      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00f      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 82a3 	beq.w	800400c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4798      	blx	r3
      }
      return;
 8003ace:	e29d      	b.n	800400c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8117 	beq.w	8003d08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003aea:	4b85      	ldr	r3, [pc, #532]	; (8003d00 <HAL_UART_IRQHandler+0x298>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 810a 	beq.w	8003d08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_UART_IRQHandler+0xbc>
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00b      	beq.n	8003b24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d011      	beq.n	8003b54 <HAL_UART_IRQHandler+0xec>
 8003b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2202      	movs	r2, #2
 8003b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4a:	f043 0204 	orr.w	r2, r3, #4
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d011      	beq.n	8003b84 <HAL_UART_IRQHandler+0x11c>
 8003b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2204      	movs	r2, #4
 8003b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb6:	f043 0208 	orr.w	r2, r3, #8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d012      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x18a>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8209 	beq.w	8004010 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00d      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04f      	beq.n	8003cea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fcef 	bl	800462e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d141      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c6c:	e853 3f00 	ldrex	r3, [r3]
 8003c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3308      	adds	r3, #8
 8003c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1d9      	bne.n	8003c5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d013      	beq.n	8003cda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <HAL_UART_IRQHandler+0x29c>)
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd f936 	bl	8000f30 <HAL_DMA_Abort_IT>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd8:	e00f      	b.n	8003cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f9ac 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce0:	e00b      	b.n	8003cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f9a8 	bl	8004038 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	e007      	b.n	8003cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f9a4 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003cf8:	e18a      	b.n	8004010 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfa:	bf00      	nop
    return;
 8003cfc:	e188      	b.n	8004010 <HAL_UART_IRQHandler+0x5a8>
 8003cfe:	bf00      	nop
 8003d00:	04000120 	.word	0x04000120
 8003d04:	080046f5 	.word	0x080046f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 8143 	bne.w	8003f98 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 813c 	beq.w	8003f98 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8135 	beq.w	8003f98 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2210      	movs	r2, #16
 8003d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	f040 80b1 	bne.w	8003ea8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 815c 	beq.w	8004014 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d66:	429a      	cmp	r2, r3
 8003d68:	f080 8154 	bcs.w	8004014 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f000 8085 	beq.w	8003e8c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003db0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003db8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1da      	bne.n	8003d82 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003df0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003df4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003df8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e1      	bne.n	8003dcc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e2c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e3      	bne.n	8003e08 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e70:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e76:	e841 2300 	strex	r3, r2, [r1]
 8003e7a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1e4      	bne.n	8003e4c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd f819 	bl	8000ebe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f8d3 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ea6:	e0b5      	b.n	8004014 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a7 	beq.w	8004018 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a2 	beq.w	8004018 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	e853 3f00 	ldrex	r3, [r3]
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e4      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	623b      	str	r3, [r7, #32]
   return(result);
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e3      	bne.n	8003f0a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f023 0310 	bic.w	r3, r3, #16
 8003f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	69b9      	ldr	r1, [r7, #24]
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	617b      	str	r3, [r7, #20]
   return(result);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e4      	bne.n	8003f54 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f85b 	bl	800404c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f96:	e03f      	b.n	8004018 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x55a>
 8003fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fbda 	bl	8004774 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fc0:	e02d      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01c      	beq.n	800401c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
    }
    return;
 8003fea:	e017      	b.n	800401c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d012      	beq.n	800401e <HAL_UART_IRQHandler+0x5b6>
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00c      	beq.n	800401e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb8b 	bl	8004720 <UART_EndTransmit_IT>
    return;
 800400a:	e008      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
      return;
 800400c:	bf00      	nop
 800400e:	e006      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004010:	bf00      	nop
 8004012:	e004      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <HAL_UART_IRQHandler+0x5b6>
    return;
 800401c:	bf00      	nop
  }

}
 800401e:	37e8      	adds	r7, #232	; 0xe8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b8a      	ldr	r3, [pc, #552]	; (80042b8 <UART_SetConfig+0x254>)
 8004090:	4013      	ands	r3, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	6979      	ldr	r1, [r7, #20]
 8004098:	430b      	orrs	r3, r1
 800409a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a78      	ldr	r2, [pc, #480]	; (80042bc <UART_SetConfig+0x258>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d120      	bne.n	8004122 <UART_SetConfig+0xbe>
 80040e0:	4b77      	ldr	r3, [pc, #476]	; (80042c0 <UART_SetConfig+0x25c>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	f003 0303 	and.w	r3, r3, #3
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d817      	bhi.n	800411c <UART_SetConfig+0xb8>
 80040ec:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x90>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004105 	.word	0x08004105
 80040f8:	08004111 	.word	0x08004111
 80040fc:	08004117 	.word	0x08004117
 8004100:	0800410b 	.word	0x0800410b
 8004104:	2300      	movs	r3, #0
 8004106:	77fb      	strb	r3, [r7, #31]
 8004108:	e01d      	b.n	8004146 <UART_SetConfig+0xe2>
 800410a:	2302      	movs	r3, #2
 800410c:	77fb      	strb	r3, [r7, #31]
 800410e:	e01a      	b.n	8004146 <UART_SetConfig+0xe2>
 8004110:	2304      	movs	r3, #4
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e017      	b.n	8004146 <UART_SetConfig+0xe2>
 8004116:	2308      	movs	r3, #8
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e014      	b.n	8004146 <UART_SetConfig+0xe2>
 800411c:	2310      	movs	r3, #16
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e011      	b.n	8004146 <UART_SetConfig+0xe2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a67      	ldr	r2, [pc, #412]	; (80042c4 <UART_SetConfig+0x260>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d102      	bne.n	8004132 <UART_SetConfig+0xce>
 800412c:	2300      	movs	r3, #0
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e009      	b.n	8004146 <UART_SetConfig+0xe2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a64      	ldr	r2, [pc, #400]	; (80042c8 <UART_SetConfig+0x264>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d102      	bne.n	8004142 <UART_SetConfig+0xde>
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e001      	b.n	8004146 <UART_SetConfig+0xe2>
 8004142:	2310      	movs	r3, #16
 8004144:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414e:	d15b      	bne.n	8004208 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b08      	cmp	r3, #8
 8004154:	d827      	bhi.n	80041a6 <UART_SetConfig+0x142>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0xf8>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe f9e6 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8004184:	61b8      	str	r0, [r7, #24]
        break;
 8004186:	e013      	b.n	80041b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe fa04 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800418c:	61b8      	str	r0, [r7, #24]
        break;
 800418e:	e00f      	b.n	80041b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <UART_SetConfig+0x268>)
 8004192:	61bb      	str	r3, [r7, #24]
        break;
 8004194:	e00c      	b.n	80041b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe f965 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 800419a:	61b8      	str	r0, [r7, #24]
        break;
 800419c:	e008      	b.n	80041b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	61bb      	str	r3, [r7, #24]
        break;
 80041a4:	e004      	b.n	80041b0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	77bb      	strb	r3, [r7, #30]
        break;
 80041ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d074      	beq.n	80042a0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	005a      	lsls	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d916      	bls.n	8004202 <UART_SetConfig+0x19e>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041da:	d212      	bcs.n	8004202 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f023 030f 	bic.w	r3, r3, #15
 80041e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	085b      	lsrs	r3, r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	89fb      	ldrh	r3, [r7, #14]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	89fa      	ldrh	r2, [r7, #14]
 80041fe:	60da      	str	r2, [r3, #12]
 8004200:	e04e      	b.n	80042a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	77bb      	strb	r3, [r7, #30]
 8004206:	e04b      	b.n	80042a0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	2b08      	cmp	r3, #8
 800420c:	d827      	bhi.n	800425e <UART_SetConfig+0x1fa>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <UART_SetConfig+0x1b0>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004239 	.word	0x08004239
 8004218:	08004241 	.word	0x08004241
 800421c:	08004249 	.word	0x08004249
 8004220:	0800425f 	.word	0x0800425f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800425f 	.word	0x0800425f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004238:	f7fe f98a 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 800423c:	61b8      	str	r0, [r7, #24]
        break;
 800423e:	e013      	b.n	8004268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004240:	f7fe f9a8 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8004244:	61b8      	str	r0, [r7, #24]
        break;
 8004246:	e00f      	b.n	8004268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <UART_SetConfig+0x268>)
 800424a:	61bb      	str	r3, [r7, #24]
        break;
 800424c:	e00c      	b.n	8004268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe f909 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8004252:	61b8      	str	r0, [r7, #24]
        break;
 8004254:	e008      	b.n	8004268 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425a:	61bb      	str	r3, [r7, #24]
        break;
 800425c:	e004      	b.n	8004268 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	77bb      	strb	r3, [r7, #30]
        break;
 8004266:	bf00      	nop
    }

    if (pclk != 0U)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085a      	lsrs	r2, r3, #1
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	d908      	bls.n	800429c <UART_SetConfig+0x238>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d204      	bcs.n	800429c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	e001      	b.n	80042a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80042ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	efff69f3 	.word	0xefff69f3
 80042bc:	40013800 	.word	0x40013800
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40004400 	.word	0x40004400
 80042c8:	40004800 	.word	0x40004800
 80042cc:	007a1200 	.word	0x007a1200

080042d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ce:	d10a      	bne.n	80043e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004424:	f7fc fc0a 	bl	8000c3c <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b08      	cmp	r3, #8
 8004436:	d10e      	bne.n	8004456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f82d 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e023      	b.n	800449e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b04      	cmp	r3, #4
 8004462:	d10e      	bne.n	8004482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f817 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e00d      	b.n	800449e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b09c      	sub	sp, #112	; 0x70
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	e0a5      	b.n	8004604 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	f000 80a1 	beq.w	8004604 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fc fbbb 	bl	8000c3c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80044d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d13e      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ec:	667b      	str	r3, [r7, #100]	; 0x64
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e6      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	663b      	str	r3, [r7, #96]	; 0x60
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3308      	adds	r3, #8
 8004528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800452a:	64ba      	str	r2, [r7, #72]	; 0x48
 800452c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e067      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d04f      	beq.n	8004604 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004572:	d147      	bne.n	8004604 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800457c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
 800459e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e6      	bne.n	800457e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045d0:	623a      	str	r2, [r7, #32]
 80045d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69f9      	ldr	r1, [r7, #28]
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e010      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	429a      	cmp	r2, r3
 8004620:	f43f af4a 	beq.w	80044b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3770      	adds	r7, #112	; 0x70
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800462e:	b480      	push	{r7}
 8004630:	b095      	sub	sp, #84	; 0x54
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	643b      	str	r3, [r7, #64]	; 0x40
 8004656:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800465a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	61fb      	str	r3, [r7, #28]
   return(result);
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d118      	bne.n	80046d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	613b      	str	r3, [r7, #16]
   return(result);
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e6      	bne.n	80046a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80046e8:	bf00      	nop
 80046ea:	3754      	adds	r7, #84	; 0x54
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fc90 	bl	8004038 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	60bb      	str	r3, [r7, #8]
   return(result);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e6      	bne.n	8004728 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fc5c 	bl	8004024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800476c:	bf00      	nop
 800476e:	3720      	adds	r7, #32
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <__errno>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <__errno+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000010 	.word	0x20000010

08004794 <__libc_init_array>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4d0d      	ldr	r5, [pc, #52]	; (80047cc <__libc_init_array+0x38>)
 8004798:	4c0d      	ldr	r4, [pc, #52]	; (80047d0 <__libc_init_array+0x3c>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	2600      	movs	r6, #0
 80047a0:	42a6      	cmp	r6, r4
 80047a2:	d109      	bne.n	80047b8 <__libc_init_array+0x24>
 80047a4:	4d0b      	ldr	r5, [pc, #44]	; (80047d4 <__libc_init_array+0x40>)
 80047a6:	4c0c      	ldr	r4, [pc, #48]	; (80047d8 <__libc_init_array+0x44>)
 80047a8:	f000 fc4e 	bl	8005048 <_init>
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	2600      	movs	r6, #0
 80047b2:	42a6      	cmp	r6, r4
 80047b4:	d105      	bne.n	80047c2 <__libc_init_array+0x2e>
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047bc:	4798      	blx	r3
 80047be:	3601      	adds	r6, #1
 80047c0:	e7ee      	b.n	80047a0 <__libc_init_array+0xc>
 80047c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c6:	4798      	blx	r3
 80047c8:	3601      	adds	r6, #1
 80047ca:	e7f2      	b.n	80047b2 <__libc_init_array+0x1e>
 80047cc:	080050e0 	.word	0x080050e0
 80047d0:	080050e0 	.word	0x080050e0
 80047d4:	080050e0 	.word	0x080050e0
 80047d8:	080050e4 	.word	0x080050e4

080047dc <memset>:
 80047dc:	4402      	add	r2, r0
 80047de:	4603      	mov	r3, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d100      	bne.n	80047e6 <memset+0xa>
 80047e4:	4770      	bx	lr
 80047e6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ea:	e7f9      	b.n	80047e0 <memset+0x4>

080047ec <siprintf>:
 80047ec:	b40e      	push	{r1, r2, r3}
 80047ee:	b500      	push	{lr}
 80047f0:	b09c      	sub	sp, #112	; 0x70
 80047f2:	ab1d      	add	r3, sp, #116	; 0x74
 80047f4:	9002      	str	r0, [sp, #8]
 80047f6:	9006      	str	r0, [sp, #24]
 80047f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047fc:	4809      	ldr	r0, [pc, #36]	; (8004824 <siprintf+0x38>)
 80047fe:	9107      	str	r1, [sp, #28]
 8004800:	9104      	str	r1, [sp, #16]
 8004802:	4909      	ldr	r1, [pc, #36]	; (8004828 <siprintf+0x3c>)
 8004804:	f853 2b04 	ldr.w	r2, [r3], #4
 8004808:	9105      	str	r1, [sp, #20]
 800480a:	6800      	ldr	r0, [r0, #0]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	a902      	add	r1, sp, #8
 8004810:	f000 f868 	bl	80048e4 <_svfiprintf_r>
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	b01c      	add	sp, #112	; 0x70
 800481c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004820:	b003      	add	sp, #12
 8004822:	4770      	bx	lr
 8004824:	20000010 	.word	0x20000010
 8004828:	ffff0208 	.word	0xffff0208

0800482c <__ssputs_r>:
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	688e      	ldr	r6, [r1, #8]
 8004832:	429e      	cmp	r6, r3
 8004834:	4682      	mov	sl, r0
 8004836:	460c      	mov	r4, r1
 8004838:	4690      	mov	r8, r2
 800483a:	461f      	mov	r7, r3
 800483c:	d838      	bhi.n	80048b0 <__ssputs_r+0x84>
 800483e:	898a      	ldrh	r2, [r1, #12]
 8004840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004844:	d032      	beq.n	80048ac <__ssputs_r+0x80>
 8004846:	6825      	ldr	r5, [r4, #0]
 8004848:	6909      	ldr	r1, [r1, #16]
 800484a:	eba5 0901 	sub.w	r9, r5, r1
 800484e:	6965      	ldr	r5, [r4, #20]
 8004850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004858:	3301      	adds	r3, #1
 800485a:	444b      	add	r3, r9
 800485c:	106d      	asrs	r5, r5, #1
 800485e:	429d      	cmp	r5, r3
 8004860:	bf38      	it	cc
 8004862:	461d      	movcc	r5, r3
 8004864:	0553      	lsls	r3, r2, #21
 8004866:	d531      	bpl.n	80048cc <__ssputs_r+0xa0>
 8004868:	4629      	mov	r1, r5
 800486a:	f000 fb47 	bl	8004efc <_malloc_r>
 800486e:	4606      	mov	r6, r0
 8004870:	b950      	cbnz	r0, 8004888 <__ssputs_r+0x5c>
 8004872:	230c      	movs	r3, #12
 8004874:	f8ca 3000 	str.w	r3, [sl]
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800487e:	81a3      	strh	r3, [r4, #12]
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	6921      	ldr	r1, [r4, #16]
 800488a:	464a      	mov	r2, r9
 800488c:	f000 fabe 	bl	8004e0c <memcpy>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	6126      	str	r6, [r4, #16]
 800489e:	6165      	str	r5, [r4, #20]
 80048a0:	444e      	add	r6, r9
 80048a2:	eba5 0509 	sub.w	r5, r5, r9
 80048a6:	6026      	str	r6, [r4, #0]
 80048a8:	60a5      	str	r5, [r4, #8]
 80048aa:	463e      	mov	r6, r7
 80048ac:	42be      	cmp	r6, r7
 80048ae:	d900      	bls.n	80048b2 <__ssputs_r+0x86>
 80048b0:	463e      	mov	r6, r7
 80048b2:	4632      	mov	r2, r6
 80048b4:	6820      	ldr	r0, [r4, #0]
 80048b6:	4641      	mov	r1, r8
 80048b8:	f000 fab6 	bl	8004e28 <memmove>
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	1b9b      	subs	r3, r3, r6
 80048c2:	4432      	add	r2, r6
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	6022      	str	r2, [r4, #0]
 80048c8:	2000      	movs	r0, #0
 80048ca:	e7db      	b.n	8004884 <__ssputs_r+0x58>
 80048cc:	462a      	mov	r2, r5
 80048ce:	f000 fb6f 	bl	8004fb0 <_realloc_r>
 80048d2:	4606      	mov	r6, r0
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d1e1      	bne.n	800489c <__ssputs_r+0x70>
 80048d8:	6921      	ldr	r1, [r4, #16]
 80048da:	4650      	mov	r0, sl
 80048dc:	f000 fabe 	bl	8004e5c <_free_r>
 80048e0:	e7c7      	b.n	8004872 <__ssputs_r+0x46>
	...

080048e4 <_svfiprintf_r>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	4698      	mov	r8, r3
 80048ea:	898b      	ldrh	r3, [r1, #12]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	b09d      	sub	sp, #116	; 0x74
 80048f0:	4607      	mov	r7, r0
 80048f2:	460d      	mov	r5, r1
 80048f4:	4614      	mov	r4, r2
 80048f6:	d50e      	bpl.n	8004916 <_svfiprintf_r+0x32>
 80048f8:	690b      	ldr	r3, [r1, #16]
 80048fa:	b963      	cbnz	r3, 8004916 <_svfiprintf_r+0x32>
 80048fc:	2140      	movs	r1, #64	; 0x40
 80048fe:	f000 fafd 	bl	8004efc <_malloc_r>
 8004902:	6028      	str	r0, [r5, #0]
 8004904:	6128      	str	r0, [r5, #16]
 8004906:	b920      	cbnz	r0, 8004912 <_svfiprintf_r+0x2e>
 8004908:	230c      	movs	r3, #12
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	e0d1      	b.n	8004ab6 <_svfiprintf_r+0x1d2>
 8004912:	2340      	movs	r3, #64	; 0x40
 8004914:	616b      	str	r3, [r5, #20]
 8004916:	2300      	movs	r3, #0
 8004918:	9309      	str	r3, [sp, #36]	; 0x24
 800491a:	2320      	movs	r3, #32
 800491c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004920:	f8cd 800c 	str.w	r8, [sp, #12]
 8004924:	2330      	movs	r3, #48	; 0x30
 8004926:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ad0 <_svfiprintf_r+0x1ec>
 800492a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800492e:	f04f 0901 	mov.w	r9, #1
 8004932:	4623      	mov	r3, r4
 8004934:	469a      	mov	sl, r3
 8004936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493a:	b10a      	cbz	r2, 8004940 <_svfiprintf_r+0x5c>
 800493c:	2a25      	cmp	r2, #37	; 0x25
 800493e:	d1f9      	bne.n	8004934 <_svfiprintf_r+0x50>
 8004940:	ebba 0b04 	subs.w	fp, sl, r4
 8004944:	d00b      	beq.n	800495e <_svfiprintf_r+0x7a>
 8004946:	465b      	mov	r3, fp
 8004948:	4622      	mov	r2, r4
 800494a:	4629      	mov	r1, r5
 800494c:	4638      	mov	r0, r7
 800494e:	f7ff ff6d 	bl	800482c <__ssputs_r>
 8004952:	3001      	adds	r0, #1
 8004954:	f000 80aa 	beq.w	8004aac <_svfiprintf_r+0x1c8>
 8004958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800495a:	445a      	add	r2, fp
 800495c:	9209      	str	r2, [sp, #36]	; 0x24
 800495e:	f89a 3000 	ldrb.w	r3, [sl]
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80a2 	beq.w	8004aac <_svfiprintf_r+0x1c8>
 8004968:	2300      	movs	r3, #0
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004972:	f10a 0a01 	add.w	sl, sl, #1
 8004976:	9304      	str	r3, [sp, #16]
 8004978:	9307      	str	r3, [sp, #28]
 800497a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800497e:	931a      	str	r3, [sp, #104]	; 0x68
 8004980:	4654      	mov	r4, sl
 8004982:	2205      	movs	r2, #5
 8004984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004988:	4851      	ldr	r0, [pc, #324]	; (8004ad0 <_svfiprintf_r+0x1ec>)
 800498a:	f7fb fc21 	bl	80001d0 <memchr>
 800498e:	9a04      	ldr	r2, [sp, #16]
 8004990:	b9d8      	cbnz	r0, 80049ca <_svfiprintf_r+0xe6>
 8004992:	06d0      	lsls	r0, r2, #27
 8004994:	bf44      	itt	mi
 8004996:	2320      	movmi	r3, #32
 8004998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800499c:	0711      	lsls	r1, r2, #28
 800499e:	bf44      	itt	mi
 80049a0:	232b      	movmi	r3, #43	; 0x2b
 80049a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049a6:	f89a 3000 	ldrb.w	r3, [sl]
 80049aa:	2b2a      	cmp	r3, #42	; 0x2a
 80049ac:	d015      	beq.n	80049da <_svfiprintf_r+0xf6>
 80049ae:	9a07      	ldr	r2, [sp, #28]
 80049b0:	4654      	mov	r4, sl
 80049b2:	2000      	movs	r0, #0
 80049b4:	f04f 0c0a 	mov.w	ip, #10
 80049b8:	4621      	mov	r1, r4
 80049ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049be:	3b30      	subs	r3, #48	; 0x30
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	d94e      	bls.n	8004a62 <_svfiprintf_r+0x17e>
 80049c4:	b1b0      	cbz	r0, 80049f4 <_svfiprintf_r+0x110>
 80049c6:	9207      	str	r2, [sp, #28]
 80049c8:	e014      	b.n	80049f4 <_svfiprintf_r+0x110>
 80049ca:	eba0 0308 	sub.w	r3, r0, r8
 80049ce:	fa09 f303 	lsl.w	r3, r9, r3
 80049d2:	4313      	orrs	r3, r2
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	46a2      	mov	sl, r4
 80049d8:	e7d2      	b.n	8004980 <_svfiprintf_r+0x9c>
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	1d19      	adds	r1, r3, #4
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	9103      	str	r1, [sp, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bfbb      	ittet	lt
 80049e6:	425b      	neglt	r3, r3
 80049e8:	f042 0202 	orrlt.w	r2, r2, #2
 80049ec:	9307      	strge	r3, [sp, #28]
 80049ee:	9307      	strlt	r3, [sp, #28]
 80049f0:	bfb8      	it	lt
 80049f2:	9204      	strlt	r2, [sp, #16]
 80049f4:	7823      	ldrb	r3, [r4, #0]
 80049f6:	2b2e      	cmp	r3, #46	; 0x2e
 80049f8:	d10c      	bne.n	8004a14 <_svfiprintf_r+0x130>
 80049fa:	7863      	ldrb	r3, [r4, #1]
 80049fc:	2b2a      	cmp	r3, #42	; 0x2a
 80049fe:	d135      	bne.n	8004a6c <_svfiprintf_r+0x188>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	9203      	str	r2, [sp, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfb8      	it	lt
 8004a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a10:	3402      	adds	r4, #2
 8004a12:	9305      	str	r3, [sp, #20]
 8004a14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ae0 <_svfiprintf_r+0x1fc>
 8004a18:	7821      	ldrb	r1, [r4, #0]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	f7fb fbd7 	bl	80001d0 <memchr>
 8004a22:	b140      	cbz	r0, 8004a36 <_svfiprintf_r+0x152>
 8004a24:	2340      	movs	r3, #64	; 0x40
 8004a26:	eba0 000a 	sub.w	r0, r0, sl
 8004a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	4303      	orrs	r3, r0
 8004a32:	3401      	adds	r4, #1
 8004a34:	9304      	str	r3, [sp, #16]
 8004a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3a:	4826      	ldr	r0, [pc, #152]	; (8004ad4 <_svfiprintf_r+0x1f0>)
 8004a3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a40:	2206      	movs	r2, #6
 8004a42:	f7fb fbc5 	bl	80001d0 <memchr>
 8004a46:	2800      	cmp	r0, #0
 8004a48:	d038      	beq.n	8004abc <_svfiprintf_r+0x1d8>
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <_svfiprintf_r+0x1f4>)
 8004a4c:	bb1b      	cbnz	r3, 8004a96 <_svfiprintf_r+0x1b2>
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	3307      	adds	r3, #7
 8004a52:	f023 0307 	bic.w	r3, r3, #7
 8004a56:	3308      	adds	r3, #8
 8004a58:	9303      	str	r3, [sp, #12]
 8004a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5c:	4433      	add	r3, r6
 8004a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a60:	e767      	b.n	8004932 <_svfiprintf_r+0x4e>
 8004a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a66:	460c      	mov	r4, r1
 8004a68:	2001      	movs	r0, #1
 8004a6a:	e7a5      	b.n	80049b8 <_svfiprintf_r+0xd4>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	3401      	adds	r4, #1
 8004a70:	9305      	str	r3, [sp, #20]
 8004a72:	4619      	mov	r1, r3
 8004a74:	f04f 0c0a 	mov.w	ip, #10
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a7e:	3a30      	subs	r2, #48	; 0x30
 8004a80:	2a09      	cmp	r2, #9
 8004a82:	d903      	bls.n	8004a8c <_svfiprintf_r+0x1a8>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0c5      	beq.n	8004a14 <_svfiprintf_r+0x130>
 8004a88:	9105      	str	r1, [sp, #20]
 8004a8a:	e7c3      	b.n	8004a14 <_svfiprintf_r+0x130>
 8004a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a90:	4604      	mov	r4, r0
 8004a92:	2301      	movs	r3, #1
 8004a94:	e7f0      	b.n	8004a78 <_svfiprintf_r+0x194>
 8004a96:	ab03      	add	r3, sp, #12
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <_svfiprintf_r+0x1f8>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f3af 8000 	nop.w
 8004aa6:	1c42      	adds	r2, r0, #1
 8004aa8:	4606      	mov	r6, r0
 8004aaa:	d1d6      	bne.n	8004a5a <_svfiprintf_r+0x176>
 8004aac:	89ab      	ldrh	r3, [r5, #12]
 8004aae:	065b      	lsls	r3, r3, #25
 8004ab0:	f53f af2c 	bmi.w	800490c <_svfiprintf_r+0x28>
 8004ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ab6:	b01d      	add	sp, #116	; 0x74
 8004ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <_svfiprintf_r+0x1f8>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f000 f87a 	bl	8004bc0 <_printf_i>
 8004acc:	e7eb      	b.n	8004aa6 <_svfiprintf_r+0x1c2>
 8004ace:	bf00      	nop
 8004ad0:	080050ac 	.word	0x080050ac
 8004ad4:	080050b6 	.word	0x080050b6
 8004ad8:	00000000 	.word	0x00000000
 8004adc:	0800482d 	.word	0x0800482d
 8004ae0:	080050b2 	.word	0x080050b2

08004ae4 <_printf_common>:
 8004ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae8:	4616      	mov	r6, r2
 8004aea:	4699      	mov	r9, r3
 8004aec:	688a      	ldr	r2, [r1, #8]
 8004aee:	690b      	ldr	r3, [r1, #16]
 8004af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bfb8      	it	lt
 8004af8:	4613      	movlt	r3, r2
 8004afa:	6033      	str	r3, [r6, #0]
 8004afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b00:	4607      	mov	r7, r0
 8004b02:	460c      	mov	r4, r1
 8004b04:	b10a      	cbz	r2, 8004b0a <_printf_common+0x26>
 8004b06:	3301      	adds	r3, #1
 8004b08:	6033      	str	r3, [r6, #0]
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	0699      	lsls	r1, r3, #26
 8004b0e:	bf42      	ittt	mi
 8004b10:	6833      	ldrmi	r3, [r6, #0]
 8004b12:	3302      	addmi	r3, #2
 8004b14:	6033      	strmi	r3, [r6, #0]
 8004b16:	6825      	ldr	r5, [r4, #0]
 8004b18:	f015 0506 	ands.w	r5, r5, #6
 8004b1c:	d106      	bne.n	8004b2c <_printf_common+0x48>
 8004b1e:	f104 0a19 	add.w	sl, r4, #25
 8004b22:	68e3      	ldr	r3, [r4, #12]
 8004b24:	6832      	ldr	r2, [r6, #0]
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	42ab      	cmp	r3, r5
 8004b2a:	dc26      	bgt.n	8004b7a <_printf_common+0x96>
 8004b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b30:	1e13      	subs	r3, r2, #0
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	bf18      	it	ne
 8004b36:	2301      	movne	r3, #1
 8004b38:	0692      	lsls	r2, r2, #26
 8004b3a:	d42b      	bmi.n	8004b94 <_printf_common+0xb0>
 8004b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b40:	4649      	mov	r1, r9
 8004b42:	4638      	mov	r0, r7
 8004b44:	47c0      	blx	r8
 8004b46:	3001      	adds	r0, #1
 8004b48:	d01e      	beq.n	8004b88 <_printf_common+0xa4>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	68e5      	ldr	r5, [r4, #12]
 8004b4e:	6832      	ldr	r2, [r6, #0]
 8004b50:	f003 0306 	and.w	r3, r3, #6
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	bf08      	it	eq
 8004b58:	1aad      	subeq	r5, r5, r2
 8004b5a:	68a3      	ldr	r3, [r4, #8]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	bf0c      	ite	eq
 8004b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b64:	2500      	movne	r5, #0
 8004b66:	4293      	cmp	r3, r2
 8004b68:	bfc4      	itt	gt
 8004b6a:	1a9b      	subgt	r3, r3, r2
 8004b6c:	18ed      	addgt	r5, r5, r3
 8004b6e:	2600      	movs	r6, #0
 8004b70:	341a      	adds	r4, #26
 8004b72:	42b5      	cmp	r5, r6
 8004b74:	d11a      	bne.n	8004bac <_printf_common+0xc8>
 8004b76:	2000      	movs	r0, #0
 8004b78:	e008      	b.n	8004b8c <_printf_common+0xa8>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	4652      	mov	r2, sl
 8004b7e:	4649      	mov	r1, r9
 8004b80:	4638      	mov	r0, r7
 8004b82:	47c0      	blx	r8
 8004b84:	3001      	adds	r0, #1
 8004b86:	d103      	bne.n	8004b90 <_printf_common+0xac>
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b90:	3501      	adds	r5, #1
 8004b92:	e7c6      	b.n	8004b22 <_printf_common+0x3e>
 8004b94:	18e1      	adds	r1, r4, r3
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	2030      	movs	r0, #48	; 0x30
 8004b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b9e:	4422      	add	r2, r4
 8004ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ba8:	3302      	adds	r3, #2
 8004baa:	e7c7      	b.n	8004b3c <_printf_common+0x58>
 8004bac:	2301      	movs	r3, #1
 8004bae:	4622      	mov	r2, r4
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	47c0      	blx	r8
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d0e6      	beq.n	8004b88 <_printf_common+0xa4>
 8004bba:	3601      	adds	r6, #1
 8004bbc:	e7d9      	b.n	8004b72 <_printf_common+0x8e>
	...

08004bc0 <_printf_i>:
 8004bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	7e27      	ldrb	r7, [r4, #24]
 8004bca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bcc:	2f78      	cmp	r7, #120	; 0x78
 8004bce:	4680      	mov	r8, r0
 8004bd0:	469a      	mov	sl, r3
 8004bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd6:	d807      	bhi.n	8004be8 <_printf_i+0x28>
 8004bd8:	2f62      	cmp	r7, #98	; 0x62
 8004bda:	d80a      	bhi.n	8004bf2 <_printf_i+0x32>
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	f000 80d8 	beq.w	8004d92 <_printf_i+0x1d2>
 8004be2:	2f58      	cmp	r7, #88	; 0x58
 8004be4:	f000 80a3 	beq.w	8004d2e <_printf_i+0x16e>
 8004be8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bf0:	e03a      	b.n	8004c68 <_printf_i+0xa8>
 8004bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bf6:	2b15      	cmp	r3, #21
 8004bf8:	d8f6      	bhi.n	8004be8 <_printf_i+0x28>
 8004bfa:	a001      	add	r0, pc, #4	; (adr r0, 8004c00 <_printf_i+0x40>)
 8004bfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c00:	08004c59 	.word	0x08004c59
 8004c04:	08004c6d 	.word	0x08004c6d
 8004c08:	08004be9 	.word	0x08004be9
 8004c0c:	08004be9 	.word	0x08004be9
 8004c10:	08004be9 	.word	0x08004be9
 8004c14:	08004be9 	.word	0x08004be9
 8004c18:	08004c6d 	.word	0x08004c6d
 8004c1c:	08004be9 	.word	0x08004be9
 8004c20:	08004be9 	.word	0x08004be9
 8004c24:	08004be9 	.word	0x08004be9
 8004c28:	08004be9 	.word	0x08004be9
 8004c2c:	08004d79 	.word	0x08004d79
 8004c30:	08004c9d 	.word	0x08004c9d
 8004c34:	08004d5b 	.word	0x08004d5b
 8004c38:	08004be9 	.word	0x08004be9
 8004c3c:	08004be9 	.word	0x08004be9
 8004c40:	08004d9b 	.word	0x08004d9b
 8004c44:	08004be9 	.word	0x08004be9
 8004c48:	08004c9d 	.word	0x08004c9d
 8004c4c:	08004be9 	.word	0x08004be9
 8004c50:	08004be9 	.word	0x08004be9
 8004c54:	08004d63 	.word	0x08004d63
 8004c58:	680b      	ldr	r3, [r1, #0]
 8004c5a:	1d1a      	adds	r2, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	600a      	str	r2, [r1, #0]
 8004c60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0a3      	b.n	8004db4 <_printf_i+0x1f4>
 8004c6c:	6825      	ldr	r5, [r4, #0]
 8004c6e:	6808      	ldr	r0, [r1, #0]
 8004c70:	062e      	lsls	r6, r5, #24
 8004c72:	f100 0304 	add.w	r3, r0, #4
 8004c76:	d50a      	bpl.n	8004c8e <_printf_i+0xce>
 8004c78:	6805      	ldr	r5, [r0, #0]
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	2d00      	cmp	r5, #0
 8004c7e:	da03      	bge.n	8004c88 <_printf_i+0xc8>
 8004c80:	232d      	movs	r3, #45	; 0x2d
 8004c82:	426d      	negs	r5, r5
 8004c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c88:	485e      	ldr	r0, [pc, #376]	; (8004e04 <_printf_i+0x244>)
 8004c8a:	230a      	movs	r3, #10
 8004c8c:	e019      	b.n	8004cc2 <_printf_i+0x102>
 8004c8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c92:	6805      	ldr	r5, [r0, #0]
 8004c94:	600b      	str	r3, [r1, #0]
 8004c96:	bf18      	it	ne
 8004c98:	b22d      	sxthne	r5, r5
 8004c9a:	e7ef      	b.n	8004c7c <_printf_i+0xbc>
 8004c9c:	680b      	ldr	r3, [r1, #0]
 8004c9e:	6825      	ldr	r5, [r4, #0]
 8004ca0:	1d18      	adds	r0, r3, #4
 8004ca2:	6008      	str	r0, [r1, #0]
 8004ca4:	0628      	lsls	r0, r5, #24
 8004ca6:	d501      	bpl.n	8004cac <_printf_i+0xec>
 8004ca8:	681d      	ldr	r5, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <_printf_i+0xf2>
 8004cac:	0669      	lsls	r1, r5, #25
 8004cae:	d5fb      	bpl.n	8004ca8 <_printf_i+0xe8>
 8004cb0:	881d      	ldrh	r5, [r3, #0]
 8004cb2:	4854      	ldr	r0, [pc, #336]	; (8004e04 <_printf_i+0x244>)
 8004cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2308      	moveq	r3, #8
 8004cba:	230a      	movne	r3, #10
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cc2:	6866      	ldr	r6, [r4, #4]
 8004cc4:	60a6      	str	r6, [r4, #8]
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	bfa2      	ittt	ge
 8004cca:	6821      	ldrge	r1, [r4, #0]
 8004ccc:	f021 0104 	bicge.w	r1, r1, #4
 8004cd0:	6021      	strge	r1, [r4, #0]
 8004cd2:	b90d      	cbnz	r5, 8004cd8 <_printf_i+0x118>
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d04d      	beq.n	8004d74 <_printf_i+0x1b4>
 8004cd8:	4616      	mov	r6, r2
 8004cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cde:	fb03 5711 	mls	r7, r3, r1, r5
 8004ce2:	5dc7      	ldrb	r7, [r0, r7]
 8004ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ce8:	462f      	mov	r7, r5
 8004cea:	42bb      	cmp	r3, r7
 8004cec:	460d      	mov	r5, r1
 8004cee:	d9f4      	bls.n	8004cda <_printf_i+0x11a>
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d10b      	bne.n	8004d0c <_printf_i+0x14c>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	07df      	lsls	r7, r3, #31
 8004cf8:	d508      	bpl.n	8004d0c <_printf_i+0x14c>
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	6861      	ldr	r1, [r4, #4]
 8004cfe:	4299      	cmp	r1, r3
 8004d00:	bfde      	ittt	le
 8004d02:	2330      	movle	r3, #48	; 0x30
 8004d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d0c:	1b92      	subs	r2, r2, r6
 8004d0e:	6122      	str	r2, [r4, #16]
 8004d10:	f8cd a000 	str.w	sl, [sp]
 8004d14:	464b      	mov	r3, r9
 8004d16:	aa03      	add	r2, sp, #12
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	f7ff fee2 	bl	8004ae4 <_printf_common>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d14c      	bne.n	8004dbe <_printf_i+0x1fe>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	b004      	add	sp, #16
 8004d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2e:	4835      	ldr	r0, [pc, #212]	; (8004e04 <_printf_i+0x244>)
 8004d30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	680e      	ldr	r6, [r1, #0]
 8004d38:	061f      	lsls	r7, r3, #24
 8004d3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d3e:	600e      	str	r6, [r1, #0]
 8004d40:	d514      	bpl.n	8004d6c <_printf_i+0x1ac>
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	bf44      	itt	mi
 8004d46:	f043 0320 	orrmi.w	r3, r3, #32
 8004d4a:	6023      	strmi	r3, [r4, #0]
 8004d4c:	b91d      	cbnz	r5, 8004d56 <_printf_i+0x196>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	f023 0320 	bic.w	r3, r3, #32
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	2310      	movs	r3, #16
 8004d58:	e7b0      	b.n	8004cbc <_printf_i+0xfc>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f043 0320 	orr.w	r3, r3, #32
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	2378      	movs	r3, #120	; 0x78
 8004d64:	4828      	ldr	r0, [pc, #160]	; (8004e08 <_printf_i+0x248>)
 8004d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d6a:	e7e3      	b.n	8004d34 <_printf_i+0x174>
 8004d6c:	065e      	lsls	r6, r3, #25
 8004d6e:	bf48      	it	mi
 8004d70:	b2ad      	uxthmi	r5, r5
 8004d72:	e7e6      	b.n	8004d42 <_printf_i+0x182>
 8004d74:	4616      	mov	r6, r2
 8004d76:	e7bb      	b.n	8004cf0 <_printf_i+0x130>
 8004d78:	680b      	ldr	r3, [r1, #0]
 8004d7a:	6826      	ldr	r6, [r4, #0]
 8004d7c:	6960      	ldr	r0, [r4, #20]
 8004d7e:	1d1d      	adds	r5, r3, #4
 8004d80:	600d      	str	r5, [r1, #0]
 8004d82:	0635      	lsls	r5, r6, #24
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	d501      	bpl.n	8004d8c <_printf_i+0x1cc>
 8004d88:	6018      	str	r0, [r3, #0]
 8004d8a:	e002      	b.n	8004d92 <_printf_i+0x1d2>
 8004d8c:	0671      	lsls	r1, r6, #25
 8004d8e:	d5fb      	bpl.n	8004d88 <_printf_i+0x1c8>
 8004d90:	8018      	strh	r0, [r3, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	4616      	mov	r6, r2
 8004d98:	e7ba      	b.n	8004d10 <_printf_i+0x150>
 8004d9a:	680b      	ldr	r3, [r1, #0]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	600a      	str	r2, [r1, #0]
 8004da0:	681e      	ldr	r6, [r3, #0]
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	2100      	movs	r1, #0
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7fb fa12 	bl	80001d0 <memchr>
 8004dac:	b108      	cbz	r0, 8004db2 <_printf_i+0x1f2>
 8004dae:	1b80      	subs	r0, r0, r6
 8004db0:	6060      	str	r0, [r4, #4]
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	2300      	movs	r3, #0
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbc:	e7a8      	b.n	8004d10 <_printf_i+0x150>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	4632      	mov	r2, r6
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d0ab      	beq.n	8004d24 <_printf_i+0x164>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	079b      	lsls	r3, r3, #30
 8004dd0:	d413      	bmi.n	8004dfa <_printf_i+0x23a>
 8004dd2:	68e0      	ldr	r0, [r4, #12]
 8004dd4:	9b03      	ldr	r3, [sp, #12]
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	bfb8      	it	lt
 8004dda:	4618      	movlt	r0, r3
 8004ddc:	e7a4      	b.n	8004d28 <_printf_i+0x168>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d09b      	beq.n	8004d24 <_printf_i+0x164>
 8004dec:	3501      	adds	r5, #1
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	1a5b      	subs	r3, r3, r1
 8004df4:	42ab      	cmp	r3, r5
 8004df6:	dcf2      	bgt.n	8004dde <_printf_i+0x21e>
 8004df8:	e7eb      	b.n	8004dd2 <_printf_i+0x212>
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	f104 0619 	add.w	r6, r4, #25
 8004e00:	e7f5      	b.n	8004dee <_printf_i+0x22e>
 8004e02:	bf00      	nop
 8004e04:	080050bd 	.word	0x080050bd
 8004e08:	080050ce 	.word	0x080050ce

08004e0c <memcpy>:
 8004e0c:	440a      	add	r2, r1
 8004e0e:	4291      	cmp	r1, r2
 8004e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e14:	d100      	bne.n	8004e18 <memcpy+0xc>
 8004e16:	4770      	bx	lr
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e22:	4291      	cmp	r1, r2
 8004e24:	d1f9      	bne.n	8004e1a <memcpy+0xe>
 8004e26:	bd10      	pop	{r4, pc}

08004e28 <memmove>:
 8004e28:	4288      	cmp	r0, r1
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	eb01 0402 	add.w	r4, r1, r2
 8004e30:	d902      	bls.n	8004e38 <memmove+0x10>
 8004e32:	4284      	cmp	r4, r0
 8004e34:	4623      	mov	r3, r4
 8004e36:	d807      	bhi.n	8004e48 <memmove+0x20>
 8004e38:	1e43      	subs	r3, r0, #1
 8004e3a:	42a1      	cmp	r1, r4
 8004e3c:	d008      	beq.n	8004e50 <memmove+0x28>
 8004e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e46:	e7f8      	b.n	8004e3a <memmove+0x12>
 8004e48:	4402      	add	r2, r0
 8004e4a:	4601      	mov	r1, r0
 8004e4c:	428a      	cmp	r2, r1
 8004e4e:	d100      	bne.n	8004e52 <memmove+0x2a>
 8004e50:	bd10      	pop	{r4, pc}
 8004e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e5a:	e7f7      	b.n	8004e4c <memmove+0x24>

08004e5c <_free_r>:
 8004e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	d048      	beq.n	8004ef4 <_free_r+0x98>
 8004e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e66:	9001      	str	r0, [sp, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e6e:	bfb8      	it	lt
 8004e70:	18e4      	addlt	r4, r4, r3
 8004e72:	f000 f8d3 	bl	800501c <__malloc_lock>
 8004e76:	4a20      	ldr	r2, [pc, #128]	; (8004ef8 <_free_r+0x9c>)
 8004e78:	9801      	ldr	r0, [sp, #4]
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	4615      	mov	r5, r2
 8004e7e:	b933      	cbnz	r3, 8004e8e <_free_r+0x32>
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	6014      	str	r4, [r2, #0]
 8004e84:	b003      	add	sp, #12
 8004e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e8a:	f000 b8cd 	b.w	8005028 <__malloc_unlock>
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	d90b      	bls.n	8004eaa <_free_r+0x4e>
 8004e92:	6821      	ldr	r1, [r4, #0]
 8004e94:	1862      	adds	r2, r4, r1
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf04      	itt	eq
 8004e9a:	681a      	ldreq	r2, [r3, #0]
 8004e9c:	685b      	ldreq	r3, [r3, #4]
 8004e9e:	6063      	str	r3, [r4, #4]
 8004ea0:	bf04      	itt	eq
 8004ea2:	1852      	addeq	r2, r2, r1
 8004ea4:	6022      	streq	r2, [r4, #0]
 8004ea6:	602c      	str	r4, [r5, #0]
 8004ea8:	e7ec      	b.n	8004e84 <_free_r+0x28>
 8004eaa:	461a      	mov	r2, r3
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	b10b      	cbz	r3, 8004eb4 <_free_r+0x58>
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	d9fa      	bls.n	8004eaa <_free_r+0x4e>
 8004eb4:	6811      	ldr	r1, [r2, #0]
 8004eb6:	1855      	adds	r5, r2, r1
 8004eb8:	42a5      	cmp	r5, r4
 8004eba:	d10b      	bne.n	8004ed4 <_free_r+0x78>
 8004ebc:	6824      	ldr	r4, [r4, #0]
 8004ebe:	4421      	add	r1, r4
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	d1dd      	bne.n	8004e84 <_free_r+0x28>
 8004ec8:	681c      	ldr	r4, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	6053      	str	r3, [r2, #4]
 8004ece:	4421      	add	r1, r4
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	e7d7      	b.n	8004e84 <_free_r+0x28>
 8004ed4:	d902      	bls.n	8004edc <_free_r+0x80>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	6003      	str	r3, [r0, #0]
 8004eda:	e7d3      	b.n	8004e84 <_free_r+0x28>
 8004edc:	6825      	ldr	r5, [r4, #0]
 8004ede:	1961      	adds	r1, r4, r5
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	bf04      	itt	eq
 8004ee4:	6819      	ldreq	r1, [r3, #0]
 8004ee6:	685b      	ldreq	r3, [r3, #4]
 8004ee8:	6063      	str	r3, [r4, #4]
 8004eea:	bf04      	itt	eq
 8004eec:	1949      	addeq	r1, r1, r5
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	6054      	str	r4, [r2, #4]
 8004ef2:	e7c7      	b.n	8004e84 <_free_r+0x28>
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bd30      	pop	{r4, r5, pc}
 8004ef8:	200000b4 	.word	0x200000b4

08004efc <_malloc_r>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	1ccd      	adds	r5, r1, #3
 8004f00:	f025 0503 	bic.w	r5, r5, #3
 8004f04:	3508      	adds	r5, #8
 8004f06:	2d0c      	cmp	r5, #12
 8004f08:	bf38      	it	cc
 8004f0a:	250c      	movcc	r5, #12
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	4606      	mov	r6, r0
 8004f10:	db01      	blt.n	8004f16 <_malloc_r+0x1a>
 8004f12:	42a9      	cmp	r1, r5
 8004f14:	d903      	bls.n	8004f1e <_malloc_r+0x22>
 8004f16:	230c      	movs	r3, #12
 8004f18:	6033      	str	r3, [r6, #0]
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f1e:	f000 f87d 	bl	800501c <__malloc_lock>
 8004f22:	4921      	ldr	r1, [pc, #132]	; (8004fa8 <_malloc_r+0xac>)
 8004f24:	680a      	ldr	r2, [r1, #0]
 8004f26:	4614      	mov	r4, r2
 8004f28:	b99c      	cbnz	r4, 8004f52 <_malloc_r+0x56>
 8004f2a:	4f20      	ldr	r7, [pc, #128]	; (8004fac <_malloc_r+0xb0>)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	b923      	cbnz	r3, 8004f3a <_malloc_r+0x3e>
 8004f30:	4621      	mov	r1, r4
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 f862 	bl	8004ffc <_sbrk_r>
 8004f38:	6038      	str	r0, [r7, #0]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 f85d 	bl	8004ffc <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d123      	bne.n	8004f8e <_malloc_r+0x92>
 8004f46:	230c      	movs	r3, #12
 8004f48:	6033      	str	r3, [r6, #0]
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f000 f86c 	bl	8005028 <__malloc_unlock>
 8004f50:	e7e3      	b.n	8004f1a <_malloc_r+0x1e>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	1b5b      	subs	r3, r3, r5
 8004f56:	d417      	bmi.n	8004f88 <_malloc_r+0x8c>
 8004f58:	2b0b      	cmp	r3, #11
 8004f5a:	d903      	bls.n	8004f64 <_malloc_r+0x68>
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	441c      	add	r4, r3
 8004f60:	6025      	str	r5, [r4, #0]
 8004f62:	e004      	b.n	8004f6e <_malloc_r+0x72>
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	42a2      	cmp	r2, r4
 8004f68:	bf0c      	ite	eq
 8004f6a:	600b      	streq	r3, [r1, #0]
 8004f6c:	6053      	strne	r3, [r2, #4]
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f000 f85a 	bl	8005028 <__malloc_unlock>
 8004f74:	f104 000b 	add.w	r0, r4, #11
 8004f78:	1d23      	adds	r3, r4, #4
 8004f7a:	f020 0007 	bic.w	r0, r0, #7
 8004f7e:	1ac2      	subs	r2, r0, r3
 8004f80:	d0cc      	beq.n	8004f1c <_malloc_r+0x20>
 8004f82:	1a1b      	subs	r3, r3, r0
 8004f84:	50a3      	str	r3, [r4, r2]
 8004f86:	e7c9      	b.n	8004f1c <_malloc_r+0x20>
 8004f88:	4622      	mov	r2, r4
 8004f8a:	6864      	ldr	r4, [r4, #4]
 8004f8c:	e7cc      	b.n	8004f28 <_malloc_r+0x2c>
 8004f8e:	1cc4      	adds	r4, r0, #3
 8004f90:	f024 0403 	bic.w	r4, r4, #3
 8004f94:	42a0      	cmp	r0, r4
 8004f96:	d0e3      	beq.n	8004f60 <_malloc_r+0x64>
 8004f98:	1a21      	subs	r1, r4, r0
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f82e 	bl	8004ffc <_sbrk_r>
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d1dd      	bne.n	8004f60 <_malloc_r+0x64>
 8004fa4:	e7cf      	b.n	8004f46 <_malloc_r+0x4a>
 8004fa6:	bf00      	nop
 8004fa8:	200000b4 	.word	0x200000b4
 8004fac:	200000b8 	.word	0x200000b8

08004fb0 <_realloc_r>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	460e      	mov	r6, r1
 8004fb8:	b921      	cbnz	r1, 8004fc4 <_realloc_r+0x14>
 8004fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	f7ff bf9c 	b.w	8004efc <_malloc_r>
 8004fc4:	b922      	cbnz	r2, 8004fd0 <_realloc_r+0x20>
 8004fc6:	f7ff ff49 	bl	8004e5c <_free_r>
 8004fca:	4625      	mov	r5, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	f000 f830 	bl	8005034 <_malloc_usable_size_r>
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	d20f      	bcs.n	8004ff8 <_realloc_r+0x48>
 8004fd8:	4621      	mov	r1, r4
 8004fda:	4638      	mov	r0, r7
 8004fdc:	f7ff ff8e 	bl	8004efc <_malloc_r>
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0f2      	beq.n	8004fcc <_realloc_r+0x1c>
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4622      	mov	r2, r4
 8004fea:	f7ff ff0f 	bl	8004e0c <memcpy>
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f7ff ff33 	bl	8004e5c <_free_r>
 8004ff6:	e7e9      	b.n	8004fcc <_realloc_r+0x1c>
 8004ff8:	4635      	mov	r5, r6
 8004ffa:	e7e7      	b.n	8004fcc <_realloc_r+0x1c>

08004ffc <_sbrk_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_sbrk_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fb fd4c 	bl	8000aa4 <_sbrk>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_sbrk_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_sbrk_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200001fc 	.word	0x200001fc

0800501c <__malloc_lock>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__malloc_lock+0x8>)
 800501e:	f000 b811 	b.w	8005044 <__retarget_lock_acquire_recursive>
 8005022:	bf00      	nop
 8005024:	20000204 	.word	0x20000204

08005028 <__malloc_unlock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_unlock+0x8>)
 800502a:	f000 b80c 	b.w	8005046 <__retarget_lock_release_recursive>
 800502e:	bf00      	nop
 8005030:	20000204 	.word	0x20000204

08005034 <_malloc_usable_size_r>:
 8005034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005038:	1f18      	subs	r0, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	bfbc      	itt	lt
 800503e:	580b      	ldrlt	r3, [r1, r0]
 8005040:	18c0      	addlt	r0, r0, r3
 8005042:	4770      	bx	lr

08005044 <__retarget_lock_acquire_recursive>:
 8005044:	4770      	bx	lr

08005046 <__retarget_lock_release_recursive>:
 8005046:	4770      	bx	lr

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr


Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ebc  08005ebc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005ebc  08005ebc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ebc  08005ebc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000078  08005f3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  08005f3c  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ffc  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002497  00000000  00000000  000320a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000352f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4e  00000000  00000000  00035fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cd7  00000000  00000000  0004cc26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b26  00000000  00000000  0005d8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  000e7478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d0c 	.word	0x08005d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005d0c 	.word	0x08005d0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fd44 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f858 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f97e 	bl	800057c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8ac 	bl	80003dc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f942 	bl	800050c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f918 	bl	80004bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028c:	481e      	ldr	r0, [pc, #120]	; (8000308 <main+0x98>)
 800028e:	f002 fc3b 	bl	8002b08 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000292:	481e      	ldr	r0, [pc, #120]	; (800030c <main+0x9c>)
 8000294:	f002 fc38 	bl	8002b08 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	481b      	ldr	r0, [pc, #108]	; (8000308 <main+0x98>)
 800029c:	f002 fce2 	bl	8002c64 <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <main+0x9c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b19      	ldr	r3, [pc, #100]	; (8000310 <main+0xa0>)
 80002aa:	801a      	strh	r2, [r3, #0]
//			  ALLUME_LED = 1;
//		  }
	  }
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
	  if (level==1) {
 80002ac:	4b19      	ldr	r3, [pc, #100]	; (8000314 <main+0xa4>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d101      	bne.n	80002b8 <main+0x48>
	     generate_sequence();
 80002b4:	f000 fac2 	bl	800083c <generate_sequence>
	   }
	  //wrong_sequence();
	  HAL_Delay(1000);
 80002b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002bc:	f000 fd86 	bl	8000dcc <HAL_Delay>
	  if(Frequency < 10000)
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <main+0xa8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d80a      	bhi.n	80002e2 <main+0x72>
	  {
		  //start();
		  if(ALLUME_LED == 1)
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <main+0xac>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d106      	bne.n	80002e2 <main+0x72>
		  {
			  ALLUME_LED = 0;
 80002d4:	4b11      	ldr	r3, [pc, #68]	; (800031c <main+0xac>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80002da:	2108      	movs	r1, #8
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <main+0xb0>)
 80002de:	f001 f8ab 	bl	8001438 <HAL_GPIO_TogglePin>
	  UART_SendNumber(timer_val);
	  HAL_Delay(1000);
	  UART_SendText("\r\n");
	  */

	  UART_SendText("Frequency ");
 80002e2:	4810      	ldr	r0, [pc, #64]	; (8000324 <main+0xb4>)
 80002e4:	f000 f9bc 	bl	8000660 <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <main+0xa8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f9dd 	bl	80006ac <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002f2:	480d      	ldr	r0, [pc, #52]	; (8000328 <main+0xb8>)
 80002f4:	f000 f9b4 	bl	8000660 <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002fc:	f000 fd66 	bl	8000dcc <HAL_Delay>
	  Frequency = 0;
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <main+0xa8>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
	  if (level==1) {
 8000306:	e7d1      	b.n	80002ac <main+0x3c>
 8000308:	20000400 	.word	0x20000400
 800030c:	200004d0 	.word	0x200004d0
 8000310:	200000b0 	.word	0x200000b0
 8000314:	20000004 	.word	0x20000004
 8000318:	200000a0 	.word	0x200000a0
 800031c:	200000ac 	.word	0x200000ac
 8000320:	48000400 	.word	0x48000400
 8000324:	08005d24 	.word	0x08005d24
 8000328:	08005d30 	.word	0x08005d30

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000336:	2228      	movs	r2, #40	; 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f004 fb0a 	bl	8004954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	2230      	movs	r2, #48	; 0x30
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 fafc 	bl	8004954 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	2302      	movs	r3, #2
 800035e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000364:	2310      	movs	r3, #16
 8000366:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000368:	2300      	movs	r3, #0
 800036a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000370:	4618      	mov	r0, r3
 8000372:	f001 f87b 	bl	800146c <HAL_RCC_OscConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800037c:	f000 fab0 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000380:	230f      	movs	r3, #15
 8000382:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000384:	2300      	movs	r3, #0
 8000386:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 ff6e 	bl	800227c <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003a6:	f000 fa9b 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80003aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003b0:	2300      	movs	r3, #0
 80003b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 f9ca 	bl	8002750 <HAL_RCCEx_PeriphCLKConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003c2:	f000 fa8d 	bl	80008e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003cc:	2000      	movs	r0, #0
 80003ce:	f002 f8d1 	bl	8002574 <HAL_RCC_MCOConfig>
}
 80003d2:	bf00      	nop
 80003d4:	3770      	adds	r7, #112	; 0x70
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08c      	sub	sp, #48	; 0x30
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e2:	f107 0320 	add.w	r3, r7, #32
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	f107 0314 	add.w	r3, r7, #20
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003fc:	1d3b      	adds	r3, r7, #4
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000408:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_TIM2_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000416:	4b28      	ldr	r3, [pc, #160]	; (80004b8 <MX_TIM2_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800041e:	f04f 32ff 	mov.w	r2, #4294967295
 8000422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_TIM2_Init+0xdc>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042a:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000430:	4821      	ldr	r0, [pc, #132]	; (80004b8 <MX_TIM2_Init+0xdc>)
 8000432:	f002 fb11 	bl	8002a58 <HAL_TIM_Base_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800043c:	f000 fa50 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000444:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000446:	f107 0320 	add.w	r3, r7, #32
 800044a:	4619      	mov	r1, r3
 800044c:	481a      	ldr	r0, [pc, #104]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800044e:	f002 fef2 	bl	8003236 <HAL_TIM_ConfigClockSource>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000458:	f000 fa42 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800045c:	4816      	ldr	r0, [pc, #88]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800045e:	f002 fb9f 	bl	8002ba0 <HAL_TIM_IC_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000468:	f000 fa3a 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4619      	mov	r1, r3
 800047a:	480f      	ldr	r0, [pc, #60]	; (80004b8 <MX_TIM2_Init+0xdc>)
 800047c:	f003 fa4a 	bl	8003914 <HAL_TIMEx_MasterConfigSynchronization>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000486:	f000 fa2b 	bl	80008e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800048e:	2301      	movs	r3, #1
 8000490:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	4619      	mov	r1, r3
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_TIM2_Init+0xdc>)
 80004a2:	f002 fe2c 	bl	80030fe <HAL_TIM_IC_ConfigChannel>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004ac:	f000 fa18 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	3730      	adds	r7, #48	; 0x30
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000400 	.word	0x20000400

080004bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_TIM16_Init+0x48>)
 80004c2:	4a11      	ldr	r2, [pc, #68]	; (8000508 <MX_TIM16_Init+0x4c>)
 80004c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_TIM16_Init+0x48>)
 80004c8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004cc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <MX_TIM16_Init+0x48>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <MX_TIM16_Init+0x48>)
 80004d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004da:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_TIM16_Init+0x48>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004e2:	4b08      	ldr	r3, [pc, #32]	; (8000504 <MX_TIM16_Init+0x48>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_TIM16_Init+0x48>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_TIM16_Init+0x48>)
 80004f0:	f002 fab2 	bl	8002a58 <HAL_TIM_Base_Init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004fa:	f000 f9f1 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200004d0 	.word	0x200004d0
 8000508:	40014400 	.word	0x40014400

0800050c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000512:	4a18      	ldr	r2, [pc, #96]	; (8000574 <MX_USART2_UART_Init+0x68>)
 8000514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800051c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_USART2_UART_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_USART2_UART_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000542:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_USART2_UART_Init+0x64>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800054e:	4808      	ldr	r0, [pc, #32]	; (8000570 <MX_USART2_UART_Init+0x64>)
 8000550:	f003 fa64 	bl	8003a1c <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055a:	f000 f9c1 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <MX_USART2_UART_Init+0x6c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a05      	ldr	r2, [pc, #20]	; (8000578 <MX_USART2_UART_Init+0x6c>)
 8000564:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000568:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	2000044c 	.word	0x2000044c
 8000574:	40004400 	.word	0x40004400
 8000578:	40013800 	.word	0x40013800

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b31      	ldr	r3, [pc, #196]	; (8000658 <MX_GPIO_Init+0xdc>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a30      	ldr	r2, [pc, #192]	; (8000658 <MX_GPIO_Init+0xdc>)
 8000598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b25      	ldr	r3, [pc, #148]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b22      	ldr	r3, [pc, #136]	; (8000658 <MX_GPIO_Init+0xdc>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	21c0      	movs	r1, #192	; 0xc0
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f000 ff11 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	210b      	movs	r1, #11
 80005ea:	481c      	ldr	r0, [pc, #112]	; (800065c <MX_GPIO_Init+0xe0>)
 80005ec:	f000 ff0c 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005f0:	23c0      	movs	r3, #192	; 0xc0
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4619      	mov	r1, r3
 8000606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060a:	f000 fd8b 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 800060e:	230b      	movs	r3, #11
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <MX_GPIO_Init+0xe0>)
 8000626:	f000 fd7d 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800062a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 fd6b 	bl	8001124 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000400 	.word	0x48000400

08000660 <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 8000670:	e005      	b.n	800067e <UART_SendText+0x1e>
	{
		size++;
 8000672:	89bb      	ldrh	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	81bb      	strh	r3, [r7, #12]
		i++;
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	3301      	adds	r3, #1
 800067c:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f2      	bne.n	8000672 <UART_SendText+0x12>
	}
	size++; // '\0'
 800068c:	89bb      	ldrh	r3, [r7, #12]
 800068e:	3301      	adds	r3, #1
 8000690:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 8000692:	89ba      	ldrh	r2, [r7, #12]
 8000694:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	4803      	ldr	r0, [pc, #12]	; (80006a8 <UART_SendText+0x48>)
 800069c:	f003 fa0c 	bl	8003ab8 <HAL_UART_Transmit>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000044c 	.word	0x2000044c

080006ac <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	; 0x70
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4906      	ldr	r1, [pc, #24]	; (80006d4 <UART_SendNumber+0x28>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f004 f991 	bl	80049e4 <siprintf>
	UART_SendText(temp);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffca 	bl	8000660 <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006cc:	bf00      	nop
 80006ce:	3770      	adds	r7, #112	; 0x70
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08005d34 	.word	0x08005d34

080006d8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a4a      	ldr	r2, [pc, #296]	; (800080c <HAL_TIM_IC_CaptureCallback+0x134>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	f040 808d 	bne.w	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7f1b      	ldrb	r3, [r3, #28]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	f040 8088 	bne.w	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 80006f4:	4b46      	ldr	r3, [pc, #280]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x138>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10a      	bne.n	8000712 <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80006fc:	2100      	movs	r1, #0
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f002 fe62 	bl	80033c8 <HAL_TIM_ReadCapturedValue>
 8000704:	4603      	mov	r3, r0
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000708:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x138>)
 800070c:	2201      	movs	r2, #1
 800070e:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 8000710:	e078      	b.n	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 8000712:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d074      	beq.n	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800071a:	2100      	movs	r1, #0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f002 fe53 	bl	80033c8 <HAL_TIM_ReadCapturedValue>
 8000722:	4603      	mov	r3, r0
 8000724:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000726:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 8000728:	4b3b      	ldr	r3, [pc, #236]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x140>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b39      	ldr	r3, [pc, #228]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d907      	bls.n	8000744 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000734:	4b38      	ldr	r3, [pc, #224]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	4a37      	ldr	r2, [pc, #220]	; (800081c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	e011      	b.n	8000768 <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000744:	4b34      	ldr	r3, [pc, #208]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d209      	bcs.n	8000764 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000750:	4b31      	ldr	r3, [pc, #196]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	e001      	b.n	8000768 <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000764:	f000 f8bc 	bl	80008e0 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 8000768:	f001 ffae 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 800076c:	4602      	mov	r2, r0
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4a2a      	ldr	r2, [pc, #168]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000778:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x138>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 8000780:	4b28      	ldr	r3, [pc, #160]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000786:	4a28      	ldr	r2, [pc, #160]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000788:	8812      	ldrh	r2, [r2, #0]
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000790:	d338      	bcc.n	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a24      	ldr	r2, [pc, #144]	; (800082c <HAL_TIM_IC_CaptureCallback+0x154>)
 800079a:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x150>)
 80007a6:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x148>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d827      	bhi.n	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c2:	2108      	movs	r1, #8
 80007c4:	481b      	ldr	r0, [pc, #108]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007c6:	f000 fe37 	bl	8001438 <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d118      	bne.n	8000804 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2140      	movs	r1, #64	; 0x40
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e0:	f000 fe12 	bl	8001408 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ea:	f000 fe0d 	bl	8001408 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f6:	f000 fe07 	bl	8001408 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2101      	movs	r1, #1
 80007fe:	480d      	ldr	r0, [pc, #52]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000800:	f000 fe02 	bl	8001408 <HAL_GPIO_WritePin>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000400 	.word	0x20000400
 8000810:	200000a8 	.word	0x200000a8
 8000814:	20000094 	.word	0x20000094
 8000818:	20000098 	.word	0x20000098
 800081c:	2000009c 	.word	0x2000009c
 8000820:	200000a0 	.word	0x200000a0
 8000824:	200004d0 	.word	0x200004d0
 8000828:	200000b0 	.word	0x200000b0
 800082c:	200000a4 	.word	0x200000a4
 8000830:	200000ac 	.word	0x200000ac
 8000834:	48000400 	.word	0x48000400
 8000838:	20000000 	.word	0x20000000

0800083c <generate_sequence>:
		HAL_Delay(200);
	}
}

void generate_sequence(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	 int i;
	 int random = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
	 for (i = 0; i < MAX_LEVEL; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e039      	b.n	80008c0 <generate_sequence+0x84>
		random = rand() % 4;
 800084c:	f004 f88a 	bl	8004964 <rand>
 8000850:	4603      	mov	r3, r0
 8000852:	425a      	negs	r2, r3
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	f002 0203 	and.w	r2, r2, #3
 800085c:	bf58      	it	pl
 800085e:	4253      	negpl	r3, r2
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d823      	bhi.n	80008b0 <generate_sequence+0x74>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <generate_sequence+0x34>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	08000881 	.word	0x08000881
 8000874:	0800088d 	.word	0x0800088d
 8000878:	08000899 	.word	0x08000899
 800087c:	080008a5 	.word	0x080008a5
		switch(random)
		{
			case 0:
				sequence[i]=0x0040U;
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <generate_sequence+0x9c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2140      	movs	r1, #64	; 0x40
 8000886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800088a:	e016      	b.n	80008ba <generate_sequence+0x7e>
			case 1:
				sequence[i]=0x0080U;
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <generate_sequence+0x9c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000896:	e010      	b.n	80008ba <generate_sequence+0x7e>
			case 2:
				sequence[i]=0x0040U;
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <generate_sequence+0x9c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80008a2:	e00a      	b.n	80008ba <generate_sequence+0x7e>
			case 3:
				sequence[i]=0x0001U;
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <generate_sequence+0x9c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2101      	movs	r1, #1
 80008aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80008ae:	e004      	b.n	80008ba <generate_sequence+0x7e>
			default:
				sequence[i]=0x0040U;
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <generate_sequence+0x9c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i < MAX_LEVEL; i++) {
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b63      	cmp	r3, #99	; 0x63
 80008c4:	ddc2      	ble.n	800084c <generate_sequence+0x10>
		}


	 }
	 level++;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <generate_sequence+0xa0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <generate_sequence+0xa0>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000c0 	.word	0x200000c0
 80008dc:	20000004 	.word	0x20000004

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6193      	str	r3, [r2, #24]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x44>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000954:	d131      	bne.n	80009ba <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 8000974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000986:	2301      	movs	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000996:	2301      	movs	r3, #1
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f000 fbbe 	bl	8001124 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2100      	movs	r1, #0
 80009ac:	201c      	movs	r0, #28
 80009ae:	f000 fb0c 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009b2:	201c      	movs	r0, #28
 80009b4:	f000 fb25 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80009b8:	e010      	b.n	80009dc <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_TIM_Base_MspInit+0xb4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d10b      	bne.n	80009dc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6193      	str	r3, [r2, #24]
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_TIM_Base_MspInit+0xb0>)
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40014400 	.word	0x40014400

080009ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <HAL_UART_MspInit+0x8c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d130      	bne.n	8000a70 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	61d3      	str	r3, [r2, #28]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_UART_MspInit+0x90>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fb62 	bl	8001124 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2026      	movs	r0, #38	; 0x26
 8000a66:	f000 fab0 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a6a:	2026      	movs	r0, #38	; 0x26
 8000a6c:	f000 fac9 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40004400 	.word	0x40004400
 8000a7c:	40021000 	.word	0x40021000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000acc:	f000 f95e 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM2_IRQHandler+0x10>)
 8000ada:	f002 f9f1 	bl	8002ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000400 	.word	0x20000400

08000ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	f003 f877 	bl	8003be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000044c 	.word	0x2000044c

08000afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
	return 1;
 8000b00:	2301      	movs	r3, #1
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_kill>:

int _kill(int pid, int sig)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b16:	f003 fef3 	bl	8004900 <__errno>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2216      	movs	r2, #22
 8000b1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <_exit>:

void _exit (int status)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ffe7 	bl	8000b0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b3e:	e7fe      	b.n	8000b3e <_exit+0x12>

08000b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e00a      	b.n	8000b68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b52:	f3af 8000 	nop.w
 8000b56:	4601      	mov	r1, r0
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	60ba      	str	r2, [r7, #8]
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf0      	blt.n	8000b52 <_read+0x12>
	}

return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e009      	b.n	8000ba0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf1      	blt.n	8000b8c <_write+0x12>
	}
	return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_close>:

int _close(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	605a      	str	r2, [r3, #4]
	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_isatty>:

int _isatty(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f003 fe58 	bl	8004900 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20004000 	.word	0x20004000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	200000b4 	.word	0x200000b4
 8000c84:	20000530 	.word	0x20000530

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fe17 	bl	800490c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cde:	f7ff fac7 	bl	8000270 <main>

08000ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf0:	08005ec4 	.word	0x08005ec4
  ldr r2, =_sbss
 8000cf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cf8:	20000530 	.word	0x20000530

08000cfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f94f 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fde6 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f967 	bl	800101e <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f92f 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000010 	.word	0x20000010
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000010 	.word	0x20000010
 8000db0:	2000051c 	.word	0x2000051c

08000db4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000051c 	.word	0x2000051c

08000dcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffee 	bl	8000db4 <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffde 	bl	8000db4 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000010 	.word	0x20000010

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff29 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff3e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff31 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001044:	2b02      	cmp	r3, #2
 8001046:	d008      	beq.n	800105a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e020      	b.n	800109c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 020e 	bic.w	r2, r2, #14
 8001068:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f202 	lsl.w	r2, r1, r2
 8001088:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d005      	beq.n	80010ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2204      	movs	r2, #4
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e027      	b.n	800111a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 020e 	bic.w	r2, r2, #14
 80010d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	4798      	blx	r3
    } 
  }
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e14e      	b.n	80013d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8140 	beq.w	80013cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0203 	and.w	r2, r3, #3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 809a 	beq.w	80013cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b0:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x1e0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2d4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1dc>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1d8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1d4>
 80012f4:	2303      	movs	r3, #3
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012f8:	2305      	movs	r3, #5
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 8001304:	2300      	movs	r3, #0
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001348:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f47f aea9 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43d9      	mvns	r1, r3
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	400b      	ands	r3, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001472:	af00      	add	r7, sp, #0
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bef4 	b.w	800226e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 816a 	beq.w	800176a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001496:	4bb3      	ldr	r3, [pc, #716]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00c      	beq.n	80014bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a2:	4bb0      	ldr	r3, [pc, #704]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d159      	bne.n	8001562 <HAL_RCC_OscConfig+0xf6>
 80014ae:	4bad      	ldr	r3, [pc, #692]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d152      	bne.n	8001562 <HAL_RCC_OscConfig+0xf6>
 80014bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x82>
 80014e8:	4b9e      	ldr	r3, [pc, #632]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0xae>
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800150a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001516:	4b93      	ldr	r3, [pc, #588]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001522:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800152e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 810c 	beq.w	8001768 <HAL_RCC_OscConfig+0x2fc>
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8106 	bne.w	8001768 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	f000 be86 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x110>
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e030      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x134>
 8001586:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a76      	ldr	r2, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01e      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x15a>
 80015ac:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6c      	ldr	r2, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015de:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f023 020f 	bic.w	r2, r3, #15
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	495d      	ldr	r1, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d059      	beq.n	80016b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fbda 	bl	8000db4 <HAL_GetTick>
 8001600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fbd5 	bl	8000db4 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d902      	bls.n	800161c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	f000 be29 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 800161c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001620:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001630:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x1e2>
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x20e>
 800164e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001652:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800166a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001682:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001686:	fa92 f2a2 	rbit	r2, r2
 800168a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800168e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f042 0220 	orr.w	r2, r2, #32
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f002 021f 	and.w	r2, r2, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ab      	beq.n	8001606 <HAL_RCC_OscConfig+0x19a>
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb80 	bl	8000db4 <HAL_GetTick>
 80016b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fb7b 	bl	8000db4 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d902      	bls.n	80016d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f000 bdcf 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x296>
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x2c2>
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800171e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001732:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001736:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001742:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f002 021f 	and.w	r2, r2, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ab      	bne.n	80016ba <HAL_RCC_OscConfig+0x24e>
 8001762:	e002      	b.n	800176a <HAL_RCC_OscConfig+0x2fe>
 8001764:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 816f 	beq.w	8001a58 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4bd0      	ldr	r3, [pc, #832]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001786:	4bcd      	ldr	r3, [pc, #820]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d16c      	bne.n	800186c <HAL_RCC_OscConfig+0x400>
 8001792:	4bca      	ldr	r3, [pc, #808]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d166      	bne.n	800186c <HAL_RCC_OscConfig+0x400>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x362>
 80017c8:	4bbc      	ldr	r3, [pc, #752]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x38a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017f2:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	2202      	movs	r2, #2
 80017f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001800:	fa92 f2a2 	rbit	r2, r2
 8001804:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001808:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x3cc>
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d002      	beq.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f000 bd1b 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	21f8      	movs	r1, #248	; 0xf8
 8001848:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001850:	fa91 f1a1 	rbit	r1, r1
 8001854:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001858:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800185c:	fab1 f181 	clz	r1, r1
 8001860:	b2c9      	uxtb	r1, r1
 8001862:	408b      	lsls	r3, r1
 8001864:	4995      	ldr	r1, [pc, #596]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e0f5      	b.n	8001a58 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8085 	beq.w	8001982 <HAL_RCC_OscConfig+0x516>
 8001878:	2301      	movs	r3, #1
 800187a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800188a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	2301      	movs	r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fa86 	bl	8000db4 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fa81 	bl	8000db4 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d902      	bls.n	80018c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	f000 bcd5 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x488>
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0x4b0>
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800190c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	2202      	movs	r2, #2
 800191e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001922:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800192e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0af      	beq.n	80018ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	21f8      	movs	r1, #248	; 0xf8
 800195e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001966:	fa91 f1a1 	rbit	r1, r1
 800196a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800196e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001972:	fab1 f181 	clz	r1, r1
 8001976:	b2c9      	uxtb	r1, r1
 8001978:	408b      	lsls	r3, r1
 800197a:	4950      	ldr	r1, [pc, #320]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e06a      	b.n	8001a58 <HAL_RCC_OscConfig+0x5ec>
 8001982:	2301      	movs	r3, #1
 8001984:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff fa01 	bl	8000db4 <HAL_GetTick>
 80019b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f9fc 	bl	8000db4 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d902      	bls.n	80019ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f000 bc50 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x592>
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0x5ba>
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a10:	2302      	movs	r3, #2
 8001a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2202      	movs	r2, #2
 8001a28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a30:	fa92 f2a2 	rbit	r2, r2
 8001a34:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1af      	bne.n	80019b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80da 	beq.w	8001c1c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d069      	beq.n	8001b46 <HAL_RCC_OscConfig+0x6da>
 8001a72:	2301      	movs	r3, #1
 8001a74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x654>)
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	2301      	movs	r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f98a 	bl	8000db4 <HAL_GetTick>
 8001aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f985 	bl	8000db4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d906      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e3d9      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	10908120 	.word	0x10908120
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001af2:	2202      	movs	r2, #2
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4ba5      	ldr	r3, [pc, #660]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	6019      	str	r1, [r3, #0]
 8001b12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f1a3 	rbit	r1, r3
 8001b1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b20:	6019      	str	r1, [r3, #0]
  return result;
 8001b22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0b0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x63a>
 8001b44:	e06a      	b.n	8001c1c <HAL_RCC_OscConfig+0x7b0>
 8001b46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b5c:	601a      	str	r2, [r3, #0]
  return result;
 8001b5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x934>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff f91c 	bl	8000db4 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff f917 	bl	8000db4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e36b      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001b96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001be6:	2102      	movs	r1, #2
 8001be8:	6019      	str	r1, [r3, #0]
 8001bea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f1a3 	rbit	r1, r3
 8001bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf8:	6019      	str	r1, [r3, #0]
  return result;
 8001bfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1b2      	bne.n	8001b82 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8158 	beq.w	8001edc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11a      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f89a 	bl	8000db4 <HAL_GetTick>
 8001c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f895 	bl	8000db4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e2e9      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ef      	beq.n	8001c86 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x852>
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02f      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x876>
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e01d      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x89a>
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d06b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f844 	bl	8000db4 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f83f 	bl	8000db4 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e291      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001d4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_OscConfig+0x93c>
 8001d94:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	e014      	b.n	8001dc4 <HAL_RCC_OscConfig+0x958>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
 8001da8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4bbb      	ldr	r3, [pc, #748]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dc8:	2102      	movs	r1, #2
 8001dca:	6011      	str	r1, [r2, #0]
 8001dcc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fa92 f1a2 	rbit	r1, r2
 8001dd6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dda:	6011      	str	r1, [r2, #0]
  return result;
 8001ddc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d099      	beq.n	8001d32 <HAL_RCC_OscConfig+0x8c6>
 8001dfe:	e063      	b.n	8001ec8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe ffd8 	bl	8000db4 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ffd3 	bl	8000db4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e225      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0xa06>
 8001e6c:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	e00d      	b.n	8001e8e <HAL_RCC_OscConfig+0xa22>
 8001e72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e92:	2102      	movs	r1, #2
 8001e94:	6011      	str	r1, [r2, #0]
 8001e96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fa92 f1a2 	rbit	r1, r2
 8001ea0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ea4:	6011      	str	r1, [r2, #0]
  return result;
 8001ea6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1a0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a76      	ldr	r2, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 81c2 	beq.w	800226c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f000 819c 	beq.w	800222e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f040 8114 	bne.w	800212a <HAL_RCC_OscConfig+0xcbe>
 8001f02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe ff3c 	bl	8000db4 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe ff37 	bl	8000db4 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e18b      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001f56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f6e:	601a      	str	r2, [r3, #0]
  return result;
 8001f70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0xb24>
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb5c>
 8001f90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	fa92 f1a2 	rbit	r1, r2
 8001fdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19e      	bne.n	8001f42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	430b      	orrs	r3, r1
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
 8002020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002038:	601a      	str	r2, [r3, #0]
  return result;
 800203a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	461a      	mov	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe fead 	bl	8000db4 <HAL_GetTick>
 800205a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205e:	e009      	b.n	8002074 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe fea8 	bl	8000db4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0fc      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8002074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800208c:	601a      	str	r2, [r3, #0]
  return result;
 800208e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002092:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0xc48>
 80020a8:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e01e      	b.n	80020ec <HAL_RCC_OscConfig+0xc80>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020f4:	6011      	str	r1, [r2, #0]
 80020f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	fa92 f1a2 	rbit	r1, r2
 8002100:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002104:	6011      	str	r1, [r2, #0]
  return result;
 8002106:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0220 	orr.w	r2, r2, #32
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d09b      	beq.n	8002060 <HAL_RCC_OscConfig+0xbf4>
 8002128:	e0a0      	b.n	800226c <HAL_RCC_OscConfig+0xe00>
 800212a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800212e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	601a      	str	r2, [r3, #0]
  return result;
 8002144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002148:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002154:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	2300      	movs	r3, #0
 800215e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fe28 	bl	8000db4 <HAL_GetTick>
 8002164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002168:	e009      	b.n	800217e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fe23 	bl	8000db4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e077      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	601a      	str	r2, [r3, #0]
  return result;
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_OscConfig+0xd4c>
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e01b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd84>
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021f8:	6011      	str	r1, [r2, #0]
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fa92 f1a2 	rbit	r1, r2
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	6011      	str	r1, [r2, #0]
  return result;
 800220a:	f107 020c 	add.w	r2, r7, #12
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f042 0220 	orr.w	r2, r2, #32
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f002 021f 	and.w	r2, r2, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d19e      	bne.n	800216a <HAL_RCC_OscConfig+0xcfe>
 800222c:	e01e      	b.n	800226c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e018      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002244:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	429a      	cmp	r2, r3
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800225a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09e      	sub	sp, #120	; 0x78
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e162      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	498b      	ldr	r1, [pc, #556]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e14a      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80dc 	beq.w	80024a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13c      	bne.n	8002372 <HAL_RCC_ClockConfig+0xf6>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_ClockConfig+0xa6>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e00f      	b.n	8002342 <HAL_RCC_ClockConfig+0xc6>
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	65ba      	str	r2, [r7, #88]	; 0x58
 8002348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17b      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0f3      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13c      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x128>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_ClockConfig+0x148>
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b2      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HAL_RCC_ClockConfig+0x1bc>
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2202      	movs	r2, #2
 800243a:	61ba      	str	r2, [r7, #24]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	617a      	str	r2, [r7, #20]
  return result;
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	491a      	ldr	r1, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fc9c 	bl	8000db4 <HAL_GetTick>
 800247c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fc98 	bl	8000db4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e061      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d214      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e040      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491a      	ldr	r1, [pc, #104]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4912      	ldr	r1, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800251e:	f000 f85d 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x2ec>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x2f0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_ClockConfig+0x2f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fbea 	bl	8000d2c <HAL_InitTick>
  
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3778      	adds	r7, #120	; 0x78
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08005d38 	.word	0x08005d38
 800256c:	20000008 	.word	0x20000008
 8002570:	2000000c 	.word	0x2000000c

08002574 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800258c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002590:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_RCC_MCOConfig+0x64>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <HAL_RCC_MCOConfig+0x64>)
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	6153      	str	r3, [r2, #20]
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_RCC_MCOConfig+0x64>)
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f7fe fdb4 	bl	8001124 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_MCOConfig+0x64>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_MCOConfig+0x64>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40021000 	.word	0x40021000

080025dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d002      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x30>
 8002606:	2b08      	cmp	r3, #8
 8002608:	d003      	beq.n	8002612 <HAL_RCC_GetSysClockFreq+0x36>
 800260a:	e03c      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800260e:	623b      	str	r3, [r7, #32]
      break;
 8002610:	e03c      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002618:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800261c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	fa92 f2a2 	rbit	r2, r2
 8002624:	607a      	str	r2, [r7, #4]
  return result;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	fab2 f282 	clz	r2, r2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	40d3      	lsrs	r3, r2
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	220f      	movs	r2, #15
 8002640:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	fa92 f2a2 	rbit	r2, r2
 8002648:	60fa      	str	r2, [r7, #12]
  return result;
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	40d3      	lsrs	r3, r2
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fb02 f303 	mul.w	r3, r2, r3
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e004      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4a0c      	ldr	r2, [pc, #48]	; (80026ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	623b      	str	r3, [r7, #32]
      break;
 8002684:	e002      	b.n	800268c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002688:	623b      	str	r3, [r7, #32]
      break;
 800268a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800268c:	6a3b      	ldr	r3, [r7, #32]
}
 800268e:	4618      	mov	r0, r3
 8002690:	372c      	adds	r7, #44	; 0x2c
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	007a1200 	.word	0x007a1200
 80026a4:	08005d50 	.word	0x08005d50
 80026a8:	08005d60 	.word	0x08005d60
 80026ac:	003d0900 	.word	0x003d0900

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026ce:	f7ff ffef 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d2:	4601      	mov	r1, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	603a      	str	r2, [r7, #0]
  return result;
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	40d3      	lsrs	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08005d48 	.word	0x08005d48

0800270c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002712:	f7ff ffcd 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8002716:	4601      	mov	r1, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002720:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002724:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa92 f2a2 	rbit	r2, r2
 800272c:	603a      	str	r2, [r7, #0]
  return result;
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	fab2 f282 	clz	r2, r2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	40d3      	lsrs	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_RCC_GetPCLK2Freq+0x40>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08005d48 	.word	0x08005d48

08002750 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b092      	sub	sp, #72	; 0x48
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80d4 	beq.w	800291c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10e      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278a:	61d3      	str	r3, [r2, #28]
 800278c:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b45      	ldr	r3, [pc, #276]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a41      	ldr	r2, [pc, #260]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7fe fafd 	bl	8000db4 <HAL_GetTick>
 80027ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7fe faf9 	bl	8000db4 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e13c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8084 	beq.w	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d07c      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027fc:	4b2c      	ldr	r3, [pc, #176]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002816:	fab3 f383 	clz	r3, r3
 800281a:	b2db      	uxtb	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	461a      	mov	r2, r3
 8002826:	2301      	movs	r3, #1
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800282e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	461a      	mov	r2, r3
 800284a:	2300      	movs	r3, #0
 800284c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002852:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04b      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe faa9 	bl	8000db4 <HAL_GetTick>
 8002862:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe faa5 	bl	8000db4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0e6      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800287c:	2302      	movs	r3, #2
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	61fb      	str	r3, [r7, #28]
  return result;
 8002894:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d108      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028aa:	4b01      	ldr	r3, [pc, #4]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	e00d      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40007000 	.word	0x40007000
 80028b8:	10908100 	.word	0x10908100
 80028bc:	2302      	movs	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	2202      	movs	r2, #2
 80028ce:	613a      	str	r2, [r7, #16]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	fa92 f2a2 	rbit	r2, r2
 80028d6:	60fa      	str	r2, [r7, #12]
  return result;
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	fab2 f282 	clz	r2, r2
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f002 021f 	and.w	r2, r2, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f202 	lsl.w	r2, r1, r2
 80028f0:	4013      	ands	r3, r2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0b7      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028f6:	4b57      	ldr	r3, [pc, #348]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4954      	ldr	r1, [pc, #336]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002904:	4313      	orrs	r3, r2
 8002906:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002908:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4a4f      	ldr	r2, [pc, #316]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002928:	4b4a      	ldr	r3, [pc, #296]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4947      	ldr	r1, [pc, #284]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002936:	4313      	orrs	r3, r2
 8002938:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f023 0210 	bic.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4940      	ldr	r1, [pc, #256]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002954:	4313      	orrs	r3, r2
 8002956:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f023 0220 	bic.w	r2, r3, #32
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	4938      	ldr	r1, [pc, #224]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002972:	4313      	orrs	r3, r2
 8002974:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	4931      	ldr	r1, [pc, #196]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002990:	4313      	orrs	r3, r2
 8002992:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4929      	ldr	r1, [pc, #164]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4922      	ldr	r1, [pc, #136]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	491a      	ldr	r1, [pc, #104]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d008      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	4913      	ldr	r1, [pc, #76]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	490b      	ldr	r1, [pc, #44]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	4904      	ldr	r1, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3748      	adds	r7, #72	; 0x48
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e049      	b.n	8002afe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd ff58 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 fd02 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d001      	beq.n	8002b20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e033      	b.n	8002b88 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_TIM_Base_Start+0x8c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d009      	beq.n	8002b46 <HAL_TIM_Base_Start+0x3e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3a:	d004      	beq.n	8002b46 <HAL_TIM_Base_Start+0x3e>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_TIM_Base_Start+0x90>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d115      	bne.n	8002b72 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_TIM_Base_Start+0x94>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d015      	beq.n	8002b84 <HAL_TIM_Base_Start+0x7c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d011      	beq.n	8002b84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	e008      	b.n	8002b84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e000      	b.n	8002b86 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	00010007 	.word	0x00010007

08002ba0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e049      	b.n	8002c46 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f841 	bl	8002c4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 fc5e 	bl	80034a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_IC_Start_IT+0x1e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	e023      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_IC_Start_IT+0x2e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	e01b      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_IC_Start_IT+0x3e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_IC_Start_IT+0x4e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_IC_Start_IT+0x5e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_IC_Start_IT+0x66>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_TIM_IC_Start_IT+0x78>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e013      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d104      	bne.n	8002cec <HAL_TIM_IC_Start_IT+0x88>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e00b      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d104      	bne.n	8002cfc <HAL_TIM_IC_Start_IT+0x98>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e003      	b.n	8002d04 <HAL_TIM_IC_Start_IT+0xa0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d06:	7bbb      	ldrb	r3, [r7, #14]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d0c:	7b7b      	ldrb	r3, [r7, #13]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0c9      	b.n	8002eaa <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_TIM_IC_Start_IT+0xc2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d24:	e023      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d104      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0xd2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d34:	e01b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0xe2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0xf2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0x102>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_IC_Start_IT+0x10a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_IC_Start_IT+0x11a>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d7c:	e013      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d104      	bne.n	8002d8e <HAL_TIM_IC_Start_IT+0x12a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d8c:	e00b      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_IC_Start_IT+0x13a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d9c:	e003      	b.n	8002da6 <HAL_TIM_IC_Start_IT+0x142>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d841      	bhi.n	8002e30 <HAL_TIM_IC_Start_IT+0x1cc>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <HAL_TIM_IC_Start_IT+0x150>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002e31 	.word	0x08002e31
 8002dbc:	08002e31 	.word	0x08002e31
 8002dc0:	08002e31 	.word	0x08002e31
 8002dc4:	08002dfb 	.word	0x08002dfb
 8002dc8:	08002e31 	.word	0x08002e31
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002e31 	.word	0x08002e31
 8002dd4:	08002e0d 	.word	0x08002e0d
 8002dd8:	08002e31 	.word	0x08002e31
 8002ddc:	08002e31 	.word	0x08002e31
 8002de0:	08002e31 	.word	0x08002e31
 8002de4:	08002e1f 	.word	0x08002e1f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0202 	orr.w	r2, r2, #2
 8002df6:	60da      	str	r2, [r3, #12]
      break;
 8002df8:	e01d      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0204 	orr.w	r2, r2, #4
 8002e08:	60da      	str	r2, [r3, #12]
      break;
 8002e0a:	e014      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	60da      	str	r2, [r3, #12]
      break;
 8002e1c:	e00b      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0210 	orr.w	r2, r2, #16
 8002e2c:	60da      	str	r2, [r3, #12]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      break;
 8002e34:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d135      	bne.n	8002ea8 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fd3f 	bl	80038c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a19      	ldr	r2, [pc, #100]	; (8002eb4 <HAL_TIM_IC_Start_IT+0x250>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIM_IC_Start_IT+0x204>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_IC_Start_IT+0x204>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <HAL_TIM_IC_Start_IT+0x254>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d115      	bne.n	8002e94 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_TIM_IC_Start_IT+0x258>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d015      	beq.n	8002ea6 <HAL_TIM_IC_Start_IT+0x242>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d011      	beq.n	8002ea6 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e008      	b.n	8002ea6 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	00010007 	.word	0x00010007

08002ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fbe8 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 faaa 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fab1 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0204 	mvn.w	r2, #4
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fbbe 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa80 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa87 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0208 	mvn.w	r2, #8
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fb94 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa56 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fa5d 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd fb6a 	bl	80006d8 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fa2c 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fa33 	bl	8003478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0201 	mvn.w	r2, #1
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa06 	bl	8003450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304e:	2b80      	cmp	r3, #128	; 0x80
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305c:	2b80      	cmp	r3, #128	; 0x80
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fcc2 	bl	80039f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307e:	d10e      	bne.n	800309e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b80      	cmp	r3, #128	; 0x80
 800308c:	d107      	bne.n	800309e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fcb5 	bl	8003a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	d10e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f9e1 	bl	800348c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d10e      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d107      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0220 	mvn.w	r2, #32
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 fc75 	bl	80039e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003118:	2302      	movs	r3, #2
 800311a:	e088      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x130>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11b      	bne.n	8003162 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f000 fa1f 	bl	800357c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 020c 	bic.w	r2, r2, #12
 800314c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6999      	ldr	r1, [r3, #24]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	e060      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11c      	bne.n	80031a2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f000 fa85 	bl	8003686 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800318a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6999      	ldr	r1, [r3, #24]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	021a      	lsls	r2, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]
 80031a0:	e040      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d11b      	bne.n	80031e0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f000 fad2 	bl	8003760 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69da      	ldr	r2, [r3, #28]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 020c 	bic.w	r2, r2, #12
 80031ca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69d9      	ldr	r1, [r3, #28]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	61da      	str	r2, [r3, #28]
 80031de:	e021      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d11c      	bne.n	8003220 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f000 faef 	bl	80037d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003208:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	021a      	lsls	r2, r3, #8
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	61da      	str	r2, [r3, #28]
 800321e:	e001      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b084      	sub	sp, #16
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_TIM_ConfigClockSource+0x1c>
 800324e:	2302      	movs	r3, #2
 8003250:	e0b6      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x18a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003274:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800327c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328e:	d03e      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xd8>
 8003290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003294:	f200 8087 	bhi.w	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	f000 8086 	beq.w	80033ac <HAL_TIM_ConfigClockSource+0x176>
 80032a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a4:	d87f      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032a6:	2b70      	cmp	r3, #112	; 0x70
 80032a8:	d01a      	beq.n	80032e0 <HAL_TIM_ConfigClockSource+0xaa>
 80032aa:	2b70      	cmp	r3, #112	; 0x70
 80032ac:	d87b      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032ae:	2b60      	cmp	r3, #96	; 0x60
 80032b0:	d050      	beq.n	8003354 <HAL_TIM_ConfigClockSource+0x11e>
 80032b2:	2b60      	cmp	r3, #96	; 0x60
 80032b4:	d877      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032b6:	2b50      	cmp	r3, #80	; 0x50
 80032b8:	d03c      	beq.n	8003334 <HAL_TIM_ConfigClockSource+0xfe>
 80032ba:	2b50      	cmp	r3, #80	; 0x50
 80032bc:	d873      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d058      	beq.n	8003374 <HAL_TIM_ConfigClockSource+0x13e>
 80032c2:	2b40      	cmp	r3, #64	; 0x40
 80032c4:	d86f      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032c6:	2b30      	cmp	r3, #48	; 0x30
 80032c8:	d064      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x15e>
 80032ca:	2b30      	cmp	r3, #48	; 0x30
 80032cc:	d86b      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d060      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x15e>
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d867      	bhi.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d05c      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x15e>
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d05a      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0x15e>
 80032de:	e062      	b.n	80033a6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f000 faca 	bl	8003888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003302:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
      break;
 800330c:	e04f      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f000 fab3 	bl	8003888 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003330:	609a      	str	r2, [r3, #8]
      break;
 8003332:	e03c      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	461a      	mov	r2, r3
 8003342:	f000 f971 	bl	8003628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2150      	movs	r1, #80	; 0x50
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa80 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003352:	e02c      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	461a      	mov	r2, r3
 8003362:	f000 f9cd 	bl	8003700 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2160      	movs	r1, #96	; 0x60
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fa70 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003372:	e01c      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 f951 	bl	8003628 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fa60 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 8003392:	e00c      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f000 fa57 	bl	8003852 <TIM_ITRx_SetConfig>
      break;
 80033a4:	e003      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      break;
 80033aa:	e000      	b.n	80033ae <HAL_TIM_ConfigClockSource+0x178>
      break;
 80033ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b0c      	cmp	r3, #12
 80033da:	d831      	bhi.n	8003440 <HAL_TIM_ReadCapturedValue+0x78>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003441 	.word	0x08003441
 80033ec:	08003441 	.word	0x08003441
 80033f0:	08003441 	.word	0x08003441
 80033f4:	08003423 	.word	0x08003423
 80033f8:	08003441 	.word	0x08003441
 80033fc:	08003441 	.word	0x08003441
 8003400:	08003441 	.word	0x08003441
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003441 	.word	0x08003441
 800340c:	08003441 	.word	0x08003441
 8003410:	08003441 	.word	0x08003441
 8003414:	08003437 	.word	0x08003437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	60fb      	str	r3, [r7, #12]

      break;
 8003420:	e00f      	b.n	8003442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	60fb      	str	r3, [r7, #12]

      break;
 800342a:	e00a      	b.n	8003442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	60fb      	str	r3, [r7, #12]

      break;
 8003434:	e005      	b.n	8003442 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	60fb      	str	r3, [r7, #12]

      break;
 800343e:	e000      	b.n	8003442 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003440:	bf00      	nop
  }

  return tmpreg;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a2e      	ldr	r2, [pc, #184]	; (800356c <TIM_Base_SetConfig+0xcc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x20>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0xcc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00f      	beq.n	80034fa <TIM_Base_SetConfig+0x5a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d00b      	beq.n	80034fa <TIM_Base_SetConfig+0x5a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a22      	ldr	r2, [pc, #136]	; (8003570 <TIM_Base_SetConfig+0xd0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d007      	beq.n	80034fa <TIM_Base_SetConfig+0x5a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <TIM_Base_SetConfig+0xd4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0x5a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <TIM_Base_SetConfig+0xd8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d108      	bne.n	800350c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0e      	ldr	r2, [pc, #56]	; (800356c <TIM_Base_SetConfig+0xcc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00b      	beq.n	8003550 <TIM_Base_SetConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <TIM_Base_SetConfig+0xd0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d007      	beq.n	8003550 <TIM_Base_SetConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <TIM_Base_SetConfig+0xd4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d003      	beq.n	8003550 <TIM_Base_SetConfig+0xb0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <TIM_Base_SetConfig+0xd8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	615a      	str	r2, [r3, #20]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800

0800357c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <TIM_TI1_SetConfig+0xa4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <TIM_TI1_SetConfig+0x3e>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d003      	beq.n	80035ba <TIM_TI1_SetConfig+0x3e>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <TIM_TI1_SetConfig+0xa8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <TIM_TI1_SetConfig+0x42>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <TIM_TI1_SetConfig+0x44>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d008      	beq.n	80035d6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e003      	b.n	80035de <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f023 030a 	bic.w	r3, r3, #10
 80035f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 030a 	and.w	r3, r3, #10
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40014000 	.word	0x40014000

08003628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 030a 	bic.w	r3, r3, #10
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0210 	bic.w	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f023 0210 	bic.w	r2, r3, #16
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	031b      	lsls	r3, r3, #12
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800373c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0303 	bic.w	r3, r3, #3
 800378c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80037b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	621a      	str	r2, [r3, #32]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003816:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	031b      	lsls	r3, r3, #12
 800381c:	b29b      	uxth	r3, r3
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800382a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	031b      	lsls	r3, r3, #12
 8003830:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 0307 	orr.w	r3, r3, #7
 8003874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	021a      	lsls	r2, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	609a      	str	r2, [r3, #8]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2201      	movs	r2, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	43db      	mvns	r3, r3
 80038ea:	401a      	ands	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003928:	2302      	movs	r3, #2
 800392a:	e04f      	b.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800395c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d009      	beq.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d004      	beq.n	80039a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10c      	bne.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40014000 	.word	0x40014000

080039e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e040      	b.n	8003ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fc ffd4 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fbbe 	bl	80041dc <UART_SetConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e022      	b.n	8003ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fce8 	bl	8004448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fd6f 	bl	800458c <UART_CheckIdleState>
 8003aae:	4603      	mov	r3, r0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	f040 8082 	bne.w	8003bd6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_Transmit+0x26>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07a      	b.n	8003bd8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Transmit+0x38>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e073      	b.n	8003bd8 <HAL_UART_Transmit+0x120>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2221      	movs	r2, #33	; 0x21
 8003b04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b06:	f7fd f955 	bl	8000db4 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b24:	d108      	bne.n	8003b38 <HAL_UART_Transmit+0x80>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b48:	e02d      	b.n	8003ba6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fd62 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e039      	b.n	8003bd8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	881a      	ldrh	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b76:	b292      	uxth	r2, r2
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e008      	b.n	8003b94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1cb      	bne.n	8003b4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2140      	movs	r1, #64	; 0x40
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fd2e 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e005      	b.n	8003bd8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b0ba      	sub	sp, #232	; 0xe8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c0e:	4013      	ands	r3, r2
 8003c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d115      	bne.n	8003c48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00f      	beq.n	8003c48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 82a3 	beq.w	8004184 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
      }
      return;
 8003c46:	e29d      	b.n	8004184 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 8117 	beq.w	8003e80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c62:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_UART_IRQHandler+0x298>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 810a 	beq.w	8003e80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d011      	beq.n	8003c9c <HAL_UART_IRQHandler+0xbc>
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <HAL_UART_IRQHandler+0xec>
 8003ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc2:	f043 0204 	orr.w	r2, r3, #4
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d011      	beq.n	8003cfc <HAL_UART_IRQHandler+0x11c>
 8003cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2204      	movs	r2, #4
 8003cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d017      	beq.n	8003d38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d105      	bne.n	8003d20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	f043 0208 	orr.w	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d012      	beq.n	8003d6a <HAL_UART_IRQHandler+0x18a>
 8003d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00c      	beq.n	8003d6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8209 	beq.w	8004188 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b40      	cmp	r3, #64	; 0x40
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d04f      	beq.n	8003e62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fcef 	bl	80047a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	d141      	bne.n	8003e5a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3308      	adds	r3, #8
 8003ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1d9      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <HAL_UART_IRQHandler+0x29c>)
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd f936 	bl	80010a8 <HAL_DMA_Abort_IT>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e50:	e00f      	b.n	8003e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9ac 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	e00b      	b.n	8003e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9a8 	bl	80041b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e60:	e007      	b.n	8003e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f9a4 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003e70:	e18a      	b.n	8004188 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e72:	bf00      	nop
    return;
 8003e74:	e188      	b.n	8004188 <HAL_UART_IRQHandler+0x5a8>
 8003e76:	bf00      	nop
 8003e78:	04000120 	.word	0x04000120
 8003e7c:	0800486d 	.word	0x0800486d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	f040 8143 	bne.w	8004110 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 813c 	beq.w	8004110 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8135 	beq.w	8004110 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2210      	movs	r2, #16
 8003eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	f040 80b1 	bne.w	8004020 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 815c 	beq.w	800418c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	f080 8154 	bcs.w	800418c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	f000 8085 	beq.w	8004004 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1da      	bne.n	8003efa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3308      	adds	r3, #8
 8003f4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	e853 3f00 	ldrex	r3, [r3]
 8003f52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e1      	bne.n	8003f44 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fa4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003faa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e3      	bne.n	8003f80 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fe6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fe8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e4      	bne.n	8003fc4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd f819 	bl	8001036 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004010:	b29b      	uxth	r3, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	b29b      	uxth	r3, r3
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8d3 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800401e:	e0b5      	b.n	800418c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800402c:	b29b      	uxth	r3, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a7 	beq.w	8004190 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80a2 	beq.w	8004190 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004060:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800406e:	647b      	str	r3, [r7, #68]	; 0x44
 8004070:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800407c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e4      	bne.n	800404c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	623b      	str	r3, [r7, #32]
   return(result);
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3308      	adds	r3, #8
 80040a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040a6:	633a      	str	r2, [r7, #48]	; 0x30
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e3      	bne.n	8004082 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f023 0310 	bic.w	r3, r3, #16
 80040e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	69b9      	ldr	r1, [r7, #24]
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	617b      	str	r3, [r7, #20]
   return(result);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1e4      	bne.n	80040cc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004102:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f85b 	bl	80041c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800410e:	e03f      	b.n	8004190 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <HAL_UART_IRQHandler+0x55a>
 800411c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fbda 	bl	80048ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004138:	e02d      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800413a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00e      	beq.n	8004164 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d008      	beq.n	8004164 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01c      	beq.n	8004194 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
    }
    return;
 8004162:	e017      	b.n	8004194 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d012      	beq.n	8004196 <HAL_UART_IRQHandler+0x5b6>
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00c      	beq.n	8004196 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb8b 	bl	8004898 <UART_EndTransmit_IT>
    return;
 8004182:	e008      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004184:	bf00      	nop
 8004186:	e006      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004188:	bf00      	nop
 800418a:	e004      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
      return;
 800418c:	bf00      	nop
 800418e:	e002      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004190:	bf00      	nop
 8004192:	e000      	b.n	8004196 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004194:	bf00      	nop
  }

}
 8004196:	37e8      	adds	r7, #232	; 0xe8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8a      	ldr	r3, [pc, #552]	; (8004430 <UART_SetConfig+0x254>)
 8004208:	4013      	ands	r3, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	430b      	orrs	r3, r1
 8004212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a78      	ldr	r2, [pc, #480]	; (8004434 <UART_SetConfig+0x258>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d120      	bne.n	800429a <UART_SetConfig+0xbe>
 8004258:	4b77      	ldr	r3, [pc, #476]	; (8004438 <UART_SetConfig+0x25c>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d817      	bhi.n	8004294 <UART_SetConfig+0xb8>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x90>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004289 	.word	0x08004289
 8004274:	0800428f 	.word	0x0800428f
 8004278:	08004283 	.word	0x08004283
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e01d      	b.n	80042be <UART_SetConfig+0xe2>
 8004282:	2302      	movs	r3, #2
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e01a      	b.n	80042be <UART_SetConfig+0xe2>
 8004288:	2304      	movs	r3, #4
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e017      	b.n	80042be <UART_SetConfig+0xe2>
 800428e:	2308      	movs	r3, #8
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e014      	b.n	80042be <UART_SetConfig+0xe2>
 8004294:	2310      	movs	r3, #16
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e011      	b.n	80042be <UART_SetConfig+0xe2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a67      	ldr	r2, [pc, #412]	; (800443c <UART_SetConfig+0x260>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d102      	bne.n	80042aa <UART_SetConfig+0xce>
 80042a4:	2300      	movs	r3, #0
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e009      	b.n	80042be <UART_SetConfig+0xe2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a64      	ldr	r2, [pc, #400]	; (8004440 <UART_SetConfig+0x264>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d102      	bne.n	80042ba <UART_SetConfig+0xde>
 80042b4:	2300      	movs	r3, #0
 80042b6:	77fb      	strb	r3, [r7, #31]
 80042b8:	e001      	b.n	80042be <UART_SetConfig+0xe2>
 80042ba:	2310      	movs	r3, #16
 80042bc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c6:	d15b      	bne.n	8004380 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d827      	bhi.n	800431e <UART_SetConfig+0x142>
 80042ce:	a201      	add	r2, pc, #4	; (adr r2, 80042d4 <UART_SetConfig+0xf8>)
 80042d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	08004301 	.word	0x08004301
 80042dc:	08004309 	.word	0x08004309
 80042e0:	0800431f 	.word	0x0800431f
 80042e4:	0800430f 	.word	0x0800430f
 80042e8:	0800431f 	.word	0x0800431f
 80042ec:	0800431f 	.word	0x0800431f
 80042f0:	0800431f 	.word	0x0800431f
 80042f4:	08004317 	.word	0x08004317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f8:	f7fe f9e6 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80042fc:	61b8      	str	r0, [r7, #24]
        break;
 80042fe:	e013      	b.n	8004328 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004300:	f7fe fa04 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 8004304:	61b8      	str	r0, [r7, #24]
        break;
 8004306:	e00f      	b.n	8004328 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004308:	4b4e      	ldr	r3, [pc, #312]	; (8004444 <UART_SetConfig+0x268>)
 800430a:	61bb      	str	r3, [r7, #24]
        break;
 800430c:	e00c      	b.n	8004328 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430e:	f7fe f965 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 8004312:	61b8      	str	r0, [r7, #24]
        break;
 8004314:	e008      	b.n	8004328 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431a:	61bb      	str	r3, [r7, #24]
        break;
 800431c:	e004      	b.n	8004328 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	77bb      	strb	r3, [r7, #30]
        break;
 8004326:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d074      	beq.n	8004418 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	005a      	lsls	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	085b      	lsrs	r3, r3, #1
 8004338:	441a      	add	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d916      	bls.n	800437a <UART_SetConfig+0x19e>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004352:	d212      	bcs.n	800437a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f023 030f 	bic.w	r3, r3, #15
 800435c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	b29b      	uxth	r3, r3
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	60da      	str	r2, [r3, #12]
 8004378:	e04e      	b.n	8004418 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	77bb      	strb	r3, [r7, #30]
 800437e:	e04b      	b.n	8004418 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004380:	7ffb      	ldrb	r3, [r7, #31]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d827      	bhi.n	80043d6 <UART_SetConfig+0x1fa>
 8004386:	a201      	add	r2, pc, #4	; (adr r2, 800438c <UART_SetConfig+0x1b0>)
 8004388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043d7 	.word	0x080043d7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe f98a 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80043b4:	61b8      	str	r0, [r7, #24]
        break;
 80043b6:	e013      	b.n	80043e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7fe f9a8 	bl	800270c <HAL_RCC_GetPCLK2Freq>
 80043bc:	61b8      	str	r0, [r7, #24]
        break;
 80043be:	e00f      	b.n	80043e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <UART_SetConfig+0x268>)
 80043c2:	61bb      	str	r3, [r7, #24]
        break;
 80043c4:	e00c      	b.n	80043e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe f909 	bl	80025dc <HAL_RCC_GetSysClockFreq>
 80043ca:	61b8      	str	r0, [r7, #24]
        break;
 80043cc:	e008      	b.n	80043e0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d2:	61bb      	str	r3, [r7, #24]
        break;
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	77bb      	strb	r3, [r7, #30]
        break;
 80043de:	bf00      	nop
    }

    if (pclk != 0U)
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	085a      	lsrs	r2, r3, #1
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	441a      	add	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d908      	bls.n	8004414 <UART_SetConfig+0x238>
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004408:	d204      	bcs.n	8004414 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	e001      	b.n	8004418 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004424:	7fbb      	ldrb	r3, [r7, #30]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	40013800 	.word	0x40013800
 8004438:	40021000 	.word	0x40021000
 800443c:	40004400 	.word	0x40004400
 8004440:	40004800 	.word	0x40004800
 8004444:	007a1200 	.word	0x007a1200

08004448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01a      	beq.n	800455e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004546:	d10a      	bne.n	800455e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	605a      	str	r2, [r3, #4]
  }
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800459c:	f7fc fc0a 	bl	8000db4 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d10e      	bne.n	80045ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f82d 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e023      	b.n	8004616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d10e      	bne.n	80045fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f817 	bl	800461e <UART_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e00d      	b.n	8004616 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b09c      	sub	sp, #112	; 0x70
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800462e:	e0a5      	b.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	f000 80a1 	beq.w	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800463a:	f7fc fbbb 	bl	8000db4 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <UART_WaitOnFlagUntilTimeout+0x32>
 800464a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800464c:	2b00      	cmp	r3, #0
 800464e:	d13e      	bne.n	80046ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004664:	667b      	str	r3, [r7, #100]	; 0x64
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800466e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004670:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800467c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e6      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3308      	adds	r3, #8
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	663b      	str	r3, [r7, #96]	; 0x60
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80046a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2220      	movs	r2, #32
 80046ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e067      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d04f      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ea:	d147      	bne.n	800477c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3308      	adds	r3, #8
 8004746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004748:	623a      	str	r2, [r7, #32]
 800474a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	61bb      	str	r3, [r7, #24]
   return(result);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e010      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	429a      	cmp	r2, r3
 8004798:	f43f af4a 	beq.w	8004630 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3770      	adds	r7, #112	; 0x70
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b095      	sub	sp, #84	; 0x54
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	643b      	str	r3, [r7, #64]	; 0x40
 80047ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004818:	2b01      	cmp	r3, #1
 800481a:	d118      	bne.n	800484e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004860:	bf00      	nop
 8004862:	3754      	adds	r7, #84	; 0x54
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff fc90 	bl	80041b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	613b      	str	r3, [r7, #16]
   return(result);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fc5c 	bl	800419c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048e4:	bf00      	nop
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <__errno>:
 8004900:	4b01      	ldr	r3, [pc, #4]	; (8004908 <__errno+0x8>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000014 	.word	0x20000014

0800490c <__libc_init_array>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	4d0d      	ldr	r5, [pc, #52]	; (8004944 <__libc_init_array+0x38>)
 8004910:	4c0d      	ldr	r4, [pc, #52]	; (8004948 <__libc_init_array+0x3c>)
 8004912:	1b64      	subs	r4, r4, r5
 8004914:	10a4      	asrs	r4, r4, #2
 8004916:	2600      	movs	r6, #0
 8004918:	42a6      	cmp	r6, r4
 800491a:	d109      	bne.n	8004930 <__libc_init_array+0x24>
 800491c:	4d0b      	ldr	r5, [pc, #44]	; (800494c <__libc_init_array+0x40>)
 800491e:	4c0c      	ldr	r4, [pc, #48]	; (8004950 <__libc_init_array+0x44>)
 8004920:	f001 f9f4 	bl	8005d0c <_init>
 8004924:	1b64      	subs	r4, r4, r5
 8004926:	10a4      	asrs	r4, r4, #2
 8004928:	2600      	movs	r6, #0
 800492a:	42a6      	cmp	r6, r4
 800492c:	d105      	bne.n	800493a <__libc_init_array+0x2e>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	f855 3b04 	ldr.w	r3, [r5], #4
 8004934:	4798      	blx	r3
 8004936:	3601      	adds	r6, #1
 8004938:	e7ee      	b.n	8004918 <__libc_init_array+0xc>
 800493a:	f855 3b04 	ldr.w	r3, [r5], #4
 800493e:	4798      	blx	r3
 8004940:	3601      	adds	r6, #1
 8004942:	e7f2      	b.n	800492a <__libc_init_array+0x1e>
 8004944:	08005ebc 	.word	0x08005ebc
 8004948:	08005ebc 	.word	0x08005ebc
 800494c:	08005ebc 	.word	0x08005ebc
 8004950:	08005ec0 	.word	0x08005ec0

08004954 <memset>:
 8004954:	4402      	add	r2, r0
 8004956:	4603      	mov	r3, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	f803 1b01 	strb.w	r1, [r3], #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <rand>:
 8004964:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <rand+0x60>)
 8004966:	b510      	push	{r4, lr}
 8004968:	681c      	ldr	r4, [r3, #0]
 800496a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800496c:	b9b3      	cbnz	r3, 800499c <rand+0x38>
 800496e:	2018      	movs	r0, #24
 8004970:	f000 f888 	bl	8004a84 <malloc>
 8004974:	63a0      	str	r0, [r4, #56]	; 0x38
 8004976:	b928      	cbnz	r0, 8004984 <rand+0x20>
 8004978:	4602      	mov	r2, r0
 800497a:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <rand+0x64>)
 800497c:	4813      	ldr	r0, [pc, #76]	; (80049cc <rand+0x68>)
 800497e:	214e      	movs	r1, #78	; 0x4e
 8004980:	f000 f850 	bl	8004a24 <__assert_func>
 8004984:	4a12      	ldr	r2, [pc, #72]	; (80049d0 <rand+0x6c>)
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <rand+0x70>)
 8004988:	e9c0 2300 	strd	r2, r3, [r0]
 800498c:	4b12      	ldr	r3, [pc, #72]	; (80049d8 <rand+0x74>)
 800498e:	6083      	str	r3, [r0, #8]
 8004990:	230b      	movs	r3, #11
 8004992:	8183      	strh	r3, [r0, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	2300      	movs	r3, #0
 8004998:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800499c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800499e:	480f      	ldr	r0, [pc, #60]	; (80049dc <rand+0x78>)
 80049a0:	690a      	ldr	r2, [r1, #16]
 80049a2:	694b      	ldr	r3, [r1, #20]
 80049a4:	4c0e      	ldr	r4, [pc, #56]	; (80049e0 <rand+0x7c>)
 80049a6:	4350      	muls	r0, r2
 80049a8:	fb04 0003 	mla	r0, r4, r3, r0
 80049ac:	fba2 3404 	umull	r3, r4, r2, r4
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	4404      	add	r4, r0
 80049b4:	f144 0000 	adc.w	r0, r4, #0
 80049b8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80049bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80049c0:	bd10      	pop	{r4, pc}
 80049c2:	bf00      	nop
 80049c4:	20000014 	.word	0x20000014
 80049c8:	08005d74 	.word	0x08005d74
 80049cc:	08005d8b 	.word	0x08005d8b
 80049d0:	abcd330e 	.word	0xabcd330e
 80049d4:	e66d1234 	.word	0xe66d1234
 80049d8:	0005deec 	.word	0x0005deec
 80049dc:	5851f42d 	.word	0x5851f42d
 80049e0:	4c957f2d 	.word	0x4c957f2d

080049e4 <siprintf>:
 80049e4:	b40e      	push	{r1, r2, r3}
 80049e6:	b500      	push	{lr}
 80049e8:	b09c      	sub	sp, #112	; 0x70
 80049ea:	ab1d      	add	r3, sp, #116	; 0x74
 80049ec:	9002      	str	r0, [sp, #8]
 80049ee:	9006      	str	r0, [sp, #24]
 80049f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049f4:	4809      	ldr	r0, [pc, #36]	; (8004a1c <siprintf+0x38>)
 80049f6:	9107      	str	r1, [sp, #28]
 80049f8:	9104      	str	r1, [sp, #16]
 80049fa:	4909      	ldr	r1, [pc, #36]	; (8004a20 <siprintf+0x3c>)
 80049fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a00:	9105      	str	r1, [sp, #20]
 8004a02:	6800      	ldr	r0, [r0, #0]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	a902      	add	r1, sp, #8
 8004a08:	f000 f94a 	bl	8004ca0 <_svfiprintf_r>
 8004a0c:	9b02      	ldr	r3, [sp, #8]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
 8004a12:	b01c      	add	sp, #112	; 0x70
 8004a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a18:	b003      	add	sp, #12
 8004a1a:	4770      	bx	lr
 8004a1c:	20000014 	.word	0x20000014
 8004a20:	ffff0208 	.word	0xffff0208

08004a24 <__assert_func>:
 8004a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a26:	4614      	mov	r4, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <__assert_func+0x2c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4605      	mov	r5, r0
 8004a30:	68d8      	ldr	r0, [r3, #12]
 8004a32:	b14c      	cbz	r4, 8004a48 <__assert_func+0x24>
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <__assert_func+0x30>)
 8004a36:	9100      	str	r1, [sp, #0]
 8004a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a3c:	4906      	ldr	r1, [pc, #24]	; (8004a58 <__assert_func+0x34>)
 8004a3e:	462b      	mov	r3, r5
 8004a40:	f000 f80e 	bl	8004a60 <fiprintf>
 8004a44:	f000 fdea 	bl	800561c <abort>
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <__assert_func+0x38>)
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	e7f3      	b.n	8004a36 <__assert_func+0x12>
 8004a4e:	bf00      	nop
 8004a50:	20000014 	.word	0x20000014
 8004a54:	08005dea 	.word	0x08005dea
 8004a58:	08005df7 	.word	0x08005df7
 8004a5c:	08005e25 	.word	0x08005e25

08004a60 <fiprintf>:
 8004a60:	b40e      	push	{r1, r2, r3}
 8004a62:	b503      	push	{r0, r1, lr}
 8004a64:	4601      	mov	r1, r0
 8004a66:	ab03      	add	r3, sp, #12
 8004a68:	4805      	ldr	r0, [pc, #20]	; (8004a80 <fiprintf+0x20>)
 8004a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a6e:	6800      	ldr	r0, [r0, #0]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	f000 fa3f 	bl	8004ef4 <_vfiprintf_r>
 8004a76:	b002      	add	sp, #8
 8004a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a7c:	b003      	add	sp, #12
 8004a7e:	4770      	bx	lr
 8004a80:	20000014 	.word	0x20000014

08004a84 <malloc>:
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <malloc+0xc>)
 8004a86:	4601      	mov	r1, r0
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	f000 b853 	b.w	8004b34 <_malloc_r>
 8004a8e:	bf00      	nop
 8004a90:	20000014 	.word	0x20000014

08004a94 <_free_r>:
 8004a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a96:	2900      	cmp	r1, #0
 8004a98:	d048      	beq.n	8004b2c <_free_r+0x98>
 8004a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9e:	9001      	str	r0, [sp, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f1a1 0404 	sub.w	r4, r1, #4
 8004aa6:	bfb8      	it	lt
 8004aa8:	18e4      	addlt	r4, r4, r3
 8004aaa:	f001 f805 	bl	8005ab8 <__malloc_lock>
 8004aae:	4a20      	ldr	r2, [pc, #128]	; (8004b30 <_free_r+0x9c>)
 8004ab0:	9801      	ldr	r0, [sp, #4]
 8004ab2:	6813      	ldr	r3, [r2, #0]
 8004ab4:	4615      	mov	r5, r2
 8004ab6:	b933      	cbnz	r3, 8004ac6 <_free_r+0x32>
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	6014      	str	r4, [r2, #0]
 8004abc:	b003      	add	sp, #12
 8004abe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ac2:	f000 bfff 	b.w	8005ac4 <__malloc_unlock>
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	d90b      	bls.n	8004ae2 <_free_r+0x4e>
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	1862      	adds	r2, r4, r1
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bf04      	itt	eq
 8004ad2:	681a      	ldreq	r2, [r3, #0]
 8004ad4:	685b      	ldreq	r3, [r3, #4]
 8004ad6:	6063      	str	r3, [r4, #4]
 8004ad8:	bf04      	itt	eq
 8004ada:	1852      	addeq	r2, r2, r1
 8004adc:	6022      	streq	r2, [r4, #0]
 8004ade:	602c      	str	r4, [r5, #0]
 8004ae0:	e7ec      	b.n	8004abc <_free_r+0x28>
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	b10b      	cbz	r3, 8004aec <_free_r+0x58>
 8004ae8:	42a3      	cmp	r3, r4
 8004aea:	d9fa      	bls.n	8004ae2 <_free_r+0x4e>
 8004aec:	6811      	ldr	r1, [r2, #0]
 8004aee:	1855      	adds	r5, r2, r1
 8004af0:	42a5      	cmp	r5, r4
 8004af2:	d10b      	bne.n	8004b0c <_free_r+0x78>
 8004af4:	6824      	ldr	r4, [r4, #0]
 8004af6:	4421      	add	r1, r4
 8004af8:	1854      	adds	r4, r2, r1
 8004afa:	42a3      	cmp	r3, r4
 8004afc:	6011      	str	r1, [r2, #0]
 8004afe:	d1dd      	bne.n	8004abc <_free_r+0x28>
 8004b00:	681c      	ldr	r4, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	6053      	str	r3, [r2, #4]
 8004b06:	4421      	add	r1, r4
 8004b08:	6011      	str	r1, [r2, #0]
 8004b0a:	e7d7      	b.n	8004abc <_free_r+0x28>
 8004b0c:	d902      	bls.n	8004b14 <_free_r+0x80>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	6003      	str	r3, [r0, #0]
 8004b12:	e7d3      	b.n	8004abc <_free_r+0x28>
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	1961      	adds	r1, r4, r5
 8004b18:	428b      	cmp	r3, r1
 8004b1a:	bf04      	itt	eq
 8004b1c:	6819      	ldreq	r1, [r3, #0]
 8004b1e:	685b      	ldreq	r3, [r3, #4]
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	bf04      	itt	eq
 8004b24:	1949      	addeq	r1, r1, r5
 8004b26:	6021      	streq	r1, [r4, #0]
 8004b28:	6054      	str	r4, [r2, #4]
 8004b2a:	e7c7      	b.n	8004abc <_free_r+0x28>
 8004b2c:	b003      	add	sp, #12
 8004b2e:	bd30      	pop	{r4, r5, pc}
 8004b30:	200000b8 	.word	0x200000b8

08004b34 <_malloc_r>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	1ccd      	adds	r5, r1, #3
 8004b38:	f025 0503 	bic.w	r5, r5, #3
 8004b3c:	3508      	adds	r5, #8
 8004b3e:	2d0c      	cmp	r5, #12
 8004b40:	bf38      	it	cc
 8004b42:	250c      	movcc	r5, #12
 8004b44:	2d00      	cmp	r5, #0
 8004b46:	4606      	mov	r6, r0
 8004b48:	db01      	blt.n	8004b4e <_malloc_r+0x1a>
 8004b4a:	42a9      	cmp	r1, r5
 8004b4c:	d903      	bls.n	8004b56 <_malloc_r+0x22>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	2000      	movs	r0, #0
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b56:	f000 ffaf 	bl	8005ab8 <__malloc_lock>
 8004b5a:	4921      	ldr	r1, [pc, #132]	; (8004be0 <_malloc_r+0xac>)
 8004b5c:	680a      	ldr	r2, [r1, #0]
 8004b5e:	4614      	mov	r4, r2
 8004b60:	b99c      	cbnz	r4, 8004b8a <_malloc_r+0x56>
 8004b62:	4f20      	ldr	r7, [pc, #128]	; (8004be4 <_malloc_r+0xb0>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	b923      	cbnz	r3, 8004b72 <_malloc_r+0x3e>
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	f000 fc86 	bl	800547c <_sbrk_r>
 8004b70:	6038      	str	r0, [r7, #0]
 8004b72:	4629      	mov	r1, r5
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 fc81 	bl	800547c <_sbrk_r>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	d123      	bne.n	8004bc6 <_malloc_r+0x92>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	6033      	str	r3, [r6, #0]
 8004b82:	4630      	mov	r0, r6
 8004b84:	f000 ff9e 	bl	8005ac4 <__malloc_unlock>
 8004b88:	e7e3      	b.n	8004b52 <_malloc_r+0x1e>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	1b5b      	subs	r3, r3, r5
 8004b8e:	d417      	bmi.n	8004bc0 <_malloc_r+0x8c>
 8004b90:	2b0b      	cmp	r3, #11
 8004b92:	d903      	bls.n	8004b9c <_malloc_r+0x68>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	441c      	add	r4, r3
 8004b98:	6025      	str	r5, [r4, #0]
 8004b9a:	e004      	b.n	8004ba6 <_malloc_r+0x72>
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	42a2      	cmp	r2, r4
 8004ba0:	bf0c      	ite	eq
 8004ba2:	600b      	streq	r3, [r1, #0]
 8004ba4:	6053      	strne	r3, [r2, #4]
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	f000 ff8c 	bl	8005ac4 <__malloc_unlock>
 8004bac:	f104 000b 	add.w	r0, r4, #11
 8004bb0:	1d23      	adds	r3, r4, #4
 8004bb2:	f020 0007 	bic.w	r0, r0, #7
 8004bb6:	1ac2      	subs	r2, r0, r3
 8004bb8:	d0cc      	beq.n	8004b54 <_malloc_r+0x20>
 8004bba:	1a1b      	subs	r3, r3, r0
 8004bbc:	50a3      	str	r3, [r4, r2]
 8004bbe:	e7c9      	b.n	8004b54 <_malloc_r+0x20>
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	6864      	ldr	r4, [r4, #4]
 8004bc4:	e7cc      	b.n	8004b60 <_malloc_r+0x2c>
 8004bc6:	1cc4      	adds	r4, r0, #3
 8004bc8:	f024 0403 	bic.w	r4, r4, #3
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d0e3      	beq.n	8004b98 <_malloc_r+0x64>
 8004bd0:	1a21      	subs	r1, r4, r0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 fc52 	bl	800547c <_sbrk_r>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d1dd      	bne.n	8004b98 <_malloc_r+0x64>
 8004bdc:	e7cf      	b.n	8004b7e <_malloc_r+0x4a>
 8004bde:	bf00      	nop
 8004be0:	200000b8 	.word	0x200000b8
 8004be4:	200000bc 	.word	0x200000bc

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	429e      	cmp	r6, r3
 8004bf0:	4682      	mov	sl, r0
 8004bf2:	460c      	mov	r4, r1
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	461f      	mov	r7, r3
 8004bf8:	d838      	bhi.n	8004c6c <__ssputs_r+0x84>
 8004bfa:	898a      	ldrh	r2, [r1, #12]
 8004bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c00:	d032      	beq.n	8004c68 <__ssputs_r+0x80>
 8004c02:	6825      	ldr	r5, [r4, #0]
 8004c04:	6909      	ldr	r1, [r1, #16]
 8004c06:	eba5 0901 	sub.w	r9, r5, r1
 8004c0a:	6965      	ldr	r5, [r4, #20]
 8004c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c14:	3301      	adds	r3, #1
 8004c16:	444b      	add	r3, r9
 8004c18:	106d      	asrs	r5, r5, #1
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	bf38      	it	cc
 8004c1e:	461d      	movcc	r5, r3
 8004c20:	0553      	lsls	r3, r2, #21
 8004c22:	d531      	bpl.n	8004c88 <__ssputs_r+0xa0>
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7ff ff85 	bl	8004b34 <_malloc_r>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	b950      	cbnz	r0, 8004c44 <__ssputs_r+0x5c>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	f8ca 3000 	str.w	r3, [sl]
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c44:	6921      	ldr	r1, [r4, #16]
 8004c46:	464a      	mov	r2, r9
 8004c48:	f000 ff0e 	bl	8005a68 <memcpy>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	6126      	str	r6, [r4, #16]
 8004c5a:	6165      	str	r5, [r4, #20]
 8004c5c:	444e      	add	r6, r9
 8004c5e:	eba5 0509 	sub.w	r5, r5, r9
 8004c62:	6026      	str	r6, [r4, #0]
 8004c64:	60a5      	str	r5, [r4, #8]
 8004c66:	463e      	mov	r6, r7
 8004c68:	42be      	cmp	r6, r7
 8004c6a:	d900      	bls.n	8004c6e <__ssputs_r+0x86>
 8004c6c:	463e      	mov	r6, r7
 8004c6e:	4632      	mov	r2, r6
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	4641      	mov	r1, r8
 8004c74:	f000 ff06 	bl	8005a84 <memmove>
 8004c78:	68a3      	ldr	r3, [r4, #8]
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	1b9b      	subs	r3, r3, r6
 8004c7e:	4432      	add	r2, r6
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	2000      	movs	r0, #0
 8004c86:	e7db      	b.n	8004c40 <__ssputs_r+0x58>
 8004c88:	462a      	mov	r2, r5
 8004c8a:	f000 ff21 	bl	8005ad0 <_realloc_r>
 8004c8e:	4606      	mov	r6, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d1e1      	bne.n	8004c58 <__ssputs_r+0x70>
 8004c94:	6921      	ldr	r1, [r4, #16]
 8004c96:	4650      	mov	r0, sl
 8004c98:	f7ff fefc 	bl	8004a94 <_free_r>
 8004c9c:	e7c7      	b.n	8004c2e <__ssputs_r+0x46>
	...

08004ca0 <_svfiprintf_r>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	898b      	ldrh	r3, [r1, #12]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	b09d      	sub	sp, #116	; 0x74
 8004cac:	4607      	mov	r7, r0
 8004cae:	460d      	mov	r5, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	d50e      	bpl.n	8004cd2 <_svfiprintf_r+0x32>
 8004cb4:	690b      	ldr	r3, [r1, #16]
 8004cb6:	b963      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x32>
 8004cb8:	2140      	movs	r1, #64	; 0x40
 8004cba:	f7ff ff3b 	bl	8004b34 <_malloc_r>
 8004cbe:	6028      	str	r0, [r5, #0]
 8004cc0:	6128      	str	r0, [r5, #16]
 8004cc2:	b920      	cbnz	r0, 8004cce <_svfiprintf_r+0x2e>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e0d1      	b.n	8004e72 <_svfiprintf_r+0x1d2>
 8004cce:	2340      	movs	r3, #64	; 0x40
 8004cd0:	616b      	str	r3, [r5, #20]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce0:	2330      	movs	r3, #48	; 0x30
 8004ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e8c <_svfiprintf_r+0x1ec>
 8004ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cea:	f04f 0901 	mov.w	r9, #1
 8004cee:	4623      	mov	r3, r4
 8004cf0:	469a      	mov	sl, r3
 8004cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cf6:	b10a      	cbz	r2, 8004cfc <_svfiprintf_r+0x5c>
 8004cf8:	2a25      	cmp	r2, #37	; 0x25
 8004cfa:	d1f9      	bne.n	8004cf0 <_svfiprintf_r+0x50>
 8004cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8004d00:	d00b      	beq.n	8004d1a <_svfiprintf_r+0x7a>
 8004d02:	465b      	mov	r3, fp
 8004d04:	4622      	mov	r2, r4
 8004d06:	4629      	mov	r1, r5
 8004d08:	4638      	mov	r0, r7
 8004d0a:	f7ff ff6d 	bl	8004be8 <__ssputs_r>
 8004d0e:	3001      	adds	r0, #1
 8004d10:	f000 80aa 	beq.w	8004e68 <_svfiprintf_r+0x1c8>
 8004d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d16:	445a      	add	r2, fp
 8004d18:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 80a2 	beq.w	8004e68 <_svfiprintf_r+0x1c8>
 8004d24:	2300      	movs	r3, #0
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d2e:	f10a 0a01 	add.w	sl, sl, #1
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	9307      	str	r3, [sp, #28]
 8004d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d3c:	4654      	mov	r4, sl
 8004d3e:	2205      	movs	r2, #5
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	4851      	ldr	r0, [pc, #324]	; (8004e8c <_svfiprintf_r+0x1ec>)
 8004d46:	f7fb fa43 	bl	80001d0 <memchr>
 8004d4a:	9a04      	ldr	r2, [sp, #16]
 8004d4c:	b9d8      	cbnz	r0, 8004d86 <_svfiprintf_r+0xe6>
 8004d4e:	06d0      	lsls	r0, r2, #27
 8004d50:	bf44      	itt	mi
 8004d52:	2320      	movmi	r3, #32
 8004d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d58:	0711      	lsls	r1, r2, #28
 8004d5a:	bf44      	itt	mi
 8004d5c:	232b      	movmi	r3, #43	; 0x2b
 8004d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d62:	f89a 3000 	ldrb.w	r3, [sl]
 8004d66:	2b2a      	cmp	r3, #42	; 0x2a
 8004d68:	d015      	beq.n	8004d96 <_svfiprintf_r+0xf6>
 8004d6a:	9a07      	ldr	r2, [sp, #28]
 8004d6c:	4654      	mov	r4, sl
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f04f 0c0a 	mov.w	ip, #10
 8004d74:	4621      	mov	r1, r4
 8004d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7a:	3b30      	subs	r3, #48	; 0x30
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d94e      	bls.n	8004e1e <_svfiprintf_r+0x17e>
 8004d80:	b1b0      	cbz	r0, 8004db0 <_svfiprintf_r+0x110>
 8004d82:	9207      	str	r2, [sp, #28]
 8004d84:	e014      	b.n	8004db0 <_svfiprintf_r+0x110>
 8004d86:	eba0 0308 	sub.w	r3, r0, r8
 8004d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	9304      	str	r3, [sp, #16]
 8004d92:	46a2      	mov	sl, r4
 8004d94:	e7d2      	b.n	8004d3c <_svfiprintf_r+0x9c>
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	1d19      	adds	r1, r3, #4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9103      	str	r1, [sp, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfbb      	ittet	lt
 8004da2:	425b      	neglt	r3, r3
 8004da4:	f042 0202 	orrlt.w	r2, r2, #2
 8004da8:	9307      	strge	r3, [sp, #28]
 8004daa:	9307      	strlt	r3, [sp, #28]
 8004dac:	bfb8      	it	lt
 8004dae:	9204      	strlt	r2, [sp, #16]
 8004db0:	7823      	ldrb	r3, [r4, #0]
 8004db2:	2b2e      	cmp	r3, #46	; 0x2e
 8004db4:	d10c      	bne.n	8004dd0 <_svfiprintf_r+0x130>
 8004db6:	7863      	ldrb	r3, [r4, #1]
 8004db8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dba:	d135      	bne.n	8004e28 <_svfiprintf_r+0x188>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	9203      	str	r2, [sp, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bfb8      	it	lt
 8004dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dcc:	3402      	adds	r4, #2
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e9c <_svfiprintf_r+0x1fc>
 8004dd4:	7821      	ldrb	r1, [r4, #0]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	4650      	mov	r0, sl
 8004dda:	f7fb f9f9 	bl	80001d0 <memchr>
 8004dde:	b140      	cbz	r0, 8004df2 <_svfiprintf_r+0x152>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	eba0 000a 	sub.w	r0, r0, sl
 8004de6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dea:	9b04      	ldr	r3, [sp, #16]
 8004dec:	4303      	orrs	r3, r0
 8004dee:	3401      	adds	r4, #1
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df6:	4826      	ldr	r0, [pc, #152]	; (8004e90 <_svfiprintf_r+0x1f0>)
 8004df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dfc:	2206      	movs	r2, #6
 8004dfe:	f7fb f9e7 	bl	80001d0 <memchr>
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d038      	beq.n	8004e78 <_svfiprintf_r+0x1d8>
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <_svfiprintf_r+0x1f4>)
 8004e08:	bb1b      	cbnz	r3, 8004e52 <_svfiprintf_r+0x1b2>
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	3307      	adds	r3, #7
 8004e0e:	f023 0307 	bic.w	r3, r3, #7
 8004e12:	3308      	adds	r3, #8
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e18:	4433      	add	r3, r6
 8004e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e1c:	e767      	b.n	8004cee <_svfiprintf_r+0x4e>
 8004e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e22:	460c      	mov	r4, r1
 8004e24:	2001      	movs	r0, #1
 8004e26:	e7a5      	b.n	8004d74 <_svfiprintf_r+0xd4>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	3401      	adds	r4, #1
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 0c0a 	mov.w	ip, #10
 8004e34:	4620      	mov	r0, r4
 8004e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e3a:	3a30      	subs	r2, #48	; 0x30
 8004e3c:	2a09      	cmp	r2, #9
 8004e3e:	d903      	bls.n	8004e48 <_svfiprintf_r+0x1a8>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0c5      	beq.n	8004dd0 <_svfiprintf_r+0x130>
 8004e44:	9105      	str	r1, [sp, #20]
 8004e46:	e7c3      	b.n	8004dd0 <_svfiprintf_r+0x130>
 8004e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e7f0      	b.n	8004e34 <_svfiprintf_r+0x194>
 8004e52:	ab03      	add	r3, sp, #12
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	462a      	mov	r2, r5
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <_svfiprintf_r+0x1f8>)
 8004e5a:	a904      	add	r1, sp, #16
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f3af 8000 	nop.w
 8004e62:	1c42      	adds	r2, r0, #1
 8004e64:	4606      	mov	r6, r0
 8004e66:	d1d6      	bne.n	8004e16 <_svfiprintf_r+0x176>
 8004e68:	89ab      	ldrh	r3, [r5, #12]
 8004e6a:	065b      	lsls	r3, r3, #25
 8004e6c:	f53f af2c 	bmi.w	8004cc8 <_svfiprintf_r+0x28>
 8004e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e72:	b01d      	add	sp, #116	; 0x74
 8004e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e78:	ab03      	add	r3, sp, #12
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	462a      	mov	r2, r5
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <_svfiprintf_r+0x1f8>)
 8004e80:	a904      	add	r1, sp, #16
 8004e82:	4638      	mov	r0, r7
 8004e84:	f000 f9d4 	bl	8005230 <_printf_i>
 8004e88:	e7eb      	b.n	8004e62 <_svfiprintf_r+0x1c2>
 8004e8a:	bf00      	nop
 8004e8c:	08005e26 	.word	0x08005e26
 8004e90:	08005e30 	.word	0x08005e30
 8004e94:	00000000 	.word	0x00000000
 8004e98:	08004be9 	.word	0x08004be9
 8004e9c:	08005e2c 	.word	0x08005e2c

08004ea0 <__sfputc_r>:
 8004ea0:	6893      	ldr	r3, [r2, #8]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	b410      	push	{r4}
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	da08      	bge.n	8004ebe <__sfputc_r+0x1e>
 8004eac:	6994      	ldr	r4, [r2, #24]
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	db01      	blt.n	8004eb6 <__sfputc_r+0x16>
 8004eb2:	290a      	cmp	r1, #10
 8004eb4:	d103      	bne.n	8004ebe <__sfputc_r+0x1e>
 8004eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eba:	f000 baef 	b.w	800549c <__swbuf_r>
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	1c58      	adds	r0, r3, #1
 8004ec2:	6010      	str	r0, [r2, #0]
 8004ec4:	7019      	strb	r1, [r3, #0]
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <__sfputs_r>:
 8004ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	460f      	mov	r7, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	18d5      	adds	r5, r2, r3
 8004ed8:	42ac      	cmp	r4, r5
 8004eda:	d101      	bne.n	8004ee0 <__sfputs_r+0x12>
 8004edc:	2000      	movs	r0, #0
 8004ede:	e007      	b.n	8004ef0 <__sfputs_r+0x22>
 8004ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	4630      	mov	r0, r6
 8004ee8:	f7ff ffda 	bl	8004ea0 <__sfputc_r>
 8004eec:	1c43      	adds	r3, r0, #1
 8004eee:	d1f3      	bne.n	8004ed8 <__sfputs_r+0xa>
 8004ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ef4 <_vfiprintf_r>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	460d      	mov	r5, r1
 8004efa:	b09d      	sub	sp, #116	; 0x74
 8004efc:	4614      	mov	r4, r2
 8004efe:	4698      	mov	r8, r3
 8004f00:	4606      	mov	r6, r0
 8004f02:	b118      	cbz	r0, 8004f0c <_vfiprintf_r+0x18>
 8004f04:	6983      	ldr	r3, [r0, #24]
 8004f06:	b90b      	cbnz	r3, 8004f0c <_vfiprintf_r+0x18>
 8004f08:	f000 fcaa 	bl	8005860 <__sinit>
 8004f0c:	4b89      	ldr	r3, [pc, #548]	; (8005134 <_vfiprintf_r+0x240>)
 8004f0e:	429d      	cmp	r5, r3
 8004f10:	d11b      	bne.n	8004f4a <_vfiprintf_r+0x56>
 8004f12:	6875      	ldr	r5, [r6, #4]
 8004f14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f16:	07d9      	lsls	r1, r3, #31
 8004f18:	d405      	bmi.n	8004f26 <_vfiprintf_r+0x32>
 8004f1a:	89ab      	ldrh	r3, [r5, #12]
 8004f1c:	059a      	lsls	r2, r3, #22
 8004f1e:	d402      	bmi.n	8004f26 <_vfiprintf_r+0x32>
 8004f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f22:	f000 fd3b 	bl	800599c <__retarget_lock_acquire_recursive>
 8004f26:	89ab      	ldrh	r3, [r5, #12]
 8004f28:	071b      	lsls	r3, r3, #28
 8004f2a:	d501      	bpl.n	8004f30 <_vfiprintf_r+0x3c>
 8004f2c:	692b      	ldr	r3, [r5, #16]
 8004f2e:	b9eb      	cbnz	r3, 8004f6c <_vfiprintf_r+0x78>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4630      	mov	r0, r6
 8004f34:	f000 fb04 	bl	8005540 <__swsetup_r>
 8004f38:	b1c0      	cbz	r0, 8004f6c <_vfiprintf_r+0x78>
 8004f3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f3c:	07dc      	lsls	r4, r3, #31
 8004f3e:	d50e      	bpl.n	8004f5e <_vfiprintf_r+0x6a>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	b01d      	add	sp, #116	; 0x74
 8004f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f4a:	4b7b      	ldr	r3, [pc, #492]	; (8005138 <_vfiprintf_r+0x244>)
 8004f4c:	429d      	cmp	r5, r3
 8004f4e:	d101      	bne.n	8004f54 <_vfiprintf_r+0x60>
 8004f50:	68b5      	ldr	r5, [r6, #8]
 8004f52:	e7df      	b.n	8004f14 <_vfiprintf_r+0x20>
 8004f54:	4b79      	ldr	r3, [pc, #484]	; (800513c <_vfiprintf_r+0x248>)
 8004f56:	429d      	cmp	r5, r3
 8004f58:	bf08      	it	eq
 8004f5a:	68f5      	ldreq	r5, [r6, #12]
 8004f5c:	e7da      	b.n	8004f14 <_vfiprintf_r+0x20>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	0598      	lsls	r0, r3, #22
 8004f62:	d4ed      	bmi.n	8004f40 <_vfiprintf_r+0x4c>
 8004f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f66:	f000 fd1a 	bl	800599e <__retarget_lock_release_recursive>
 8004f6a:	e7e9      	b.n	8004f40 <_vfiprintf_r+0x4c>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f70:	2320      	movs	r3, #32
 8004f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f7a:	2330      	movs	r3, #48	; 0x30
 8004f7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005140 <_vfiprintf_r+0x24c>
 8004f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f84:	f04f 0901 	mov.w	r9, #1
 8004f88:	4623      	mov	r3, r4
 8004f8a:	469a      	mov	sl, r3
 8004f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f90:	b10a      	cbz	r2, 8004f96 <_vfiprintf_r+0xa2>
 8004f92:	2a25      	cmp	r2, #37	; 0x25
 8004f94:	d1f9      	bne.n	8004f8a <_vfiprintf_r+0x96>
 8004f96:	ebba 0b04 	subs.w	fp, sl, r4
 8004f9a:	d00b      	beq.n	8004fb4 <_vfiprintf_r+0xc0>
 8004f9c:	465b      	mov	r3, fp
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f7ff ff93 	bl	8004ece <__sfputs_r>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	f000 80aa 	beq.w	8005102 <_vfiprintf_r+0x20e>
 8004fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb0:	445a      	add	r2, fp
 8004fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a2 	beq.w	8005102 <_vfiprintf_r+0x20e>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fc8:	f10a 0a01 	add.w	sl, sl, #1
 8004fcc:	9304      	str	r3, [sp, #16]
 8004fce:	9307      	str	r3, [sp, #28]
 8004fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fd6:	4654      	mov	r4, sl
 8004fd8:	2205      	movs	r2, #5
 8004fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fde:	4858      	ldr	r0, [pc, #352]	; (8005140 <_vfiprintf_r+0x24c>)
 8004fe0:	f7fb f8f6 	bl	80001d0 <memchr>
 8004fe4:	9a04      	ldr	r2, [sp, #16]
 8004fe6:	b9d8      	cbnz	r0, 8005020 <_vfiprintf_r+0x12c>
 8004fe8:	06d1      	lsls	r1, r2, #27
 8004fea:	bf44      	itt	mi
 8004fec:	2320      	movmi	r3, #32
 8004fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ff2:	0713      	lsls	r3, r2, #28
 8004ff4:	bf44      	itt	mi
 8004ff6:	232b      	movmi	r3, #43	; 0x2b
 8004ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d015      	beq.n	8005030 <_vfiprintf_r+0x13c>
 8005004:	9a07      	ldr	r2, [sp, #28]
 8005006:	4654      	mov	r4, sl
 8005008:	2000      	movs	r0, #0
 800500a:	f04f 0c0a 	mov.w	ip, #10
 800500e:	4621      	mov	r1, r4
 8005010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005014:	3b30      	subs	r3, #48	; 0x30
 8005016:	2b09      	cmp	r3, #9
 8005018:	d94e      	bls.n	80050b8 <_vfiprintf_r+0x1c4>
 800501a:	b1b0      	cbz	r0, 800504a <_vfiprintf_r+0x156>
 800501c:	9207      	str	r2, [sp, #28]
 800501e:	e014      	b.n	800504a <_vfiprintf_r+0x156>
 8005020:	eba0 0308 	sub.w	r3, r0, r8
 8005024:	fa09 f303 	lsl.w	r3, r9, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	9304      	str	r3, [sp, #16]
 800502c:	46a2      	mov	sl, r4
 800502e:	e7d2      	b.n	8004fd6 <_vfiprintf_r+0xe2>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1d19      	adds	r1, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9103      	str	r1, [sp, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfbb      	ittet	lt
 800503c:	425b      	neglt	r3, r3
 800503e:	f042 0202 	orrlt.w	r2, r2, #2
 8005042:	9307      	strge	r3, [sp, #28]
 8005044:	9307      	strlt	r3, [sp, #28]
 8005046:	bfb8      	it	lt
 8005048:	9204      	strlt	r2, [sp, #16]
 800504a:	7823      	ldrb	r3, [r4, #0]
 800504c:	2b2e      	cmp	r3, #46	; 0x2e
 800504e:	d10c      	bne.n	800506a <_vfiprintf_r+0x176>
 8005050:	7863      	ldrb	r3, [r4, #1]
 8005052:	2b2a      	cmp	r3, #42	; 0x2a
 8005054:	d135      	bne.n	80050c2 <_vfiprintf_r+0x1ce>
 8005056:	9b03      	ldr	r3, [sp, #12]
 8005058:	1d1a      	adds	r2, r3, #4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	9203      	str	r2, [sp, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	bfb8      	it	lt
 8005062:	f04f 33ff 	movlt.w	r3, #4294967295
 8005066:	3402      	adds	r4, #2
 8005068:	9305      	str	r3, [sp, #20]
 800506a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005150 <_vfiprintf_r+0x25c>
 800506e:	7821      	ldrb	r1, [r4, #0]
 8005070:	2203      	movs	r2, #3
 8005072:	4650      	mov	r0, sl
 8005074:	f7fb f8ac 	bl	80001d0 <memchr>
 8005078:	b140      	cbz	r0, 800508c <_vfiprintf_r+0x198>
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	eba0 000a 	sub.w	r0, r0, sl
 8005080:	fa03 f000 	lsl.w	r0, r3, r0
 8005084:	9b04      	ldr	r3, [sp, #16]
 8005086:	4303      	orrs	r3, r0
 8005088:	3401      	adds	r4, #1
 800508a:	9304      	str	r3, [sp, #16]
 800508c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005090:	482c      	ldr	r0, [pc, #176]	; (8005144 <_vfiprintf_r+0x250>)
 8005092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005096:	2206      	movs	r2, #6
 8005098:	f7fb f89a 	bl	80001d0 <memchr>
 800509c:	2800      	cmp	r0, #0
 800509e:	d03f      	beq.n	8005120 <_vfiprintf_r+0x22c>
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <_vfiprintf_r+0x254>)
 80050a2:	bb1b      	cbnz	r3, 80050ec <_vfiprintf_r+0x1f8>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	3307      	adds	r3, #7
 80050a8:	f023 0307 	bic.w	r3, r3, #7
 80050ac:	3308      	adds	r3, #8
 80050ae:	9303      	str	r3, [sp, #12]
 80050b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b2:	443b      	add	r3, r7
 80050b4:	9309      	str	r3, [sp, #36]	; 0x24
 80050b6:	e767      	b.n	8004f88 <_vfiprintf_r+0x94>
 80050b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050bc:	460c      	mov	r4, r1
 80050be:	2001      	movs	r0, #1
 80050c0:	e7a5      	b.n	800500e <_vfiprintf_r+0x11a>
 80050c2:	2300      	movs	r3, #0
 80050c4:	3401      	adds	r4, #1
 80050c6:	9305      	str	r3, [sp, #20]
 80050c8:	4619      	mov	r1, r3
 80050ca:	f04f 0c0a 	mov.w	ip, #10
 80050ce:	4620      	mov	r0, r4
 80050d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050d4:	3a30      	subs	r2, #48	; 0x30
 80050d6:	2a09      	cmp	r2, #9
 80050d8:	d903      	bls.n	80050e2 <_vfiprintf_r+0x1ee>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0c5      	beq.n	800506a <_vfiprintf_r+0x176>
 80050de:	9105      	str	r1, [sp, #20]
 80050e0:	e7c3      	b.n	800506a <_vfiprintf_r+0x176>
 80050e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050e6:	4604      	mov	r4, r0
 80050e8:	2301      	movs	r3, #1
 80050ea:	e7f0      	b.n	80050ce <_vfiprintf_r+0x1da>
 80050ec:	ab03      	add	r3, sp, #12
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	462a      	mov	r2, r5
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <_vfiprintf_r+0x258>)
 80050f4:	a904      	add	r1, sp, #16
 80050f6:	4630      	mov	r0, r6
 80050f8:	f3af 8000 	nop.w
 80050fc:	4607      	mov	r7, r0
 80050fe:	1c78      	adds	r0, r7, #1
 8005100:	d1d6      	bne.n	80050b0 <_vfiprintf_r+0x1bc>
 8005102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005104:	07d9      	lsls	r1, r3, #31
 8005106:	d405      	bmi.n	8005114 <_vfiprintf_r+0x220>
 8005108:	89ab      	ldrh	r3, [r5, #12]
 800510a:	059a      	lsls	r2, r3, #22
 800510c:	d402      	bmi.n	8005114 <_vfiprintf_r+0x220>
 800510e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005110:	f000 fc45 	bl	800599e <__retarget_lock_release_recursive>
 8005114:	89ab      	ldrh	r3, [r5, #12]
 8005116:	065b      	lsls	r3, r3, #25
 8005118:	f53f af12 	bmi.w	8004f40 <_vfiprintf_r+0x4c>
 800511c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800511e:	e711      	b.n	8004f44 <_vfiprintf_r+0x50>
 8005120:	ab03      	add	r3, sp, #12
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	462a      	mov	r2, r5
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <_vfiprintf_r+0x258>)
 8005128:	a904      	add	r1, sp, #16
 800512a:	4630      	mov	r0, r6
 800512c:	f000 f880 	bl	8005230 <_printf_i>
 8005130:	e7e4      	b.n	80050fc <_vfiprintf_r+0x208>
 8005132:	bf00      	nop
 8005134:	08005e7c 	.word	0x08005e7c
 8005138:	08005e9c 	.word	0x08005e9c
 800513c:	08005e5c 	.word	0x08005e5c
 8005140:	08005e26 	.word	0x08005e26
 8005144:	08005e30 	.word	0x08005e30
 8005148:	00000000 	.word	0x00000000
 800514c:	08004ecf 	.word	0x08004ecf
 8005150:	08005e2c 	.word	0x08005e2c

08005154 <_printf_common>:
 8005154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005158:	4616      	mov	r6, r2
 800515a:	4699      	mov	r9, r3
 800515c:	688a      	ldr	r2, [r1, #8]
 800515e:	690b      	ldr	r3, [r1, #16]
 8005160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005164:	4293      	cmp	r3, r2
 8005166:	bfb8      	it	lt
 8005168:	4613      	movlt	r3, r2
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005170:	4607      	mov	r7, r0
 8005172:	460c      	mov	r4, r1
 8005174:	b10a      	cbz	r2, 800517a <_printf_common+0x26>
 8005176:	3301      	adds	r3, #1
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	0699      	lsls	r1, r3, #26
 800517e:	bf42      	ittt	mi
 8005180:	6833      	ldrmi	r3, [r6, #0]
 8005182:	3302      	addmi	r3, #2
 8005184:	6033      	strmi	r3, [r6, #0]
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	f015 0506 	ands.w	r5, r5, #6
 800518c:	d106      	bne.n	800519c <_printf_common+0x48>
 800518e:	f104 0a19 	add.w	sl, r4, #25
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	6832      	ldr	r2, [r6, #0]
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	42ab      	cmp	r3, r5
 800519a:	dc26      	bgt.n	80051ea <_printf_common+0x96>
 800519c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051a0:	1e13      	subs	r3, r2, #0
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	0692      	lsls	r2, r2, #26
 80051aa:	d42b      	bmi.n	8005204 <_printf_common+0xb0>
 80051ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b0:	4649      	mov	r1, r9
 80051b2:	4638      	mov	r0, r7
 80051b4:	47c0      	blx	r8
 80051b6:	3001      	adds	r0, #1
 80051b8:	d01e      	beq.n	80051f8 <_printf_common+0xa4>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	68e5      	ldr	r5, [r4, #12]
 80051be:	6832      	ldr	r2, [r6, #0]
 80051c0:	f003 0306 	and.w	r3, r3, #6
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	bf08      	it	eq
 80051c8:	1aad      	subeq	r5, r5, r2
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	6922      	ldr	r2, [r4, #16]
 80051ce:	bf0c      	ite	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	2500      	movne	r5, #0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfc4      	itt	gt
 80051da:	1a9b      	subgt	r3, r3, r2
 80051dc:	18ed      	addgt	r5, r5, r3
 80051de:	2600      	movs	r6, #0
 80051e0:	341a      	adds	r4, #26
 80051e2:	42b5      	cmp	r5, r6
 80051e4:	d11a      	bne.n	800521c <_printf_common+0xc8>
 80051e6:	2000      	movs	r0, #0
 80051e8:	e008      	b.n	80051fc <_printf_common+0xa8>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4652      	mov	r2, sl
 80051ee:	4649      	mov	r1, r9
 80051f0:	4638      	mov	r0, r7
 80051f2:	47c0      	blx	r8
 80051f4:	3001      	adds	r0, #1
 80051f6:	d103      	bne.n	8005200 <_printf_common+0xac>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005200:	3501      	adds	r5, #1
 8005202:	e7c6      	b.n	8005192 <_printf_common+0x3e>
 8005204:	18e1      	adds	r1, r4, r3
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	2030      	movs	r0, #48	; 0x30
 800520a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520e:	4422      	add	r2, r4
 8005210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005218:	3302      	adds	r3, #2
 800521a:	e7c7      	b.n	80051ac <_printf_common+0x58>
 800521c:	2301      	movs	r3, #1
 800521e:	4622      	mov	r2, r4
 8005220:	4649      	mov	r1, r9
 8005222:	4638      	mov	r0, r7
 8005224:	47c0      	blx	r8
 8005226:	3001      	adds	r0, #1
 8005228:	d0e6      	beq.n	80051f8 <_printf_common+0xa4>
 800522a:	3601      	adds	r6, #1
 800522c:	e7d9      	b.n	80051e2 <_printf_common+0x8e>
	...

08005230 <_printf_i>:
 8005230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	460c      	mov	r4, r1
 8005236:	4691      	mov	r9, r2
 8005238:	7e27      	ldrb	r7, [r4, #24]
 800523a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800523c:	2f78      	cmp	r7, #120	; 0x78
 800523e:	4680      	mov	r8, r0
 8005240:	469a      	mov	sl, r3
 8005242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005246:	d807      	bhi.n	8005258 <_printf_i+0x28>
 8005248:	2f62      	cmp	r7, #98	; 0x62
 800524a:	d80a      	bhi.n	8005262 <_printf_i+0x32>
 800524c:	2f00      	cmp	r7, #0
 800524e:	f000 80d8 	beq.w	8005402 <_printf_i+0x1d2>
 8005252:	2f58      	cmp	r7, #88	; 0x58
 8005254:	f000 80a3 	beq.w	800539e <_printf_i+0x16e>
 8005258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800525c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005260:	e03a      	b.n	80052d8 <_printf_i+0xa8>
 8005262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005266:	2b15      	cmp	r3, #21
 8005268:	d8f6      	bhi.n	8005258 <_printf_i+0x28>
 800526a:	a001      	add	r0, pc, #4	; (adr r0, 8005270 <_printf_i+0x40>)
 800526c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005270:	080052c9 	.word	0x080052c9
 8005274:	080052dd 	.word	0x080052dd
 8005278:	08005259 	.word	0x08005259
 800527c:	08005259 	.word	0x08005259
 8005280:	08005259 	.word	0x08005259
 8005284:	08005259 	.word	0x08005259
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005259 	.word	0x08005259
 8005290:	08005259 	.word	0x08005259
 8005294:	08005259 	.word	0x08005259
 8005298:	08005259 	.word	0x08005259
 800529c:	080053e9 	.word	0x080053e9
 80052a0:	0800530d 	.word	0x0800530d
 80052a4:	080053cb 	.word	0x080053cb
 80052a8:	08005259 	.word	0x08005259
 80052ac:	08005259 	.word	0x08005259
 80052b0:	0800540b 	.word	0x0800540b
 80052b4:	08005259 	.word	0x08005259
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005259 	.word	0x08005259
 80052c0:	08005259 	.word	0x08005259
 80052c4:	080053d3 	.word	0x080053d3
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	1d1a      	adds	r2, r3, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	600a      	str	r2, [r1, #0]
 80052d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d8:	2301      	movs	r3, #1
 80052da:	e0a3      	b.n	8005424 <_printf_i+0x1f4>
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	6808      	ldr	r0, [r1, #0]
 80052e0:	062e      	lsls	r6, r5, #24
 80052e2:	f100 0304 	add.w	r3, r0, #4
 80052e6:	d50a      	bpl.n	80052fe <_printf_i+0xce>
 80052e8:	6805      	ldr	r5, [r0, #0]
 80052ea:	600b      	str	r3, [r1, #0]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	da03      	bge.n	80052f8 <_printf_i+0xc8>
 80052f0:	232d      	movs	r3, #45	; 0x2d
 80052f2:	426d      	negs	r5, r5
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f8:	485e      	ldr	r0, [pc, #376]	; (8005474 <_printf_i+0x244>)
 80052fa:	230a      	movs	r3, #10
 80052fc:	e019      	b.n	8005332 <_printf_i+0x102>
 80052fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005302:	6805      	ldr	r5, [r0, #0]
 8005304:	600b      	str	r3, [r1, #0]
 8005306:	bf18      	it	ne
 8005308:	b22d      	sxthne	r5, r5
 800530a:	e7ef      	b.n	80052ec <_printf_i+0xbc>
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	1d18      	adds	r0, r3, #4
 8005312:	6008      	str	r0, [r1, #0]
 8005314:	0628      	lsls	r0, r5, #24
 8005316:	d501      	bpl.n	800531c <_printf_i+0xec>
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	e002      	b.n	8005322 <_printf_i+0xf2>
 800531c:	0669      	lsls	r1, r5, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0xe8>
 8005320:	881d      	ldrh	r5, [r3, #0]
 8005322:	4854      	ldr	r0, [pc, #336]	; (8005474 <_printf_i+0x244>)
 8005324:	2f6f      	cmp	r7, #111	; 0x6f
 8005326:	bf0c      	ite	eq
 8005328:	2308      	moveq	r3, #8
 800532a:	230a      	movne	r3, #10
 800532c:	2100      	movs	r1, #0
 800532e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005332:	6866      	ldr	r6, [r4, #4]
 8005334:	60a6      	str	r6, [r4, #8]
 8005336:	2e00      	cmp	r6, #0
 8005338:	bfa2      	ittt	ge
 800533a:	6821      	ldrge	r1, [r4, #0]
 800533c:	f021 0104 	bicge.w	r1, r1, #4
 8005340:	6021      	strge	r1, [r4, #0]
 8005342:	b90d      	cbnz	r5, 8005348 <_printf_i+0x118>
 8005344:	2e00      	cmp	r6, #0
 8005346:	d04d      	beq.n	80053e4 <_printf_i+0x1b4>
 8005348:	4616      	mov	r6, r2
 800534a:	fbb5 f1f3 	udiv	r1, r5, r3
 800534e:	fb03 5711 	mls	r7, r3, r1, r5
 8005352:	5dc7      	ldrb	r7, [r0, r7]
 8005354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005358:	462f      	mov	r7, r5
 800535a:	42bb      	cmp	r3, r7
 800535c:	460d      	mov	r5, r1
 800535e:	d9f4      	bls.n	800534a <_printf_i+0x11a>
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10b      	bne.n	800537c <_printf_i+0x14c>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07df      	lsls	r7, r3, #31
 8005368:	d508      	bpl.n	800537c <_printf_i+0x14c>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	4299      	cmp	r1, r3
 8005370:	bfde      	ittt	le
 8005372:	2330      	movle	r3, #48	; 0x30
 8005374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800537c:	1b92      	subs	r2, r2, r6
 800537e:	6122      	str	r2, [r4, #16]
 8005380:	f8cd a000 	str.w	sl, [sp]
 8005384:	464b      	mov	r3, r9
 8005386:	aa03      	add	r2, sp, #12
 8005388:	4621      	mov	r1, r4
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff fee2 	bl	8005154 <_printf_common>
 8005390:	3001      	adds	r0, #1
 8005392:	d14c      	bne.n	800542e <_printf_i+0x1fe>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	b004      	add	sp, #16
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	4835      	ldr	r0, [pc, #212]	; (8005474 <_printf_i+0x244>)
 80053a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	680e      	ldr	r6, [r1, #0]
 80053a8:	061f      	lsls	r7, r3, #24
 80053aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80053ae:	600e      	str	r6, [r1, #0]
 80053b0:	d514      	bpl.n	80053dc <_printf_i+0x1ac>
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	bf44      	itt	mi
 80053b6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ba:	6023      	strmi	r3, [r4, #0]
 80053bc:	b91d      	cbnz	r5, 80053c6 <_printf_i+0x196>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f023 0320 	bic.w	r3, r3, #32
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	2310      	movs	r3, #16
 80053c8:	e7b0      	b.n	800532c <_printf_i+0xfc>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f043 0320 	orr.w	r3, r3, #32
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	2378      	movs	r3, #120	; 0x78
 80053d4:	4828      	ldr	r0, [pc, #160]	; (8005478 <_printf_i+0x248>)
 80053d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053da:	e7e3      	b.n	80053a4 <_printf_i+0x174>
 80053dc:	065e      	lsls	r6, r3, #25
 80053de:	bf48      	it	mi
 80053e0:	b2ad      	uxthmi	r5, r5
 80053e2:	e7e6      	b.n	80053b2 <_printf_i+0x182>
 80053e4:	4616      	mov	r6, r2
 80053e6:	e7bb      	b.n	8005360 <_printf_i+0x130>
 80053e8:	680b      	ldr	r3, [r1, #0]
 80053ea:	6826      	ldr	r6, [r4, #0]
 80053ec:	6960      	ldr	r0, [r4, #20]
 80053ee:	1d1d      	adds	r5, r3, #4
 80053f0:	600d      	str	r5, [r1, #0]
 80053f2:	0635      	lsls	r5, r6, #24
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	d501      	bpl.n	80053fc <_printf_i+0x1cc>
 80053f8:	6018      	str	r0, [r3, #0]
 80053fa:	e002      	b.n	8005402 <_printf_i+0x1d2>
 80053fc:	0671      	lsls	r1, r6, #25
 80053fe:	d5fb      	bpl.n	80053f8 <_printf_i+0x1c8>
 8005400:	8018      	strh	r0, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	4616      	mov	r6, r2
 8005408:	e7ba      	b.n	8005380 <_printf_i+0x150>
 800540a:	680b      	ldr	r3, [r1, #0]
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	600a      	str	r2, [r1, #0]
 8005410:	681e      	ldr	r6, [r3, #0]
 8005412:	6862      	ldr	r2, [r4, #4]
 8005414:	2100      	movs	r1, #0
 8005416:	4630      	mov	r0, r6
 8005418:	f7fa feda 	bl	80001d0 <memchr>
 800541c:	b108      	cbz	r0, 8005422 <_printf_i+0x1f2>
 800541e:	1b80      	subs	r0, r0, r6
 8005420:	6060      	str	r0, [r4, #4]
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	2300      	movs	r3, #0
 8005428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542c:	e7a8      	b.n	8005380 <_printf_i+0x150>
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d0ab      	beq.n	8005394 <_printf_i+0x164>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	079b      	lsls	r3, r3, #30
 8005440:	d413      	bmi.n	800546a <_printf_i+0x23a>
 8005442:	68e0      	ldr	r0, [r4, #12]
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	4298      	cmp	r0, r3
 8005448:	bfb8      	it	lt
 800544a:	4618      	movlt	r0, r3
 800544c:	e7a4      	b.n	8005398 <_printf_i+0x168>
 800544e:	2301      	movs	r3, #1
 8005450:	4632      	mov	r2, r6
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d09b      	beq.n	8005394 <_printf_i+0x164>
 800545c:	3501      	adds	r5, #1
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	9903      	ldr	r1, [sp, #12]
 8005462:	1a5b      	subs	r3, r3, r1
 8005464:	42ab      	cmp	r3, r5
 8005466:	dcf2      	bgt.n	800544e <_printf_i+0x21e>
 8005468:	e7eb      	b.n	8005442 <_printf_i+0x212>
 800546a:	2500      	movs	r5, #0
 800546c:	f104 0619 	add.w	r6, r4, #25
 8005470:	e7f5      	b.n	800545e <_printf_i+0x22e>
 8005472:	bf00      	nop
 8005474:	08005e37 	.word	0x08005e37
 8005478:	08005e48 	.word	0x08005e48

0800547c <_sbrk_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d06      	ldr	r5, [pc, #24]	; (8005498 <_sbrk_r+0x1c>)
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	f7fb fbc8 	bl	8000c1c <_sbrk>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	d102      	bne.n	8005496 <_sbrk_r+0x1a>
 8005490:	682b      	ldr	r3, [r5, #0]
 8005492:	b103      	cbz	r3, 8005496 <_sbrk_r+0x1a>
 8005494:	6023      	str	r3, [r4, #0]
 8005496:	bd38      	pop	{r3, r4, r5, pc}
 8005498:	2000052c 	.word	0x2000052c

0800549c <__swbuf_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	460e      	mov	r6, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	4605      	mov	r5, r0
 80054a4:	b118      	cbz	r0, 80054ae <__swbuf_r+0x12>
 80054a6:	6983      	ldr	r3, [r0, #24]
 80054a8:	b90b      	cbnz	r3, 80054ae <__swbuf_r+0x12>
 80054aa:	f000 f9d9 	bl	8005860 <__sinit>
 80054ae:	4b21      	ldr	r3, [pc, #132]	; (8005534 <__swbuf_r+0x98>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	d12b      	bne.n	800550c <__swbuf_r+0x70>
 80054b4:	686c      	ldr	r4, [r5, #4]
 80054b6:	69a3      	ldr	r3, [r4, #24]
 80054b8:	60a3      	str	r3, [r4, #8]
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	071a      	lsls	r2, r3, #28
 80054be:	d52f      	bpl.n	8005520 <__swbuf_r+0x84>
 80054c0:	6923      	ldr	r3, [r4, #16]
 80054c2:	b36b      	cbz	r3, 8005520 <__swbuf_r+0x84>
 80054c4:	6923      	ldr	r3, [r4, #16]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1ac0      	subs	r0, r0, r3
 80054ca:	6963      	ldr	r3, [r4, #20]
 80054cc:	b2f6      	uxtb	r6, r6
 80054ce:	4283      	cmp	r3, r0
 80054d0:	4637      	mov	r7, r6
 80054d2:	dc04      	bgt.n	80054de <__swbuf_r+0x42>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f92e 	bl	8005738 <_fflush_r>
 80054dc:	bb30      	cbnz	r0, 800552c <__swbuf_r+0x90>
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	60a3      	str	r3, [r4, #8]
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	6022      	str	r2, [r4, #0]
 80054ea:	701e      	strb	r6, [r3, #0]
 80054ec:	6963      	ldr	r3, [r4, #20]
 80054ee:	3001      	adds	r0, #1
 80054f0:	4283      	cmp	r3, r0
 80054f2:	d004      	beq.n	80054fe <__swbuf_r+0x62>
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	07db      	lsls	r3, r3, #31
 80054f8:	d506      	bpl.n	8005508 <__swbuf_r+0x6c>
 80054fa:	2e0a      	cmp	r6, #10
 80054fc:	d104      	bne.n	8005508 <__swbuf_r+0x6c>
 80054fe:	4621      	mov	r1, r4
 8005500:	4628      	mov	r0, r5
 8005502:	f000 f919 	bl	8005738 <_fflush_r>
 8005506:	b988      	cbnz	r0, 800552c <__swbuf_r+0x90>
 8005508:	4638      	mov	r0, r7
 800550a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <__swbuf_r+0x9c>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <__swbuf_r+0x7a>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7cf      	b.n	80054b6 <__swbuf_r+0x1a>
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <__swbuf_r+0xa0>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7ca      	b.n	80054b6 <__swbuf_r+0x1a>
 8005520:	4621      	mov	r1, r4
 8005522:	4628      	mov	r0, r5
 8005524:	f000 f80c 	bl	8005540 <__swsetup_r>
 8005528:	2800      	cmp	r0, #0
 800552a:	d0cb      	beq.n	80054c4 <__swbuf_r+0x28>
 800552c:	f04f 37ff 	mov.w	r7, #4294967295
 8005530:	e7ea      	b.n	8005508 <__swbuf_r+0x6c>
 8005532:	bf00      	nop
 8005534:	08005e7c 	.word	0x08005e7c
 8005538:	08005e9c 	.word	0x08005e9c
 800553c:	08005e5c 	.word	0x08005e5c

08005540 <__swsetup_r>:
 8005540:	4b32      	ldr	r3, [pc, #200]	; (800560c <__swsetup_r+0xcc>)
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	681d      	ldr	r5, [r3, #0]
 8005546:	4606      	mov	r6, r0
 8005548:	460c      	mov	r4, r1
 800554a:	b125      	cbz	r5, 8005556 <__swsetup_r+0x16>
 800554c:	69ab      	ldr	r3, [r5, #24]
 800554e:	b913      	cbnz	r3, 8005556 <__swsetup_r+0x16>
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f985 	bl	8005860 <__sinit>
 8005556:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <__swsetup_r+0xd0>)
 8005558:	429c      	cmp	r4, r3
 800555a:	d10f      	bne.n	800557c <__swsetup_r+0x3c>
 800555c:	686c      	ldr	r4, [r5, #4]
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005564:	0719      	lsls	r1, r3, #28
 8005566:	d42c      	bmi.n	80055c2 <__swsetup_r+0x82>
 8005568:	06dd      	lsls	r5, r3, #27
 800556a:	d411      	bmi.n	8005590 <__swsetup_r+0x50>
 800556c:	2309      	movs	r3, #9
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	e03e      	b.n	80055fa <__swsetup_r+0xba>
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <__swsetup_r+0xd4>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <__swsetup_r+0x46>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7eb      	b.n	800555e <__swsetup_r+0x1e>
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <__swsetup_r+0xd8>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7e6      	b.n	800555e <__swsetup_r+0x1e>
 8005590:	0758      	lsls	r0, r3, #29
 8005592:	d512      	bpl.n	80055ba <__swsetup_r+0x7a>
 8005594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005596:	b141      	cbz	r1, 80055aa <__swsetup_r+0x6a>
 8005598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <__swsetup_r+0x66>
 80055a0:	4630      	mov	r0, r6
 80055a2:	f7ff fa77 	bl	8004a94 <_free_r>
 80055a6:	2300      	movs	r3, #0
 80055a8:	6363      	str	r3, [r4, #52]	; 0x34
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f043 0308 	orr.w	r3, r3, #8
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	b94b      	cbnz	r3, 80055da <__swsetup_r+0x9a>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d003      	beq.n	80055da <__swsetup_r+0x9a>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 fa07 	bl	80059e8 <__smakebuf_r>
 80055da:	89a0      	ldrh	r0, [r4, #12]
 80055dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e0:	f010 0301 	ands.w	r3, r0, #1
 80055e4:	d00a      	beq.n	80055fc <__swsetup_r+0xbc>
 80055e6:	2300      	movs	r3, #0
 80055e8:	60a3      	str	r3, [r4, #8]
 80055ea:	6963      	ldr	r3, [r4, #20]
 80055ec:	425b      	negs	r3, r3
 80055ee:	61a3      	str	r3, [r4, #24]
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	b943      	cbnz	r3, 8005606 <__swsetup_r+0xc6>
 80055f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055f8:	d1ba      	bne.n	8005570 <__swsetup_r+0x30>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	0781      	lsls	r1, r0, #30
 80055fe:	bf58      	it	pl
 8005600:	6963      	ldrpl	r3, [r4, #20]
 8005602:	60a3      	str	r3, [r4, #8]
 8005604:	e7f4      	b.n	80055f0 <__swsetup_r+0xb0>
 8005606:	2000      	movs	r0, #0
 8005608:	e7f7      	b.n	80055fa <__swsetup_r+0xba>
 800560a:	bf00      	nop
 800560c:	20000014 	.word	0x20000014
 8005610:	08005e7c 	.word	0x08005e7c
 8005614:	08005e9c 	.word	0x08005e9c
 8005618:	08005e5c 	.word	0x08005e5c

0800561c <abort>:
 800561c:	b508      	push	{r3, lr}
 800561e:	2006      	movs	r0, #6
 8005620:	f000 faa4 	bl	8005b6c <raise>
 8005624:	2001      	movs	r0, #1
 8005626:	f7fb fa81 	bl	8000b2c <_exit>
	...

0800562c <__sflush_r>:
 800562c:	898a      	ldrh	r2, [r1, #12]
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	4605      	mov	r5, r0
 8005634:	0710      	lsls	r0, r2, #28
 8005636:	460c      	mov	r4, r1
 8005638:	d458      	bmi.n	80056ec <__sflush_r+0xc0>
 800563a:	684b      	ldr	r3, [r1, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	dc05      	bgt.n	800564c <__sflush_r+0x20>
 8005640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	dc02      	bgt.n	800564c <__sflush_r+0x20>
 8005646:	2000      	movs	r0, #0
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800564e:	2e00      	cmp	r6, #0
 8005650:	d0f9      	beq.n	8005646 <__sflush_r+0x1a>
 8005652:	2300      	movs	r3, #0
 8005654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005658:	682f      	ldr	r7, [r5, #0]
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	d032      	beq.n	80056c4 <__sflush_r+0x98>
 800565e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	075a      	lsls	r2, r3, #29
 8005664:	d505      	bpl.n	8005672 <__sflush_r+0x46>
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	1ac0      	subs	r0, r0, r3
 800566a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800566c:	b10b      	cbz	r3, 8005672 <__sflush_r+0x46>
 800566e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	2300      	movs	r3, #0
 8005674:	4602      	mov	r2, r0
 8005676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005678:	6a21      	ldr	r1, [r4, #32]
 800567a:	4628      	mov	r0, r5
 800567c:	47b0      	blx	r6
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	d106      	bne.n	8005692 <__sflush_r+0x66>
 8005684:	6829      	ldr	r1, [r5, #0]
 8005686:	291d      	cmp	r1, #29
 8005688:	d82c      	bhi.n	80056e4 <__sflush_r+0xb8>
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <__sflush_r+0x108>)
 800568c:	40ca      	lsrs	r2, r1
 800568e:	07d6      	lsls	r6, r2, #31
 8005690:	d528      	bpl.n	80056e4 <__sflush_r+0xb8>
 8005692:	2200      	movs	r2, #0
 8005694:	6062      	str	r2, [r4, #4]
 8005696:	04d9      	lsls	r1, r3, #19
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	6022      	str	r2, [r4, #0]
 800569c:	d504      	bpl.n	80056a8 <__sflush_r+0x7c>
 800569e:	1c42      	adds	r2, r0, #1
 80056a0:	d101      	bne.n	80056a6 <__sflush_r+0x7a>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b903      	cbnz	r3, 80056a8 <__sflush_r+0x7c>
 80056a6:	6560      	str	r0, [r4, #84]	; 0x54
 80056a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056aa:	602f      	str	r7, [r5, #0]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d0ca      	beq.n	8005646 <__sflush_r+0x1a>
 80056b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d002      	beq.n	80056be <__sflush_r+0x92>
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7ff f9eb 	bl	8004a94 <_free_r>
 80056be:	2000      	movs	r0, #0
 80056c0:	6360      	str	r0, [r4, #52]	; 0x34
 80056c2:	e7c1      	b.n	8005648 <__sflush_r+0x1c>
 80056c4:	6a21      	ldr	r1, [r4, #32]
 80056c6:	2301      	movs	r3, #1
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	1c41      	adds	r1, r0, #1
 80056ce:	d1c7      	bne.n	8005660 <__sflush_r+0x34>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0c4      	beq.n	8005660 <__sflush_r+0x34>
 80056d6:	2b1d      	cmp	r3, #29
 80056d8:	d001      	beq.n	80056de <__sflush_r+0xb2>
 80056da:	2b16      	cmp	r3, #22
 80056dc:	d101      	bne.n	80056e2 <__sflush_r+0xb6>
 80056de:	602f      	str	r7, [r5, #0]
 80056e0:	e7b1      	b.n	8005646 <__sflush_r+0x1a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e8:	81a3      	strh	r3, [r4, #12]
 80056ea:	e7ad      	b.n	8005648 <__sflush_r+0x1c>
 80056ec:	690f      	ldr	r7, [r1, #16]
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d0a9      	beq.n	8005646 <__sflush_r+0x1a>
 80056f2:	0793      	lsls	r3, r2, #30
 80056f4:	680e      	ldr	r6, [r1, #0]
 80056f6:	bf08      	it	eq
 80056f8:	694b      	ldreq	r3, [r1, #20]
 80056fa:	600f      	str	r7, [r1, #0]
 80056fc:	bf18      	it	ne
 80056fe:	2300      	movne	r3, #0
 8005700:	eba6 0807 	sub.w	r8, r6, r7
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	dd9c      	ble.n	8005646 <__sflush_r+0x1a>
 800570c:	6a21      	ldr	r1, [r4, #32]
 800570e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005710:	4643      	mov	r3, r8
 8005712:	463a      	mov	r2, r7
 8005714:	4628      	mov	r0, r5
 8005716:	47b0      	blx	r6
 8005718:	2800      	cmp	r0, #0
 800571a:	dc06      	bgt.n	800572a <__sflush_r+0xfe>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e78e      	b.n	8005648 <__sflush_r+0x1c>
 800572a:	4407      	add	r7, r0
 800572c:	eba8 0800 	sub.w	r8, r8, r0
 8005730:	e7e9      	b.n	8005706 <__sflush_r+0xda>
 8005732:	bf00      	nop
 8005734:	20400001 	.word	0x20400001

08005738 <_fflush_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	690b      	ldr	r3, [r1, #16]
 800573c:	4605      	mov	r5, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b913      	cbnz	r3, 8005748 <_fflush_r+0x10>
 8005742:	2500      	movs	r5, #0
 8005744:	4628      	mov	r0, r5
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	b118      	cbz	r0, 8005752 <_fflush_r+0x1a>
 800574a:	6983      	ldr	r3, [r0, #24]
 800574c:	b90b      	cbnz	r3, 8005752 <_fflush_r+0x1a>
 800574e:	f000 f887 	bl	8005860 <__sinit>
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <_fflush_r+0x6c>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d11b      	bne.n	8005790 <_fflush_r+0x58>
 8005758:	686c      	ldr	r4, [r5, #4]
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ef      	beq.n	8005742 <_fflush_r+0xa>
 8005762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005764:	07d0      	lsls	r0, r2, #31
 8005766:	d404      	bmi.n	8005772 <_fflush_r+0x3a>
 8005768:	0599      	lsls	r1, r3, #22
 800576a:	d402      	bmi.n	8005772 <_fflush_r+0x3a>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f000 f915 	bl	800599c <__retarget_lock_acquire_recursive>
 8005772:	4628      	mov	r0, r5
 8005774:	4621      	mov	r1, r4
 8005776:	f7ff ff59 	bl	800562c <__sflush_r>
 800577a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800577c:	07da      	lsls	r2, r3, #31
 800577e:	4605      	mov	r5, r0
 8005780:	d4e0      	bmi.n	8005744 <_fflush_r+0xc>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	059b      	lsls	r3, r3, #22
 8005786:	d4dd      	bmi.n	8005744 <_fflush_r+0xc>
 8005788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578a:	f000 f908 	bl	800599e <__retarget_lock_release_recursive>
 800578e:	e7d9      	b.n	8005744 <_fflush_r+0xc>
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <_fflush_r+0x70>)
 8005792:	429c      	cmp	r4, r3
 8005794:	d101      	bne.n	800579a <_fflush_r+0x62>
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	e7df      	b.n	800575a <_fflush_r+0x22>
 800579a:	4b04      	ldr	r3, [pc, #16]	; (80057ac <_fflush_r+0x74>)
 800579c:	429c      	cmp	r4, r3
 800579e:	bf08      	it	eq
 80057a0:	68ec      	ldreq	r4, [r5, #12]
 80057a2:	e7da      	b.n	800575a <_fflush_r+0x22>
 80057a4:	08005e7c 	.word	0x08005e7c
 80057a8:	08005e9c 	.word	0x08005e9c
 80057ac:	08005e5c 	.word	0x08005e5c

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057be:	6083      	str	r3, [r0, #8]
 80057c0:	8181      	strh	r1, [r0, #12]
 80057c2:	6643      	str	r3, [r0, #100]	; 0x64
 80057c4:	81c2      	strh	r2, [r0, #14]
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	; 0x5c
 80057ce:	f7ff f8c1 	bl	8004954 <memset>
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x38>)
 80057d4:	6263      	str	r3, [r4, #36]	; 0x24
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <std+0x3c>)
 80057d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x40>)
 80057dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <std+0x44>)
 80057e0:	6224      	str	r4, [r4, #32]
 80057e2:	6323      	str	r3, [r4, #48]	; 0x30
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	bf00      	nop
 80057e8:	08005ba5 	.word	0x08005ba5
 80057ec:	08005bc7 	.word	0x08005bc7
 80057f0:	08005bff 	.word	0x08005bff
 80057f4:	08005c23 	.word	0x08005c23

080057f8 <_cleanup_r>:
 80057f8:	4901      	ldr	r1, [pc, #4]	; (8005800 <_cleanup_r+0x8>)
 80057fa:	f000 b8af 	b.w	800595c <_fwalk_reent>
 80057fe:	bf00      	nop
 8005800:	08005739 	.word	0x08005739

08005804 <__sfmoreglue>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	1e4a      	subs	r2, r1, #1
 8005808:	2568      	movs	r5, #104	; 0x68
 800580a:	4355      	muls	r5, r2
 800580c:	460e      	mov	r6, r1
 800580e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005812:	f7ff f98f 	bl	8004b34 <_malloc_r>
 8005816:	4604      	mov	r4, r0
 8005818:	b140      	cbz	r0, 800582c <__sfmoreglue+0x28>
 800581a:	2100      	movs	r1, #0
 800581c:	e9c0 1600 	strd	r1, r6, [r0]
 8005820:	300c      	adds	r0, #12
 8005822:	60a0      	str	r0, [r4, #8]
 8005824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005828:	f7ff f894 	bl	8004954 <memset>
 800582c:	4620      	mov	r0, r4
 800582e:	bd70      	pop	{r4, r5, r6, pc}

08005830 <__sfp_lock_acquire>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__sfp_lock_acquire+0x8>)
 8005832:	f000 b8b3 	b.w	800599c <__retarget_lock_acquire_recursive>
 8005836:	bf00      	nop
 8005838:	20000528 	.word	0x20000528

0800583c <__sfp_lock_release>:
 800583c:	4801      	ldr	r0, [pc, #4]	; (8005844 <__sfp_lock_release+0x8>)
 800583e:	f000 b8ae 	b.w	800599e <__retarget_lock_release_recursive>
 8005842:	bf00      	nop
 8005844:	20000528 	.word	0x20000528

08005848 <__sinit_lock_acquire>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__sinit_lock_acquire+0x8>)
 800584a:	f000 b8a7 	b.w	800599c <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	20000523 	.word	0x20000523

08005854 <__sinit_lock_release>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sinit_lock_release+0x8>)
 8005856:	f000 b8a2 	b.w	800599e <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	20000523 	.word	0x20000523

08005860 <__sinit>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4604      	mov	r4, r0
 8005864:	f7ff fff0 	bl	8005848 <__sinit_lock_acquire>
 8005868:	69a3      	ldr	r3, [r4, #24]
 800586a:	b11b      	cbz	r3, 8005874 <__sinit+0x14>
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f7ff bff0 	b.w	8005854 <__sinit_lock_release>
 8005874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005878:	6523      	str	r3, [r4, #80]	; 0x50
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <__sinit+0x68>)
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <__sinit+0x6c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	62a2      	str	r2, [r4, #40]	; 0x28
 8005882:	42a3      	cmp	r3, r4
 8005884:	bf04      	itt	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	61a3      	streq	r3, [r4, #24]
 800588a:	4620      	mov	r0, r4
 800588c:	f000 f820 	bl	80058d0 <__sfp>
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f81c 	bl	80058d0 <__sfp>
 8005898:	60a0      	str	r0, [r4, #8]
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f818 	bl	80058d0 <__sfp>
 80058a0:	2200      	movs	r2, #0
 80058a2:	60e0      	str	r0, [r4, #12]
 80058a4:	2104      	movs	r1, #4
 80058a6:	6860      	ldr	r0, [r4, #4]
 80058a8:	f7ff ff82 	bl	80057b0 <std>
 80058ac:	68a0      	ldr	r0, [r4, #8]
 80058ae:	2201      	movs	r2, #1
 80058b0:	2109      	movs	r1, #9
 80058b2:	f7ff ff7d 	bl	80057b0 <std>
 80058b6:	68e0      	ldr	r0, [r4, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	2112      	movs	r1, #18
 80058bc:	f7ff ff78 	bl	80057b0 <std>
 80058c0:	2301      	movs	r3, #1
 80058c2:	61a3      	str	r3, [r4, #24]
 80058c4:	e7d2      	b.n	800586c <__sinit+0xc>
 80058c6:	bf00      	nop
 80058c8:	08005d70 	.word	0x08005d70
 80058cc:	080057f9 	.word	0x080057f9

080058d0 <__sfp>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	4607      	mov	r7, r0
 80058d4:	f7ff ffac 	bl	8005830 <__sfp_lock_acquire>
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <__sfp+0x84>)
 80058da:	681e      	ldr	r6, [r3, #0]
 80058dc:	69b3      	ldr	r3, [r6, #24]
 80058de:	b913      	cbnz	r3, 80058e6 <__sfp+0x16>
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff ffbd 	bl	8005860 <__sinit>
 80058e6:	3648      	adds	r6, #72	; 0x48
 80058e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	d503      	bpl.n	80058f8 <__sfp+0x28>
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	b30b      	cbz	r3, 8005938 <__sfp+0x68>
 80058f4:	6836      	ldr	r6, [r6, #0]
 80058f6:	e7f7      	b.n	80058e8 <__sfp+0x18>
 80058f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058fc:	b9d5      	cbnz	r5, 8005934 <__sfp+0x64>
 80058fe:	4b16      	ldr	r3, [pc, #88]	; (8005958 <__sfp+0x88>)
 8005900:	60e3      	str	r3, [r4, #12]
 8005902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005906:	6665      	str	r5, [r4, #100]	; 0x64
 8005908:	f000 f847 	bl	800599a <__retarget_lock_init_recursive>
 800590c:	f7ff ff96 	bl	800583c <__sfp_lock_release>
 8005910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	61a5      	str	r5, [r4, #24]
 800591c:	2208      	movs	r2, #8
 800591e:	4629      	mov	r1, r5
 8005920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005924:	f7ff f816 	bl	8004954 <memset>
 8005928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800592c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005930:	4620      	mov	r0, r4
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	3468      	adds	r4, #104	; 0x68
 8005936:	e7d9      	b.n	80058ec <__sfp+0x1c>
 8005938:	2104      	movs	r1, #4
 800593a:	4638      	mov	r0, r7
 800593c:	f7ff ff62 	bl	8005804 <__sfmoreglue>
 8005940:	4604      	mov	r4, r0
 8005942:	6030      	str	r0, [r6, #0]
 8005944:	2800      	cmp	r0, #0
 8005946:	d1d5      	bne.n	80058f4 <__sfp+0x24>
 8005948:	f7ff ff78 	bl	800583c <__sfp_lock_release>
 800594c:	230c      	movs	r3, #12
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	e7ee      	b.n	8005930 <__sfp+0x60>
 8005952:	bf00      	nop
 8005954:	08005d70 	.word	0x08005d70
 8005958:	ffff0001 	.word	0xffff0001

0800595c <_fwalk_reent>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	4606      	mov	r6, r0
 8005962:	4688      	mov	r8, r1
 8005964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005968:	2700      	movs	r7, #0
 800596a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596e:	f1b9 0901 	subs.w	r9, r9, #1
 8005972:	d505      	bpl.n	8005980 <_fwalk_reent+0x24>
 8005974:	6824      	ldr	r4, [r4, #0]
 8005976:	2c00      	cmp	r4, #0
 8005978:	d1f7      	bne.n	800596a <_fwalk_reent+0xe>
 800597a:	4638      	mov	r0, r7
 800597c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005980:	89ab      	ldrh	r3, [r5, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d907      	bls.n	8005996 <_fwalk_reent+0x3a>
 8005986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800598a:	3301      	adds	r3, #1
 800598c:	d003      	beq.n	8005996 <_fwalk_reent+0x3a>
 800598e:	4629      	mov	r1, r5
 8005990:	4630      	mov	r0, r6
 8005992:	47c0      	blx	r8
 8005994:	4307      	orrs	r7, r0
 8005996:	3568      	adds	r5, #104	; 0x68
 8005998:	e7e9      	b.n	800596e <_fwalk_reent+0x12>

0800599a <__retarget_lock_init_recursive>:
 800599a:	4770      	bx	lr

0800599c <__retarget_lock_acquire_recursive>:
 800599c:	4770      	bx	lr

0800599e <__retarget_lock_release_recursive>:
 800599e:	4770      	bx	lr

080059a0 <__swhatbuf_r>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	460e      	mov	r6, r1
 80059a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a8:	2900      	cmp	r1, #0
 80059aa:	b096      	sub	sp, #88	; 0x58
 80059ac:	4614      	mov	r4, r2
 80059ae:	461d      	mov	r5, r3
 80059b0:	da07      	bge.n	80059c2 <__swhatbuf_r+0x22>
 80059b2:	2300      	movs	r3, #0
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	89b3      	ldrh	r3, [r6, #12]
 80059b8:	061a      	lsls	r2, r3, #24
 80059ba:	d410      	bmi.n	80059de <__swhatbuf_r+0x3e>
 80059bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c0:	e00e      	b.n	80059e0 <__swhatbuf_r+0x40>
 80059c2:	466a      	mov	r2, sp
 80059c4:	f000 f954 	bl	8005c70 <_fstat_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dbf2      	blt.n	80059b2 <__swhatbuf_r+0x12>
 80059cc:	9a01      	ldr	r2, [sp, #4]
 80059ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059d6:	425a      	negs	r2, r3
 80059d8:	415a      	adcs	r2, r3
 80059da:	602a      	str	r2, [r5, #0]
 80059dc:	e7ee      	b.n	80059bc <__swhatbuf_r+0x1c>
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	2000      	movs	r0, #0
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	b016      	add	sp, #88	; 0x58
 80059e6:	bd70      	pop	{r4, r5, r6, pc}

080059e8 <__smakebuf_r>:
 80059e8:	898b      	ldrh	r3, [r1, #12]
 80059ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059ec:	079d      	lsls	r5, r3, #30
 80059ee:	4606      	mov	r6, r0
 80059f0:	460c      	mov	r4, r1
 80059f2:	d507      	bpl.n	8005a04 <__smakebuf_r+0x1c>
 80059f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	6123      	str	r3, [r4, #16]
 80059fc:	2301      	movs	r3, #1
 80059fe:	6163      	str	r3, [r4, #20]
 8005a00:	b002      	add	sp, #8
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	ab01      	add	r3, sp, #4
 8005a06:	466a      	mov	r2, sp
 8005a08:	f7ff ffca 	bl	80059a0 <__swhatbuf_r>
 8005a0c:	9900      	ldr	r1, [sp, #0]
 8005a0e:	4605      	mov	r5, r0
 8005a10:	4630      	mov	r0, r6
 8005a12:	f7ff f88f 	bl	8004b34 <_malloc_r>
 8005a16:	b948      	cbnz	r0, 8005a2c <__smakebuf_r+0x44>
 8005a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1c:	059a      	lsls	r2, r3, #22
 8005a1e:	d4ef      	bmi.n	8005a00 <__smakebuf_r+0x18>
 8005a20:	f023 0303 	bic.w	r3, r3, #3
 8005a24:	f043 0302 	orr.w	r3, r3, #2
 8005a28:	81a3      	strh	r3, [r4, #12]
 8005a2a:	e7e3      	b.n	80059f4 <__smakebuf_r+0xc>
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <__smakebuf_r+0x7c>)
 8005a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	6020      	str	r0, [r4, #0]
 8005a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a38:	81a3      	strh	r3, [r4, #12]
 8005a3a:	9b00      	ldr	r3, [sp, #0]
 8005a3c:	6163      	str	r3, [r4, #20]
 8005a3e:	9b01      	ldr	r3, [sp, #4]
 8005a40:	6120      	str	r0, [r4, #16]
 8005a42:	b15b      	cbz	r3, 8005a5c <__smakebuf_r+0x74>
 8005a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f923 	bl	8005c94 <_isatty_r>
 8005a4e:	b128      	cbz	r0, 8005a5c <__smakebuf_r+0x74>
 8005a50:	89a3      	ldrh	r3, [r4, #12]
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	81a3      	strh	r3, [r4, #12]
 8005a5c:	89a0      	ldrh	r0, [r4, #12]
 8005a5e:	4305      	orrs	r5, r0
 8005a60:	81a5      	strh	r5, [r4, #12]
 8005a62:	e7cd      	b.n	8005a00 <__smakebuf_r+0x18>
 8005a64:	080057f9 	.word	0x080057f9

08005a68 <memcpy>:
 8005a68:	440a      	add	r2, r1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a70:	d100      	bne.n	8005a74 <memcpy+0xc>
 8005a72:	4770      	bx	lr
 8005a74:	b510      	push	{r4, lr}
 8005a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a7e:	4291      	cmp	r1, r2
 8005a80:	d1f9      	bne.n	8005a76 <memcpy+0xe>
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <memmove>:
 8005a84:	4288      	cmp	r0, r1
 8005a86:	b510      	push	{r4, lr}
 8005a88:	eb01 0402 	add.w	r4, r1, r2
 8005a8c:	d902      	bls.n	8005a94 <memmove+0x10>
 8005a8e:	4284      	cmp	r4, r0
 8005a90:	4623      	mov	r3, r4
 8005a92:	d807      	bhi.n	8005aa4 <memmove+0x20>
 8005a94:	1e43      	subs	r3, r0, #1
 8005a96:	42a1      	cmp	r1, r4
 8005a98:	d008      	beq.n	8005aac <memmove+0x28>
 8005a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005aa2:	e7f8      	b.n	8005a96 <memmove+0x12>
 8005aa4:	4402      	add	r2, r0
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	428a      	cmp	r2, r1
 8005aaa:	d100      	bne.n	8005aae <memmove+0x2a>
 8005aac:	bd10      	pop	{r4, pc}
 8005aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ab6:	e7f7      	b.n	8005aa8 <memmove+0x24>

08005ab8 <__malloc_lock>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__malloc_lock+0x8>)
 8005aba:	f7ff bf6f 	b.w	800599c <__retarget_lock_acquire_recursive>
 8005abe:	bf00      	nop
 8005ac0:	20000524 	.word	0x20000524

08005ac4 <__malloc_unlock>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__malloc_unlock+0x8>)
 8005ac6:	f7ff bf6a 	b.w	800599e <__retarget_lock_release_recursive>
 8005aca:	bf00      	nop
 8005acc:	20000524 	.word	0x20000524

08005ad0 <_realloc_r>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	b921      	cbnz	r1, 8005ae4 <_realloc_r+0x14>
 8005ada:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ade:	4611      	mov	r1, r2
 8005ae0:	f7ff b828 	b.w	8004b34 <_malloc_r>
 8005ae4:	b922      	cbnz	r2, 8005af0 <_realloc_r+0x20>
 8005ae6:	f7fe ffd5 	bl	8004a94 <_free_r>
 8005aea:	4625      	mov	r5, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	f000 f8f2 	bl	8005cd8 <_malloc_usable_size_r>
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d20f      	bcs.n	8005b18 <_realloc_r+0x48>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7ff f81a 	bl	8004b34 <_malloc_r>
 8005b00:	4605      	mov	r5, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d0f2      	beq.n	8005aec <_realloc_r+0x1c>
 8005b06:	4631      	mov	r1, r6
 8005b08:	4622      	mov	r2, r4
 8005b0a:	f7ff ffad 	bl	8005a68 <memcpy>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7fe ffbf 	bl	8004a94 <_free_r>
 8005b16:	e7e9      	b.n	8005aec <_realloc_r+0x1c>
 8005b18:	4635      	mov	r5, r6
 8005b1a:	e7e7      	b.n	8005aec <_realloc_r+0x1c>

08005b1c <_raise_r>:
 8005b1c:	291f      	cmp	r1, #31
 8005b1e:	b538      	push	{r3, r4, r5, lr}
 8005b20:	4604      	mov	r4, r0
 8005b22:	460d      	mov	r5, r1
 8005b24:	d904      	bls.n	8005b30 <_raise_r+0x14>
 8005b26:	2316      	movs	r3, #22
 8005b28:	6003      	str	r3, [r0, #0]
 8005b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b32:	b112      	cbz	r2, 8005b3a <_raise_r+0x1e>
 8005b34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b38:	b94b      	cbnz	r3, 8005b4e <_raise_r+0x32>
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 f830 	bl	8005ba0 <_getpid_r>
 8005b40:	462a      	mov	r2, r5
 8005b42:	4601      	mov	r1, r0
 8005b44:	4620      	mov	r0, r4
 8005b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4a:	f000 b817 	b.w	8005b7c <_kill_r>
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d00a      	beq.n	8005b68 <_raise_r+0x4c>
 8005b52:	1c59      	adds	r1, r3, #1
 8005b54:	d103      	bne.n	8005b5e <_raise_r+0x42>
 8005b56:	2316      	movs	r3, #22
 8005b58:	6003      	str	r3, [r0, #0]
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	e7e7      	b.n	8005b2e <_raise_r+0x12>
 8005b5e:	2400      	movs	r4, #0
 8005b60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b64:	4628      	mov	r0, r5
 8005b66:	4798      	blx	r3
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e7e0      	b.n	8005b2e <_raise_r+0x12>

08005b6c <raise>:
 8005b6c:	4b02      	ldr	r3, [pc, #8]	; (8005b78 <raise+0xc>)
 8005b6e:	4601      	mov	r1, r0
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	f7ff bfd3 	b.w	8005b1c <_raise_r>
 8005b76:	bf00      	nop
 8005b78:	20000014 	.word	0x20000014

08005b7c <_kill_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d07      	ldr	r5, [pc, #28]	; (8005b9c <_kill_r+0x20>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	602b      	str	r3, [r5, #0]
 8005b8a:	f7fa ffbf 	bl	8000b0c <_kill>
 8005b8e:	1c43      	adds	r3, r0, #1
 8005b90:	d102      	bne.n	8005b98 <_kill_r+0x1c>
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	b103      	cbz	r3, 8005b98 <_kill_r+0x1c>
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	bd38      	pop	{r3, r4, r5, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2000052c 	.word	0x2000052c

08005ba0 <_getpid_r>:
 8005ba0:	f7fa bfac 	b.w	8000afc <_getpid>

08005ba4 <__sread>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bac:	f000 f89c 	bl	8005ce8 <_read_r>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	bfab      	itete	ge
 8005bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bb8:	181b      	addge	r3, r3, r0
 8005bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005bbe:	bfac      	ite	ge
 8005bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005bc2:	81a3      	strhlt	r3, [r4, #12]
 8005bc4:	bd10      	pop	{r4, pc}

08005bc6 <__swrite>:
 8005bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bca:	461f      	mov	r7, r3
 8005bcc:	898b      	ldrh	r3, [r1, #12]
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	d505      	bpl.n	8005be4 <__swrite+0x1e>
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	2302      	movs	r3, #2
 8005bde:	2200      	movs	r2, #0
 8005be0:	f000 f868 	bl	8005cb4 <_lseek_r>
 8005be4:	89a3      	ldrh	r3, [r4, #12]
 8005be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bee:	81a3      	strh	r3, [r4, #12]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	f000 b817 	b.w	8005c2c <_write_r>

08005bfe <__sseek>:
 8005bfe:	b510      	push	{r4, lr}
 8005c00:	460c      	mov	r4, r1
 8005c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c06:	f000 f855 	bl	8005cb4 <_lseek_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	89a3      	ldrh	r3, [r4, #12]
 8005c0e:	bf15      	itete	ne
 8005c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c1a:	81a3      	strheq	r3, [r4, #12]
 8005c1c:	bf18      	it	ne
 8005c1e:	81a3      	strhne	r3, [r4, #12]
 8005c20:	bd10      	pop	{r4, pc}

08005c22 <__sclose>:
 8005c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c26:	f000 b813 	b.w	8005c50 <_close_r>
	...

08005c2c <_write_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d07      	ldr	r5, [pc, #28]	; (8005c4c <_write_r+0x20>)
 8005c30:	4604      	mov	r4, r0
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	2200      	movs	r2, #0
 8005c38:	602a      	str	r2, [r5, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f7fa ff9d 	bl	8000b7a <_write>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_write_r+0x1e>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_write_r+0x1e>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	2000052c 	.word	0x2000052c

08005c50 <_close_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4d06      	ldr	r5, [pc, #24]	; (8005c6c <_close_r+0x1c>)
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	4608      	mov	r0, r1
 8005c5a:	602b      	str	r3, [r5, #0]
 8005c5c:	f7fa ffa9 	bl	8000bb2 <_close>
 8005c60:	1c43      	adds	r3, r0, #1
 8005c62:	d102      	bne.n	8005c6a <_close_r+0x1a>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	b103      	cbz	r3, 8005c6a <_close_r+0x1a>
 8005c68:	6023      	str	r3, [r4, #0]
 8005c6a:	bd38      	pop	{r3, r4, r5, pc}
 8005c6c:	2000052c 	.word	0x2000052c

08005c70 <_fstat_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4d07      	ldr	r5, [pc, #28]	; (8005c90 <_fstat_r+0x20>)
 8005c74:	2300      	movs	r3, #0
 8005c76:	4604      	mov	r4, r0
 8005c78:	4608      	mov	r0, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	602b      	str	r3, [r5, #0]
 8005c7e:	f7fa ffa4 	bl	8000bca <_fstat>
 8005c82:	1c43      	adds	r3, r0, #1
 8005c84:	d102      	bne.n	8005c8c <_fstat_r+0x1c>
 8005c86:	682b      	ldr	r3, [r5, #0]
 8005c88:	b103      	cbz	r3, 8005c8c <_fstat_r+0x1c>
 8005c8a:	6023      	str	r3, [r4, #0]
 8005c8c:	bd38      	pop	{r3, r4, r5, pc}
 8005c8e:	bf00      	nop
 8005c90:	2000052c 	.word	0x2000052c

08005c94 <_isatty_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	; (8005cb0 <_isatty_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fa ffa3 	bl	8000bea <_isatty>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_isatty_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_isatty_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	2000052c 	.word	0x2000052c

08005cb4 <_lseek_r>:
 8005cb4:	b538      	push	{r3, r4, r5, lr}
 8005cb6:	4d07      	ldr	r5, [pc, #28]	; (8005cd4 <_lseek_r+0x20>)
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4608      	mov	r0, r1
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	602a      	str	r2, [r5, #0]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7fa ff9c 	bl	8000c00 <_lseek>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d102      	bne.n	8005cd2 <_lseek_r+0x1e>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	b103      	cbz	r3, 8005cd2 <_lseek_r+0x1e>
 8005cd0:	6023      	str	r3, [r4, #0]
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	2000052c 	.word	0x2000052c

08005cd8 <_malloc_usable_size_r>:
 8005cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cdc:	1f18      	subs	r0, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	bfbc      	itt	lt
 8005ce2:	580b      	ldrlt	r3, [r1, r0]
 8005ce4:	18c0      	addlt	r0, r0, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_read_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d07      	ldr	r5, [pc, #28]	; (8005d08 <_read_r+0x20>)
 8005cec:	4604      	mov	r4, r0
 8005cee:	4608      	mov	r0, r1
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	602a      	str	r2, [r5, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f7fa ff22 	bl	8000b40 <_read>
 8005cfc:	1c43      	adds	r3, r0, #1
 8005cfe:	d102      	bne.n	8005d06 <_read_r+0x1e>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b103      	cbz	r3, 8005d06 <_read_r+0x1e>
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	2000052c 	.word	0x2000052c

08005d0c <_init>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr

08005d18 <_fini>:
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	bf00      	nop
 8005d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1e:	bc08      	pop	{r3}
 8005d20:	469e      	mov	lr, r3
 8005d22:	4770      	bx	lr

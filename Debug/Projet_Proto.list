
Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800619c  0800619c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800619c  0800619c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800619c  0800619c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800619c  0800619c  0001619c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080061a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000007c  08006220  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006220  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120fb  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ac  00000000  00000000  000321a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00034658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00035428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c54  00000000  00000000  00036120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ddb  00000000  00000000  0004cd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ba9  00000000  00000000  0005db4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e76f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000e774c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fec 	.word	0x08005fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005fec 	.word	0x08005fec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fec6 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f84e 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f974 	bl	8000568 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8a2 	bl	80003c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f938 	bl	80004f8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f90e 	bl	80004a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028c:	481a      	ldr	r0, [pc, #104]	; (80002f8 <main+0x88>)
 800028e:	f002 fdbd 	bl	8002e0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000292:	481a      	ldr	r0, [pc, #104]	; (80002fc <main+0x8c>)
 8000294:	f002 fdba 	bl	8002e0c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	4817      	ldr	r0, [pc, #92]	; (80002f8 <main+0x88>)
 800029c:	f002 fe64 	bl	8002f68 <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <main+0x8c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <main+0x90>)
 80002aa:	801a      	strh	r2, [r3, #0]
  timer_val_get = timer_val;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <main+0x90>)
 80002ae:	881a      	ldrh	r2, [r3, #0]
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <main+0x94>)
 80002b2:	801a      	strh	r2, [r3, #0]
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);

//---------------------------------------------------------------------------------------------------

	  if (level==1) {
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <main+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d101      	bne.n	80002c0 <main+0x50>
	     generate_sequence();
 80002bc:	f000 fb88 	bl	80009d0 <generate_sequence>
	   }
	  show_sequence();
 80002c0:	f000 fbaa 	bl	8000a18 <show_sequence>
	  get_sequence();
 80002c4:	f000 fc22 	bl	8000b0c <get_sequence>
	  //level++;
	  //wrong_sequence();
	  HAL_Delay(1000);
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f000 ff00 	bl	80010d0 <HAL_Delay>
	  UART_SendNumber(timer_val);
	  HAL_Delay(1000);
	  UART_SendText("\r\n");
	  */

	  UART_SendText("Frequency ");
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x9c>)
 80002d2:	f000 f9bb 	bl	800064c <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <main+0xa0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f9dc 	bl	8000698 <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <main+0xa4>)
 80002e2:	f000 f9b3 	bl	800064c <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002ea:	f000 fef1 	bl	80010d0 <HAL_Delay>
	  Frequency = 0;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <main+0xa0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
	  if (level==1) {
 80002f4:	e7de      	b.n	80002b4 <main+0x44>
 80002f6:	bf00      	nop
 80002f8:	20000404 	.word	0x20000404
 80002fc:	200004d4 	.word	0x200004d4
 8000300:	200000b4 	.word	0x200000b4
 8000304:	200000b6 	.word	0x200000b6
 8000308:	20000004 	.word	0x20000004
 800030c:	08006004 	.word	0x08006004
 8000310:	200000a4 	.word	0x200000a4
 8000314:	08006010 	.word	0x08006010

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09c      	sub	sp, #112	; 0x70
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fc96 	bl	8004c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2230      	movs	r2, #48	; 0x30
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fc88 	bl	8004c58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	2302      	movs	r3, #2
 800034a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2310      	movs	r3, #16
 8000352:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000354:	2300      	movs	r3, #0
 8000356:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fa07 	bl	8001770 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000368:	f000 fc3c 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000380:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 f8fa 	bl	8002580 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000392:	f000 fc27 	bl	8000be4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 8000396:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800039a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800039c:	2300      	movs	r3, #0
 800039e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fb56 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ae:	f000 fc19 	bl	8000be4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003b8:	2000      	movs	r0, #0
 80003ba:	f002 fa5d 	bl	8002878 <HAL_RCC_MCOConfig>
}
 80003be:	bf00      	nop
 80003c0:	3770      	adds	r7, #112	; 0x70
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08c      	sub	sp, #48	; 0x30
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0320 	add.w	r3, r7, #32
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <MX_TIM2_Init+0xdc>)
 80003f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003fc:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <MX_TIM2_Init+0xdc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000408:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800040a:	f04f 32ff 	mov.w	r2, #4294967295
 800040e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800041c:	4821      	ldr	r0, [pc, #132]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800041e:	f002 fc9d 	bl	8002d5c <HAL_TIM_Base_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000428:	f000 fbdc 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000430:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000432:	f107 0320 	add.w	r3, r7, #32
 8000436:	4619      	mov	r1, r3
 8000438:	481a      	ldr	r0, [pc, #104]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800043a:	f003 f87e 	bl	800353a <HAL_TIM_ConfigClockSource>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000444:	f000 fbce 	bl	8000be4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000448:	4816      	ldr	r0, [pc, #88]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800044a:	f002 fd2b 	bl	8002ea4 <HAL_TIM_IC_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000454:	f000 fbc6 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4619      	mov	r1, r3
 8000466:	480f      	ldr	r0, [pc, #60]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000468:	f003 fbd6 	bl	8003c18 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000472:	f000 fbb7 	bl	8000be4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800047a:	2301      	movs	r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800048e:	f002 ffb8 	bl	8003402 <HAL_TIM_IC_ConfigChannel>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000498:	f000 fba4 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	3730      	adds	r7, #48	; 0x30
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000404 	.word	0x20000404

080004a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <MX_TIM16_Init+0x4c>)
 80004b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004b4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004dc:	f002 fc3e 	bl	8002d5c <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004e6:	f000 fb7d 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200004d4 	.word	0x200004d4
 80004f4:	40014400 	.word	0x40014400

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_USART2_UART_Init+0x64>)
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <MX_USART2_UART_Init+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_USART2_UART_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_USART2_UART_Init+0x64>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_USART2_UART_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <MX_USART2_UART_Init+0x64>)
 800053c:	f003 fbf0 	bl	8003d20 <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 fb4d 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART2_UART_Init+0x6c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <MX_USART2_UART_Init+0x6c>)
 8000550:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000554:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000450 	.word	0x20000450
 8000560:	40004400 	.word	0x40004400
 8000564:	40013800 	.word	0x40013800

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b31      	ldr	r3, [pc, #196]	; (8000644 <MX_GPIO_Init+0xdc>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a30      	ldr	r2, [pc, #192]	; (8000644 <MX_GPIO_Init+0xdc>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b2e      	ldr	r3, [pc, #184]	; (8000644 <MX_GPIO_Init+0xdc>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b2b      	ldr	r3, [pc, #172]	; (8000644 <MX_GPIO_Init+0xdc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a2a      	ldr	r2, [pc, #168]	; (8000644 <MX_GPIO_Init+0xdc>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <MX_GPIO_Init+0xdc>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <MX_GPIO_Init+0xdc>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a24      	ldr	r2, [pc, #144]	; (8000644 <MX_GPIO_Init+0xdc>)
 80005b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <MX_GPIO_Init+0xdc>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	21c0      	movs	r1, #192	; 0xc0
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 f89d 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	210b      	movs	r1, #11
 80005d6:	481c      	ldr	r0, [pc, #112]	; (8000648 <MX_GPIO_Init+0xe0>)
 80005d8:	f001 f898 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 ff17 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 80005fa:	230b      	movs	r3, #11
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4619      	mov	r1, r3
 8000610:	480d      	ldr	r0, [pc, #52]	; (8000648 <MX_GPIO_Init+0xe0>)
 8000612:	f000 ff09 	bl	8001428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f000 fef7 	bl	8001428 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	48000400 	.word	0x48000400

0800064c <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 800065c:	e005      	b.n	800066a <UART_SendText+0x1e>
	{
		size++;
 800065e:	89bb      	ldrh	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	81bb      	strh	r3, [r7, #12]
		i++;
 8000664:	89fb      	ldrh	r3, [r7, #14]
 8000666:	3301      	adds	r3, #1
 8000668:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 800066a:	89fb      	ldrh	r3, [r7, #14]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f2      	bne.n	800065e <UART_SendText+0x12>
	}
	size++; // '\0'
 8000678:	89bb      	ldrh	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 800067e:	89ba      	ldrh	r2, [r7, #12]
 8000680:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4803      	ldr	r0, [pc, #12]	; (8000694 <UART_SendText+0x48>)
 8000688:	f003 fb98 	bl	8003dbc <HAL_UART_Transmit>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000450 	.word	0x20000450

08000698 <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b09c      	sub	sp, #112	; 0x70
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4906      	ldr	r1, [pc, #24]	; (80006c0 <UART_SendNumber+0x28>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fb0b 	bl	8004cc4 <siprintf>
	UART_SendText(temp);
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ffca 	bl	800064c <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006b8:	bf00      	nop
 80006ba:	3770      	adds	r7, #112	; 0x70
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08006014 	.word	0x08006014

080006c4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	f040 808d 	bne.w	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7f1b      	ldrb	r3, [r3, #28]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	f040 8088 	bne.w	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x138>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10a      	bne.n	80006fe <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80006e8:	2100      	movs	r1, #0
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f002 ffee 	bl	80036cc <HAL_TIM_ReadCapturedValue>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a43      	ldr	r2, [pc, #268]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80006f4:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x138>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 80006fc:	e078      	b.n	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 80006fe:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x138>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d074      	beq.n	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 8000706:	2100      	movs	r1, #0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f002 ffdf 	bl	80036cc <HAL_TIM_ReadCapturedValue>
 800070e:	4603      	mov	r3, r0
 8000710:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000712:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 8000714:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b39      	ldr	r3, [pc, #228]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d907      	bls.n	8000730 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b36      	ldr	r3, [pc, #216]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	4a37      	ldr	r2, [pc, #220]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x144>)
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	e011      	b.n	8000754 <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000730:	4b34      	ldr	r3, [pc, #208]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d209      	bcs.n	8000750 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 800073c:	4b31      	ldr	r3, [pc, #196]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x140>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800074a:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x144>)
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	e001      	b.n	8000754 <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000750:	f000 fa48 	bl	8000be4 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 8000754:	f002 f93a 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8000758:	4602      	mov	r2, r0
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x144>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <HAL_TIM_IC_CaptureCallback+0x148>)
 8000764:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 8000766:	4b25      	ldr	r3, [pc, #148]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x138>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800077c:	d338      	bcc.n	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a24      	ldr	r2, [pc, #144]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000786:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b20      	ldr	r3, [pc, #128]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000792:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <HAL_TIM_IC_CaptureCallback+0x148>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f242 720f 	movw	r2, #9999	; 0x270f
 800079c:	4293      	cmp	r3, r2
 800079e:	d827      	bhi.n	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <HAL_TIM_IC_CaptureCallback+0x158>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d106      	bne.n	80007b6 <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_TIM_IC_CaptureCallback+0x158>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ae:	2108      	movs	r1, #8
 80007b0:	481b      	ldr	r0, [pc, #108]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007b2:	f000 ffc3 	bl	800173c <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d118      	bne.n	80007f0 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x160>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f000 ff9e 	bl	800170c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007d6:	f000 ff99 	bl	800170c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 ff93 	bl	800170c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ec:	f000 ff8e 	bl	800170c <HAL_GPIO_WritePin>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000404 	.word	0x20000404
 80007fc:	200000ac 	.word	0x200000ac
 8000800:	20000098 	.word	0x20000098
 8000804:	2000009c 	.word	0x2000009c
 8000808:	200000a0 	.word	0x200000a0
 800080c:	200000a4 	.word	0x200000a4
 8000810:	200004d4 	.word	0x200004d4
 8000814:	200000b4 	.word	0x200000b4
 8000818:	200000a8 	.word	0x200000a8
 800081c:	200000b0 	.word	0x200000b0
 8000820:	48000400 	.word	0x48000400
 8000824:	20000000 	.word	0x20000000

08000828 <start>:

void start()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	  uint16_t start_rand=0;
 800082e:	2300      	movs	r3, #0
 8000830:	80fb      	strh	r3, [r7, #6]

	  while(ALLUME_START == 1)
 8000832:	e01d      	b.n	8000870 <start+0x48>
	  {
		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 ff7f 	bl	800173c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800083e:	20c8      	movs	r0, #200	; 0xc8
 8000840:	f000 fc46 	bl	80010d0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000844:	2102      	movs	r1, #2
 8000846:	481f      	ldr	r0, [pc, #124]	; (80008c4 <start+0x9c>)
 8000848:	f000 ff78 	bl	800173c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800084c:	20c8      	movs	r0, #200	; 0xc8
 800084e:	f000 fc3f 	bl	80010d0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f000 ff70 	bl	800173c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f000 fc37 	bl	80010d0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000862:	2101      	movs	r1, #1
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <start+0x9c>)
 8000866:	f000 ff69 	bl	800173c <HAL_GPIO_TogglePin>
		  start_rand++;
 800086a:	88fb      	ldrh	r3, [r7, #6]
 800086c:	3301      	adds	r3, #1
 800086e:	80fb      	strh	r3, [r7, #6]
	  while(ALLUME_START == 1)
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <start+0xa0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d0dd      	beq.n	8000834 <start+0xc>
	  }
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2101      	movs	r1, #1
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <start+0x9c>)
 800087e:	f000 ff45 	bl	800170c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 ff3f 	bl	800170c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2102      	movs	r1, #2
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <start+0x9c>)
 8000894:	f000 ff3a 	bl	800170c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f000 ff34 	bl	800170c <HAL_GPIO_WritePin>
	  srand(start_rand);
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 f9de 	bl	8004c68 <srand>
	  ALLUME_LED = 0;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <start+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	4803      	ldr	r0, [pc, #12]	; (80008c4 <start+0x9c>)
 80008b8:	f000 ff28 	bl	800170c <HAL_GPIO_WritePin>

}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	48000400 	.word	0x48000400
 80008c8:	20000000 	.word	0x20000000
 80008cc:	200000b0 	.word	0x200000b0

080008d0 <right_sequence>:

void right_sequence()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <right_sequence+0x70>)
 80008da:	f000 ff17 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f000 ff11 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2102      	movs	r1, #2
 80008ee:	4814      	ldr	r0, [pc, #80]	; (8000940 <right_sequence+0x70>)
 80008f0:	f000 ff0c 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2140      	movs	r1, #64	; 0x40
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 ff06 	bl	800170c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000900:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000904:	f000 fbe4 	bl	80010d0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <right_sequence+0x70>)
 800090e:	f000 fefd 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fef7 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2102      	movs	r1, #2
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <right_sequence+0x70>)
 8000924:	f000 fef2 	bl	800170c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f000 feec 	bl	800170c <HAL_GPIO_WritePin>
//	if (level<MAX_LEVEL) {
//	  level++;
//	}
//	velocity -=50;
	HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f000 fbca 	bl	80010d0 <HAL_Delay>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	48000400 	.word	0x48000400

08000944 <wrong_sequence>:

void wrong_sequence()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i<3; i++)
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	e034      	b.n	80009ba <wrong_sequence+0x76>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	2101      	movs	r1, #1
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <wrong_sequence+0x88>)
 8000956:	f000 fed9 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f000 fed3 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2102      	movs	r1, #2
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <wrong_sequence+0x88>)
 800096c:	f000 fece 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 fec8 	bl	800170c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 800097c:	20c8      	movs	r0, #200	; 0xc8
 800097e:	f000 fba7 	bl	80010d0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2101      	movs	r1, #1
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <wrong_sequence+0x88>)
 8000988:	f000 fec0 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f000 feba 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <wrong_sequence+0x88>)
 800099e:	f000 feb5 	bl	800170c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f000 feaf 	bl	800170c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80009ae:	20c8      	movs	r0, #200	; 0xc8
 80009b0:	f000 fb8e 	bl	80010d0 <HAL_Delay>
	for(i = 0; i<3; i++)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	ddc7      	ble.n	8000950 <wrong_sequence+0xc>
	}
	//level = 1;
	//velocity = 1000;
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	48000400 	.word	0x48000400

080009d0 <generate_sequence>:

void generate_sequence(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	start();
 80009d6:	f7ff ff27 	bl	8000828 <start>
//				sequence[i]=0x0040U;
//		}
//
//
//	 }
	 for (i = 0; i <5; i++) {
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	e007      	b.n	80009f0 <generate_sequence+0x20>
		 sequence[i] = LED1_hex;
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <generate_sequence+0x40>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i <5; i++) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3301      	adds	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	ddf4      	ble.n	80009e0 <generate_sequence+0x10>
	 }
	 sequence[5] = LED2_hex;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <generate_sequence+0x40>)
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	615a      	str	r2, [r3, #20]
	 level++;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <generate_sequence+0x44>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <generate_sequence+0x44>)
 8000a04:	6013      	str	r3, [r2, #0]
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000c4 	.word	0x200000c4
 8000a14:	20000004 	.word	0x20000004

08000a18 <show_sequence>:

void show_sequence()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	 int i;
	 //for(i=0; i < level; i++)
	 for(i=0; i < 6; i++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	e065      	b.n	8000af0 <show_sequence+0xd8>
	 {
		 switch(sequence[i])
 8000a24:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <show_sequence+0xe8>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	2b80      	cmp	r3, #128	; 0x80
 8000a2e:	d01f      	beq.n	8000a70 <show_sequence+0x58>
 8000a30:	2b80      	cmp	r3, #128	; 0x80
 8000a32:	dc58      	bgt.n	8000ae6 <show_sequence+0xce>
 8000a34:	2b40      	cmp	r3, #64	; 0x40
 8000a36:	d006      	beq.n	8000a46 <show_sequence+0x2e>
 8000a38:	2b40      	cmp	r3, #64	; 0x40
 8000a3a:	dc54      	bgt.n	8000ae6 <show_sequence+0xce>
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d02c      	beq.n	8000a9a <show_sequence+0x82>
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d03d      	beq.n	8000ac0 <show_sequence+0xa8>
 8000a44:	e04f      	b.n	8000ae6 <show_sequence+0xce>
			{
				case 0x0040U: //O
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f000 fe5d 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <show_sequence+0xec>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fb3a 	bl	80010d0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f000 fe52 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a68:	20c8      	movs	r0, #200	; 0xc8
 8000a6a:	f000 fb31 	bl	80010d0 <HAL_Delay>
					break;
 8000a6e:	e03c      	b.n	8000aea <show_sequence+0xd2>
				case 0x0080U: //1
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fe48 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <show_sequence+0xec>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 fb25 	bl	80010d0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fe3d 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a92:	20c8      	movs	r0, #200	; 0xc8
 8000a94:	f000 fb1c 	bl	80010d0 <HAL_Delay>
					break;
 8000a98:	e027      	b.n	8000aea <show_sequence+0xd2>
				case 0x0001U: //2
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <show_sequence+0xf0>)
 8000aa0:	f000 fe34 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <show_sequence+0xec>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fb11 	bl	80010d0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <show_sequence+0xf0>)
 8000ab4:	f000 fe2a 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000ab8:	20c8      	movs	r0, #200	; 0xc8
 8000aba:	f000 fb09 	bl	80010d0 <HAL_Delay>
					break;
 8000abe:	e014      	b.n	8000aea <show_sequence+0xd2>
				case 0x0002U: //3
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <show_sequence+0xf0>)
 8000ac6:	f000 fe21 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <show_sequence+0xec>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fafe 	bl	80010d0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <show_sequence+0xf0>)
 8000ada:	f000 fe17 	bl	800170c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000ade:	20c8      	movs	r0, #200	; 0xc8
 8000ae0:	f000 faf6 	bl	80010d0 <HAL_Delay>
					break;
 8000ae4:	e001      	b.n	8000aea <show_sequence+0xd2>
				default:
					wrong_sequence();
 8000ae6:	f7ff ff2d 	bl	8000944 <wrong_sequence>
	 for(i=0; i < 6; i++)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	dd96      	ble.n	8000a24 <show_sequence+0xc>
			}
	 }
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000c4 	.word	0x200000c4
 8000b04:	20000008 	.word	0x20000008
 8000b08:	48000400 	.word	0x48000400

08000b0c <get_sequence>:

void get_sequence()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
	bool flag;
	int i;
	int temp_freq = Frequency;
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <get_sequence+0xc0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	607b      	str	r3, [r7, #4]
	for(i=0; i<6;i++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	e04e      	b.n	8000bbc <get_sequence+0xb0>
	{
			flag = false;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
			while(flag == false)
 8000b22:	e042      	b.n	8000baa <get_sequence+0x9e>
			{
				while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
				{
					if(Frequency != temp_freq )
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <get_sequence+0xc0>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d02d      	beq.n	8000b8a <get_sequence+0x7e>
					{
						Frequency = 0;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <get_sequence+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
						temp_freq = Frequency;
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <get_sequence+0xc0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	607b      	str	r3, [r7, #4]
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fde3 	bl	800170c <HAL_GPIO_WritePin>
						your_sequence[i] = 0x0040U;
 8000b46:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <get_sequence+0xc4>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	2140      	movs	r1, #64	; 0x40
 8000b4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000b54:	20c8      	movs	r0, #200	; 0xc8
 8000b56:	f000 fabb 	bl	80010d0 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2108      	movs	r1, #8
 8000b5e:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <get_sequence+0xc8>)
 8000b60:	f000 fdd4 	bl	800170c <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <get_sequence+0xc4>)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b6c:	491a      	ldr	r1, [pc, #104]	; (8000bd8 <get_sequence+0xcc>)
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d002      	beq.n	8000b7e <get_sequence+0x72>
						{
							wrong_sequence();
 8000b78:	f7ff fee4 	bl	8000944 <wrong_sequence>
							return;
 8000b7c:	e023      	b.n	8000bc6 <get_sequence+0xba>
						}
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2140      	movs	r1, #64	; 0x40
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 fdc1 	bl	800170c <HAL_GPIO_WritePin>
				while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <get_sequence+0xd0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <get_sequence+0xd4>)
 8000b92:	8812      	ldrh	r2, [r2, #0]
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d9c2      	bls.n	8000b24 <get_sequence+0x18>
		//					return;
		//				}
		//				HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
		//			}
			}
			timer_val_get = __HAL_TIM_GET_COUNTER(&htim16);
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <get_sequence+0xd0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <get_sequence+0xd4>)
 8000ba8:	801a      	strh	r2, [r3, #0]
			while(flag == false)
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1e9      	bne.n	8000b8a <get_sequence+0x7e>
	for(i=0; i<6;i++)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	ddad      	ble.n	8000b1e <get_sequence+0x12>
		}

	}
	 right_sequence(); //Як послідовність вірна, викличемо функцію right_sequence
 8000bc2:	f7ff fe85 	bl	80008d0 <right_sequence>
}
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000a4 	.word	0x200000a4
 8000bd0:	20000274 	.word	0x20000274
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	200000c4 	.word	0x200000c4
 8000bdc:	200004d4 	.word	0x200004d4
 8000be0:	200000b6 	.word	0x200000b6

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	61d3      	str	r3, [r2, #28]
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c58:	d131      	bne.n	8000cbe <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5a:	4b23      	ldr	r3, [pc, #140]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a22      	ldr	r2, [pc, #136]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	61d3      	str	r3, [r2, #28]
 8000c66:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fbbe 	bl	8001428 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	201c      	movs	r0, #28
 8000cb2:	f000 fb0c 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb6:	201c      	movs	r0, #28
 8000cb8:	f000 fb25 	bl	8001306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cbc:	e010      	b.n	8000ce0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_TIM_Base_MspInit+0xb4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d10b      	bne.n	8000ce0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40014400 	.word	0x40014400

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1b      	ldr	r2, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d130      	bne.n	8000d74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d12:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d14:	69db      	ldr	r3, [r3, #28]
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	61d3      	str	r3, [r2, #28]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fb62 	bl	8001428 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f000 fab0 	bl	80012ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d6e:	2026      	movs	r0, #38	; 0x26
 8000d70:	f000 fac9 	bl	8001306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40021000 	.word	0x40021000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f95e 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM2_IRQHandler+0x10>)
 8000dde:	f002 f9f1 	bl	80031c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000404 	.word	0x20000404

08000dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USART2_IRQHandler+0x10>)
 8000df2:	f003 f877 	bl	8003ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000450 	.word	0x20000450

08000e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
	return 1;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <_kill>:

int _kill(int pid, int sig)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e1a:	f003 fef3 	bl	8004c04 <__errno>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2216      	movs	r2, #22
 8000e22:	601a      	str	r2, [r3, #0]
	return -1;
 8000e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_exit>:

void _exit (int status)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ffe7 	bl	8000e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e42:	e7fe      	b.n	8000e42 <_exit+0x12>

08000e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
	}

return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x12>
	}
	return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f003 fe58 	bl	8004c04 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20004000 	.word	0x20004000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	200000b8 	.word	0x200000b8
 8000f88:	20000538 	.word	0x20000538

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490e      	ldr	r1, [pc, #56]	; (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f7ff ffd7 	bl	8000f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f003 fe17 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff f945 	bl	8000270 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ff4:	080061a4 	.word	0x080061a4
  ldr r2, =_sbss
 8000ff8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ffc:	20000534 	.word	0x20000534

08001000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_IRQHandler>
	...

08001004 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x28>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x28>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f94f 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fde6 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40022000 	.word	0x40022000

08001030 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f967 	bl	8001322 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 f92f 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000014 	.word	0x20000014
 800108c:	20000010 	.word	0x20000010

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000014 	.word	0x20000014
 80010b4:	20000520 	.word	0x20000520

080010b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000520 	.word	0x20000520

080010d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000014 	.word	0x20000014

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001348:	2b02      	cmp	r3, #2
 800134a:	d008      	beq.n	800135e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2204      	movs	r2, #4
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e020      	b.n	80013a0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 020e 	bic.w	r2, r2, #14
 800136c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d005      	beq.n	80013ce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e027      	b.n	800141e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 020e 	bic.w	r2, r2, #14
 80013dc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
    } 
  }
  return status;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	e14e      	b.n	80016d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	fa01 f303 	lsl.w	r3, r1, r3
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 8140 	beq.w	80016d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x40>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	f003 0201 	and.w	r2, r3, #1
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0203 	and.w	r2, r3, #3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 809a 	beq.w	80016d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a54      	ldr	r2, [pc, #336]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HAL_GPIO_Init+0x2cc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b4:	4a50      	ldr	r2, [pc, #320]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015de:	d013      	beq.n	8001608 <HAL_GPIO_Init+0x1e0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_GPIO_Init+0x2d4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d00d      	beq.n	8001604 <HAL_GPIO_Init+0x1dc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a45      	ldr	r2, [pc, #276]	; (8001700 <HAL_GPIO_Init+0x2d8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d007      	beq.n	8001600 <HAL_GPIO_Init+0x1d8>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_GPIO_Init+0x2dc>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d101      	bne.n	80015fc <HAL_GPIO_Init+0x1d4>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 80015fc:	2305      	movs	r3, #5
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001600:	2302      	movs	r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1e2>
 8001608:	2300      	movs	r3, #0
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161a:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_GPIO_Init+0x2d0>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800164c:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <HAL_GPIO_Init+0x2e0>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f aea9 	bne.w	8001438 <HAL_GPIO_Init+0x10>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001728:	e002      	b.n	8001730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172a:	887a      	ldrh	r2, [r7, #2]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43d9      	mvns	r1, r3
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	400b      	ands	r3, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	619a      	str	r2, [r3, #24]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001776:	af00      	add	r7, sp, #0
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	f000 bef4 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 816a 	beq.w	8001a6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800179a:	4bb3      	ldr	r3, [pc, #716]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d00c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a6:	4bb0      	ldr	r3, [pc, #704]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d159      	bne.n	8001866 <HAL_RCC_OscConfig+0xf6>
 80017b2:	4bad      	ldr	r3, [pc, #692]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017be:	d152      	bne.n	8001866 <HAL_RCC_OscConfig+0xf6>
 80017c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_OscConfig+0x82>
 80017ec:	4b9e      	ldr	r3, [pc, #632]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0xae>
 80017f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017fe:	fa93 f3a3 	rbit	r3, r3
 8001802:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800180e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001812:	fa93 f3a3 	rbit	r3, r3
 8001816:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800181a:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001822:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001826:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800182a:	fa92 f2a2 	rbit	r2, r2
 800182e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001832:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0220 	orr.w	r2, r2, #32
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 810c 	beq.w	8001a6c <HAL_RCC_OscConfig+0x2fc>
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 8106 	bne.w	8001a6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	f000 be86 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x110>
 8001872:	4b7d      	ldr	r3, [pc, #500]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e030      	b.n	80018e2 <HAL_RCC_OscConfig+0x172>
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x134>
 800188a:	4b77      	ldr	r3, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b74      	ldr	r3, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e01e      	b.n	80018e2 <HAL_RCC_OscConfig+0x172>
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x15a>
 80018b0:	4b6d      	ldr	r3, [pc, #436]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6c      	ldr	r2, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x172>
 80018ca:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a66      	ldr	r2, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b64      	ldr	r3, [pc, #400]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a63      	ldr	r2, [pc, #396]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f023 020f 	bic.w	r2, r3, #15
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	495d      	ldr	r1, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d059      	beq.n	80019b4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fbda 	bl	80010b8 <HAL_GetTick>
 8001904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190a:	f7ff fbd5 	bl	80010b8 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d902      	bls.n	8001920 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	f000 be29 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
 8001920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001924:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001934:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0x1e2>
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x20e>
 8001952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001956:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800196e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001972:	fa93 f3a3 	rbit	r3, r3
 8001976:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001982:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001986:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800198a:	fa92 f2a2 	rbit	r2, r2
 800198e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001992:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0ab      	beq.n	800190a <HAL_RCC_OscConfig+0x19a>
 80019b2:	e05c      	b.n	8001a6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb80 	bl	80010b8 <HAL_GetTick>
 80019b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff fb7b 	bl	80010b8 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d902      	bls.n	80019d4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	f000 bdcf 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
 80019d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019e0:	fa93 f3a3 	rbit	r3, r3
 80019e4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019e8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x296>
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x2c2>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a3e:	fa92 f2a2 	rbit	r2, r2
 8001a42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a4a:	fab2 f282 	clz	r2, r2
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f002 021f 	and.w	r2, r2, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ab      	bne.n	80019be <HAL_RCC_OscConfig+0x24e>
 8001a66:	e002      	b.n	8001a6e <HAL_RCC_OscConfig+0x2fe>
 8001a68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 816f 	beq.w	8001d5c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a7e:	4bd0      	ldr	r3, [pc, #832]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a8a:	4bcd      	ldr	r3, [pc, #820]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d16c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x400>
 8001a96:	4bca      	ldr	r3, [pc, #808]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d166      	bne.n	8001b70 <HAL_RCC_OscConfig+0x400>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x362>
 8001acc:	4bbc      	ldr	r3, [pc, #752]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e013      	b.n	8001afa <HAL_RCC_OscConfig+0x38a>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001aea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001af6:	4bb2      	ldr	r3, [pc, #712]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	2202      	movs	r2, #2
 8001afc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b00:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b04:	fa92 f2a2 	rbit	r2, r2
 8001b08:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b0c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f002 021f 	and.w	r2, r2, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f000 bd1b 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4ba0      	ldr	r3, [pc, #640]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	21f8      	movs	r1, #248	; 0xf8
 8001b4c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b54:	fa91 f1a1 	rbit	r1, r1
 8001b58:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b5c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b60:	fab1 f181 	clz	r1, r1
 8001b64:	b2c9      	uxtb	r1, r1
 8001b66:	408b      	lsls	r3, r1
 8001b68:	4995      	ldr	r1, [pc, #596]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e0f5      	b.n	8001d5c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8085 	beq.w	8001c86 <HAL_RCC_OscConfig+0x516>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff fa86 	bl	80010b8 <HAL_GetTick>
 8001bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fa81 	bl	80010b8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d902      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f000 bcd5 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	095b      	lsrs	r3, r3, #5
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x488>
 8001bf2:	4b73      	ldr	r3, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	e013      	b.n	8001c20 <HAL_RCC_OscConfig+0x4b0>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	2202      	movs	r2, #2
 8001c22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c2a:	fa92 f2a2 	rbit	r2, r2
 8001c2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c36:	fab2 f282 	clz	r2, r2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	f042 0220 	orr.w	r2, r2, #32
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	f002 021f 	and.w	r2, r2, #31
 8001c46:	2101      	movs	r1, #1
 8001c48:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0af      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	21f8      	movs	r1, #248	; 0xf8
 8001c62:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c6a:	fa91 f1a1 	rbit	r1, r1
 8001c6e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c72:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c76:	fab1 f181 	clz	r1, r1
 8001c7a:	b2c9      	uxtb	r1, r1
 8001c7c:	408b      	lsls	r3, r1
 8001c7e:	4950      	ldr	r1, [pc, #320]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
 8001c84:	e06a      	b.n	8001d5c <HAL_RCC_OscConfig+0x5ec>
 8001c86:	2301      	movs	r3, #1
 8001c88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fa01 	bl	80010b8 <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f9fc 	bl	80010b8 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d902      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f000 bc50 	b.w	8002572 <HAL_RCC_OscConfig+0xe02>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x592>
 8001cfc:	4b30      	ldr	r3, [pc, #192]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	e013      	b.n	8001d2a <HAL_RCC_OscConfig+0x5ba>
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_OscConfig+0x650>)
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d30:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d3c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1af      	bne.n	8001cbc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80da 	beq.w	8001f20 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d069      	beq.n	8001e4a <HAL_RCC_OscConfig+0x6da>
 8001d76:	2301      	movs	r3, #1
 8001d78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_OscConfig+0x654>)
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da0:	f7ff f98a 	bl	80010b8 <HAL_GetTick>
 8001da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff f985 	bl	80010b8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d906      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e3d9      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	10908120 	.word	0x10908120
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dde:	2202      	movs	r2, #2
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4ba5      	ldr	r3, [pc, #660]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e12:	2102      	movs	r1, #2
 8001e14:	6019      	str	r1, [r3, #0]
 8001e16:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f1a3 	rbit	r1, r3
 8001e20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e24:	6019      	str	r1, [r3, #0]
  return result;
 8001e26:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0b0      	beq.n	8001daa <HAL_RCC_OscConfig+0x63a>
 8001e48:	e06a      	b.n	8001f20 <HAL_RCC_OscConfig+0x7b0>
 8001e4a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e60:	601a      	str	r2, [r3, #0]
  return result;
 8001e62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e66:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b8c      	ldr	r3, [pc, #560]	; (80020a4 <HAL_RCC_OscConfig+0x934>)
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7c:	f7ff f91c 	bl	80010b8 <HAL_GetTick>
 8001e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f917 	bl	80010b8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e36b      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 8001e9a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ece:	2202      	movs	r2, #2
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	fa93 f2a3 	rbit	r2, r3
 8001edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001eea:	2102      	movs	r1, #2
 8001eec:	6019      	str	r1, [r3, #0]
 8001eee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f1a3 	rbit	r1, r3
 8001ef8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001efc:	6019      	str	r1, [r3, #0]
  return result;
 8001efe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1b2      	bne.n	8001e86 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8158 	beq.w	80021e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b5a      	ldr	r3, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d112      	bne.n	8001f68 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b57      	ldr	r3, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a56      	ldr	r2, [pc, #344]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <HAL_RCC_OscConfig+0x938>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11a      	bne.n	8001faa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_RCC_OscConfig+0x938>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a4b      	ldr	r2, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x938>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f80:	f7ff f89a 	bl	80010b8 <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	e009      	b.n	8001f9e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8a:	f7ff f895 	bl	80010b8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e2e9      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_RCC_OscConfig+0x938>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x852>
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4a39      	ldr	r2, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6213      	str	r3, [r2, #32]
 8001fc0:	e02f      	b.n	8002022 <HAL_RCC_OscConfig+0x8b2>
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x876>
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a33      	ldr	r2, [pc, #204]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e01d      	b.n	8002022 <HAL_RCC_OscConfig+0x8b2>
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x89a>
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6213      	str	r3, [r2, #32]
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6213      	str	r3, [r2, #32]
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x8b2>
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6213      	str	r3, [r2, #32]
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d06b      	beq.n	8002104 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff f844 	bl	80010b8 <HAL_GetTick>
 8002030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	e00b      	b.n	800204e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff f83f 	bl	80010b8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e291      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 800204e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800207c:	601a      	str	r2, [r3, #0]
  return result;
 800207e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002082:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d109      	bne.n	80020ac <HAL_RCC_OscConfig+0x93c>
 8002098:	4b01      	ldr	r3, [pc, #4]	; (80020a0 <HAL_RCC_OscConfig+0x930>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x958>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	10908120 	.word	0x10908120
 80020a8:	40007000 	.word	0x40007000
 80020ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	4bbb      	ldr	r3, [pc, #748]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020cc:	2102      	movs	r1, #2
 80020ce:	6011      	str	r1, [r2, #0]
 80020d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	fa92 f1a2 	rbit	r1, r2
 80020da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020de:	6011      	str	r1, [r2, #0]
  return result;
 80020e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d099      	beq.n	8002036 <HAL_RCC_OscConfig+0x8c6>
 8002102:	e063      	b.n	80021cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002104:	f7fe ffd8 	bl	80010b8 <HAL_GetTick>
 8002108:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe ffd3 	bl	80010b8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e225      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 8002126:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800212a:	2202      	movs	r2, #2
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002154:	601a      	str	r2, [r3, #0]
  return result;
 8002156:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800215a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d102      	bne.n	8002176 <HAL_RCC_OscConfig+0xa06>
 8002170:	4b90      	ldr	r3, [pc, #576]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	e00d      	b.n	8002192 <HAL_RCC_OscConfig+0xa22>
 8002176:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800217a:	2202      	movs	r2, #2
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002196:	2102      	movs	r1, #2
 8002198:	6011      	str	r1, [r2, #0]
 800219a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	fa92 f1a2 	rbit	r1, r2
 80021a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021a8:	6011      	str	r1, [r2, #0]
  return result;
 80021aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fab2 f282 	clz	r2, r2
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f002 021f 	and.w	r2, r2, #31
 80021c0:	2101      	movs	r1, #1
 80021c2:	fa01 f202 	lsl.w	r2, r1, r2
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1a0      	bne.n	800210e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b77      	ldr	r3, [pc, #476]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a76      	ldr	r2, [pc, #472]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80021da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e0:	1d3b      	adds	r3, r7, #4
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 81c2 	beq.w	8002570 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ec:	4b71      	ldr	r3, [pc, #452]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	f000 819c 	beq.w	8002532 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b02      	cmp	r3, #2
 8002202:	f040 8114 	bne.w	800242e <HAL_RCC_OscConfig+0xcbe>
 8002206:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800220a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002224:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002230:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	461a      	mov	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff3c 	bl	80010b8 <HAL_GetTick>
 8002240:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e009      	b.n	800225a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe ff37 	bl	80010b8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e18b      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 800225a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800225e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002272:	601a      	str	r2, [r3, #0]
  return result;
 8002274:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002278:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0xb24>
 800228e:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e01b      	b.n	80022cc <HAL_RCC_OscConfig+0xb5c>
 8002294:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	fa92 f1a2 	rbit	r1, r2
 80022e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022e4:	6011      	str	r1, [r2, #0]
  return result;
 80022e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	f042 0220 	orr.w	r2, r2, #32
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	f002 021f 	and.w	r2, r2, #31
 80022fc:	2101      	movs	r1, #1
 80022fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d19e      	bne.n	8002246 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	430b      	orrs	r3, r1
 800231e:	4925      	ldr	r1, [pc, #148]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
 8002324:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002342:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800234e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	461a      	mov	r2, r3
 8002356:	2301      	movs	r3, #1
 8002358:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fead 	bl	80010b8 <HAL_GetTick>
 800235e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002362:	e009      	b.n	8002378 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fea8 	bl	80010b8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0fc      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 8002378:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800237c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	fa93 f2a3 	rbit	r2, r3
 800238c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002396:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0xc48>
 80023ac:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCC_OscConfig+0xc44>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	e01e      	b.n	80023f0 <HAL_RCC_OscConfig+0xc80>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_OscConfig+0xe0c>)
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023f8:	6011      	str	r1, [r2, #0]
 80023fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fa92 f1a2 	rbit	r1, r2
 8002404:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002408:	6011      	str	r1, [r2, #0]
  return result;
 800240a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f042 0220 	orr.w	r2, r2, #32
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f002 021f 	and.w	r2, r2, #31
 8002420:	2101      	movs	r1, #1
 8002422:	fa01 f202 	lsl.w	r2, r1, r2
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d09b      	beq.n	8002364 <HAL_RCC_OscConfig+0xbf4>
 800242c:	e0a0      	b.n	8002570 <HAL_RCC_OscConfig+0xe00>
 800242e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002446:	601a      	str	r2, [r3, #0]
  return result;
 8002448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	461a      	mov	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fe28 	bl	80010b8 <HAL_GetTick>
 8002468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	e009      	b.n	8002482 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fe23 	bl	80010b8 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e077      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
 8002482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_OscConfig+0xd4c>
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCC_OscConfig+0xe0c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	e01b      	b.n	80024f4 <HAL_RCC_OscConfig+0xd84>
 80024bc:	f107 0320 	add.w	r3, r7, #32
 80024c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	fa93 f2a3 	rbit	r2, r3
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f107 0318 	add.w	r3, r7, #24
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_OscConfig+0xe0c>)
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	f107 0210 	add.w	r2, r7, #16
 80024f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024fc:	6011      	str	r1, [r2, #0]
 80024fe:	f107 0210 	add.w	r2, r7, #16
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fa92 f1a2 	rbit	r1, r2
 8002508:	f107 020c 	add.w	r2, r7, #12
 800250c:	6011      	str	r1, [r2, #0]
  return result;
 800250e:	f107 020c 	add.w	r2, r7, #12
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	fab2 f282 	clz	r2, r2
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	f042 0220 	orr.w	r2, r2, #32
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f002 021f 	and.w	r2, r2, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d19e      	bne.n	800246e <HAL_RCC_OscConfig+0xcfe>
 8002530:	e01e      	b.n	8002570 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e018      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_RCC_OscConfig+0xe0c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002548:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800254c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	429a      	cmp	r2, r3
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800255a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800255e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b09e      	sub	sp, #120	; 0x78
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e162      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002598:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d910      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	498b      	ldr	r1, [pc, #556]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b89      	ldr	r3, [pc, #548]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e14a      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	497f      	ldr	r1, [pc, #508]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80dc 	beq.w	80027ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d13c      	bne.n	8002676 <HAL_RCC_ClockConfig+0xf6>
 80025fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002600:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_RCC_ClockConfig+0xa6>
 8002620:	4b6f      	ldr	r3, [pc, #444]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e00f      	b.n	8002646 <HAL_RCC_ClockConfig+0xc6>
 8002626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262e:	fa93 f3a3 	rbit	r3, r3
 8002632:	667b      	str	r3, [r7, #100]	; 0x64
 8002634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002638:	663b      	str	r3, [r7, #96]	; 0x60
 800263a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002642:	4b67      	ldr	r3, [pc, #412]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264a:	65ba      	str	r2, [r7, #88]	; 0x58
 800264c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800264e:	fa92 f2a2 	rbit	r2, r2
 8002652:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002654:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f202 	lsl.w	r2, r1, r2
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d17b      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0f3      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d13c      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x178>
 800267e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800268c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x128>
 80026a2:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e00f      	b.n	80026c8 <HAL_RCC_ClockConfig+0x148>
 80026a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b0:	fa93 f3a3 	rbit	r3, r3
 80026b4:	647b      	str	r3, [r7, #68]	; 0x44
 80026b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d0:	fa92 f2a2 	rbit	r2, r2
 80026d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d13a      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b2      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
 80026f8:	2302      	movs	r3, #2
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	fab3 f383 	clz	r3, r3
 800270a:	b2db      	uxtb	r3, r3
 800270c:	095b      	lsrs	r3, r3, #5
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d102      	bne.n	8002720 <HAL_RCC_ClockConfig+0x1a0>
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	e00d      	b.n	800273c <HAL_RCC_ClockConfig+0x1bc>
 8002720:	2302      	movs	r3, #2
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	2302      	movs	r3, #2
 800272e:	623b      	str	r3, [r7, #32]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	61ba      	str	r2, [r7, #24]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	fa92 f2a2 	rbit	r2, r2
 8002746:	617a      	str	r2, [r7, #20]
  return result;
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	fab2 f282 	clz	r2, r2
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	f042 0220 	orr.w	r2, r2, #32
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	f002 021f 	and.w	r2, r2, #31
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	4013      	ands	r3, r2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e079      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fc9c 	bl	80010b8 <HAL_GetTick>
 8002780:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe fc98 	bl	80010b8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e061      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_RCC_ClockConfig+0x260>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d214      	bcs.n	80027e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	4906      	ldr	r1, [pc, #24]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e040      	b.n	800285e <HAL_RCC_ClockConfig+0x2de>
 80027dc:	40022000 	.word	0x40022000
 80027e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	491a      	ldr	r1, [pc, #104]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280e:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002822:	f000 f85d 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCC_ClockConfig+0x2e8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	22f0      	movs	r2, #240	; 0xf0
 8002832:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	fa92 f2a2 	rbit	r2, r2
 800283a:	60fa      	str	r2, [r7, #12]
  return result;
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	fab2 f282 	clz	r2, r2
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	40d3      	lsrs	r3, r2
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x2ec>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	fa21 f303 	lsr.w	r3, r1, r3
 800284e:	4a08      	ldr	r2, [pc, #32]	; (8002870 <HAL_RCC_ClockConfig+0x2f0>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x2f4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fbea 	bl	8001030 <HAL_InitTick>
  
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3778      	adds	r7, #120	; 0x78
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	08006018 	.word	0x08006018
 8002870:	2000000c 	.word	0x2000000c
 8002874:	20000010 	.word	0x20000010

08002878 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002894:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_MCOConfig+0x64>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_RCC_MCOConfig+0x64>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	6153      	str	r3, [r2, #20]
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_RCC_MCOConfig+0x64>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028bc:	f7fe fdb4 	bl	8001428 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_MCOConfig+0x64>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_MCOConfig+0x64>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b08b      	sub	sp, #44	; 0x2c
 80028e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x30>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x36>
 800290e:	e03c      	b.n	800298a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e03c      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800291c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002920:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	607a      	str	r2, [r7, #4]
  return result;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	40d3      	lsrs	r3, r2
 8002934:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	220f      	movs	r2, #15
 8002944:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	fa92 f2a2 	rbit	r2, r2
 800294c:	60fa      	str	r2, [r7, #12]
  return result;
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	fab2 f282 	clz	r2, r2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	40d3      	lsrs	r3, r2
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800295a:	5cd3      	ldrb	r3, [r2, r3]
 800295c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	e004      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	4a0c      	ldr	r2, [pc, #48]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	623b      	str	r3, [r7, #32]
      break;
 8002988:	e002      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800298c:	623b      	str	r3, [r7, #32]
      break;
 800298e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002990:	6a3b      	ldr	r3, [r7, #32]
}
 8002992:	4618      	mov	r0, r3
 8002994:	372c      	adds	r7, #44	; 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	08006030 	.word	0x08006030
 80029ac:	08006040 	.word	0x08006040
 80029b0:	003d0900 	.word	0x003d0900

080029b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029d2:	f7ff ffef 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d6:	4601      	mov	r1, r0
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	fa92 f2a2 	rbit	r2, r2
 80029ec:	603a      	str	r2, [r7, #0]
  return result;
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	40d3      	lsrs	r3, r2
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x40>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	08006028 	.word	0x08006028

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a16:	f7ff ffcd 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 8002a1a:	4601      	mov	r1, r0
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	fa92 f2a2 	rbit	r2, r2
 8002a30:	603a      	str	r2, [r7, #0]
  return result;
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	fab2 f282 	clz	r2, r2
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	40d3      	lsrs	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08006028 	.word	0x08006028

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b092      	sub	sp, #72	; 0x48
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80d4 	beq.w	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a78:	4b4e      	ldr	r3, [pc, #312]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10e      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a4a      	ldr	r2, [pc, #296]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b45      	ldr	r3, [pc, #276]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b42      	ldr	r3, [pc, #264]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a41      	ldr	r2, [pc, #260]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fafd 	bl	80010b8 <HAL_GetTick>
 8002abe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe faf9 	bl	80010b8 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e13c      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b38      	ldr	r3, [pc, #224]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae0:	4b34      	ldr	r3, [pc, #208]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8084 	beq.w	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d07c      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b52:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d04b      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe faa9 	bl	80010b8 <HAL_GetTick>
 8002b66:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe faa5 	bl	80010b8 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0e6      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002b80:	2302      	movs	r3, #2
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61fb      	str	r3, [r7, #28]
  return result;
 8002b98:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bae:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	e00d      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	10908100 	.word	0x10908100
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	613a      	str	r2, [r7, #16]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	fa92 f2a2 	rbit	r2, r2
 8002bda:	60fa      	str	r2, [r7, #12]
  return result;
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	fab2 f282 	clz	r2, r2
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	f002 021f 	and.w	r2, r2, #31
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0b7      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4954      	ldr	r1, [pc, #336]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f023 0203 	bic.w	r2, r3, #3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4947      	ldr	r1, [pc, #284]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4a:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f023 0210 	bic.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4940      	ldr	r1, [pc, #256]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f023 0220 	bic.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4938      	ldr	r1, [pc, #224]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	4931      	ldr	r1, [pc, #196]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4929      	ldr	r1, [pc, #164]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002cc2:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4922      	ldr	r1, [pc, #136]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	491a      	ldr	r1, [pc, #104]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	4913      	ldr	r1, [pc, #76]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	490b      	ldr	r1, [pc, #44]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3748      	adds	r7, #72	; 0x48
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e049      	b.n	8002e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd ff58 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 fd02 	bl	80037a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e033      	b.n	8002e8c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_TIM_Base_Start+0x8c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_TIM_Base_Start+0x3e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d004      	beq.n	8002e4a <HAL_TIM_Base_Start+0x3e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <HAL_TIM_Base_Start+0x90>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d115      	bne.n	8002e76 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_TIM_Base_Start+0x94>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b06      	cmp	r3, #6
 8002e5a:	d015      	beq.n	8002e88 <HAL_TIM_Base_Start+0x7c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e62:	d011      	beq.n	8002e88 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	e008      	b.n	8002e88 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e000      	b.n	8002e8a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40014000 	.word	0x40014000
 8002ea0:	00010007 	.word	0x00010007

08002ea4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e049      	b.n	8002f4a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f841 	bl	8002f52 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 fc5e 	bl	80037a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_IC_Start_IT+0x1e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e023      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x66>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_IC_Start_IT+0x2e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	e01b      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x66>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_IC_Start_IT+0x3e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x66>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_IC_Start_IT+0x4e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x66>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_IC_Start_IT+0x5e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_IC_Start_IT+0x66>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d104      	bne.n	8002fe0 <HAL_TIM_IC_Start_IT+0x78>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e013      	b.n	8003008 <HAL_TIM_IC_Start_IT+0xa0>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d104      	bne.n	8002ff0 <HAL_TIM_IC_Start_IT+0x88>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e00b      	b.n	8003008 <HAL_TIM_IC_Start_IT+0xa0>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d104      	bne.n	8003000 <HAL_TIM_IC_Start_IT+0x98>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e003      	b.n	8003008 <HAL_TIM_IC_Start_IT+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003006:	b2db      	uxtb	r3, r3
 8003008:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800300a:	7bbb      	ldrb	r3, [r7, #14]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d102      	bne.n	8003016 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003010:	7b7b      	ldrb	r3, [r7, #13]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0c9      	b.n	80031ae <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d104      	bne.n	800302a <HAL_TIM_IC_Start_IT+0xc2>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003028:	e023      	b.n	8003072 <HAL_TIM_IC_Start_IT+0x10a>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d104      	bne.n	800303a <HAL_TIM_IC_Start_IT+0xd2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003038:	e01b      	b.n	8003072 <HAL_TIM_IC_Start_IT+0x10a>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d104      	bne.n	800304a <HAL_TIM_IC_Start_IT+0xe2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003048:	e013      	b.n	8003072 <HAL_TIM_IC_Start_IT+0x10a>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d104      	bne.n	800305a <HAL_TIM_IC_Start_IT+0xf2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003058:	e00b      	b.n	8003072 <HAL_TIM_IC_Start_IT+0x10a>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b10      	cmp	r3, #16
 800305e:	d104      	bne.n	800306a <HAL_TIM_IC_Start_IT+0x102>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003068:	e003      	b.n	8003072 <HAL_TIM_IC_Start_IT+0x10a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d104      	bne.n	8003082 <HAL_TIM_IC_Start_IT+0x11a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003080:	e013      	b.n	80030aa <HAL_TIM_IC_Start_IT+0x142>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b04      	cmp	r3, #4
 8003086:	d104      	bne.n	8003092 <HAL_TIM_IC_Start_IT+0x12a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003090:	e00b      	b.n	80030aa <HAL_TIM_IC_Start_IT+0x142>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_IC_Start_IT+0x13a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030a0:	e003      	b.n	80030aa <HAL_TIM_IC_Start_IT+0x142>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	d841      	bhi.n	8003134 <HAL_TIM_IC_Start_IT+0x1cc>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_TIM_IC_Start_IT+0x150>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030ed 	.word	0x080030ed
 80030bc:	08003135 	.word	0x08003135
 80030c0:	08003135 	.word	0x08003135
 80030c4:	08003135 	.word	0x08003135
 80030c8:	080030ff 	.word	0x080030ff
 80030cc:	08003135 	.word	0x08003135
 80030d0:	08003135 	.word	0x08003135
 80030d4:	08003135 	.word	0x08003135
 80030d8:	08003111 	.word	0x08003111
 80030dc:	08003135 	.word	0x08003135
 80030e0:	08003135 	.word	0x08003135
 80030e4:	08003135 	.word	0x08003135
 80030e8:	08003123 	.word	0x08003123
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0202 	orr.w	r2, r2, #2
 80030fa:	60da      	str	r2, [r3, #12]
      break;
 80030fc:	e01d      	b.n	800313a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0204 	orr.w	r2, r2, #4
 800310c:	60da      	str	r2, [r3, #12]
      break;
 800310e:	e014      	b.n	800313a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0208 	orr.w	r2, r2, #8
 800311e:	60da      	str	r2, [r3, #12]
      break;
 8003120:	e00b      	b.n	800313a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0210 	orr.w	r2, r2, #16
 8003130:	60da      	str	r2, [r3, #12]
      break;
 8003132:	e002      	b.n	800313a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	bf00      	nop
  }

  if (status == HAL_OK)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d135      	bne.n	80031ac <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fd3f 	bl	8003bcc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_TIM_IC_Start_IT+0x250>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_TIM_IC_Start_IT+0x204>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003160:	d004      	beq.n	800316c <HAL_TIM_IC_Start_IT+0x204>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_TIM_IC_Start_IT+0x254>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d115      	bne.n	8003198 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_TIM_IC_Start_IT+0x258>)
 8003174:	4013      	ands	r3, r2
 8003176:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2b06      	cmp	r3, #6
 800317c:	d015      	beq.n	80031aa <HAL_TIM_IC_Start_IT+0x242>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d011      	beq.n	80031aa <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	e008      	b.n	80031aa <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e000      	b.n	80031ac <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40012c00 	.word	0x40012c00
 80031bc:	40014000 	.word	0x40014000
 80031c0:	00010007 	.word	0x00010007

080031c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0202 	mvn.w	r2, #2
 80031f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fd fa5c 	bl	80006c4 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 faaa 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fab1 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b04      	cmp	r3, #4
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0204 	mvn.w	r2, #4
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fa32 	bl	80006c4 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa80 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa87 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0208 	mvn.w	r2, #8
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2204      	movs	r2, #4
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fa08 	bl	80006c4 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa56 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa5d 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d122      	bne.n	800331c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b10      	cmp	r3, #16
 80032e2:	d11b      	bne.n	800331c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0210 	mvn.w	r2, #16
 80032ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2208      	movs	r2, #8
 80032f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd f9de 	bl	80006c4 <HAL_TIM_IC_CaptureCallback>
 8003308:	e005      	b.n	8003316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa2c 	bl	8003768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa33 	bl	800377c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0201 	mvn.w	r2, #1
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa06 	bl	8003754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fcc2 	bl	8003cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d10e      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d107      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fcb5 	bl	8003d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d10e      	bne.n	80033ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d107      	bne.n	80033ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f9e1 	bl	8003790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d10e      	bne.n	80033fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d107      	bne.n	80033fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f06f 0220 	mvn.w	r2, #32
 80033f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fc75 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIM_IC_ConfigChannel+0x1e>
 800341c:	2302      	movs	r3, #2
 800341e:	e088      	b.n	8003532 <HAL_TIM_IC_ConfigChannel+0x130>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11b      	bne.n	8003466 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f000 fa1f 	bl	8003880 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 020c 	bic.w	r2, r2, #12
 8003450:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6999      	ldr	r1, [r3, #24]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	619a      	str	r2, [r3, #24]
 8003464:	e060      	b.n	8003528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d11c      	bne.n	80034a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f000 fa85 	bl	800398a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800348e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	619a      	str	r2, [r3, #24]
 80034a4:	e040      	b.n	8003528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	6819      	ldr	r1, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f000 fad2 	bl	8003a64 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 020c 	bic.w	r2, r2, #12
 80034ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69d9      	ldr	r1, [r3, #28]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	61da      	str	r2, [r3, #28]
 80034e2:	e021      	b.n	8003528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d11c      	bne.n	8003524 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f000 faef 	bl	8003adc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800350c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	61da      	str	r2, [r3, #28]
 8003522:	e001      	b.n	8003528 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_ConfigClockSource+0x1c>
 8003552:	2302      	movs	r3, #2
 8003554:	e0b6      	b.n	80036c4 <HAL_TIM_ConfigClockSource+0x18a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003578:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003580:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d03e      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xd8>
 8003594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003598:	f200 8087 	bhi.w	80036aa <HAL_TIM_ConfigClockSource+0x170>
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	f000 8086 	beq.w	80036b0 <HAL_TIM_ConfigClockSource+0x176>
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d87f      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035aa:	2b70      	cmp	r3, #112	; 0x70
 80035ac:	d01a      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0xaa>
 80035ae:	2b70      	cmp	r3, #112	; 0x70
 80035b0:	d87b      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035b2:	2b60      	cmp	r3, #96	; 0x60
 80035b4:	d050      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0x11e>
 80035b6:	2b60      	cmp	r3, #96	; 0x60
 80035b8:	d877      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035ba:	2b50      	cmp	r3, #80	; 0x50
 80035bc:	d03c      	beq.n	8003638 <HAL_TIM_ConfigClockSource+0xfe>
 80035be:	2b50      	cmp	r3, #80	; 0x50
 80035c0:	d873      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d058      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0x13e>
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d86f      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035ca:	2b30      	cmp	r3, #48	; 0x30
 80035cc:	d064      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x15e>
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d86b      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d060      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x15e>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d867      	bhi.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d05c      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x15e>
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d05a      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0x15e>
 80035e2:	e062      	b.n	80036aa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f000 faca 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003606:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e04f      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f000 fab3 	bl	8003b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003634:	609a      	str	r2, [r3, #8]
      break;
 8003636:	e03c      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	461a      	mov	r2, r3
 8003646:	f000 f971 	bl	800392c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2150      	movs	r1, #80	; 0x50
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fa80 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 8003656:	e02c      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	461a      	mov	r2, r3
 8003666:	f000 f9cd 	bl	8003a04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2160      	movs	r1, #96	; 0x60
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fa70 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 8003676:	e01c      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	461a      	mov	r2, r3
 8003686:	f000 f951 	bl	800392c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa60 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 fa57 	bl	8003b56 <TIM_ITRx_SetConfig>
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d831      	bhi.n	8003744 <HAL_TIM_ReadCapturedValue+0x78>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	08003745 	.word	0x08003745
 80036f0:	08003745 	.word	0x08003745
 80036f4:	08003745 	.word	0x08003745
 80036f8:	08003727 	.word	0x08003727
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003731 	.word	0x08003731
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	0800373b 	.word	0x0800373b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003722:	60fb      	str	r3, [r7, #12]

      break;
 8003724:	e00f      	b.n	8003746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	60fb      	str	r3, [r7, #12]

      break;
 800372e:	e00a      	b.n	8003746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	60fb      	str	r3, [r7, #12]

      break;
 8003738:	e005      	b.n	8003746 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	60fb      	str	r3, [r7, #12]

      break;
 8003742:	e000      	b.n	8003746 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003744:	bf00      	nop
  }

  return tmpreg;
 8003746:	68fb      	ldr	r3, [r7, #12]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a2e      	ldr	r2, [pc, #184]	; (8003870 <TIM_Base_SetConfig+0xcc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x20>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d108      	bne.n	80037d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a25      	ldr	r2, [pc, #148]	; (8003870 <TIM_Base_SetConfig+0xcc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00f      	beq.n	80037fe <TIM_Base_SetConfig+0x5a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d00b      	beq.n	80037fe <TIM_Base_SetConfig+0x5a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a22      	ldr	r2, [pc, #136]	; (8003874 <TIM_Base_SetConfig+0xd0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0x5a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a21      	ldr	r2, [pc, #132]	; (8003878 <TIM_Base_SetConfig+0xd4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0x5a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a20      	ldr	r2, [pc, #128]	; (800387c <TIM_Base_SetConfig+0xd8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d108      	bne.n	8003810 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <TIM_Base_SetConfig+0xcc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00b      	beq.n	8003854 <TIM_Base_SetConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <TIM_Base_SetConfig+0xd0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <TIM_Base_SetConfig+0xb0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <TIM_Base_SetConfig+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d003      	beq.n	8003854 <TIM_Base_SetConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0b      	ldr	r2, [pc, #44]	; (800387c <TIM_Base_SetConfig+0xd8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d103      	bne.n	800385c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	615a      	str	r2, [r3, #20]
}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40012c00 	.word	0x40012c00
 8003874:	40014000 	.word	0x40014000
 8003878:	40014400 	.word	0x40014400
 800387c:	40014800 	.word	0x40014800

08003880 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <TIM_TI1_SetConfig+0xa4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <TIM_TI1_SetConfig+0x3e>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d003      	beq.n	80038be <TIM_TI1_SetConfig+0x3e>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <TIM_TI1_SetConfig+0xa8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <TIM_TI1_SetConfig+0x42>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <TIM_TI1_SetConfig+0x44>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0303 	bic.w	r3, r3, #3
 80038ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e003      	b.n	80038e2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f023 030a 	bic.w	r3, r3, #10
 80038fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 030a 	and.w	r3, r3, #10
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	621a      	str	r2, [r3, #32]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40014000 	.word	0x40014000

0800392c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f023 030a 	bic.w	r3, r3, #10
 8003968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800398a:	b480      	push	{r7}
 800398c:	b087      	sub	sp, #28
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f023 0210 	bic.w	r2, r3, #16
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	621a      	str	r2, [r3, #32]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0210 	bic.w	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	031b      	lsls	r3, r3, #12
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	621a      	str	r2, [r3, #32]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 0303 	bic.w	r3, r3, #3
 8003a90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	031b      	lsls	r3, r3, #12
 8003b34:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	621a      	str	r2, [r3, #32]
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b085      	sub	sp, #20
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f043 0307 	orr.w	r3, r3, #7
 8003b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a1a      	ldr	r2, [r3, #32]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e04f      	b.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d009      	beq.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d004      	beq.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10c      	bne.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003caa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40014000 	.word	0x40014000

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e040      	b.n	8003db4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fc ffd4 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fbbe 	bl	80044e0 <UART_SetConfig>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e022      	b.n	8003db4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fce8 	bl	800474c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fd6f 	bl	8004890 <UART_CheckIdleState>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 8082 	bne.w	8003eda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_UART_Transmit+0x26>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07a      	b.n	8003edc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Transmit+0x38>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e073      	b.n	8003edc <HAL_UART_Transmit+0x120>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2221      	movs	r2, #33	; 0x21
 8003e08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd f955 	bl	80010b8 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d108      	bne.n	8003e3c <HAL_UART_Transmit+0x80>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e003      	b.n	8003e44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e4c:	e02d      	b.n	8003eaa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fd62 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e039      	b.n	8003edc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	3302      	adds	r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e008      	b.n	8003e98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1cb      	bne.n	8003e4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fd2e 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e005      	b.n	8003edc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b0ba      	sub	sp, #232	; 0xe8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f12:	4013      	ands	r3, r2
 8003f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d115      	bne.n	8003f4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00f      	beq.n	8003f4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 82a3 	beq.w	8004488 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
      }
      return;
 8003f4a:	e29d      	b.n	8004488 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 8117 	beq.w	8004184 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f66:	4b85      	ldr	r3, [pc, #532]	; (800417c <HAL_UART_IRQHandler+0x298>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 810a 	beq.w	8004184 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d011      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xbc>
 8003f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d011      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xec>
 8003fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00b      	beq.n	8003fd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d011      	beq.n	8004000 <HAL_UART_IRQHandler+0x11c>
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2204      	movs	r2, #4
 8003fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2208      	movs	r2, #8
 800402a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004032:	f043 0208 	orr.w	r2, r3, #8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d012      	beq.n	800406e <HAL_UART_IRQHandler+0x18a>
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00c      	beq.n	800406e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800405c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8209 	beq.w	800448c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d04f      	beq.n	8004166 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fcef 	bl	8004aaa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d141      	bne.n	800415e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800411e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d9      	bne.n	80040da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	2b00      	cmp	r3, #0
 800412c:	d013      	beq.n	8004156 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_UART_IRQHandler+0x29c>)
 8004134:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd f936 	bl	80013ac <HAL_DMA_Abort_IT>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d017      	beq.n	8004176 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004150:	4610      	mov	r0, r2
 8004152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e00f      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9ac 	bl	80044b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	e00b      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9a8 	bl	80044b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	e007      	b.n	8004176 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9a4 	bl	80044b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004174:	e18a      	b.n	800448c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004176:	bf00      	nop
    return;
 8004178:	e188      	b.n	800448c <HAL_UART_IRQHandler+0x5a8>
 800417a:	bf00      	nop
 800417c:	04000120 	.word	0x04000120
 8004180:	08004b71 	.word	0x08004b71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004188:	2b01      	cmp	r3, #1
 800418a:	f040 8143 	bne.w	8004414 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 813c 	beq.w	8004414 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 8135 	beq.w	8004414 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2210      	movs	r2, #16
 80041b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	f040 80b1 	bne.w	8004324 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 815c 	beq.w	8004490 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041e2:	429a      	cmp	r2, r3
 80041e4:	f080 8154 	bcs.w	8004490 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	f000 8085 	beq.w	8004308 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004212:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800422c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004234:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1da      	bne.n	80041fe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800426c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004270:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004274:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800427e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e1      	bne.n	8004248 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e3      	bne.n	8004284 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80042ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e4      	bne.n	80042c8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4618      	mov	r0, r3
 8004304:	f7fd f819 	bl	800133a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004314:	b29b      	uxth	r3, r3
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	b29b      	uxth	r3, r3
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8d3 	bl	80044c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004322:	e0b5      	b.n	8004490 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004330:	b29b      	uxth	r3, r3
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80a7 	beq.w	8004494 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004346:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a2 	beq.w	8004494 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004364:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004372:	647b      	str	r3, [r7, #68]	; 0x44
 8004374:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e4      	bne.n	8004350 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3308      	adds	r3, #8
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	623b      	str	r3, [r7, #32]
   return(result);
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043aa:	633a      	str	r2, [r7, #48]	; 0x30
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e3      	bne.n	8004386 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 0310 	bic.w	r3, r3, #16
 80043e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	617b      	str	r3, [r7, #20]
   return(result);
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e4      	bne.n	80043d0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004406:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f85b 	bl	80044c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004412:	e03f      	b.n	8004494 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <HAL_UART_IRQHandler+0x55a>
 8004420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fbda 	bl	8004bf0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800443c:	e02d      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00e      	beq.n	8004468 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800444a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01c      	beq.n	8004498 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	4798      	blx	r3
    }
    return;
 8004466:	e017      	b.n	8004498 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_UART_IRQHandler+0x5b6>
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fb8b 	bl	8004b9c <UART_EndTransmit_IT>
    return;
 8004486:	e008      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004488:	bf00      	nop
 800448a:	e006      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
    return;
 800448c:	bf00      	nop
 800448e:	e004      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004498:	bf00      	nop
  }

}
 800449a:	37e8      	adds	r7, #232	; 0xe8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <UART_SetConfig+0x254>)
 800450c:	4013      	ands	r3, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	430b      	orrs	r3, r1
 8004516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a78      	ldr	r2, [pc, #480]	; (8004738 <UART_SetConfig+0x258>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d120      	bne.n	800459e <UART_SetConfig+0xbe>
 800455c:	4b77      	ldr	r3, [pc, #476]	; (800473c <UART_SetConfig+0x25c>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b03      	cmp	r3, #3
 8004566:	d817      	bhi.n	8004598 <UART_SetConfig+0xb8>
 8004568:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x90>)
 800456a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456e:	bf00      	nop
 8004570:	08004581 	.word	0x08004581
 8004574:	0800458d 	.word	0x0800458d
 8004578:	08004593 	.word	0x08004593
 800457c:	08004587 	.word	0x08004587
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e01d      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004586:	2302      	movs	r3, #2
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e01a      	b.n	80045c2 <UART_SetConfig+0xe2>
 800458c:	2304      	movs	r3, #4
 800458e:	77fb      	strb	r3, [r7, #31]
 8004590:	e017      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004592:	2308      	movs	r3, #8
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e014      	b.n	80045c2 <UART_SetConfig+0xe2>
 8004598:	2310      	movs	r3, #16
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e011      	b.n	80045c2 <UART_SetConfig+0xe2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a67      	ldr	r2, [pc, #412]	; (8004740 <UART_SetConfig+0x260>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d102      	bne.n	80045ae <UART_SetConfig+0xce>
 80045a8:	2300      	movs	r3, #0
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e009      	b.n	80045c2 <UART_SetConfig+0xe2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a64      	ldr	r2, [pc, #400]	; (8004744 <UART_SetConfig+0x264>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <UART_SetConfig+0xde>
 80045b8:	2300      	movs	r3, #0
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e001      	b.n	80045c2 <UART_SetConfig+0xe2>
 80045be:	2310      	movs	r3, #16
 80045c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ca:	d15b      	bne.n	8004684 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d827      	bhi.n	8004622 <UART_SetConfig+0x142>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0xf8>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe f9e6 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8004600:	61b8      	str	r0, [r7, #24]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe fa04 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b4e      	ldr	r3, [pc, #312]	; (8004748 <UART_SetConfig+0x268>)
 800460e:	61bb      	str	r3, [r7, #24]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe f965 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 8004616:	61b8      	str	r0, [r7, #24]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	77bb      	strb	r3, [r7, #30]
        break;
 800462a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d074      	beq.n	800471c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	005a      	lsls	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	b29b      	uxth	r3, r3
 8004648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b0f      	cmp	r3, #15
 800464e:	d916      	bls.n	800467e <UART_SetConfig+0x19e>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004656:	d212      	bcs.n	800467e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f023 030f 	bic.w	r3, r3, #15
 8004660:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	085b      	lsrs	r3, r3, #1
 8004666:	b29b      	uxth	r3, r3
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	b29a      	uxth	r2, r3
 800466e:	89fb      	ldrh	r3, [r7, #14]
 8004670:	4313      	orrs	r3, r2
 8004672:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	89fa      	ldrh	r2, [r7, #14]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e04e      	b.n	800471c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
 8004682:	e04b      	b.n	800471c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004684:	7ffb      	ldrb	r3, [r7, #31]
 8004686:	2b08      	cmp	r3, #8
 8004688:	d827      	bhi.n	80046da <UART_SetConfig+0x1fa>
 800468a:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x1b0>)
 800468c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe f98a 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 80046b8:	61b8      	str	r0, [r7, #24]
        break;
 80046ba:	e013      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe f9a8 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61b8      	str	r0, [r7, #24]
        break;
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b20      	ldr	r3, [pc, #128]	; (8004748 <UART_SetConfig+0x268>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00c      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe f909 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 80046ce:	61b8      	str	r0, [r7, #24]
        break;
 80046d0:	e008      	b.n	80046e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e004      	b.n	80046e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77bb      	strb	r3, [r7, #30]
        break;
 80046e2:	bf00      	nop
    }

    if (pclk != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	d908      	bls.n	8004718 <UART_SetConfig+0x238>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d204      	bcs.n	8004718 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004728:	7fbb      	ldrb	r3, [r7, #30]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40013800 	.word	0x40013800
 800473c:	40021000 	.word	0x40021000
 8004740:	40004400 	.word	0x40004400
 8004744:	40004800 	.word	0x40004800
 8004748:	007a1200 	.word	0x007a1200

0800474c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01a      	beq.n	8004862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484a:	d10a      	bne.n	8004862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a0:	f7fc fc0a 	bl	80010b8 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10e      	bne.n	80048d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f82d 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e023      	b.n	800491a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d10e      	bne.n	80048fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f817 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00d      	b.n	800491a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b09c      	sub	sp, #112	; 0x70
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	e0a5      	b.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	f000 80a1 	beq.w	8004a80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fbbb 	bl	80010b8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
 800494e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004950:	2b00      	cmp	r3, #0
 8004952:	d13e      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004974:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	663b      	str	r3, [r7, #96]	; 0x60
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e067      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d04f      	beq.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ee:	d147      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	461a      	mov	r2, r3
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e6      	bne.n	80049fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3308      	adds	r3, #8
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a4c:	623a      	str	r2, [r7, #32]
 8004a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e010      	b.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	f43f af4a 	beq.w	8004934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3770      	adds	r7, #112	; 0x70
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b095      	sub	sp, #84	; 0x54
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	e853 3f00 	ldrex	r3, [r3]
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e6      	bne.n	8004ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d118      	bne.n	8004b52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	e853 3f00 	ldrex	r3, [r3]
 8004b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 0310 	bic.w	r3, r3, #16
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b42:	6979      	ldr	r1, [r7, #20]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e6      	bne.n	8004b20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b64:	bf00      	nop
 8004b66:	3754      	adds	r7, #84	; 0x54
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff fc90 	bl	80044b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b94:	bf00      	nop
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	61bb      	str	r3, [r7, #24]
 8004bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6979      	ldr	r1, [r7, #20]
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e6      	bne.n	8004ba4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff fc5c 	bl	80044a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be8:	bf00      	nop
 8004bea:	3720      	adds	r7, #32
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000018 	.word	0x20000018

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4d0d      	ldr	r5, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	42a6      	cmp	r6, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4d0b      	ldr	r5, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f001 f9e2 	bl	8005fec <_init>
 8004c28:	1b64      	subs	r4, r4, r5
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2600      	movs	r6, #0
 8004c2e:	42a6      	cmp	r6, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c38:	4798      	blx	r3
 8004c3a:	3601      	adds	r6, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c42:	4798      	blx	r3
 8004c44:	3601      	adds	r6, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	0800619c 	.word	0x0800619c
 8004c4c:	0800619c 	.word	0x0800619c
 8004c50:	0800619c 	.word	0x0800619c
 8004c54:	080061a0 	.word	0x080061a0

08004c58 <memset>:
 8004c58:	4402      	add	r2, r0
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d100      	bne.n	8004c62 <memset+0xa>
 8004c60:	4770      	bx	lr
 8004c62:	f803 1b01 	strb.w	r1, [r3], #1
 8004c66:	e7f9      	b.n	8004c5c <memset+0x4>

08004c68 <srand>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <srand+0x44>)
 8004c6c:	681d      	ldr	r5, [r3, #0]
 8004c6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004c70:	4604      	mov	r4, r0
 8004c72:	b9b3      	cbnz	r3, 8004ca2 <srand+0x3a>
 8004c74:	2018      	movs	r0, #24
 8004c76:	f000 f875 	bl	8004d64 <malloc>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	63a8      	str	r0, [r5, #56]	; 0x38
 8004c7e:	b920      	cbnz	r0, 8004c8a <srand+0x22>
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <srand+0x48>)
 8004c82:	480c      	ldr	r0, [pc, #48]	; (8004cb4 <srand+0x4c>)
 8004c84:	2142      	movs	r1, #66	; 0x42
 8004c86:	f000 f83d 	bl	8004d04 <__assert_func>
 8004c8a:	490b      	ldr	r1, [pc, #44]	; (8004cb8 <srand+0x50>)
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <srand+0x54>)
 8004c8e:	e9c0 1300 	strd	r1, r3, [r0]
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <srand+0x58>)
 8004c94:	6083      	str	r3, [r0, #8]
 8004c96:	230b      	movs	r3, #11
 8004c98:	8183      	strh	r3, [r0, #12]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ca2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611c      	str	r4, [r3, #16]
 8004ca8:	615a      	str	r2, [r3, #20]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	20000018 	.word	0x20000018
 8004cb0:	08006054 	.word	0x08006054
 8004cb4:	0800606b 	.word	0x0800606b
 8004cb8:	abcd330e 	.word	0xabcd330e
 8004cbc:	e66d1234 	.word	0xe66d1234
 8004cc0:	0005deec 	.word	0x0005deec

08004cc4 <siprintf>:
 8004cc4:	b40e      	push	{r1, r2, r3}
 8004cc6:	b500      	push	{lr}
 8004cc8:	b09c      	sub	sp, #112	; 0x70
 8004cca:	ab1d      	add	r3, sp, #116	; 0x74
 8004ccc:	9002      	str	r0, [sp, #8]
 8004cce:	9006      	str	r0, [sp, #24]
 8004cd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd4:	4809      	ldr	r0, [pc, #36]	; (8004cfc <siprintf+0x38>)
 8004cd6:	9107      	str	r1, [sp, #28]
 8004cd8:	9104      	str	r1, [sp, #16]
 8004cda:	4909      	ldr	r1, [pc, #36]	; (8004d00 <siprintf+0x3c>)
 8004cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce0:	9105      	str	r1, [sp, #20]
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	a902      	add	r1, sp, #8
 8004ce8:	f000 f94a 	bl	8004f80 <_svfiprintf_r>
 8004cec:	9b02      	ldr	r3, [sp, #8]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	b01c      	add	sp, #112	; 0x70
 8004cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf8:	b003      	add	sp, #12
 8004cfa:	4770      	bx	lr
 8004cfc:	20000018 	.word	0x20000018
 8004d00:	ffff0208 	.word	0xffff0208

08004d04 <__assert_func>:
 8004d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d06:	4614      	mov	r4, r2
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <__assert_func+0x2c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4605      	mov	r5, r0
 8004d10:	68d8      	ldr	r0, [r3, #12]
 8004d12:	b14c      	cbz	r4, 8004d28 <__assert_func+0x24>
 8004d14:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <__assert_func+0x30>)
 8004d16:	9100      	str	r1, [sp, #0]
 8004d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d1c:	4906      	ldr	r1, [pc, #24]	; (8004d38 <__assert_func+0x34>)
 8004d1e:	462b      	mov	r3, r5
 8004d20:	f000 f80e 	bl	8004d40 <fiprintf>
 8004d24:	f000 fdea 	bl	80058fc <abort>
 8004d28:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <__assert_func+0x38>)
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	e7f3      	b.n	8004d16 <__assert_func+0x12>
 8004d2e:	bf00      	nop
 8004d30:	20000018 	.word	0x20000018
 8004d34:	080060ca 	.word	0x080060ca
 8004d38:	080060d7 	.word	0x080060d7
 8004d3c:	08006105 	.word	0x08006105

08004d40 <fiprintf>:
 8004d40:	b40e      	push	{r1, r2, r3}
 8004d42:	b503      	push	{r0, r1, lr}
 8004d44:	4601      	mov	r1, r0
 8004d46:	ab03      	add	r3, sp, #12
 8004d48:	4805      	ldr	r0, [pc, #20]	; (8004d60 <fiprintf+0x20>)
 8004d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d4e:	6800      	ldr	r0, [r0, #0]
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	f000 fa3f 	bl	80051d4 <_vfiprintf_r>
 8004d56:	b002      	add	sp, #8
 8004d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d5c:	b003      	add	sp, #12
 8004d5e:	4770      	bx	lr
 8004d60:	20000018 	.word	0x20000018

08004d64 <malloc>:
 8004d64:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <malloc+0xc>)
 8004d66:	4601      	mov	r1, r0
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f000 b853 	b.w	8004e14 <_malloc_r>
 8004d6e:	bf00      	nop
 8004d70:	20000018 	.word	0x20000018

08004d74 <_free_r>:
 8004d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d76:	2900      	cmp	r1, #0
 8004d78:	d048      	beq.n	8004e0c <_free_r+0x98>
 8004d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7e:	9001      	str	r0, [sp, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f1a1 0404 	sub.w	r4, r1, #4
 8004d86:	bfb8      	it	lt
 8004d88:	18e4      	addlt	r4, r4, r3
 8004d8a:	f001 f805 	bl	8005d98 <__malloc_lock>
 8004d8e:	4a20      	ldr	r2, [pc, #128]	; (8004e10 <_free_r+0x9c>)
 8004d90:	9801      	ldr	r0, [sp, #4]
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	4615      	mov	r5, r2
 8004d96:	b933      	cbnz	r3, 8004da6 <_free_r+0x32>
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6014      	str	r4, [r2, #0]
 8004d9c:	b003      	add	sp, #12
 8004d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da2:	f000 bfff 	b.w	8005da4 <__malloc_unlock>
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d90b      	bls.n	8004dc2 <_free_r+0x4e>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	1862      	adds	r2, r4, r1
 8004dae:	4293      	cmp	r3, r2
 8004db0:	bf04      	itt	eq
 8004db2:	681a      	ldreq	r2, [r3, #0]
 8004db4:	685b      	ldreq	r3, [r3, #4]
 8004db6:	6063      	str	r3, [r4, #4]
 8004db8:	bf04      	itt	eq
 8004dba:	1852      	addeq	r2, r2, r1
 8004dbc:	6022      	streq	r2, [r4, #0]
 8004dbe:	602c      	str	r4, [r5, #0]
 8004dc0:	e7ec      	b.n	8004d9c <_free_r+0x28>
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	b10b      	cbz	r3, 8004dcc <_free_r+0x58>
 8004dc8:	42a3      	cmp	r3, r4
 8004dca:	d9fa      	bls.n	8004dc2 <_free_r+0x4e>
 8004dcc:	6811      	ldr	r1, [r2, #0]
 8004dce:	1855      	adds	r5, r2, r1
 8004dd0:	42a5      	cmp	r5, r4
 8004dd2:	d10b      	bne.n	8004dec <_free_r+0x78>
 8004dd4:	6824      	ldr	r4, [r4, #0]
 8004dd6:	4421      	add	r1, r4
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	6011      	str	r1, [r2, #0]
 8004dde:	d1dd      	bne.n	8004d9c <_free_r+0x28>
 8004de0:	681c      	ldr	r4, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	6053      	str	r3, [r2, #4]
 8004de6:	4421      	add	r1, r4
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	e7d7      	b.n	8004d9c <_free_r+0x28>
 8004dec:	d902      	bls.n	8004df4 <_free_r+0x80>
 8004dee:	230c      	movs	r3, #12
 8004df0:	6003      	str	r3, [r0, #0]
 8004df2:	e7d3      	b.n	8004d9c <_free_r+0x28>
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf04      	itt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	6063      	str	r3, [r4, #4]
 8004e02:	bf04      	itt	eq
 8004e04:	1949      	addeq	r1, r1, r5
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	6054      	str	r4, [r2, #4]
 8004e0a:	e7c7      	b.n	8004d9c <_free_r+0x28>
 8004e0c:	b003      	add	sp, #12
 8004e0e:	bd30      	pop	{r4, r5, pc}
 8004e10:	200000bc 	.word	0x200000bc

08004e14 <_malloc_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	1ccd      	adds	r5, r1, #3
 8004e18:	f025 0503 	bic.w	r5, r5, #3
 8004e1c:	3508      	adds	r5, #8
 8004e1e:	2d0c      	cmp	r5, #12
 8004e20:	bf38      	it	cc
 8004e22:	250c      	movcc	r5, #12
 8004e24:	2d00      	cmp	r5, #0
 8004e26:	4606      	mov	r6, r0
 8004e28:	db01      	blt.n	8004e2e <_malloc_r+0x1a>
 8004e2a:	42a9      	cmp	r1, r5
 8004e2c:	d903      	bls.n	8004e36 <_malloc_r+0x22>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	2000      	movs	r0, #0
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e36:	f000 ffaf 	bl	8005d98 <__malloc_lock>
 8004e3a:	4921      	ldr	r1, [pc, #132]	; (8004ec0 <_malloc_r+0xac>)
 8004e3c:	680a      	ldr	r2, [r1, #0]
 8004e3e:	4614      	mov	r4, r2
 8004e40:	b99c      	cbnz	r4, 8004e6a <_malloc_r+0x56>
 8004e42:	4f20      	ldr	r7, [pc, #128]	; (8004ec4 <_malloc_r+0xb0>)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	b923      	cbnz	r3, 8004e52 <_malloc_r+0x3e>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f000 fc86 	bl	800575c <_sbrk_r>
 8004e50:	6038      	str	r0, [r7, #0]
 8004e52:	4629      	mov	r1, r5
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 fc81 	bl	800575c <_sbrk_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d123      	bne.n	8004ea6 <_malloc_r+0x92>
 8004e5e:	230c      	movs	r3, #12
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	4630      	mov	r0, r6
 8004e64:	f000 ff9e 	bl	8005da4 <__malloc_unlock>
 8004e68:	e7e3      	b.n	8004e32 <_malloc_r+0x1e>
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	1b5b      	subs	r3, r3, r5
 8004e6e:	d417      	bmi.n	8004ea0 <_malloc_r+0x8c>
 8004e70:	2b0b      	cmp	r3, #11
 8004e72:	d903      	bls.n	8004e7c <_malloc_r+0x68>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	441c      	add	r4, r3
 8004e78:	6025      	str	r5, [r4, #0]
 8004e7a:	e004      	b.n	8004e86 <_malloc_r+0x72>
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	42a2      	cmp	r2, r4
 8004e80:	bf0c      	ite	eq
 8004e82:	600b      	streq	r3, [r1, #0]
 8004e84:	6053      	strne	r3, [r2, #4]
 8004e86:	4630      	mov	r0, r6
 8004e88:	f000 ff8c 	bl	8005da4 <__malloc_unlock>
 8004e8c:	f104 000b 	add.w	r0, r4, #11
 8004e90:	1d23      	adds	r3, r4, #4
 8004e92:	f020 0007 	bic.w	r0, r0, #7
 8004e96:	1ac2      	subs	r2, r0, r3
 8004e98:	d0cc      	beq.n	8004e34 <_malloc_r+0x20>
 8004e9a:	1a1b      	subs	r3, r3, r0
 8004e9c:	50a3      	str	r3, [r4, r2]
 8004e9e:	e7c9      	b.n	8004e34 <_malloc_r+0x20>
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	6864      	ldr	r4, [r4, #4]
 8004ea4:	e7cc      	b.n	8004e40 <_malloc_r+0x2c>
 8004ea6:	1cc4      	adds	r4, r0, #3
 8004ea8:	f024 0403 	bic.w	r4, r4, #3
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d0e3      	beq.n	8004e78 <_malloc_r+0x64>
 8004eb0:	1a21      	subs	r1, r4, r0
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f000 fc52 	bl	800575c <_sbrk_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d1dd      	bne.n	8004e78 <_malloc_r+0x64>
 8004ebc:	e7cf      	b.n	8004e5e <_malloc_r+0x4a>
 8004ebe:	bf00      	nop
 8004ec0:	200000bc 	.word	0x200000bc
 8004ec4:	200000c0 	.word	0x200000c0

08004ec8 <__ssputs_r>:
 8004ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ecc:	688e      	ldr	r6, [r1, #8]
 8004ece:	429e      	cmp	r6, r3
 8004ed0:	4682      	mov	sl, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4690      	mov	r8, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	d838      	bhi.n	8004f4c <__ssputs_r+0x84>
 8004eda:	898a      	ldrh	r2, [r1, #12]
 8004edc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee0:	d032      	beq.n	8004f48 <__ssputs_r+0x80>
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	6909      	ldr	r1, [r1, #16]
 8004ee6:	eba5 0901 	sub.w	r9, r5, r1
 8004eea:	6965      	ldr	r5, [r4, #20]
 8004eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	444b      	add	r3, r9
 8004ef8:	106d      	asrs	r5, r5, #1
 8004efa:	429d      	cmp	r5, r3
 8004efc:	bf38      	it	cc
 8004efe:	461d      	movcc	r5, r3
 8004f00:	0553      	lsls	r3, r2, #21
 8004f02:	d531      	bpl.n	8004f68 <__ssputs_r+0xa0>
 8004f04:	4629      	mov	r1, r5
 8004f06:	f7ff ff85 	bl	8004e14 <_malloc_r>
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	b950      	cbnz	r0, 8004f24 <__ssputs_r+0x5c>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	f8ca 3000 	str.w	r3, [sl]
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f24:	6921      	ldr	r1, [r4, #16]
 8004f26:	464a      	mov	r2, r9
 8004f28:	f000 ff0e 	bl	8005d48 <memcpy>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f36:	81a3      	strh	r3, [r4, #12]
 8004f38:	6126      	str	r6, [r4, #16]
 8004f3a:	6165      	str	r5, [r4, #20]
 8004f3c:	444e      	add	r6, r9
 8004f3e:	eba5 0509 	sub.w	r5, r5, r9
 8004f42:	6026      	str	r6, [r4, #0]
 8004f44:	60a5      	str	r5, [r4, #8]
 8004f46:	463e      	mov	r6, r7
 8004f48:	42be      	cmp	r6, r7
 8004f4a:	d900      	bls.n	8004f4e <__ssputs_r+0x86>
 8004f4c:	463e      	mov	r6, r7
 8004f4e:	4632      	mov	r2, r6
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	4641      	mov	r1, r8
 8004f54:	f000 ff06 	bl	8005d64 <memmove>
 8004f58:	68a3      	ldr	r3, [r4, #8]
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	1b9b      	subs	r3, r3, r6
 8004f5e:	4432      	add	r2, r6
 8004f60:	60a3      	str	r3, [r4, #8]
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	2000      	movs	r0, #0
 8004f66:	e7db      	b.n	8004f20 <__ssputs_r+0x58>
 8004f68:	462a      	mov	r2, r5
 8004f6a:	f000 ff21 	bl	8005db0 <_realloc_r>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1e1      	bne.n	8004f38 <__ssputs_r+0x70>
 8004f74:	6921      	ldr	r1, [r4, #16]
 8004f76:	4650      	mov	r0, sl
 8004f78:	f7ff fefc 	bl	8004d74 <_free_r>
 8004f7c:	e7c7      	b.n	8004f0e <__ssputs_r+0x46>
	...

08004f80 <_svfiprintf_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	4698      	mov	r8, r3
 8004f86:	898b      	ldrh	r3, [r1, #12]
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	b09d      	sub	sp, #116	; 0x74
 8004f8c:	4607      	mov	r7, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	4614      	mov	r4, r2
 8004f92:	d50e      	bpl.n	8004fb2 <_svfiprintf_r+0x32>
 8004f94:	690b      	ldr	r3, [r1, #16]
 8004f96:	b963      	cbnz	r3, 8004fb2 <_svfiprintf_r+0x32>
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	f7ff ff3b 	bl	8004e14 <_malloc_r>
 8004f9e:	6028      	str	r0, [r5, #0]
 8004fa0:	6128      	str	r0, [r5, #16]
 8004fa2:	b920      	cbnz	r0, 8004fae <_svfiprintf_r+0x2e>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	e0d1      	b.n	8005152 <_svfiprintf_r+0x1d2>
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	616b      	str	r3, [r5, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc0:	2330      	movs	r3, #48	; 0x30
 8004fc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800516c <_svfiprintf_r+0x1ec>
 8004fc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fca:	f04f 0901 	mov.w	r9, #1
 8004fce:	4623      	mov	r3, r4
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd6:	b10a      	cbz	r2, 8004fdc <_svfiprintf_r+0x5c>
 8004fd8:	2a25      	cmp	r2, #37	; 0x25
 8004fda:	d1f9      	bne.n	8004fd0 <_svfiprintf_r+0x50>
 8004fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe0:	d00b      	beq.n	8004ffa <_svfiprintf_r+0x7a>
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	4622      	mov	r2, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4638      	mov	r0, r7
 8004fea:	f7ff ff6d 	bl	8004ec8 <__ssputs_r>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f000 80aa 	beq.w	8005148 <_svfiprintf_r+0x1c8>
 8004ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff6:	445a      	add	r2, fp
 8004ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80a2 	beq.w	8005148 <_svfiprintf_r+0x1c8>
 8005004:	2300      	movs	r3, #0
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800500e:	f10a 0a01 	add.w	sl, sl, #1
 8005012:	9304      	str	r3, [sp, #16]
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800501a:	931a      	str	r3, [sp, #104]	; 0x68
 800501c:	4654      	mov	r4, sl
 800501e:	2205      	movs	r2, #5
 8005020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005024:	4851      	ldr	r0, [pc, #324]	; (800516c <_svfiprintf_r+0x1ec>)
 8005026:	f7fb f8d3 	bl	80001d0 <memchr>
 800502a:	9a04      	ldr	r2, [sp, #16]
 800502c:	b9d8      	cbnz	r0, 8005066 <_svfiprintf_r+0xe6>
 800502e:	06d0      	lsls	r0, r2, #27
 8005030:	bf44      	itt	mi
 8005032:	2320      	movmi	r3, #32
 8005034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005038:	0711      	lsls	r1, r2, #28
 800503a:	bf44      	itt	mi
 800503c:	232b      	movmi	r3, #43	; 0x2b
 800503e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005042:	f89a 3000 	ldrb.w	r3, [sl]
 8005046:	2b2a      	cmp	r3, #42	; 0x2a
 8005048:	d015      	beq.n	8005076 <_svfiprintf_r+0xf6>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	4654      	mov	r4, sl
 800504e:	2000      	movs	r0, #0
 8005050:	f04f 0c0a 	mov.w	ip, #10
 8005054:	4621      	mov	r1, r4
 8005056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505a:	3b30      	subs	r3, #48	; 0x30
 800505c:	2b09      	cmp	r3, #9
 800505e:	d94e      	bls.n	80050fe <_svfiprintf_r+0x17e>
 8005060:	b1b0      	cbz	r0, 8005090 <_svfiprintf_r+0x110>
 8005062:	9207      	str	r2, [sp, #28]
 8005064:	e014      	b.n	8005090 <_svfiprintf_r+0x110>
 8005066:	eba0 0308 	sub.w	r3, r0, r8
 800506a:	fa09 f303 	lsl.w	r3, r9, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	46a2      	mov	sl, r4
 8005074:	e7d2      	b.n	800501c <_svfiprintf_r+0x9c>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	9103      	str	r1, [sp, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	bfbb      	ittet	lt
 8005082:	425b      	neglt	r3, r3
 8005084:	f042 0202 	orrlt.w	r2, r2, #2
 8005088:	9307      	strge	r3, [sp, #28]
 800508a:	9307      	strlt	r3, [sp, #28]
 800508c:	bfb8      	it	lt
 800508e:	9204      	strlt	r2, [sp, #16]
 8005090:	7823      	ldrb	r3, [r4, #0]
 8005092:	2b2e      	cmp	r3, #46	; 0x2e
 8005094:	d10c      	bne.n	80050b0 <_svfiprintf_r+0x130>
 8005096:	7863      	ldrb	r3, [r4, #1]
 8005098:	2b2a      	cmp	r3, #42	; 0x2a
 800509a:	d135      	bne.n	8005108 <_svfiprintf_r+0x188>
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	9203      	str	r2, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bfb8      	it	lt
 80050a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ac:	3402      	adds	r4, #2
 80050ae:	9305      	str	r3, [sp, #20]
 80050b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800517c <_svfiprintf_r+0x1fc>
 80050b4:	7821      	ldrb	r1, [r4, #0]
 80050b6:	2203      	movs	r2, #3
 80050b8:	4650      	mov	r0, sl
 80050ba:	f7fb f889 	bl	80001d0 <memchr>
 80050be:	b140      	cbz	r0, 80050d2 <_svfiprintf_r+0x152>
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	eba0 000a 	sub.w	r0, r0, sl
 80050c6:	fa03 f000 	lsl.w	r0, r3, r0
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	4303      	orrs	r3, r0
 80050ce:	3401      	adds	r4, #1
 80050d0:	9304      	str	r3, [sp, #16]
 80050d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d6:	4826      	ldr	r0, [pc, #152]	; (8005170 <_svfiprintf_r+0x1f0>)
 80050d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050dc:	2206      	movs	r2, #6
 80050de:	f7fb f877 	bl	80001d0 <memchr>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d038      	beq.n	8005158 <_svfiprintf_r+0x1d8>
 80050e6:	4b23      	ldr	r3, [pc, #140]	; (8005174 <_svfiprintf_r+0x1f4>)
 80050e8:	bb1b      	cbnz	r3, 8005132 <_svfiprintf_r+0x1b2>
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	3307      	adds	r3, #7
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	3308      	adds	r3, #8
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f8:	4433      	add	r3, r6
 80050fa:	9309      	str	r3, [sp, #36]	; 0x24
 80050fc:	e767      	b.n	8004fce <_svfiprintf_r+0x4e>
 80050fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005102:	460c      	mov	r4, r1
 8005104:	2001      	movs	r0, #1
 8005106:	e7a5      	b.n	8005054 <_svfiprintf_r+0xd4>
 8005108:	2300      	movs	r3, #0
 800510a:	3401      	adds	r4, #1
 800510c:	9305      	str	r3, [sp, #20]
 800510e:	4619      	mov	r1, r3
 8005110:	f04f 0c0a 	mov.w	ip, #10
 8005114:	4620      	mov	r0, r4
 8005116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800511a:	3a30      	subs	r2, #48	; 0x30
 800511c:	2a09      	cmp	r2, #9
 800511e:	d903      	bls.n	8005128 <_svfiprintf_r+0x1a8>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0c5      	beq.n	80050b0 <_svfiprintf_r+0x130>
 8005124:	9105      	str	r1, [sp, #20]
 8005126:	e7c3      	b.n	80050b0 <_svfiprintf_r+0x130>
 8005128:	fb0c 2101 	mla	r1, ip, r1, r2
 800512c:	4604      	mov	r4, r0
 800512e:	2301      	movs	r3, #1
 8005130:	e7f0      	b.n	8005114 <_svfiprintf_r+0x194>
 8005132:	ab03      	add	r3, sp, #12
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	462a      	mov	r2, r5
 8005138:	4b0f      	ldr	r3, [pc, #60]	; (8005178 <_svfiprintf_r+0x1f8>)
 800513a:	a904      	add	r1, sp, #16
 800513c:	4638      	mov	r0, r7
 800513e:	f3af 8000 	nop.w
 8005142:	1c42      	adds	r2, r0, #1
 8005144:	4606      	mov	r6, r0
 8005146:	d1d6      	bne.n	80050f6 <_svfiprintf_r+0x176>
 8005148:	89ab      	ldrh	r3, [r5, #12]
 800514a:	065b      	lsls	r3, r3, #25
 800514c:	f53f af2c 	bmi.w	8004fa8 <_svfiprintf_r+0x28>
 8005150:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005152:	b01d      	add	sp, #116	; 0x74
 8005154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005158:	ab03      	add	r3, sp, #12
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	462a      	mov	r2, r5
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <_svfiprintf_r+0x1f8>)
 8005160:	a904      	add	r1, sp, #16
 8005162:	4638      	mov	r0, r7
 8005164:	f000 f9d4 	bl	8005510 <_printf_i>
 8005168:	e7eb      	b.n	8005142 <_svfiprintf_r+0x1c2>
 800516a:	bf00      	nop
 800516c:	08006106 	.word	0x08006106
 8005170:	08006110 	.word	0x08006110
 8005174:	00000000 	.word	0x00000000
 8005178:	08004ec9 	.word	0x08004ec9
 800517c:	0800610c 	.word	0x0800610c

08005180 <__sfputc_r>:
 8005180:	6893      	ldr	r3, [r2, #8]
 8005182:	3b01      	subs	r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	b410      	push	{r4}
 8005188:	6093      	str	r3, [r2, #8]
 800518a:	da08      	bge.n	800519e <__sfputc_r+0x1e>
 800518c:	6994      	ldr	r4, [r2, #24]
 800518e:	42a3      	cmp	r3, r4
 8005190:	db01      	blt.n	8005196 <__sfputc_r+0x16>
 8005192:	290a      	cmp	r1, #10
 8005194:	d103      	bne.n	800519e <__sfputc_r+0x1e>
 8005196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800519a:	f000 baef 	b.w	800577c <__swbuf_r>
 800519e:	6813      	ldr	r3, [r2, #0]
 80051a0:	1c58      	adds	r0, r3, #1
 80051a2:	6010      	str	r0, [r2, #0]
 80051a4:	7019      	strb	r1, [r3, #0]
 80051a6:	4608      	mov	r0, r1
 80051a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <__sfputs_r>:
 80051ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b0:	4606      	mov	r6, r0
 80051b2:	460f      	mov	r7, r1
 80051b4:	4614      	mov	r4, r2
 80051b6:	18d5      	adds	r5, r2, r3
 80051b8:	42ac      	cmp	r4, r5
 80051ba:	d101      	bne.n	80051c0 <__sfputs_r+0x12>
 80051bc:	2000      	movs	r0, #0
 80051be:	e007      	b.n	80051d0 <__sfputs_r+0x22>
 80051c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c4:	463a      	mov	r2, r7
 80051c6:	4630      	mov	r0, r6
 80051c8:	f7ff ffda 	bl	8005180 <__sfputc_r>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d1f3      	bne.n	80051b8 <__sfputs_r+0xa>
 80051d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d4 <_vfiprintf_r>:
 80051d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d8:	460d      	mov	r5, r1
 80051da:	b09d      	sub	sp, #116	; 0x74
 80051dc:	4614      	mov	r4, r2
 80051de:	4698      	mov	r8, r3
 80051e0:	4606      	mov	r6, r0
 80051e2:	b118      	cbz	r0, 80051ec <_vfiprintf_r+0x18>
 80051e4:	6983      	ldr	r3, [r0, #24]
 80051e6:	b90b      	cbnz	r3, 80051ec <_vfiprintf_r+0x18>
 80051e8:	f000 fcaa 	bl	8005b40 <__sinit>
 80051ec:	4b89      	ldr	r3, [pc, #548]	; (8005414 <_vfiprintf_r+0x240>)
 80051ee:	429d      	cmp	r5, r3
 80051f0:	d11b      	bne.n	800522a <_vfiprintf_r+0x56>
 80051f2:	6875      	ldr	r5, [r6, #4]
 80051f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051f6:	07d9      	lsls	r1, r3, #31
 80051f8:	d405      	bmi.n	8005206 <_vfiprintf_r+0x32>
 80051fa:	89ab      	ldrh	r3, [r5, #12]
 80051fc:	059a      	lsls	r2, r3, #22
 80051fe:	d402      	bmi.n	8005206 <_vfiprintf_r+0x32>
 8005200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005202:	f000 fd3b 	bl	8005c7c <__retarget_lock_acquire_recursive>
 8005206:	89ab      	ldrh	r3, [r5, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	d501      	bpl.n	8005210 <_vfiprintf_r+0x3c>
 800520c:	692b      	ldr	r3, [r5, #16]
 800520e:	b9eb      	cbnz	r3, 800524c <_vfiprintf_r+0x78>
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f000 fb04 	bl	8005820 <__swsetup_r>
 8005218:	b1c0      	cbz	r0, 800524c <_vfiprintf_r+0x78>
 800521a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800521c:	07dc      	lsls	r4, r3, #31
 800521e:	d50e      	bpl.n	800523e <_vfiprintf_r+0x6a>
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	b01d      	add	sp, #116	; 0x74
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	4b7b      	ldr	r3, [pc, #492]	; (8005418 <_vfiprintf_r+0x244>)
 800522c:	429d      	cmp	r5, r3
 800522e:	d101      	bne.n	8005234 <_vfiprintf_r+0x60>
 8005230:	68b5      	ldr	r5, [r6, #8]
 8005232:	e7df      	b.n	80051f4 <_vfiprintf_r+0x20>
 8005234:	4b79      	ldr	r3, [pc, #484]	; (800541c <_vfiprintf_r+0x248>)
 8005236:	429d      	cmp	r5, r3
 8005238:	bf08      	it	eq
 800523a:	68f5      	ldreq	r5, [r6, #12]
 800523c:	e7da      	b.n	80051f4 <_vfiprintf_r+0x20>
 800523e:	89ab      	ldrh	r3, [r5, #12]
 8005240:	0598      	lsls	r0, r3, #22
 8005242:	d4ed      	bmi.n	8005220 <_vfiprintf_r+0x4c>
 8005244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005246:	f000 fd1a 	bl	8005c7e <__retarget_lock_release_recursive>
 800524a:	e7e9      	b.n	8005220 <_vfiprintf_r+0x4c>
 800524c:	2300      	movs	r3, #0
 800524e:	9309      	str	r3, [sp, #36]	; 0x24
 8005250:	2320      	movs	r3, #32
 8005252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005256:	f8cd 800c 	str.w	r8, [sp, #12]
 800525a:	2330      	movs	r3, #48	; 0x30
 800525c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005420 <_vfiprintf_r+0x24c>
 8005260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005264:	f04f 0901 	mov.w	r9, #1
 8005268:	4623      	mov	r3, r4
 800526a:	469a      	mov	sl, r3
 800526c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005270:	b10a      	cbz	r2, 8005276 <_vfiprintf_r+0xa2>
 8005272:	2a25      	cmp	r2, #37	; 0x25
 8005274:	d1f9      	bne.n	800526a <_vfiprintf_r+0x96>
 8005276:	ebba 0b04 	subs.w	fp, sl, r4
 800527a:	d00b      	beq.n	8005294 <_vfiprintf_r+0xc0>
 800527c:	465b      	mov	r3, fp
 800527e:	4622      	mov	r2, r4
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ff93 	bl	80051ae <__sfputs_r>
 8005288:	3001      	adds	r0, #1
 800528a:	f000 80aa 	beq.w	80053e2 <_vfiprintf_r+0x20e>
 800528e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005290:	445a      	add	r2, fp
 8005292:	9209      	str	r2, [sp, #36]	; 0x24
 8005294:	f89a 3000 	ldrb.w	r3, [sl]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 80a2 	beq.w	80053e2 <_vfiprintf_r+0x20e>
 800529e:	2300      	movs	r3, #0
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a8:	f10a 0a01 	add.w	sl, sl, #1
 80052ac:	9304      	str	r3, [sp, #16]
 80052ae:	9307      	str	r3, [sp, #28]
 80052b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b4:	931a      	str	r3, [sp, #104]	; 0x68
 80052b6:	4654      	mov	r4, sl
 80052b8:	2205      	movs	r2, #5
 80052ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052be:	4858      	ldr	r0, [pc, #352]	; (8005420 <_vfiprintf_r+0x24c>)
 80052c0:	f7fa ff86 	bl	80001d0 <memchr>
 80052c4:	9a04      	ldr	r2, [sp, #16]
 80052c6:	b9d8      	cbnz	r0, 8005300 <_vfiprintf_r+0x12c>
 80052c8:	06d1      	lsls	r1, r2, #27
 80052ca:	bf44      	itt	mi
 80052cc:	2320      	movmi	r3, #32
 80052ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d2:	0713      	lsls	r3, r2, #28
 80052d4:	bf44      	itt	mi
 80052d6:	232b      	movmi	r3, #43	; 0x2b
 80052d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052dc:	f89a 3000 	ldrb.w	r3, [sl]
 80052e0:	2b2a      	cmp	r3, #42	; 0x2a
 80052e2:	d015      	beq.n	8005310 <_vfiprintf_r+0x13c>
 80052e4:	9a07      	ldr	r2, [sp, #28]
 80052e6:	4654      	mov	r4, sl
 80052e8:	2000      	movs	r0, #0
 80052ea:	f04f 0c0a 	mov.w	ip, #10
 80052ee:	4621      	mov	r1, r4
 80052f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f4:	3b30      	subs	r3, #48	; 0x30
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	d94e      	bls.n	8005398 <_vfiprintf_r+0x1c4>
 80052fa:	b1b0      	cbz	r0, 800532a <_vfiprintf_r+0x156>
 80052fc:	9207      	str	r2, [sp, #28]
 80052fe:	e014      	b.n	800532a <_vfiprintf_r+0x156>
 8005300:	eba0 0308 	sub.w	r3, r0, r8
 8005304:	fa09 f303 	lsl.w	r3, r9, r3
 8005308:	4313      	orrs	r3, r2
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	46a2      	mov	sl, r4
 800530e:	e7d2      	b.n	80052b6 <_vfiprintf_r+0xe2>
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	1d19      	adds	r1, r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	9103      	str	r1, [sp, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	bfbb      	ittet	lt
 800531c:	425b      	neglt	r3, r3
 800531e:	f042 0202 	orrlt.w	r2, r2, #2
 8005322:	9307      	strge	r3, [sp, #28]
 8005324:	9307      	strlt	r3, [sp, #28]
 8005326:	bfb8      	it	lt
 8005328:	9204      	strlt	r2, [sp, #16]
 800532a:	7823      	ldrb	r3, [r4, #0]
 800532c:	2b2e      	cmp	r3, #46	; 0x2e
 800532e:	d10c      	bne.n	800534a <_vfiprintf_r+0x176>
 8005330:	7863      	ldrb	r3, [r4, #1]
 8005332:	2b2a      	cmp	r3, #42	; 0x2a
 8005334:	d135      	bne.n	80053a2 <_vfiprintf_r+0x1ce>
 8005336:	9b03      	ldr	r3, [sp, #12]
 8005338:	1d1a      	adds	r2, r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	9203      	str	r2, [sp, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	bfb8      	it	lt
 8005342:	f04f 33ff 	movlt.w	r3, #4294967295
 8005346:	3402      	adds	r4, #2
 8005348:	9305      	str	r3, [sp, #20]
 800534a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005430 <_vfiprintf_r+0x25c>
 800534e:	7821      	ldrb	r1, [r4, #0]
 8005350:	2203      	movs	r2, #3
 8005352:	4650      	mov	r0, sl
 8005354:	f7fa ff3c 	bl	80001d0 <memchr>
 8005358:	b140      	cbz	r0, 800536c <_vfiprintf_r+0x198>
 800535a:	2340      	movs	r3, #64	; 0x40
 800535c:	eba0 000a 	sub.w	r0, r0, sl
 8005360:	fa03 f000 	lsl.w	r0, r3, r0
 8005364:	9b04      	ldr	r3, [sp, #16]
 8005366:	4303      	orrs	r3, r0
 8005368:	3401      	adds	r4, #1
 800536a:	9304      	str	r3, [sp, #16]
 800536c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005370:	482c      	ldr	r0, [pc, #176]	; (8005424 <_vfiprintf_r+0x250>)
 8005372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005376:	2206      	movs	r2, #6
 8005378:	f7fa ff2a 	bl	80001d0 <memchr>
 800537c:	2800      	cmp	r0, #0
 800537e:	d03f      	beq.n	8005400 <_vfiprintf_r+0x22c>
 8005380:	4b29      	ldr	r3, [pc, #164]	; (8005428 <_vfiprintf_r+0x254>)
 8005382:	bb1b      	cbnz	r3, 80053cc <_vfiprintf_r+0x1f8>
 8005384:	9b03      	ldr	r3, [sp, #12]
 8005386:	3307      	adds	r3, #7
 8005388:	f023 0307 	bic.w	r3, r3, #7
 800538c:	3308      	adds	r3, #8
 800538e:	9303      	str	r3, [sp, #12]
 8005390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005392:	443b      	add	r3, r7
 8005394:	9309      	str	r3, [sp, #36]	; 0x24
 8005396:	e767      	b.n	8005268 <_vfiprintf_r+0x94>
 8005398:	fb0c 3202 	mla	r2, ip, r2, r3
 800539c:	460c      	mov	r4, r1
 800539e:	2001      	movs	r0, #1
 80053a0:	e7a5      	b.n	80052ee <_vfiprintf_r+0x11a>
 80053a2:	2300      	movs	r3, #0
 80053a4:	3401      	adds	r4, #1
 80053a6:	9305      	str	r3, [sp, #20]
 80053a8:	4619      	mov	r1, r3
 80053aa:	f04f 0c0a 	mov.w	ip, #10
 80053ae:	4620      	mov	r0, r4
 80053b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b4:	3a30      	subs	r2, #48	; 0x30
 80053b6:	2a09      	cmp	r2, #9
 80053b8:	d903      	bls.n	80053c2 <_vfiprintf_r+0x1ee>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0c5      	beq.n	800534a <_vfiprintf_r+0x176>
 80053be:	9105      	str	r1, [sp, #20]
 80053c0:	e7c3      	b.n	800534a <_vfiprintf_r+0x176>
 80053c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053c6:	4604      	mov	r4, r0
 80053c8:	2301      	movs	r3, #1
 80053ca:	e7f0      	b.n	80053ae <_vfiprintf_r+0x1da>
 80053cc:	ab03      	add	r3, sp, #12
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	462a      	mov	r2, r5
 80053d2:	4b16      	ldr	r3, [pc, #88]	; (800542c <_vfiprintf_r+0x258>)
 80053d4:	a904      	add	r1, sp, #16
 80053d6:	4630      	mov	r0, r6
 80053d8:	f3af 8000 	nop.w
 80053dc:	4607      	mov	r7, r0
 80053de:	1c78      	adds	r0, r7, #1
 80053e0:	d1d6      	bne.n	8005390 <_vfiprintf_r+0x1bc>
 80053e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e4:	07d9      	lsls	r1, r3, #31
 80053e6:	d405      	bmi.n	80053f4 <_vfiprintf_r+0x220>
 80053e8:	89ab      	ldrh	r3, [r5, #12]
 80053ea:	059a      	lsls	r2, r3, #22
 80053ec:	d402      	bmi.n	80053f4 <_vfiprintf_r+0x220>
 80053ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f0:	f000 fc45 	bl	8005c7e <__retarget_lock_release_recursive>
 80053f4:	89ab      	ldrh	r3, [r5, #12]
 80053f6:	065b      	lsls	r3, r3, #25
 80053f8:	f53f af12 	bmi.w	8005220 <_vfiprintf_r+0x4c>
 80053fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053fe:	e711      	b.n	8005224 <_vfiprintf_r+0x50>
 8005400:	ab03      	add	r3, sp, #12
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	462a      	mov	r2, r5
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <_vfiprintf_r+0x258>)
 8005408:	a904      	add	r1, sp, #16
 800540a:	4630      	mov	r0, r6
 800540c:	f000 f880 	bl	8005510 <_printf_i>
 8005410:	e7e4      	b.n	80053dc <_vfiprintf_r+0x208>
 8005412:	bf00      	nop
 8005414:	0800615c 	.word	0x0800615c
 8005418:	0800617c 	.word	0x0800617c
 800541c:	0800613c 	.word	0x0800613c
 8005420:	08006106 	.word	0x08006106
 8005424:	08006110 	.word	0x08006110
 8005428:	00000000 	.word	0x00000000
 800542c:	080051af 	.word	0x080051af
 8005430:	0800610c 	.word	0x0800610c

08005434 <_printf_common>:
 8005434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005438:	4616      	mov	r6, r2
 800543a:	4699      	mov	r9, r3
 800543c:	688a      	ldr	r2, [r1, #8]
 800543e:	690b      	ldr	r3, [r1, #16]
 8005440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005444:	4293      	cmp	r3, r2
 8005446:	bfb8      	it	lt
 8005448:	4613      	movlt	r3, r2
 800544a:	6033      	str	r3, [r6, #0]
 800544c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005450:	4607      	mov	r7, r0
 8005452:	460c      	mov	r4, r1
 8005454:	b10a      	cbz	r2, 800545a <_printf_common+0x26>
 8005456:	3301      	adds	r3, #1
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	0699      	lsls	r1, r3, #26
 800545e:	bf42      	ittt	mi
 8005460:	6833      	ldrmi	r3, [r6, #0]
 8005462:	3302      	addmi	r3, #2
 8005464:	6033      	strmi	r3, [r6, #0]
 8005466:	6825      	ldr	r5, [r4, #0]
 8005468:	f015 0506 	ands.w	r5, r5, #6
 800546c:	d106      	bne.n	800547c <_printf_common+0x48>
 800546e:	f104 0a19 	add.w	sl, r4, #25
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	6832      	ldr	r2, [r6, #0]
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	42ab      	cmp	r3, r5
 800547a:	dc26      	bgt.n	80054ca <_printf_common+0x96>
 800547c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005480:	1e13      	subs	r3, r2, #0
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	bf18      	it	ne
 8005486:	2301      	movne	r3, #1
 8005488:	0692      	lsls	r2, r2, #26
 800548a:	d42b      	bmi.n	80054e4 <_printf_common+0xb0>
 800548c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005490:	4649      	mov	r1, r9
 8005492:	4638      	mov	r0, r7
 8005494:	47c0      	blx	r8
 8005496:	3001      	adds	r0, #1
 8005498:	d01e      	beq.n	80054d8 <_printf_common+0xa4>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	68e5      	ldr	r5, [r4, #12]
 800549e:	6832      	ldr	r2, [r6, #0]
 80054a0:	f003 0306 	and.w	r3, r3, #6
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	bf08      	it	eq
 80054a8:	1aad      	subeq	r5, r5, r2
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	6922      	ldr	r2, [r4, #16]
 80054ae:	bf0c      	ite	eq
 80054b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b4:	2500      	movne	r5, #0
 80054b6:	4293      	cmp	r3, r2
 80054b8:	bfc4      	itt	gt
 80054ba:	1a9b      	subgt	r3, r3, r2
 80054bc:	18ed      	addgt	r5, r5, r3
 80054be:	2600      	movs	r6, #0
 80054c0:	341a      	adds	r4, #26
 80054c2:	42b5      	cmp	r5, r6
 80054c4:	d11a      	bne.n	80054fc <_printf_common+0xc8>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e008      	b.n	80054dc <_printf_common+0xa8>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4652      	mov	r2, sl
 80054ce:	4649      	mov	r1, r9
 80054d0:	4638      	mov	r0, r7
 80054d2:	47c0      	blx	r8
 80054d4:	3001      	adds	r0, #1
 80054d6:	d103      	bne.n	80054e0 <_printf_common+0xac>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e0:	3501      	adds	r5, #1
 80054e2:	e7c6      	b.n	8005472 <_printf_common+0x3e>
 80054e4:	18e1      	adds	r1, r4, r3
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	2030      	movs	r0, #48	; 0x30
 80054ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ee:	4422      	add	r2, r4
 80054f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f8:	3302      	adds	r3, #2
 80054fa:	e7c7      	b.n	800548c <_printf_common+0x58>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4622      	mov	r2, r4
 8005500:	4649      	mov	r1, r9
 8005502:	4638      	mov	r0, r7
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d0e6      	beq.n	80054d8 <_printf_common+0xa4>
 800550a:	3601      	adds	r6, #1
 800550c:	e7d9      	b.n	80054c2 <_printf_common+0x8e>
	...

08005510 <_printf_i>:
 8005510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	460c      	mov	r4, r1
 8005516:	4691      	mov	r9, r2
 8005518:	7e27      	ldrb	r7, [r4, #24]
 800551a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800551c:	2f78      	cmp	r7, #120	; 0x78
 800551e:	4680      	mov	r8, r0
 8005520:	469a      	mov	sl, r3
 8005522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005526:	d807      	bhi.n	8005538 <_printf_i+0x28>
 8005528:	2f62      	cmp	r7, #98	; 0x62
 800552a:	d80a      	bhi.n	8005542 <_printf_i+0x32>
 800552c:	2f00      	cmp	r7, #0
 800552e:	f000 80d8 	beq.w	80056e2 <_printf_i+0x1d2>
 8005532:	2f58      	cmp	r7, #88	; 0x58
 8005534:	f000 80a3 	beq.w	800567e <_printf_i+0x16e>
 8005538:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800553c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005540:	e03a      	b.n	80055b8 <_printf_i+0xa8>
 8005542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005546:	2b15      	cmp	r3, #21
 8005548:	d8f6      	bhi.n	8005538 <_printf_i+0x28>
 800554a:	a001      	add	r0, pc, #4	; (adr r0, 8005550 <_printf_i+0x40>)
 800554c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005550:	080055a9 	.word	0x080055a9
 8005554:	080055bd 	.word	0x080055bd
 8005558:	08005539 	.word	0x08005539
 800555c:	08005539 	.word	0x08005539
 8005560:	08005539 	.word	0x08005539
 8005564:	08005539 	.word	0x08005539
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005539 	.word	0x08005539
 8005570:	08005539 	.word	0x08005539
 8005574:	08005539 	.word	0x08005539
 8005578:	08005539 	.word	0x08005539
 800557c:	080056c9 	.word	0x080056c9
 8005580:	080055ed 	.word	0x080055ed
 8005584:	080056ab 	.word	0x080056ab
 8005588:	08005539 	.word	0x08005539
 800558c:	08005539 	.word	0x08005539
 8005590:	080056eb 	.word	0x080056eb
 8005594:	08005539 	.word	0x08005539
 8005598:	080055ed 	.word	0x080055ed
 800559c:	08005539 	.word	0x08005539
 80055a0:	08005539 	.word	0x08005539
 80055a4:	080056b3 	.word	0x080056b3
 80055a8:	680b      	ldr	r3, [r1, #0]
 80055aa:	1d1a      	adds	r2, r3, #4
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	600a      	str	r2, [r1, #0]
 80055b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0a3      	b.n	8005704 <_printf_i+0x1f4>
 80055bc:	6825      	ldr	r5, [r4, #0]
 80055be:	6808      	ldr	r0, [r1, #0]
 80055c0:	062e      	lsls	r6, r5, #24
 80055c2:	f100 0304 	add.w	r3, r0, #4
 80055c6:	d50a      	bpl.n	80055de <_printf_i+0xce>
 80055c8:	6805      	ldr	r5, [r0, #0]
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	da03      	bge.n	80055d8 <_printf_i+0xc8>
 80055d0:	232d      	movs	r3, #45	; 0x2d
 80055d2:	426d      	negs	r5, r5
 80055d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d8:	485e      	ldr	r0, [pc, #376]	; (8005754 <_printf_i+0x244>)
 80055da:	230a      	movs	r3, #10
 80055dc:	e019      	b.n	8005612 <_printf_i+0x102>
 80055de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055e2:	6805      	ldr	r5, [r0, #0]
 80055e4:	600b      	str	r3, [r1, #0]
 80055e6:	bf18      	it	ne
 80055e8:	b22d      	sxthne	r5, r5
 80055ea:	e7ef      	b.n	80055cc <_printf_i+0xbc>
 80055ec:	680b      	ldr	r3, [r1, #0]
 80055ee:	6825      	ldr	r5, [r4, #0]
 80055f0:	1d18      	adds	r0, r3, #4
 80055f2:	6008      	str	r0, [r1, #0]
 80055f4:	0628      	lsls	r0, r5, #24
 80055f6:	d501      	bpl.n	80055fc <_printf_i+0xec>
 80055f8:	681d      	ldr	r5, [r3, #0]
 80055fa:	e002      	b.n	8005602 <_printf_i+0xf2>
 80055fc:	0669      	lsls	r1, r5, #25
 80055fe:	d5fb      	bpl.n	80055f8 <_printf_i+0xe8>
 8005600:	881d      	ldrh	r5, [r3, #0]
 8005602:	4854      	ldr	r0, [pc, #336]	; (8005754 <_printf_i+0x244>)
 8005604:	2f6f      	cmp	r7, #111	; 0x6f
 8005606:	bf0c      	ite	eq
 8005608:	2308      	moveq	r3, #8
 800560a:	230a      	movne	r3, #10
 800560c:	2100      	movs	r1, #0
 800560e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005612:	6866      	ldr	r6, [r4, #4]
 8005614:	60a6      	str	r6, [r4, #8]
 8005616:	2e00      	cmp	r6, #0
 8005618:	bfa2      	ittt	ge
 800561a:	6821      	ldrge	r1, [r4, #0]
 800561c:	f021 0104 	bicge.w	r1, r1, #4
 8005620:	6021      	strge	r1, [r4, #0]
 8005622:	b90d      	cbnz	r5, 8005628 <_printf_i+0x118>
 8005624:	2e00      	cmp	r6, #0
 8005626:	d04d      	beq.n	80056c4 <_printf_i+0x1b4>
 8005628:	4616      	mov	r6, r2
 800562a:	fbb5 f1f3 	udiv	r1, r5, r3
 800562e:	fb03 5711 	mls	r7, r3, r1, r5
 8005632:	5dc7      	ldrb	r7, [r0, r7]
 8005634:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005638:	462f      	mov	r7, r5
 800563a:	42bb      	cmp	r3, r7
 800563c:	460d      	mov	r5, r1
 800563e:	d9f4      	bls.n	800562a <_printf_i+0x11a>
 8005640:	2b08      	cmp	r3, #8
 8005642:	d10b      	bne.n	800565c <_printf_i+0x14c>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	07df      	lsls	r7, r3, #31
 8005648:	d508      	bpl.n	800565c <_printf_i+0x14c>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	6861      	ldr	r1, [r4, #4]
 800564e:	4299      	cmp	r1, r3
 8005650:	bfde      	ittt	le
 8005652:	2330      	movle	r3, #48	; 0x30
 8005654:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005658:	f106 36ff 	addle.w	r6, r6, #4294967295
 800565c:	1b92      	subs	r2, r2, r6
 800565e:	6122      	str	r2, [r4, #16]
 8005660:	f8cd a000 	str.w	sl, [sp]
 8005664:	464b      	mov	r3, r9
 8005666:	aa03      	add	r2, sp, #12
 8005668:	4621      	mov	r1, r4
 800566a:	4640      	mov	r0, r8
 800566c:	f7ff fee2 	bl	8005434 <_printf_common>
 8005670:	3001      	adds	r0, #1
 8005672:	d14c      	bne.n	800570e <_printf_i+0x1fe>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	b004      	add	sp, #16
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	4835      	ldr	r0, [pc, #212]	; (8005754 <_printf_i+0x244>)
 8005680:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	680e      	ldr	r6, [r1, #0]
 8005688:	061f      	lsls	r7, r3, #24
 800568a:	f856 5b04 	ldr.w	r5, [r6], #4
 800568e:	600e      	str	r6, [r1, #0]
 8005690:	d514      	bpl.n	80056bc <_printf_i+0x1ac>
 8005692:	07d9      	lsls	r1, r3, #31
 8005694:	bf44      	itt	mi
 8005696:	f043 0320 	orrmi.w	r3, r3, #32
 800569a:	6023      	strmi	r3, [r4, #0]
 800569c:	b91d      	cbnz	r5, 80056a6 <_printf_i+0x196>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f023 0320 	bic.w	r3, r3, #32
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	2310      	movs	r3, #16
 80056a8:	e7b0      	b.n	800560c <_printf_i+0xfc>
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	f043 0320 	orr.w	r3, r3, #32
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	2378      	movs	r3, #120	; 0x78
 80056b4:	4828      	ldr	r0, [pc, #160]	; (8005758 <_printf_i+0x248>)
 80056b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ba:	e7e3      	b.n	8005684 <_printf_i+0x174>
 80056bc:	065e      	lsls	r6, r3, #25
 80056be:	bf48      	it	mi
 80056c0:	b2ad      	uxthmi	r5, r5
 80056c2:	e7e6      	b.n	8005692 <_printf_i+0x182>
 80056c4:	4616      	mov	r6, r2
 80056c6:	e7bb      	b.n	8005640 <_printf_i+0x130>
 80056c8:	680b      	ldr	r3, [r1, #0]
 80056ca:	6826      	ldr	r6, [r4, #0]
 80056cc:	6960      	ldr	r0, [r4, #20]
 80056ce:	1d1d      	adds	r5, r3, #4
 80056d0:	600d      	str	r5, [r1, #0]
 80056d2:	0635      	lsls	r5, r6, #24
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0x1cc>
 80056d8:	6018      	str	r0, [r3, #0]
 80056da:	e002      	b.n	80056e2 <_printf_i+0x1d2>
 80056dc:	0671      	lsls	r1, r6, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0x1c8>
 80056e0:	8018      	strh	r0, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	4616      	mov	r6, r2
 80056e8:	e7ba      	b.n	8005660 <_printf_i+0x150>
 80056ea:	680b      	ldr	r3, [r1, #0]
 80056ec:	1d1a      	adds	r2, r3, #4
 80056ee:	600a      	str	r2, [r1, #0]
 80056f0:	681e      	ldr	r6, [r3, #0]
 80056f2:	6862      	ldr	r2, [r4, #4]
 80056f4:	2100      	movs	r1, #0
 80056f6:	4630      	mov	r0, r6
 80056f8:	f7fa fd6a 	bl	80001d0 <memchr>
 80056fc:	b108      	cbz	r0, 8005702 <_printf_i+0x1f2>
 80056fe:	1b80      	subs	r0, r0, r6
 8005700:	6060      	str	r0, [r4, #4]
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	2300      	movs	r3, #0
 8005708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570c:	e7a8      	b.n	8005660 <_printf_i+0x150>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	4632      	mov	r2, r6
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d0ab      	beq.n	8005674 <_printf_i+0x164>
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	079b      	lsls	r3, r3, #30
 8005720:	d413      	bmi.n	800574a <_printf_i+0x23a>
 8005722:	68e0      	ldr	r0, [r4, #12]
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	4298      	cmp	r0, r3
 8005728:	bfb8      	it	lt
 800572a:	4618      	movlt	r0, r3
 800572c:	e7a4      	b.n	8005678 <_printf_i+0x168>
 800572e:	2301      	movs	r3, #1
 8005730:	4632      	mov	r2, r6
 8005732:	4649      	mov	r1, r9
 8005734:	4640      	mov	r0, r8
 8005736:	47d0      	blx	sl
 8005738:	3001      	adds	r0, #1
 800573a:	d09b      	beq.n	8005674 <_printf_i+0x164>
 800573c:	3501      	adds	r5, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	9903      	ldr	r1, [sp, #12]
 8005742:	1a5b      	subs	r3, r3, r1
 8005744:	42ab      	cmp	r3, r5
 8005746:	dcf2      	bgt.n	800572e <_printf_i+0x21e>
 8005748:	e7eb      	b.n	8005722 <_printf_i+0x212>
 800574a:	2500      	movs	r5, #0
 800574c:	f104 0619 	add.w	r6, r4, #25
 8005750:	e7f5      	b.n	800573e <_printf_i+0x22e>
 8005752:	bf00      	nop
 8005754:	08006117 	.word	0x08006117
 8005758:	08006128 	.word	0x08006128

0800575c <_sbrk_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d06      	ldr	r5, [pc, #24]	; (8005778 <_sbrk_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4604      	mov	r4, r0
 8005764:	4608      	mov	r0, r1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7fb fbda 	bl	8000f20 <_sbrk>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_sbrk_r+0x1a>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_sbrk_r+0x1a>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20000530 	.word	0x20000530

0800577c <__swbuf_r>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	460e      	mov	r6, r1
 8005780:	4614      	mov	r4, r2
 8005782:	4605      	mov	r5, r0
 8005784:	b118      	cbz	r0, 800578e <__swbuf_r+0x12>
 8005786:	6983      	ldr	r3, [r0, #24]
 8005788:	b90b      	cbnz	r3, 800578e <__swbuf_r+0x12>
 800578a:	f000 f9d9 	bl	8005b40 <__sinit>
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <__swbuf_r+0x98>)
 8005790:	429c      	cmp	r4, r3
 8005792:	d12b      	bne.n	80057ec <__swbuf_r+0x70>
 8005794:	686c      	ldr	r4, [r5, #4]
 8005796:	69a3      	ldr	r3, [r4, #24]
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	071a      	lsls	r2, r3, #28
 800579e:	d52f      	bpl.n	8005800 <__swbuf_r+0x84>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b36b      	cbz	r3, 8005800 <__swbuf_r+0x84>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	6820      	ldr	r0, [r4, #0]
 80057a8:	1ac0      	subs	r0, r0, r3
 80057aa:	6963      	ldr	r3, [r4, #20]
 80057ac:	b2f6      	uxtb	r6, r6
 80057ae:	4283      	cmp	r3, r0
 80057b0:	4637      	mov	r7, r6
 80057b2:	dc04      	bgt.n	80057be <__swbuf_r+0x42>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 f92e 	bl	8005a18 <_fflush_r>
 80057bc:	bb30      	cbnz	r0, 800580c <__swbuf_r+0x90>
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	701e      	strb	r6, [r3, #0]
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	3001      	adds	r0, #1
 80057d0:	4283      	cmp	r3, r0
 80057d2:	d004      	beq.n	80057de <__swbuf_r+0x62>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	07db      	lsls	r3, r3, #31
 80057d8:	d506      	bpl.n	80057e8 <__swbuf_r+0x6c>
 80057da:	2e0a      	cmp	r6, #10
 80057dc:	d104      	bne.n	80057e8 <__swbuf_r+0x6c>
 80057de:	4621      	mov	r1, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 f919 	bl	8005a18 <_fflush_r>
 80057e6:	b988      	cbnz	r0, 800580c <__swbuf_r+0x90>
 80057e8:	4638      	mov	r0, r7
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <__swbuf_r+0x9c>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <__swbuf_r+0x7a>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7cf      	b.n	8005796 <__swbuf_r+0x1a>
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <__swbuf_r+0xa0>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	bf08      	it	eq
 80057fc:	68ec      	ldreq	r4, [r5, #12]
 80057fe:	e7ca      	b.n	8005796 <__swbuf_r+0x1a>
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f80c 	bl	8005820 <__swsetup_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0cb      	beq.n	80057a4 <__swbuf_r+0x28>
 800580c:	f04f 37ff 	mov.w	r7, #4294967295
 8005810:	e7ea      	b.n	80057e8 <__swbuf_r+0x6c>
 8005812:	bf00      	nop
 8005814:	0800615c 	.word	0x0800615c
 8005818:	0800617c 	.word	0x0800617c
 800581c:	0800613c 	.word	0x0800613c

08005820 <__swsetup_r>:
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <__swsetup_r+0xcc>)
 8005822:	b570      	push	{r4, r5, r6, lr}
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	4606      	mov	r6, r0
 8005828:	460c      	mov	r4, r1
 800582a:	b125      	cbz	r5, 8005836 <__swsetup_r+0x16>
 800582c:	69ab      	ldr	r3, [r5, #24]
 800582e:	b913      	cbnz	r3, 8005836 <__swsetup_r+0x16>
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f985 	bl	8005b40 <__sinit>
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <__swsetup_r+0xd0>)
 8005838:	429c      	cmp	r4, r3
 800583a:	d10f      	bne.n	800585c <__swsetup_r+0x3c>
 800583c:	686c      	ldr	r4, [r5, #4]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005844:	0719      	lsls	r1, r3, #28
 8005846:	d42c      	bmi.n	80058a2 <__swsetup_r+0x82>
 8005848:	06dd      	lsls	r5, r3, #27
 800584a:	d411      	bmi.n	8005870 <__swsetup_r+0x50>
 800584c:	2309      	movs	r3, #9
 800584e:	6033      	str	r3, [r6, #0]
 8005850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	e03e      	b.n	80058da <__swsetup_r+0xba>
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <__swsetup_r+0xd4>)
 800585e:	429c      	cmp	r4, r3
 8005860:	d101      	bne.n	8005866 <__swsetup_r+0x46>
 8005862:	68ac      	ldr	r4, [r5, #8]
 8005864:	e7eb      	b.n	800583e <__swsetup_r+0x1e>
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <__swsetup_r+0xd8>)
 8005868:	429c      	cmp	r4, r3
 800586a:	bf08      	it	eq
 800586c:	68ec      	ldreq	r4, [r5, #12]
 800586e:	e7e6      	b.n	800583e <__swsetup_r+0x1e>
 8005870:	0758      	lsls	r0, r3, #29
 8005872:	d512      	bpl.n	800589a <__swsetup_r+0x7a>
 8005874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005876:	b141      	cbz	r1, 800588a <__swsetup_r+0x6a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__swsetup_r+0x66>
 8005880:	4630      	mov	r0, r6
 8005882:	f7ff fa77 	bl	8004d74 <_free_r>
 8005886:	2300      	movs	r3, #0
 8005888:	6363      	str	r3, [r4, #52]	; 0x34
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	2300      	movs	r3, #0
 8005894:	6063      	str	r3, [r4, #4]
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f043 0308 	orr.w	r3, r3, #8
 80058a0:	81a3      	strh	r3, [r4, #12]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	b94b      	cbnz	r3, 80058ba <__swsetup_r+0x9a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b0:	d003      	beq.n	80058ba <__swsetup_r+0x9a>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4630      	mov	r0, r6
 80058b6:	f000 fa07 	bl	8005cc8 <__smakebuf_r>
 80058ba:	89a0      	ldrh	r0, [r4, #12]
 80058bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c0:	f010 0301 	ands.w	r3, r0, #1
 80058c4:	d00a      	beq.n	80058dc <__swsetup_r+0xbc>
 80058c6:	2300      	movs	r3, #0
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6963      	ldr	r3, [r4, #20]
 80058cc:	425b      	negs	r3, r3
 80058ce:	61a3      	str	r3, [r4, #24]
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b943      	cbnz	r3, 80058e6 <__swsetup_r+0xc6>
 80058d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058d8:	d1ba      	bne.n	8005850 <__swsetup_r+0x30>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	0781      	lsls	r1, r0, #30
 80058de:	bf58      	it	pl
 80058e0:	6963      	ldrpl	r3, [r4, #20]
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	e7f4      	b.n	80058d0 <__swsetup_r+0xb0>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e7f7      	b.n	80058da <__swsetup_r+0xba>
 80058ea:	bf00      	nop
 80058ec:	20000018 	.word	0x20000018
 80058f0:	0800615c 	.word	0x0800615c
 80058f4:	0800617c 	.word	0x0800617c
 80058f8:	0800613c 	.word	0x0800613c

080058fc <abort>:
 80058fc:	b508      	push	{r3, lr}
 80058fe:	2006      	movs	r0, #6
 8005900:	f000 faa4 	bl	8005e4c <raise>
 8005904:	2001      	movs	r0, #1
 8005906:	f7fb fa93 	bl	8000e30 <_exit>
	...

0800590c <__sflush_r>:
 800590c:	898a      	ldrh	r2, [r1, #12]
 800590e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	0710      	lsls	r0, r2, #28
 8005916:	460c      	mov	r4, r1
 8005918:	d458      	bmi.n	80059cc <__sflush_r+0xc0>
 800591a:	684b      	ldr	r3, [r1, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	dc05      	bgt.n	800592c <__sflush_r+0x20>
 8005920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	dc02      	bgt.n	800592c <__sflush_r+0x20>
 8005926:	2000      	movs	r0, #0
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800592e:	2e00      	cmp	r6, #0
 8005930:	d0f9      	beq.n	8005926 <__sflush_r+0x1a>
 8005932:	2300      	movs	r3, #0
 8005934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005938:	682f      	ldr	r7, [r5, #0]
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	d032      	beq.n	80059a4 <__sflush_r+0x98>
 800593e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	075a      	lsls	r2, r3, #29
 8005944:	d505      	bpl.n	8005952 <__sflush_r+0x46>
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	1ac0      	subs	r0, r0, r3
 800594a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800594c:	b10b      	cbz	r3, 8005952 <__sflush_r+0x46>
 800594e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005950:	1ac0      	subs	r0, r0, r3
 8005952:	2300      	movs	r3, #0
 8005954:	4602      	mov	r2, r0
 8005956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005958:	6a21      	ldr	r1, [r4, #32]
 800595a:	4628      	mov	r0, r5
 800595c:	47b0      	blx	r6
 800595e:	1c43      	adds	r3, r0, #1
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	d106      	bne.n	8005972 <__sflush_r+0x66>
 8005964:	6829      	ldr	r1, [r5, #0]
 8005966:	291d      	cmp	r1, #29
 8005968:	d82c      	bhi.n	80059c4 <__sflush_r+0xb8>
 800596a:	4a2a      	ldr	r2, [pc, #168]	; (8005a14 <__sflush_r+0x108>)
 800596c:	40ca      	lsrs	r2, r1
 800596e:	07d6      	lsls	r6, r2, #31
 8005970:	d528      	bpl.n	80059c4 <__sflush_r+0xb8>
 8005972:	2200      	movs	r2, #0
 8005974:	6062      	str	r2, [r4, #4]
 8005976:	04d9      	lsls	r1, r3, #19
 8005978:	6922      	ldr	r2, [r4, #16]
 800597a:	6022      	str	r2, [r4, #0]
 800597c:	d504      	bpl.n	8005988 <__sflush_r+0x7c>
 800597e:	1c42      	adds	r2, r0, #1
 8005980:	d101      	bne.n	8005986 <__sflush_r+0x7a>
 8005982:	682b      	ldr	r3, [r5, #0]
 8005984:	b903      	cbnz	r3, 8005988 <__sflush_r+0x7c>
 8005986:	6560      	str	r0, [r4, #84]	; 0x54
 8005988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598a:	602f      	str	r7, [r5, #0]
 800598c:	2900      	cmp	r1, #0
 800598e:	d0ca      	beq.n	8005926 <__sflush_r+0x1a>
 8005990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005994:	4299      	cmp	r1, r3
 8005996:	d002      	beq.n	800599e <__sflush_r+0x92>
 8005998:	4628      	mov	r0, r5
 800599a:	f7ff f9eb 	bl	8004d74 <_free_r>
 800599e:	2000      	movs	r0, #0
 80059a0:	6360      	str	r0, [r4, #52]	; 0x34
 80059a2:	e7c1      	b.n	8005928 <__sflush_r+0x1c>
 80059a4:	6a21      	ldr	r1, [r4, #32]
 80059a6:	2301      	movs	r3, #1
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b0      	blx	r6
 80059ac:	1c41      	adds	r1, r0, #1
 80059ae:	d1c7      	bne.n	8005940 <__sflush_r+0x34>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0c4      	beq.n	8005940 <__sflush_r+0x34>
 80059b6:	2b1d      	cmp	r3, #29
 80059b8:	d001      	beq.n	80059be <__sflush_r+0xb2>
 80059ba:	2b16      	cmp	r3, #22
 80059bc:	d101      	bne.n	80059c2 <__sflush_r+0xb6>
 80059be:	602f      	str	r7, [r5, #0]
 80059c0:	e7b1      	b.n	8005926 <__sflush_r+0x1a>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	e7ad      	b.n	8005928 <__sflush_r+0x1c>
 80059cc:	690f      	ldr	r7, [r1, #16]
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	d0a9      	beq.n	8005926 <__sflush_r+0x1a>
 80059d2:	0793      	lsls	r3, r2, #30
 80059d4:	680e      	ldr	r6, [r1, #0]
 80059d6:	bf08      	it	eq
 80059d8:	694b      	ldreq	r3, [r1, #20]
 80059da:	600f      	str	r7, [r1, #0]
 80059dc:	bf18      	it	ne
 80059de:	2300      	movne	r3, #0
 80059e0:	eba6 0807 	sub.w	r8, r6, r7
 80059e4:	608b      	str	r3, [r1, #8]
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	dd9c      	ble.n	8005926 <__sflush_r+0x1a>
 80059ec:	6a21      	ldr	r1, [r4, #32]
 80059ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059f0:	4643      	mov	r3, r8
 80059f2:	463a      	mov	r2, r7
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b0      	blx	r6
 80059f8:	2800      	cmp	r0, #0
 80059fa:	dc06      	bgt.n	8005a0a <__sflush_r+0xfe>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	e78e      	b.n	8005928 <__sflush_r+0x1c>
 8005a0a:	4407      	add	r7, r0
 8005a0c:	eba8 0800 	sub.w	r8, r8, r0
 8005a10:	e7e9      	b.n	80059e6 <__sflush_r+0xda>
 8005a12:	bf00      	nop
 8005a14:	20400001 	.word	0x20400001

08005a18 <_fflush_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	690b      	ldr	r3, [r1, #16]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b913      	cbnz	r3, 8005a28 <_fflush_r+0x10>
 8005a22:	2500      	movs	r5, #0
 8005a24:	4628      	mov	r0, r5
 8005a26:	bd38      	pop	{r3, r4, r5, pc}
 8005a28:	b118      	cbz	r0, 8005a32 <_fflush_r+0x1a>
 8005a2a:	6983      	ldr	r3, [r0, #24]
 8005a2c:	b90b      	cbnz	r3, 8005a32 <_fflush_r+0x1a>
 8005a2e:	f000 f887 	bl	8005b40 <__sinit>
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <_fflush_r+0x6c>)
 8005a34:	429c      	cmp	r4, r3
 8005a36:	d11b      	bne.n	8005a70 <_fflush_r+0x58>
 8005a38:	686c      	ldr	r4, [r5, #4]
 8005a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d0ef      	beq.n	8005a22 <_fflush_r+0xa>
 8005a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a44:	07d0      	lsls	r0, r2, #31
 8005a46:	d404      	bmi.n	8005a52 <_fflush_r+0x3a>
 8005a48:	0599      	lsls	r1, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_fflush_r+0x3a>
 8005a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a4e:	f000 f915 	bl	8005c7c <__retarget_lock_acquire_recursive>
 8005a52:	4628      	mov	r0, r5
 8005a54:	4621      	mov	r1, r4
 8005a56:	f7ff ff59 	bl	800590c <__sflush_r>
 8005a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a5c:	07da      	lsls	r2, r3, #31
 8005a5e:	4605      	mov	r5, r0
 8005a60:	d4e0      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	059b      	lsls	r3, r3, #22
 8005a66:	d4dd      	bmi.n	8005a24 <_fflush_r+0xc>
 8005a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6a:	f000 f908 	bl	8005c7e <__retarget_lock_release_recursive>
 8005a6e:	e7d9      	b.n	8005a24 <_fflush_r+0xc>
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <_fflush_r+0x70>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d101      	bne.n	8005a7a <_fflush_r+0x62>
 8005a76:	68ac      	ldr	r4, [r5, #8]
 8005a78:	e7df      	b.n	8005a3a <_fflush_r+0x22>
 8005a7a:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <_fflush_r+0x74>)
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	bf08      	it	eq
 8005a80:	68ec      	ldreq	r4, [r5, #12]
 8005a82:	e7da      	b.n	8005a3a <_fflush_r+0x22>
 8005a84:	0800615c 	.word	0x0800615c
 8005a88:	0800617c 	.word	0x0800617c
 8005a8c:	0800613c 	.word	0x0800613c

08005a90 <std>:
 8005a90:	2300      	movs	r3, #0
 8005a92:	b510      	push	{r4, lr}
 8005a94:	4604      	mov	r4, r0
 8005a96:	e9c0 3300 	strd	r3, r3, [r0]
 8005a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a9e:	6083      	str	r3, [r0, #8]
 8005aa0:	8181      	strh	r1, [r0, #12]
 8005aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8005aa4:	81c2      	strh	r2, [r0, #14]
 8005aa6:	6183      	str	r3, [r0, #24]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	2208      	movs	r2, #8
 8005aac:	305c      	adds	r0, #92	; 0x5c
 8005aae:	f7ff f8d3 	bl	8004c58 <memset>
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <std+0x38>)
 8005ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <std+0x3c>)
 8005ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <std+0x40>)
 8005abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <std+0x44>)
 8005ac0:	6224      	str	r4, [r4, #32]
 8005ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08005e85 	.word	0x08005e85
 8005acc:	08005ea7 	.word	0x08005ea7
 8005ad0:	08005edf 	.word	0x08005edf
 8005ad4:	08005f03 	.word	0x08005f03

08005ad8 <_cleanup_r>:
 8005ad8:	4901      	ldr	r1, [pc, #4]	; (8005ae0 <_cleanup_r+0x8>)
 8005ada:	f000 b8af 	b.w	8005c3c <_fwalk_reent>
 8005ade:	bf00      	nop
 8005ae0:	08005a19 	.word	0x08005a19

08005ae4 <__sfmoreglue>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	1e4a      	subs	r2, r1, #1
 8005ae8:	2568      	movs	r5, #104	; 0x68
 8005aea:	4355      	muls	r5, r2
 8005aec:	460e      	mov	r6, r1
 8005aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005af2:	f7ff f98f 	bl	8004e14 <_malloc_r>
 8005af6:	4604      	mov	r4, r0
 8005af8:	b140      	cbz	r0, 8005b0c <__sfmoreglue+0x28>
 8005afa:	2100      	movs	r1, #0
 8005afc:	e9c0 1600 	strd	r1, r6, [r0]
 8005b00:	300c      	adds	r0, #12
 8005b02:	60a0      	str	r0, [r4, #8]
 8005b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b08:	f7ff f8a6 	bl	8004c58 <memset>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}

08005b10 <__sfp_lock_acquire>:
 8005b10:	4801      	ldr	r0, [pc, #4]	; (8005b18 <__sfp_lock_acquire+0x8>)
 8005b12:	f000 b8b3 	b.w	8005c7c <__retarget_lock_acquire_recursive>
 8005b16:	bf00      	nop
 8005b18:	2000052c 	.word	0x2000052c

08005b1c <__sfp_lock_release>:
 8005b1c:	4801      	ldr	r0, [pc, #4]	; (8005b24 <__sfp_lock_release+0x8>)
 8005b1e:	f000 b8ae 	b.w	8005c7e <__retarget_lock_release_recursive>
 8005b22:	bf00      	nop
 8005b24:	2000052c 	.word	0x2000052c

08005b28 <__sinit_lock_acquire>:
 8005b28:	4801      	ldr	r0, [pc, #4]	; (8005b30 <__sinit_lock_acquire+0x8>)
 8005b2a:	f000 b8a7 	b.w	8005c7c <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	20000527 	.word	0x20000527

08005b34 <__sinit_lock_release>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__sinit_lock_release+0x8>)
 8005b36:	f000 b8a2 	b.w	8005c7e <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20000527 	.word	0x20000527

08005b40 <__sinit>:
 8005b40:	b510      	push	{r4, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	f7ff fff0 	bl	8005b28 <__sinit_lock_acquire>
 8005b48:	69a3      	ldr	r3, [r4, #24]
 8005b4a:	b11b      	cbz	r3, 8005b54 <__sinit+0x14>
 8005b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b50:	f7ff bff0 	b.w	8005b34 <__sinit_lock_release>
 8005b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b58:	6523      	str	r3, [r4, #80]	; 0x50
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <__sinit+0x68>)
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <__sinit+0x6c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b62:	42a3      	cmp	r3, r4
 8005b64:	bf04      	itt	eq
 8005b66:	2301      	moveq	r3, #1
 8005b68:	61a3      	streq	r3, [r4, #24]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 f820 	bl	8005bb0 <__sfp>
 8005b70:	6060      	str	r0, [r4, #4]
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 f81c 	bl	8005bb0 <__sfp>
 8005b78:	60a0      	str	r0, [r4, #8]
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	f000 f818 	bl	8005bb0 <__sfp>
 8005b80:	2200      	movs	r2, #0
 8005b82:	60e0      	str	r0, [r4, #12]
 8005b84:	2104      	movs	r1, #4
 8005b86:	6860      	ldr	r0, [r4, #4]
 8005b88:	f7ff ff82 	bl	8005a90 <std>
 8005b8c:	68a0      	ldr	r0, [r4, #8]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	2109      	movs	r1, #9
 8005b92:	f7ff ff7d 	bl	8005a90 <std>
 8005b96:	68e0      	ldr	r0, [r4, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	2112      	movs	r1, #18
 8005b9c:	f7ff ff78 	bl	8005a90 <std>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	61a3      	str	r3, [r4, #24]
 8005ba4:	e7d2      	b.n	8005b4c <__sinit+0xc>
 8005ba6:	bf00      	nop
 8005ba8:	08006050 	.word	0x08006050
 8005bac:	08005ad9 	.word	0x08005ad9

08005bb0 <__sfp>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	f7ff ffac 	bl	8005b10 <__sfp_lock_acquire>
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <__sfp+0x84>)
 8005bba:	681e      	ldr	r6, [r3, #0]
 8005bbc:	69b3      	ldr	r3, [r6, #24]
 8005bbe:	b913      	cbnz	r3, 8005bc6 <__sfp+0x16>
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ffbd 	bl	8005b40 <__sinit>
 8005bc6:	3648      	adds	r6, #72	; 0x48
 8005bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	d503      	bpl.n	8005bd8 <__sfp+0x28>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	b30b      	cbz	r3, 8005c18 <__sfp+0x68>
 8005bd4:	6836      	ldr	r6, [r6, #0]
 8005bd6:	e7f7      	b.n	8005bc8 <__sfp+0x18>
 8005bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bdc:	b9d5      	cbnz	r5, 8005c14 <__sfp+0x64>
 8005bde:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <__sfp+0x88>)
 8005be0:	60e3      	str	r3, [r4, #12]
 8005be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005be6:	6665      	str	r5, [r4, #100]	; 0x64
 8005be8:	f000 f847 	bl	8005c7a <__retarget_lock_init_recursive>
 8005bec:	f7ff ff96 	bl	8005b1c <__sfp_lock_release>
 8005bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bf8:	6025      	str	r5, [r4, #0]
 8005bfa:	61a5      	str	r5, [r4, #24]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	4629      	mov	r1, r5
 8005c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c04:	f7ff f828 	bl	8004c58 <memset>
 8005c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c10:	4620      	mov	r0, r4
 8005c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c14:	3468      	adds	r4, #104	; 0x68
 8005c16:	e7d9      	b.n	8005bcc <__sfp+0x1c>
 8005c18:	2104      	movs	r1, #4
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	f7ff ff62 	bl	8005ae4 <__sfmoreglue>
 8005c20:	4604      	mov	r4, r0
 8005c22:	6030      	str	r0, [r6, #0]
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d1d5      	bne.n	8005bd4 <__sfp+0x24>
 8005c28:	f7ff ff78 	bl	8005b1c <__sfp_lock_release>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	e7ee      	b.n	8005c10 <__sfp+0x60>
 8005c32:	bf00      	nop
 8005c34:	08006050 	.word	0x08006050
 8005c38:	ffff0001 	.word	0xffff0001

08005c3c <_fwalk_reent>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	4606      	mov	r6, r0
 8005c42:	4688      	mov	r8, r1
 8005c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c48:	2700      	movs	r7, #0
 8005c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8005c52:	d505      	bpl.n	8005c60 <_fwalk_reent+0x24>
 8005c54:	6824      	ldr	r4, [r4, #0]
 8005c56:	2c00      	cmp	r4, #0
 8005c58:	d1f7      	bne.n	8005c4a <_fwalk_reent+0xe>
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c60:	89ab      	ldrh	r3, [r5, #12]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d907      	bls.n	8005c76 <_fwalk_reent+0x3a>
 8005c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	d003      	beq.n	8005c76 <_fwalk_reent+0x3a>
 8005c6e:	4629      	mov	r1, r5
 8005c70:	4630      	mov	r0, r6
 8005c72:	47c0      	blx	r8
 8005c74:	4307      	orrs	r7, r0
 8005c76:	3568      	adds	r5, #104	; 0x68
 8005c78:	e7e9      	b.n	8005c4e <_fwalk_reent+0x12>

08005c7a <__retarget_lock_init_recursive>:
 8005c7a:	4770      	bx	lr

08005c7c <__retarget_lock_acquire_recursive>:
 8005c7c:	4770      	bx	lr

08005c7e <__retarget_lock_release_recursive>:
 8005c7e:	4770      	bx	lr

08005c80 <__swhatbuf_r>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	460e      	mov	r6, r1
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	b096      	sub	sp, #88	; 0x58
 8005c8c:	4614      	mov	r4, r2
 8005c8e:	461d      	mov	r5, r3
 8005c90:	da07      	bge.n	8005ca2 <__swhatbuf_r+0x22>
 8005c92:	2300      	movs	r3, #0
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	89b3      	ldrh	r3, [r6, #12]
 8005c98:	061a      	lsls	r2, r3, #24
 8005c9a:	d410      	bmi.n	8005cbe <__swhatbuf_r+0x3e>
 8005c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca0:	e00e      	b.n	8005cc0 <__swhatbuf_r+0x40>
 8005ca2:	466a      	mov	r2, sp
 8005ca4:	f000 f954 	bl	8005f50 <_fstat_r>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	dbf2      	blt.n	8005c92 <__swhatbuf_r+0x12>
 8005cac:	9a01      	ldr	r2, [sp, #4]
 8005cae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cb6:	425a      	negs	r2, r3
 8005cb8:	415a      	adcs	r2, r3
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	e7ee      	b.n	8005c9c <__swhatbuf_r+0x1c>
 8005cbe:	2340      	movs	r3, #64	; 0x40
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	b016      	add	sp, #88	; 0x58
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}

08005cc8 <__smakebuf_r>:
 8005cc8:	898b      	ldrh	r3, [r1, #12]
 8005cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ccc:	079d      	lsls	r5, r3, #30
 8005cce:	4606      	mov	r6, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	d507      	bpl.n	8005ce4 <__smakebuf_r+0x1c>
 8005cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6163      	str	r3, [r4, #20]
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	ab01      	add	r3, sp, #4
 8005ce6:	466a      	mov	r2, sp
 8005ce8:	f7ff ffca 	bl	8005c80 <__swhatbuf_r>
 8005cec:	9900      	ldr	r1, [sp, #0]
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7ff f88f 	bl	8004e14 <_malloc_r>
 8005cf6:	b948      	cbnz	r0, 8005d0c <__smakebuf_r+0x44>
 8005cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfc:	059a      	lsls	r2, r3, #22
 8005cfe:	d4ef      	bmi.n	8005ce0 <__smakebuf_r+0x18>
 8005d00:	f023 0303 	bic.w	r3, r3, #3
 8005d04:	f043 0302 	orr.w	r3, r3, #2
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	e7e3      	b.n	8005cd4 <__smakebuf_r+0xc>
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <__smakebuf_r+0x7c>)
 8005d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	6020      	str	r0, [r4, #0]
 8005d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	9b00      	ldr	r3, [sp, #0]
 8005d1c:	6163      	str	r3, [r4, #20]
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	6120      	str	r0, [r4, #16]
 8005d22:	b15b      	cbz	r3, 8005d3c <__smakebuf_r+0x74>
 8005d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f000 f923 	bl	8005f74 <_isatty_r>
 8005d2e:	b128      	cbz	r0, 8005d3c <__smakebuf_r+0x74>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	89a0      	ldrh	r0, [r4, #12]
 8005d3e:	4305      	orrs	r5, r0
 8005d40:	81a5      	strh	r5, [r4, #12]
 8005d42:	e7cd      	b.n	8005ce0 <__smakebuf_r+0x18>
 8005d44:	08005ad9 	.word	0x08005ad9

08005d48 <memcpy>:
 8005d48:	440a      	add	r2, r1
 8005d4a:	4291      	cmp	r1, r2
 8005d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d50:	d100      	bne.n	8005d54 <memcpy+0xc>
 8005d52:	4770      	bx	lr
 8005d54:	b510      	push	{r4, lr}
 8005d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d5e:	4291      	cmp	r1, r2
 8005d60:	d1f9      	bne.n	8005d56 <memcpy+0xe>
 8005d62:	bd10      	pop	{r4, pc}

08005d64 <memmove>:
 8005d64:	4288      	cmp	r0, r1
 8005d66:	b510      	push	{r4, lr}
 8005d68:	eb01 0402 	add.w	r4, r1, r2
 8005d6c:	d902      	bls.n	8005d74 <memmove+0x10>
 8005d6e:	4284      	cmp	r4, r0
 8005d70:	4623      	mov	r3, r4
 8005d72:	d807      	bhi.n	8005d84 <memmove+0x20>
 8005d74:	1e43      	subs	r3, r0, #1
 8005d76:	42a1      	cmp	r1, r4
 8005d78:	d008      	beq.n	8005d8c <memmove+0x28>
 8005d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d82:	e7f8      	b.n	8005d76 <memmove+0x12>
 8005d84:	4402      	add	r2, r0
 8005d86:	4601      	mov	r1, r0
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	d100      	bne.n	8005d8e <memmove+0x2a>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d96:	e7f7      	b.n	8005d88 <memmove+0x24>

08005d98 <__malloc_lock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_lock+0x8>)
 8005d9a:	f7ff bf6f 	b.w	8005c7c <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	20000528 	.word	0x20000528

08005da4 <__malloc_unlock>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__malloc_unlock+0x8>)
 8005da6:	f7ff bf6a 	b.w	8005c7e <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	20000528 	.word	0x20000528

08005db0 <_realloc_r>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	4607      	mov	r7, r0
 8005db4:	4614      	mov	r4, r2
 8005db6:	460e      	mov	r6, r1
 8005db8:	b921      	cbnz	r1, 8005dc4 <_realloc_r+0x14>
 8005dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	f7ff b828 	b.w	8004e14 <_malloc_r>
 8005dc4:	b922      	cbnz	r2, 8005dd0 <_realloc_r+0x20>
 8005dc6:	f7fe ffd5 	bl	8004d74 <_free_r>
 8005dca:	4625      	mov	r5, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd0:	f000 f8f2 	bl	8005fb8 <_malloc_usable_size_r>
 8005dd4:	42a0      	cmp	r0, r4
 8005dd6:	d20f      	bcs.n	8005df8 <_realloc_r+0x48>
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f7ff f81a 	bl	8004e14 <_malloc_r>
 8005de0:	4605      	mov	r5, r0
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d0f2      	beq.n	8005dcc <_realloc_r+0x1c>
 8005de6:	4631      	mov	r1, r6
 8005de8:	4622      	mov	r2, r4
 8005dea:	f7ff ffad 	bl	8005d48 <memcpy>
 8005dee:	4631      	mov	r1, r6
 8005df0:	4638      	mov	r0, r7
 8005df2:	f7fe ffbf 	bl	8004d74 <_free_r>
 8005df6:	e7e9      	b.n	8005dcc <_realloc_r+0x1c>
 8005df8:	4635      	mov	r5, r6
 8005dfa:	e7e7      	b.n	8005dcc <_realloc_r+0x1c>

08005dfc <_raise_r>:
 8005dfc:	291f      	cmp	r1, #31
 8005dfe:	b538      	push	{r3, r4, r5, lr}
 8005e00:	4604      	mov	r4, r0
 8005e02:	460d      	mov	r5, r1
 8005e04:	d904      	bls.n	8005e10 <_raise_r+0x14>
 8005e06:	2316      	movs	r3, #22
 8005e08:	6003      	str	r3, [r0, #0]
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e12:	b112      	cbz	r2, 8005e1a <_raise_r+0x1e>
 8005e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e18:	b94b      	cbnz	r3, 8005e2e <_raise_r+0x32>
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 f830 	bl	8005e80 <_getpid_r>
 8005e20:	462a      	mov	r2, r5
 8005e22:	4601      	mov	r1, r0
 8005e24:	4620      	mov	r0, r4
 8005e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e2a:	f000 b817 	b.w	8005e5c <_kill_r>
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d00a      	beq.n	8005e48 <_raise_r+0x4c>
 8005e32:	1c59      	adds	r1, r3, #1
 8005e34:	d103      	bne.n	8005e3e <_raise_r+0x42>
 8005e36:	2316      	movs	r3, #22
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	e7e7      	b.n	8005e0e <_raise_r+0x12>
 8005e3e:	2400      	movs	r4, #0
 8005e40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e44:	4628      	mov	r0, r5
 8005e46:	4798      	blx	r3
 8005e48:	2000      	movs	r0, #0
 8005e4a:	e7e0      	b.n	8005e0e <_raise_r+0x12>

08005e4c <raise>:
 8005e4c:	4b02      	ldr	r3, [pc, #8]	; (8005e58 <raise+0xc>)
 8005e4e:	4601      	mov	r1, r0
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	f7ff bfd3 	b.w	8005dfc <_raise_r>
 8005e56:	bf00      	nop
 8005e58:	20000018 	.word	0x20000018

08005e5c <_kill_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <_kill_r+0x20>)
 8005e60:	2300      	movs	r3, #0
 8005e62:	4604      	mov	r4, r0
 8005e64:	4608      	mov	r0, r1
 8005e66:	4611      	mov	r1, r2
 8005e68:	602b      	str	r3, [r5, #0]
 8005e6a:	f7fa ffd1 	bl	8000e10 <_kill>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d102      	bne.n	8005e78 <_kill_r+0x1c>
 8005e72:	682b      	ldr	r3, [r5, #0]
 8005e74:	b103      	cbz	r3, 8005e78 <_kill_r+0x1c>
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	bd38      	pop	{r3, r4, r5, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000530 	.word	0x20000530

08005e80 <_getpid_r>:
 8005e80:	f7fa bfbe 	b.w	8000e00 <_getpid>

08005e84 <__sread>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	460c      	mov	r4, r1
 8005e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8c:	f000 f89c 	bl	8005fc8 <_read_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bfab      	itete	ge
 8005e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e96:	89a3      	ldrhlt	r3, [r4, #12]
 8005e98:	181b      	addge	r3, r3, r0
 8005e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e9e:	bfac      	ite	ge
 8005ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ea2:	81a3      	strhlt	r3, [r4, #12]
 8005ea4:	bd10      	pop	{r4, pc}

08005ea6 <__swrite>:
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	461f      	mov	r7, r3
 8005eac:	898b      	ldrh	r3, [r1, #12]
 8005eae:	05db      	lsls	r3, r3, #23
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	d505      	bpl.n	8005ec4 <__swrite+0x1e>
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f000 f868 	bl	8005f94 <_lseek_r>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	f000 b817 	b.w	8005f0c <_write_r>

08005ede <__sseek>:
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 f855 	bl	8005f94 <_lseek_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	bf15      	itete	ne
 8005ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005efa:	81a3      	strheq	r3, [r4, #12]
 8005efc:	bf18      	it	ne
 8005efe:	81a3      	strhne	r3, [r4, #12]
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <__sclose>:
 8005f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f06:	f000 b813 	b.w	8005f30 <_close_r>
	...

08005f0c <_write_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	; (8005f2c <_write_r+0x20>)
 8005f10:	4604      	mov	r4, r0
 8005f12:	4608      	mov	r0, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fa ffaf 	bl	8000e7e <_write>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_write_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_write_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	20000530 	.word	0x20000530

08005f30 <_close_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_close_r+0x1c>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fa ffbb 	bl	8000eb6 <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_close_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_close_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000530 	.word	0x20000530

08005f50 <_fstat_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	; (8005f70 <_fstat_r+0x20>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	f7fa ffb6 	bl	8000ece <_fstat>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d102      	bne.n	8005f6c <_fstat_r+0x1c>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b103      	cbz	r3, 8005f6c <_fstat_r+0x1c>
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000530 	.word	0x20000530

08005f74 <_isatty_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	; (8005f90 <_isatty_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7fa ffb5 	bl	8000eee <_isatty>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_isatty_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_isatty_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	20000530 	.word	0x20000530

08005f94 <_lseek_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	; (8005fb4 <_lseek_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7fa ffae 	bl	8000f04 <_lseek>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_lseek_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_lseek_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000530 	.word	0x20000530

08005fb8 <_malloc_usable_size_r>:
 8005fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fbc:	1f18      	subs	r0, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bfbc      	itt	lt
 8005fc2:	580b      	ldrlt	r3, [r1, r0]
 8005fc4:	18c0      	addlt	r0, r0, r3
 8005fc6:	4770      	bx	lr

08005fc8 <_read_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	; (8005fe8 <_read_r+0x20>)
 8005fcc:	4604      	mov	r4, r0
 8005fce:	4608      	mov	r0, r1
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	602a      	str	r2, [r5, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f7fa ff34 	bl	8000e44 <_read>
 8005fdc:	1c43      	adds	r3, r0, #1
 8005fde:	d102      	bne.n	8005fe6 <_read_r+0x1e>
 8005fe0:	682b      	ldr	r3, [r5, #0]
 8005fe2:	b103      	cbz	r3, 8005fe6 <_read_r+0x1e>
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	bd38      	pop	{r3, r4, r5, pc}
 8005fe8:	20000530 	.word	0x20000530

08005fec <_init>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr

08005ff8 <_fini>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	bf00      	nop
 8005ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffe:	bc08      	pop	{r3}
 8006000:	469e      	mov	lr, r3
 8006002:	4770      	bx	lr

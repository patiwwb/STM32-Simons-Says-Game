
Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006040  08006040  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006040  08006040  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006040  08006040  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000007c  080060c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  080060c4  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001209b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  00032147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  000345f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000353b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4e  00000000  00000000  000360a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d7e  00000000  00000000  0004ccf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b4f  00000000  00000000  0005da74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e75c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  000e7618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e90 	.word	0x08005e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005e90 	.word	0x08005e90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fe06 	bl	8000e84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f85a 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f980 	bl	8000580 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8ae 	bl	80003e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f944 	bl	8000510 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f91a 	bl	80004c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028c:	481f      	ldr	r0, [pc, #124]	; (800030c <main+0x9c>)
 800028e:	f002 fcfd 	bl	8002c8c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000292:	481f      	ldr	r0, [pc, #124]	; (8000310 <main+0xa0>)
 8000294:	f002 fcfa 	bl	8002c8c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	481c      	ldr	r0, [pc, #112]	; (800030c <main+0x9c>)
 800029c:	f002 fda4 	bl	8002de8 <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a0:	4b1b      	ldr	r3, [pc, #108]	; (8000310 <main+0xa0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b1a      	ldr	r3, [pc, #104]	; (8000314 <main+0xa4>)
 80002aa:	801a      	strh	r2, [r3, #0]
//			  ALLUME_LED = 1;
//		  }
	  }
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
	  if (level==1) {
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <main+0xa8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d103      	bne.n	80002bc <main+0x4c>
	     generate_sequence();
 80002b4:	f000 fb0a 	bl	80008cc <generate_sequence>
	     show_sequence();
 80002b8:	f000 fb5a 	bl	8000970 <show_sequence>
	   }

	  //wrong_sequence();
	  HAL_Delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f000 fe46 	bl	8000f50 <HAL_Delay>
	  if(Frequency < 10000)
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <main+0xac>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d80a      	bhi.n	80002e6 <main+0x76>
	  {
		  //start();
		  if(ALLUME_LED == 1)
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <main+0xb0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b01      	cmp	r3, #1
 80002d6:	d106      	bne.n	80002e6 <main+0x76>
		  {
			  ALLUME_LED = 0;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <main+0xb0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80002de:	2108      	movs	r1, #8
 80002e0:	4810      	ldr	r0, [pc, #64]	; (8000324 <main+0xb4>)
 80002e2:	f001 f96b 	bl	80015bc <HAL_GPIO_TogglePin>
	  UART_SendNumber(timer_val);
	  HAL_Delay(1000);
	  UART_SendText("\r\n");
	  */

	  UART_SendText("Frequency ");
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <main+0xb8>)
 80002e8:	f000 f9bc 	bl	8000664 <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002ec:	4b0b      	ldr	r3, [pc, #44]	; (800031c <main+0xac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f9dd 	bl	80006b0 <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002f6:	480d      	ldr	r0, [pc, #52]	; (800032c <main+0xbc>)
 80002f8:	f000 f9b4 	bl	8000664 <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000300:	f000 fe26 	bl	8000f50 <HAL_Delay>
	  Frequency = 0;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <main+0xac>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
	  if (level==1) {
 800030a:	e7cf      	b.n	80002ac <main+0x3c>
 800030c:	20000404 	.word	0x20000404
 8000310:	200004d4 	.word	0x200004d4
 8000314:	200000b4 	.word	0x200000b4
 8000318:	20000004 	.word	0x20000004
 800031c:	200000a4 	.word	0x200000a4
 8000320:	200000b0 	.word	0x200000b0
 8000324:	48000400 	.word	0x48000400
 8000328:	08005ea8 	.word	0x08005ea8
 800032c:	08005eb4 	.word	0x08005eb4

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b09c      	sub	sp, #112	; 0x70
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800033a:	2228      	movs	r2, #40	; 0x28
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f004 fbca 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2230      	movs	r2, #48	; 0x30
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 fbbc 	bl	8004ad8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000360:	2302      	movs	r3, #2
 8000362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000368:	2310      	movs	r3, #16
 800036a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800036c:	2300      	movs	r3, #0
 800036e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000374:	4618      	mov	r0, r3
 8000376:	f001 f93b 	bl	80015f0 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000380:	f000 fb70 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000388:	2300      	movs	r3, #0
 800038a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 f82e 	bl	8002400 <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80003aa:	f000 fb5b 	bl	8000a64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80003ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003b4:	2300      	movs	r3, #0
 80003b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fa8a 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003c6:	f000 fb4d 	bl	8000a64 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003d0:	2000      	movs	r0, #0
 80003d2:	f002 f991 	bl	80026f8 <HAL_RCC_MCOConfig>
}
 80003d6:	bf00      	nop
 80003d8:	3770      	adds	r7, #112	; 0x70
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08c      	sub	sp, #48	; 0x30
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e6:	f107 0320 	add.w	r3, r7, #32
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]
 8000408:	609a      	str	r2, [r3, #8]
 800040a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <MX_TIM2_Init+0xdc>)
 800040e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041a:	4b28      	ldr	r3, [pc, #160]	; (80004bc <MX_TIM2_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000420:	4b26      	ldr	r3, [pc, #152]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000422:	f04f 32ff 	mov.w	r2, #4294967295
 8000426:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <MX_TIM2_Init+0xdc>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042e:	4b23      	ldr	r3, [pc, #140]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000434:	4821      	ldr	r0, [pc, #132]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000436:	f002 fbd1 	bl	8002bdc <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000440:	f000 fb10 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000448:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044a:	f107 0320 	add.w	r3, r7, #32
 800044e:	4619      	mov	r1, r3
 8000450:	481a      	ldr	r0, [pc, #104]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000452:	f002 ffb2 	bl	80033ba <HAL_TIM_ConfigClockSource>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800045c:	f000 fb02 	bl	8000a64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000460:	4816      	ldr	r0, [pc, #88]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000462:	f002 fc5f 	bl	8002d24 <HAL_TIM_IC_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800046c:	f000 fafa 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <MX_TIM2_Init+0xdc>)
 8000480:	f003 fb0a 	bl	8003a98 <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800048a:	f000 faeb 	bl	8000a64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000492:	2301      	movs	r3, #1
 8000494:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	4619      	mov	r1, r3
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <MX_TIM2_Init+0xdc>)
 80004a6:	f002 feec 	bl	8003282 <HAL_TIM_IC_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004b0:	f000 fad8 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	; 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000404 	.word	0x20000404

080004c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004c4:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_TIM16_Init+0x48>)
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_TIM16_Init+0x4c>)
 80004c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_TIM16_Init+0x48>)
 80004cc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MX_TIM16_Init+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_TIM16_Init+0x48>)
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_TIM16_Init+0x48>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_TIM16_Init+0x48>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_TIM16_Init+0x48>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_TIM16_Init+0x48>)
 80004f4:	f002 fb72 	bl	8002bdc <HAL_TIM_Base_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004fe:	f000 fab1 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200004d4 	.word	0x200004d4
 800050c:	40014400 	.word	0x40014400

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_USART2_UART_Init+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_USART2_UART_Init+0x64>)
 800051c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_USART2_UART_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART2_UART_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART2_UART_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <MX_USART2_UART_Init+0x64>)
 8000554:	f003 fb24 	bl	8003ba0 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 fa81 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART2_UART_Init+0x6c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <MX_USART2_UART_Init+0x6c>)
 8000568:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 800056c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000450 	.word	0x20000450
 8000578:	40004400 	.word	0x40004400
 800057c:	40013800 	.word	0x40013800

08000580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000596:	4b31      	ldr	r3, [pc, #196]	; (800065c <MX_GPIO_Init+0xdc>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a30      	ldr	r2, [pc, #192]	; (800065c <MX_GPIO_Init+0xdc>)
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b2e      	ldr	r3, [pc, #184]	; (800065c <MX_GPIO_Init+0xdc>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <MX_GPIO_Init+0xdc>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a2a      	ldr	r2, [pc, #168]	; (800065c <MX_GPIO_Init+0xdc>)
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b28      	ldr	r3, [pc, #160]	; (800065c <MX_GPIO_Init+0xdc>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <MX_GPIO_Init+0xdc>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <MX_GPIO_Init+0xdc>)
 80005cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <MX_GPIO_Init+0xdc>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	21c0      	movs	r1, #192	; 0xc0
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f000 ffd1 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	210b      	movs	r1, #11
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005f0:	f000 ffcc 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005f4:	23c0      	movs	r3, #192	; 0xc0
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	4619      	mov	r1, r3
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f000 fe4b 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 8000612:	230b      	movs	r3, #11
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_GPIO_Init+0xe0>)
 800062a:	f000 fe3d 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064e:	f000 fe2b 	bl	80012a8 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400

08000664 <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 8000674:	e005      	b.n	8000682 <UART_SendText+0x1e>
	{
		size++;
 8000676:	89bb      	ldrh	r3, [r7, #12]
 8000678:	3301      	adds	r3, #1
 800067a:	81bb      	strh	r3, [r7, #12]
		i++;
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	3301      	adds	r3, #1
 8000680:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f2      	bne.n	8000676 <UART_SendText+0x12>
	}
	size++; // '\0'
 8000690:	89bb      	ldrh	r3, [r7, #12]
 8000692:	3301      	adds	r3, #1
 8000694:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 8000696:	89ba      	ldrh	r2, [r7, #12]
 8000698:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <UART_SendText+0x48>)
 80006a0:	f003 facc 	bl	8003c3c <HAL_UART_Transmit>
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000450 	.word	0x20000450

080006b0 <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4906      	ldr	r1, [pc, #24]	; (80006d8 <UART_SendNumber+0x28>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fa51 	bl	8004b68 <siprintf>
	UART_SendText(temp);
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff ffca 	bl	8000664 <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006d0:	bf00      	nop
 80006d2:	3770      	adds	r7, #112	; 0x70
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	08005eb8 	.word	0x08005eb8

080006dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a4a      	ldr	r2, [pc, #296]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	f040 808d 	bne.w	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	7f1b      	ldrb	r3, [r3, #28]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	f040 8088 	bne.w	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 80006f8:	4b46      	ldr	r3, [pc, #280]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x138>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d10a      	bne.n	8000716 <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000700:	2100      	movs	r1, #0
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f002 ff22 	bl	800354c <HAL_TIM_ReadCapturedValue>
 8000708:	4603      	mov	r3, r0
 800070a:	4a43      	ldr	r2, [pc, #268]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800070c:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 800070e:	4b41      	ldr	r3, [pc, #260]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 8000714:	e078      	b.n	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 8000716:	4b3f      	ldr	r3, [pc, #252]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d074      	beq.n	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800071e:	2100      	movs	r1, #0
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f002 ff13 	bl	800354c <HAL_TIM_ReadCapturedValue>
 8000726:	4603      	mov	r3, r0
 8000728:	4a3c      	ldr	r2, [pc, #240]	; (800081c <HAL_TIM_IC_CaptureCallback+0x140>)
 800072a:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 800072c:	4b3b      	ldr	r3, [pc, #236]	; (800081c <HAL_TIM_IC_CaptureCallback+0x140>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b39      	ldr	r3, [pc, #228]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d907      	bls.n	8000748 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000738:	4b38      	ldr	r3, [pc, #224]	; (800081c <HAL_TIM_IC_CaptureCallback+0x140>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b36      	ldr	r3, [pc, #216]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	4a37      	ldr	r2, [pc, #220]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e011      	b.n	800076c <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000748:	4b34      	ldr	r3, [pc, #208]	; (800081c <HAL_TIM_IC_CaptureCallback+0x140>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d209      	bcs.n	8000768 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000754:	4b31      	ldr	r3, [pc, #196]	; (800081c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000762:	4a2f      	ldr	r2, [pc, #188]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	e001      	b.n	800076c <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000768:	f000 f97c 	bl	8000a64 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 800076c:	f002 f86e 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8000770:	4602      	mov	r2, r0
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x148>)
 800077c:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	4a28      	ldr	r2, [pc, #160]	; (800082c <HAL_TIM_IC_CaptureCallback+0x150>)
 800078c:	8812      	ldrh	r2, [r2, #0]
 800078e:	1a9b      	subs	r3, r3, r2
 8000790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000794:	d338      	bcc.n	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a24      	ldr	r2, [pc, #144]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x154>)
 800079e:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b20      	ldr	r3, [pc, #128]	; (800082c <HAL_TIM_IC_CaptureCallback+0x150>)
 80007aa:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x148>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d827      	bhi.n	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d106      	bne.n	80007ce <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c6:	2108      	movs	r1, #8
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ca:	f000 fef7 	bl	80015bc <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d118      	bne.n	8000808 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2140      	movs	r1, #64	; 0x40
 80007e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e4:	f000 fed2 	bl	800158c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ee:	f000 fecd 	bl	800158c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f000 fec7 	bl	800158c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	480d      	ldr	r0, [pc, #52]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000804:	f000 fec2 	bl	800158c <HAL_GPIO_WritePin>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000404 	.word	0x20000404
 8000814:	200000ac 	.word	0x200000ac
 8000818:	20000098 	.word	0x20000098
 800081c:	2000009c 	.word	0x2000009c
 8000820:	200000a0 	.word	0x200000a0
 8000824:	200000a4 	.word	0x200000a4
 8000828:	200004d4 	.word	0x200004d4
 800082c:	200000b4 	.word	0x200000b4
 8000830:	200000a8 	.word	0x200000a8
 8000834:	200000b0 	.word	0x200000b0
 8000838:	48000400 	.word	0x48000400
 800083c:	20000000 	.word	0x20000000

08000840 <wrong_sequence>:
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
	HAL_Delay(1000);
}

void wrong_sequence()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i<3; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	e034      	b.n	80008b6 <wrong_sequence+0x76>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <wrong_sequence+0x88>)
 8000852:	f000 fe9b 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fe95 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	2102      	movs	r1, #2
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <wrong_sequence+0x88>)
 8000868:	f000 fe90 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fe8a 	bl	800158c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000878:	20c8      	movs	r0, #200	; 0xc8
 800087a:	f000 fb69 	bl	8000f50 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2101      	movs	r1, #1
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <wrong_sequence+0x88>)
 8000884:	f000 fe82 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f000 fe7c 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2102      	movs	r1, #2
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <wrong_sequence+0x88>)
 800089a:	f000 fe77 	bl	800158c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a6:	f000 fe71 	bl	800158c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80008aa:	20c8      	movs	r0, #200	; 0xc8
 80008ac:	f000 fb50 	bl	8000f50 <HAL_Delay>
	for(i = 0; i<3; i++)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3301      	adds	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	ddc7      	ble.n	800084c <wrong_sequence+0xc>
	}
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000400 	.word	0x48000400

080008cc <generate_sequence>:

void generate_sequence(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	 int i;
	 int random = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
	 for (i = 0; i < MAX_LEVEL; i++) {
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	e039      	b.n	8000950 <generate_sequence+0x84>
		random = rand() % 4;
 80008dc:	f004 f904 	bl	8004ae8 <rand>
 80008e0:	4603      	mov	r3, r0
 80008e2:	425a      	negs	r2, r3
 80008e4:	f003 0303 	and.w	r3, r3, #3
 80008e8:	f002 0203 	and.w	r2, r2, #3
 80008ec:	bf58      	it	pl
 80008ee:	4253      	negpl	r3, r2
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d823      	bhi.n	8000940 <generate_sequence+0x74>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <generate_sequence+0x34>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000911 	.word	0x08000911
 8000904:	0800091d 	.word	0x0800091d
 8000908:	08000929 	.word	0x08000929
 800090c:	08000935 	.word	0x08000935
		switch(random)
		{
			case 0:
				sequence[i]=0x0040U;
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <generate_sequence+0x9c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800091a:	e016      	b.n	800094a <generate_sequence+0x7e>
			case 1:
				sequence[i]=0x0080U;
 800091c:	4a12      	ldr	r2, [pc, #72]	; (8000968 <generate_sequence+0x9c>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000926:	e010      	b.n	800094a <generate_sequence+0x7e>
			case 2:
				sequence[i]=0x0001U;
 8000928:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <generate_sequence+0x9c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2101      	movs	r1, #1
 800092e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000932:	e00a      	b.n	800094a <generate_sequence+0x7e>
			case 3:
				sequence[i]=0x0002U;
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <generate_sequence+0x9c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2102      	movs	r1, #2
 800093a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800093e:	e004      	b.n	800094a <generate_sequence+0x7e>
			default:
				sequence[i]=0x0040U;
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <generate_sequence+0x9c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i < MAX_LEVEL; i++) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3301      	adds	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b63      	cmp	r3, #99	; 0x63
 8000954:	ddc2      	ble.n	80008dc <generate_sequence+0x10>
		}


	 }
	 level++;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <generate_sequence+0xa0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <generate_sequence+0xa0>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000c4 	.word	0x200000c4
 800096c:	20000004 	.word	0x20000004

08000970 <show_sequence>:

void show_sequence()
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	 int i;
	 for(int i=0; i < 10; i++)
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	e065      	b.n	8000a48 <show_sequence+0xd8>
	 {
		 switch(sequence[i])
 800097c:	4a36      	ldr	r2, [pc, #216]	; (8000a58 <show_sequence+0xe8>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2b80      	cmp	r3, #128	; 0x80
 8000986:	d01f      	beq.n	80009c8 <show_sequence+0x58>
 8000988:	2b80      	cmp	r3, #128	; 0x80
 800098a:	dc58      	bgt.n	8000a3e <show_sequence+0xce>
 800098c:	2b40      	cmp	r3, #64	; 0x40
 800098e:	d006      	beq.n	800099e <show_sequence+0x2e>
 8000990:	2b40      	cmp	r3, #64	; 0x40
 8000992:	dc54      	bgt.n	8000a3e <show_sequence+0xce>
 8000994:	2b01      	cmp	r3, #1
 8000996:	d02c      	beq.n	80009f2 <show_sequence+0x82>
 8000998:	2b02      	cmp	r3, #2
 800099a:	d03d      	beq.n	8000a18 <show_sequence+0xa8>
 800099c:	e04f      	b.n	8000a3e <show_sequence+0xce>
			{
				case 0x0040U: //O
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2140      	movs	r1, #64	; 0x40
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fdf1 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 80009aa:	4b2c      	ldr	r3, [pc, #176]	; (8000a5c <show_sequence+0xec>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 face 	bl	8000f50 <HAL_Delay>
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 fde6 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 80009c0:	20c8      	movs	r0, #200	; 0xc8
 80009c2:	f000 fac5 	bl	8000f50 <HAL_Delay>
					break;
 80009c6:	e03c      	b.n	8000a42 <show_sequence+0xd2>
				case 0x0080U: //1
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fddc 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <show_sequence+0xec>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fab9 	bl	8000f50 <HAL_Delay>
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fdd1 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 80009ea:	20c8      	movs	r0, #200	; 0xc8
 80009ec:	f000 fab0 	bl	8000f50 <HAL_Delay>
					break;
 80009f0:	e027      	b.n	8000a42 <show_sequence+0xd2>
				case 0x0001U: //2
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2101      	movs	r1, #1
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <show_sequence+0xf0>)
 80009f8:	f000 fdc8 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <show_sequence+0xec>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 faa5 	bl	8000f50 <HAL_Delay>
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2101      	movs	r1, #1
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <show_sequence+0xf0>)
 8000a0c:	f000 fdbe 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a10:	20c8      	movs	r0, #200	; 0xc8
 8000a12:	f000 fa9d 	bl	8000f50 <HAL_Delay>
					break;
 8000a16:	e014      	b.n	8000a42 <show_sequence+0xd2>
				case 0x0002U: //3
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <show_sequence+0xf0>)
 8000a1e:	f000 fdb5 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <show_sequence+0xec>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fa92 	bl	8000f50 <HAL_Delay>
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	480b      	ldr	r0, [pc, #44]	; (8000a60 <show_sequence+0xf0>)
 8000a32:	f000 fdab 	bl	800158c <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a36:	20c8      	movs	r0, #200	; 0xc8
 8000a38:	f000 fa8a 	bl	8000f50 <HAL_Delay>
					break;
 8000a3c:	e001      	b.n	8000a42 <show_sequence+0xd2>
				default:
					wrong_sequence();
 8000a3e:	f7ff feff 	bl	8000840 <wrong_sequence>
	 for(int i=0; i < 10; i++)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3301      	adds	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b09      	cmp	r3, #9
 8000a4c:	dd96      	ble.n	800097c <show_sequence+0xc>
			}
	 }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	200000c4 	.word	0x200000c4
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	48000400 	.word	0x48000400

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <Error_Handler+0x8>
	...

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad8:	d131      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 fbbe 	bl	80012a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fb0c 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b36:	201c      	movs	r0, #28
 8000b38:	f000 fb25 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b3c:	e010      	b.n	8000b60 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_TIM_Base_MspInit+0xb4>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d10b      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_TIM_Base_MspInit+0xb0>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40014400 	.word	0x40014400

08000b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x8c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d130      	bne.n	8000bf4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6153      	str	r3, [r2, #20]
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_UART_MspInit+0x90>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bc2:	230c      	movs	r3, #12
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd2:	2307      	movs	r3, #7
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be0:	f000 fb62 	bl	80012a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	2026      	movs	r0, #38	; 0x26
 8000bea:	f000 fab0 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bee:	2026      	movs	r0, #38	; 0x26
 8000bf0:	f000 fac9 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3728      	adds	r7, #40	; 0x28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	40021000 	.word	0x40021000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f95e 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM2_IRQHandler+0x10>)
 8000c5e:	f002 f9f1 	bl	8003044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000404 	.word	0x20000404

08000c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USART2_IRQHandler+0x10>)
 8000c72:	f003 f877 	bl	8003d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000450 	.word	0x20000450

08000c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
	return 1;
 8000c84:	2301      	movs	r3, #1
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_kill>:

int _kill(int pid, int sig)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c9a:	f003 fef3 	bl	8004a84 <__errno>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2216      	movs	r2, #22
 8000ca2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_exit>:

void _exit (int status)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ffe7 	bl	8000c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cc2:	e7fe      	b.n	8000cc2 <_exit+0x12>

08000cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
	}

return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
	}
	return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f003 fe58 	bl	8004a84 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20004000 	.word	0x20004000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	200000b8 	.word	0x200000b8
 8000e08:	20000538 	.word	0x20000538

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490e      	ldr	r1, [pc, #56]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0b      	ldr	r4, [pc, #44]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e5a:	f7ff ffd7 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f003 fe17 	bl	8004a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fa05 	bl	8000270 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e68:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e74:	08006048 	.word	0x08006048
  ldr r2, =_sbss
 8000e78:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e7c:	20000534 	.word	0x20000534

08000e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x28>)
 8000e8e:	f043 0310 	orr.w	r3, r3, #16
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f94f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fde6 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f967 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	f000 f92f 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	20000014 	.word	0x20000014
 8000f0c:	20000010 	.word	0x20000010

08000f10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000014 	.word	0x20000014
 8000f34:	20000520 	.word	0x20000520

08000f38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000520 	.word	0x20000520

08000f50 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000014 	.word	0x20000014

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff29 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff3e 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff8e 	bl	800108c <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff31 	bl	8000ffc <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d008      	beq.n	80011de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2204      	movs	r2, #4
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e020      	b.n	8001220 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 020e 	bic.w	r2, r2, #14
 80011ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0201 	bic.w	r2, r2, #1
 80011fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f202 	lsl.w	r2, r1, r2
 800120c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123e:	2b02      	cmp	r3, #2
 8001240:	d005      	beq.n	800124e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2204      	movs	r2, #4
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e027      	b.n	800129e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 020e 	bic.w	r2, r2, #14
 800125c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001276:	2101      	movs	r1, #1
 8001278:	fa01 f202 	lsl.w	r2, r1, r2
 800127c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
    } 
  }
  return status;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	e14e      	b.n	8001556 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2101      	movs	r1, #1
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8140 	beq.w	8001550 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d005      	beq.n	80012e8 <HAL_GPIO_Init+0x40>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d130      	bne.n	800134a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131e:	2201      	movs	r2, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0201 	and.w	r2, r3, #1
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	2b03      	cmp	r3, #3
 8001354:	d017      	beq.n	8001386 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d123      	bne.n	80013da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	08da      	lsrs	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3208      	adds	r2, #8
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	220f      	movs	r2, #15
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	6939      	ldr	r1, [r7, #16]
 80013d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0203 	and.w	r2, r3, #3
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 809a 	beq.w	8001550 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_GPIO_Init+0x2cc>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_GPIO_Init+0x2cc>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b52      	ldr	r3, [pc, #328]	; (8001574 <HAL_GPIO_Init+0x2cc>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x2d0>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800145e:	d013      	beq.n	8001488 <HAL_GPIO_Init+0x1e0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_GPIO_Init+0x2d4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_Init+0x1dc>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a45      	ldr	r2, [pc, #276]	; (8001580 <HAL_GPIO_Init+0x2d8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d007      	beq.n	8001480 <HAL_GPIO_Init+0x1d8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a44      	ldr	r2, [pc, #272]	; (8001584 <HAL_GPIO_Init+0x2dc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <HAL_GPIO_Init+0x1d4>
 8001478:	2303      	movs	r3, #3
 800147a:	e006      	b.n	800148a <HAL_GPIO_Init+0x1e2>
 800147c:	2305      	movs	r3, #5
 800147e:	e004      	b.n	800148a <HAL_GPIO_Init+0x1e2>
 8001480:	2302      	movs	r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x1e2>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_GPIO_Init+0x1e2>
 8001488:	2300      	movs	r3, #0
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800149a:	4937      	ldr	r1, [pc, #220]	; (8001578 <HAL_GPIO_Init+0x2d0>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014cc:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014d2:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_GPIO_Init+0x2e0>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa22 f303 	lsr.w	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	f47f aea9 	bne.w	80012b8 <HAL_GPIO_Init+0x10>
  }
}
 8001566:	bf00      	nop
 8001568:	bf00      	nop
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	48000400 	.word	0x48000400
 8001580:	48000800 	.word	0x48000800
 8001584:	48000c00 	.word	0x48000c00
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43d9      	mvns	r1, r3
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	400b      	ands	r3, r1
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	f000 bef4 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 816a 	beq.w	80018ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800161a:	4bb3      	ldr	r3, [pc, #716]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d00c      	beq.n	8001640 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001626:	4bb0      	ldr	r3, [pc, #704]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d159      	bne.n	80016e6 <HAL_RCC_OscConfig+0xf6>
 8001632:	4bad      	ldr	r3, [pc, #692]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d152      	bne.n	80016e6 <HAL_RCC_OscConfig+0xf6>
 8001640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001644:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001648:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800164c:	fa93 f3a3 	rbit	r3, r3
 8001650:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001654:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <HAL_RCC_OscConfig+0x82>
 800166c:	4b9e      	ldr	r3, [pc, #632]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0xae>
 8001672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001676:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800168a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800168e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800169a:	4b93      	ldr	r3, [pc, #588]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80016a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80016aa:	fa92 f2a2 	rbit	r2, r2
 80016ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80016b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80016b6:	fab2 f282 	clz	r2, r2
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	f002 021f 	and.w	r2, r2, #31
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 810c 	beq.w	80018ec <HAL_RCC_OscConfig+0x2fc>
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 8106 	bne.w	80018ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f000 be86 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x110>
 80016f2:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7c      	ldr	r2, [pc, #496]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e030      	b.n	8001762 <HAL_RCC_OscConfig+0x172>
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x134>
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a76      	ldr	r2, [pc, #472]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b74      	ldr	r3, [pc, #464]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a73      	ldr	r2, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800171c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e01e      	b.n	8001762 <HAL_RCC_OscConfig+0x172>
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800172e:	d10c      	bne.n	800174a <HAL_RCC_OscConfig+0x15a>
 8001730:	4b6d      	ldr	r3, [pc, #436]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6c      	ldr	r2, [pc, #432]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a69      	ldr	r2, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0x172>
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a66      	ldr	r2, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a63      	ldr	r2, [pc, #396]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001762:	4b61      	ldr	r3, [pc, #388]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	f023 020f 	bic.w	r2, r3, #15
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	495d      	ldr	r1, [pc, #372]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001772:	4313      	orrs	r3, r2
 8001774:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d059      	beq.n	8001834 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fbda 	bl	8000f38 <HAL_GetTick>
 8001784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001788:	e00a      	b.n	80017a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178a:	f7ff fbd5 	bl	8000f38 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d902      	bls.n	80017a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	f000 be29 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
 80017a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80017ac:	fa93 f3a3 	rbit	r3, r3
 80017b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80017b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0x1e2>
 80017cc:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e015      	b.n	80017fe <HAL_RCC_OscConfig+0x20e>
 80017d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001802:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001806:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800180a:	fa92 f2a2 	rbit	r2, r2
 800180e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001812:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001816:	fab2 f282 	clz	r2, r2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f042 0220 	orr.w	r2, r2, #32
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	f002 021f 	and.w	r2, r2, #31
 8001826:	2101      	movs	r1, #1
 8001828:	fa01 f202 	lsl.w	r2, r1, r2
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0ab      	beq.n	800178a <HAL_RCC_OscConfig+0x19a>
 8001832:	e05c      	b.n	80018ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb80 	bl	8000f38 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183e:	f7ff fb7b 	bl	8000f38 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d902      	bls.n	8001854 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	f000 bdcf 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001868:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x296>
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x2c2>
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80018a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80018ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80018be:	fa92 f2a2 	rbit	r2, r2
 80018c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80018c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f042 0220 	orr.w	r2, r2, #32
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	f002 021f 	and.w	r2, r2, #31
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ab      	bne.n	800183e <HAL_RCC_OscConfig+0x24e>
 80018e6:	e002      	b.n	80018ee <HAL_RCC_OscConfig+0x2fe>
 80018e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 816f 	beq.w	8001bdc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018fe:	4bd0      	ldr	r3, [pc, #832]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 030c 	and.w	r3, r3, #12
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800190a:	4bcd      	ldr	r3, [pc, #820]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b08      	cmp	r3, #8
 8001914:	d16c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x400>
 8001916:	4bca      	ldr	r3, [pc, #808]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d166      	bne.n	80019f0 <HAL_RCC_OscConfig+0x400>
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001934:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0x362>
 800194c:	4bbc      	ldr	r3, [pc, #752]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e013      	b.n	800197a <HAL_RCC_OscConfig+0x38a>
 8001952:	2302      	movs	r3, #2
 8001954:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800196a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800196e:	fa93 f3a3 	rbit	r3, r3
 8001972:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001976:	4bb2      	ldr	r3, [pc, #712]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	2202      	movs	r2, #2
 800197c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001980:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001984:	fa92 f2a2 	rbit	r2, r2
 8001988:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800198c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001990:	fab2 f282 	clz	r2, r2
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	f042 0220 	orr.w	r2, r2, #32
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f002 021f 	and.w	r2, r2, #31
 80019a0:	2101      	movs	r1, #1
 80019a2:	fa01 f202 	lsl.w	r2, r1, r2
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x3cc>
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f000 bd1b 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4ba0      	ldr	r3, [pc, #640]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	21f8      	movs	r1, #248	; 0xf8
 80019cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019d4:	fa91 f1a1 	rbit	r1, r1
 80019d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80019dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019e0:	fab1 f181 	clz	r1, r1
 80019e4:	b2c9      	uxtb	r1, r1
 80019e6:	408b      	lsls	r3, r1
 80019e8:	4995      	ldr	r1, [pc, #596]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e0f5      	b.n	8001bdc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8085 	beq.w	8001b06 <HAL_RCC_OscConfig+0x516>
 80019fc:	2301      	movs	r3, #1
 80019fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001a0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	461a      	mov	r2, r3
 8001a24:	2301      	movs	r3, #1
 8001a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa86 	bl	8000f38 <HAL_GetTick>
 8001a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a32:	f7ff fa81 	bl	8000f38 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d902      	bls.n	8001a48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	f000 bcd5 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	095b      	lsrs	r3, r3, #5
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d102      	bne.n	8001a78 <HAL_RCC_OscConfig+0x488>
 8001a72:	4b73      	ldr	r3, [pc, #460]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e013      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4b0>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001aa6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001aaa:	fa92 f2a2 	rbit	r2, r2
 8001aae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ab2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f042 0220 	orr.w	r2, r2, #32
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f002 021f 	and.w	r2, r2, #31
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0af      	beq.n	8001a32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	21f8      	movs	r1, #248	; 0xf8
 8001ae2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001aea:	fa91 f1a1 	rbit	r1, r1
 8001aee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001af2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001af6:	fab1 f181 	clz	r1, r1
 8001afa:	b2c9      	uxtb	r1, r1
 8001afc:	408b      	lsls	r3, r1
 8001afe:	4950      	ldr	r1, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e06a      	b.n	8001bdc <HAL_RCC_OscConfig+0x5ec>
 8001b06:	2301      	movs	r3, #1
 8001b08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa01 	bl	8000f38 <HAL_GetTick>
 8001b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9fc 	bl	8000f38 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d902      	bls.n	8001b52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	f000 bc50 	b.w	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001b52:	2302      	movs	r3, #2
 8001b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_RCC_OscConfig+0x592>
 8001b7c:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	e013      	b.n	8001baa <HAL_RCC_OscConfig+0x5ba>
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b94:	2302      	movs	r3, #2
 8001b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_RCC_OscConfig+0x650>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	2202      	movs	r2, #2
 8001bac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001bb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001bb4:	fa92 f2a2 	rbit	r2, r2
 8001bb8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001bbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bc0:	fab2 f282 	clz	r2, r2
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f042 0220 	orr.w	r2, r2, #32
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	f002 021f 	and.w	r2, r2, #31
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1af      	bne.n	8001b3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80da 	beq.w	8001da0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d069      	beq.n	8001cca <HAL_RCC_OscConfig+0x6da>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x654>)
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f98a 	bl	8000f38 <HAL_GetTick>
 8001c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c28:	e00e      	b.n	8001c48 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f985 	bl	8000f38 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d906      	bls.n	8001c48 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e3d9      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	10908120 	.word	0x10908120
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c52:	fa93 f3a3 	rbit	r3, r3
 8001c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c76:	2202      	movs	r2, #2
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	4ba5      	ldr	r3, [pc, #660]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c92:	2102      	movs	r1, #2
 8001c94:	6019      	str	r1, [r3, #0]
 8001c96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f1a3 	rbit	r1, r3
 8001ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ca4:	6019      	str	r1, [r3, #0]
  return result;
 8001ca6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0b0      	beq.n	8001c2a <HAL_RCC_OscConfig+0x63a>
 8001cc8:	e06a      	b.n	8001da0 <HAL_RCC_OscConfig+0x7b0>
 8001cca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce0:	601a      	str	r2, [r3, #0]
  return result;
 8001ce2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <HAL_RCC_OscConfig+0x934>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff f91c 	bl	8000f38 <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff f917 	bl	8000f38 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e36b      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001d1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d36:	2202      	movs	r2, #2
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d62:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d6a:	2102      	movs	r1, #2
 8001d6c:	6019      	str	r1, [r3, #0]
 8001d6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	fa93 f1a3 	rbit	r1, r3
 8001d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d7c:	6019      	str	r1, [r3, #0]
  return result;
 8001d7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1b2      	bne.n	8001d06 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8158 	beq.w	8002060 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d112      	bne.n	8001de8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b4f      	ldr	r3, [pc, #316]	; (8001f28 <HAL_RCC_OscConfig+0x938>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d11a      	bne.n	8001e2a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df4:	4b4c      	ldr	r3, [pc, #304]	; (8001f28 <HAL_RCC_OscConfig+0x938>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a4b      	ldr	r2, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x938>)
 8001dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f89a 	bl	8000f38 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7ff f895 	bl	8000f38 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e2e9      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_RCC_OscConfig+0x938>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ef      	beq.n	8001e0a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x852>
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6213      	str	r3, [r2, #32]
 8001e40:	e02f      	b.n	8001ea2 <HAL_RCC_OscConfig+0x8b2>
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x876>
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e5e:	f023 0304 	bic.w	r3, r3, #4
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e01d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x8b2>
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x89a>
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x8b2>
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d06b      	beq.n	8001f84 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff f844 	bl	8000f38 <HAL_GetTick>
 8001eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff f83f 	bl	8000f38 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e291      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001ece:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001efc:	601a      	str	r2, [r3, #0]
  return result;
 8001efe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	095b      	lsrs	r3, r3, #5
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d109      	bne.n	8001f2c <HAL_RCC_OscConfig+0x93c>
 8001f18:	4b01      	ldr	r3, [pc, #4]	; (8001f20 <HAL_RCC_OscConfig+0x930>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x958>
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	10908120 	.word	0x10908120
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f30:	2202      	movs	r2, #2
 8001f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4bbb      	ldr	r3, [pc, #748]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	6011      	str	r1, [r2, #0]
 8001f50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	fa92 f1a2 	rbit	r1, r2
 8001f5a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f5e:	6011      	str	r1, [r2, #0]
  return result;
 8001f60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	fab2 f282 	clz	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f002 021f 	and.w	r2, r2, #31
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d099      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x8c6>
 8001f82:	e063      	b.n	800204c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7fe ffd8 	bl	8000f38 <HAL_GetTick>
 8001f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe ffd3 	bl	8000f38 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e225      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 8001fa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001faa:	2202      	movs	r2, #2
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	fa93 f2a3 	rbit	r2, r3
 8001fd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fd4:	601a      	str	r2, [r3, #0]
  return result;
 8001fd6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d102      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xa06>
 8001ff0:	4b90      	ldr	r3, [pc, #576]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	e00d      	b.n	8002012 <HAL_RCC_OscConfig+0xa22>
 8001ff6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002016:	2102      	movs	r1, #2
 8002018:	6011      	str	r1, [r2, #0]
 800201a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fa92 f1a2 	rbit	r1, r2
 8002024:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002028:	6011      	str	r1, [r2, #0]
  return result;
 800202a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	fab2 f282 	clz	r2, r2
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f002 021f 	and.w	r2, r2, #31
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f202 	lsl.w	r2, r1, r2
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1a0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800204c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002050:	2b01      	cmp	r3, #1
 8002052:	d105      	bne.n	8002060 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002054:	4b77      	ldr	r3, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4a76      	ldr	r2, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 800205a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 81c2 	beq.w	80023f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	f000 819c 	beq.w	80023b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b02      	cmp	r3, #2
 8002082:	f040 8114 	bne.w	80022ae <HAL_RCC_OscConfig+0xcbe>
 8002086:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800208a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	fa93 f2a3 	rbit	r2, r3
 800209a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800209e:	601a      	str	r2, [r3, #0]
  return result;
 80020a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a6:	fab3 f383 	clz	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	461a      	mov	r2, r3
 80020b8:	2300      	movs	r3, #0
 80020ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff3c 	bl	8000f38 <HAL_GetTick>
 80020c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c4:	e009      	b.n	80020da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c6:	f7fe ff37 	bl	8000f38 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e18b      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 80020da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	fa93 f2a3 	rbit	r2, r3
 80020ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020f2:	601a      	str	r2, [r3, #0]
  return result;
 80020f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_OscConfig+0xb24>
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e01b      	b.n	800214c <HAL_RCC_OscConfig+0xb5c>
 8002114:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	fa93 f2a3 	rbit	r2, r3
 8002142:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002150:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002154:	6011      	str	r1, [r2, #0]
 8002156:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fa92 f1a2 	rbit	r1, r2
 8002160:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002164:	6011      	str	r1, [r2, #0]
  return result;
 8002166:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f002 021f 	and.w	r2, r2, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d19e      	bne.n	80020c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	430b      	orrs	r3, r1
 800219e:	4925      	ldr	r1, [pc, #148]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
 80021a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	fa93 f2a3 	rbit	r2, r3
 80021b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	461a      	mov	r2, r3
 80021d6:	2301      	movs	r3, #1
 80021d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fead 	bl	8000f38 <HAL_GetTick>
 80021de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e2:	e009      	b.n	80021f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7fe fea8 	bl	8000f38 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0fc      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 80021f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	fa93 f2a3 	rbit	r2, r3
 800220c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002216:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	fab3 f383 	clz	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <HAL_RCC_OscConfig+0xc48>
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <HAL_RCC_OscConfig+0xc44>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	e01e      	b.n	8002270 <HAL_RCC_OscConfig+0xc80>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800223c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f2a3 	rbit	r2, r3
 800224c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	fa93 f2a3 	rbit	r2, r3
 8002266:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_OscConfig+0xe0c>)
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002274:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002278:	6011      	str	r1, [r2, #0]
 800227a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	fa92 f1a2 	rbit	r1, r2
 8002284:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002288:	6011      	str	r1, [r2, #0]
  return result;
 800228a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f042 0220 	orr.w	r2, r2, #32
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	f002 021f 	and.w	r2, r2, #31
 80022a0:	2101      	movs	r1, #1
 80022a2:	fa01 f202 	lsl.w	r2, r1, r2
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d09b      	beq.n	80021e4 <HAL_RCC_OscConfig+0xbf4>
 80022ac:	e0a0      	b.n	80023f0 <HAL_RCC_OscConfig+0xe00>
 80022ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c6:	601a      	str	r2, [r3, #0]
  return result;
 80022c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	461a      	mov	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fe28 	bl	8000f38 <HAL_GetTick>
 80022e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	e009      	b.n	8002302 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fe23 	bl	8000f38 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e077      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
 8002302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800230a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	601a      	str	r2, [r3, #0]
  return result;
 800231c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d102      	bne.n	800233c <HAL_RCC_OscConfig+0xd4c>
 8002336:	4b31      	ldr	r3, [pc, #196]	; (80023fc <HAL_RCC_OscConfig+0xe0c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	e01b      	b.n	8002374 <HAL_RCC_OscConfig+0xd84>
 800233c:	f107 0320 	add.w	r3, r7, #32
 8002340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	f107 0320 	add.w	r3, r7, #32
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f107 031c 	add.w	r3, r7, #28
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f107 0318 	add.w	r3, r7, #24
 800235a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_RCC_OscConfig+0xe0c>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	f107 0210 	add.w	r2, r7, #16
 8002378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	f107 0210 	add.w	r2, r7, #16
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	fa92 f1a2 	rbit	r1, r2
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	6011      	str	r1, [r2, #0]
  return result;
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	fab2 f282 	clz	r2, r2
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f042 0220 	orr.w	r2, r2, #32
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	f002 021f 	and.w	r2, r2, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f202 	lsl.w	r2, r1, r2
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d19e      	bne.n	80022ee <HAL_RCC_OscConfig+0xcfe>
 80023b0:	e01e      	b.n	80023f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <HAL_RCC_OscConfig+0xe0c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80023da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80023de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b09e      	sub	sp, #120	; 0x78
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e162      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b90      	ldr	r3, [pc, #576]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	498b      	ldr	r1, [pc, #556]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b89      	ldr	r3, [pc, #548]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e14a      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b82      	ldr	r3, [pc, #520]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	497f      	ldr	r1, [pc, #508]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80dc 	beq.w	800262c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d13c      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xf6>
 800247c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002480:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xa6>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	e00f      	b.n	80024c6 <HAL_RCC_ClockConfig+0xc6>
 80024a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	667b      	str	r3, [r7, #100]	; 0x64
 80024b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b8:	663b      	str	r3, [r7, #96]	; 0x60
 80024ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024c2:	4b67      	ldr	r3, [pc, #412]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80024cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024ce:	fa92 f2a2 	rbit	r2, r2
 80024d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d17b      	bne.n	80025ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0f3      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d13c      	bne.n	8002578 <HAL_RCC_ClockConfig+0x178>
 80024fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002502:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800250c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_RCC_ClockConfig+0x128>
 8002522:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e00f      	b.n	8002548 <HAL_RCC_ClockConfig+0x148>
 8002528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
 8002536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
 800253c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002544:	4b46      	ldr	r3, [pc, #280]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800254c:	63ba      	str	r2, [r7, #56]	; 0x38
 800254e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f202 	lsl.w	r2, r1, r2
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d13a      	bne.n	80025ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b2      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
 8002578:	2302      	movs	r3, #2
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	095b      	lsrs	r3, r3, #5
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x1a0>
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e00d      	b.n	80025bc <HAL_RCC_ClockConfig+0x1bc>
 80025a0:	2302      	movs	r3, #2
 80025a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2202      	movs	r2, #2
 80025be:	61ba      	str	r2, [r7, #24]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	fa92 f2a2 	rbit	r2, r2
 80025c6:	617a      	str	r2, [r7, #20]
  return result;
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	fab2 f282 	clz	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f042 0220 	orr.w	r2, r2, #32
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	f002 021f 	and.w	r2, r2, #31
 80025da:	2101      	movs	r1, #1
 80025dc:	fa01 f202 	lsl.w	r2, r1, r2
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e079      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	491a      	ldr	r1, [pc, #104]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7fe fc9c 	bl	8000f38 <HAL_GetTick>
 8002600:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fc98 	bl	8000f38 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e061      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_ClockConfig+0x260>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d214      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4906      	ldr	r1, [pc, #24]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e040      	b.n	80026de <HAL_RCC_ClockConfig+0x2de>
 800265c:	40022000 	.word	0x40022000
 8002660:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	491a      	ldr	r1, [pc, #104]	; (80026e8 <HAL_RCC_ClockConfig+0x2e8>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4912      	ldr	r1, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026a2:	f000 f85d 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 80026a6:	4601      	mov	r1, r0
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_RCC_ClockConfig+0x2e8>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026b0:	22f0      	movs	r2, #240	; 0xf0
 80026b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	fa92 f2a2 	rbit	r2, r2
 80026ba:	60fa      	str	r2, [r7, #12]
  return result;
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	fab2 f282 	clz	r2, r2
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	40d3      	lsrs	r3, r2
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x2ec>)
 80026c8:	5cd3      	ldrb	r3, [r2, r3]
 80026ca:	fa21 f303 	lsr.w	r3, r1, r3
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_RCC_ClockConfig+0x2f0>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <HAL_RCC_ClockConfig+0x2f4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fbea 	bl	8000eb0 <HAL_InitTick>
  
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3778      	adds	r7, #120	; 0x78
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	08005ebc 	.word	0x08005ebc
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	20000010 	.word	0x20000010

080026f8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	; 0x28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002714:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_MCOConfig+0x64>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <HAL_RCC_MCOConfig+0x64>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	6153      	str	r3, [r2, #20]
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_RCC_MCOConfig+0x64>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f7fe fdb4 	bl	80012a8 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_MCOConfig+0x64>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	430b      	orrs	r3, r1
 800274e:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_MCOConfig+0x64>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
}
 8002754:	bf00      	nop
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	2300      	movs	r3, #0
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b04      	cmp	r3, #4
 8002788:	d002      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x30>
 800278a:	2b08      	cmp	r3, #8
 800278c:	d003      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x36>
 800278e:	e03c      	b.n	800280a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002792:	623b      	str	r3, [r7, #32]
      break;
 8002794:	e03c      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800279c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80027a0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	607a      	str	r2, [r7, #4]
  return result;
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	40d3      	lsrs	r3, r2
 80027b4:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027ba:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	220f      	movs	r2, #15
 80027c4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	fa92 f2a2 	rbit	r2, r2
 80027cc:	60fa      	str	r2, [r7, #12]
  return result;
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	40d3      	lsrs	r3, r2
 80027d8:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_RCC_GetSysClockFreq+0xcc>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e004      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	623b      	str	r3, [r7, #32]
      break;
 8002808:	e002      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_RCC_GetSysClockFreq+0xc4>)
 800280c:	623b      	str	r3, [r7, #32]
      break;
 800280e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002810:	6a3b      	ldr	r3, [r7, #32]
}
 8002812:	4618      	mov	r0, r3
 8002814:	372c      	adds	r7, #44	; 0x2c
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40021000 	.word	0x40021000
 8002824:	007a1200 	.word	0x007a1200
 8002828:	08005ed4 	.word	0x08005ed4
 800282c:	08005ee4 	.word	0x08005ee4
 8002830:	003d0900 	.word	0x003d0900

08002834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	2000000c 	.word	0x2000000c

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002852:	f7ff ffef 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002856:	4601      	mov	r1, r0
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002860:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002864:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	603a      	str	r2, [r7, #0]
  return result;
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	40d3      	lsrs	r3, r2
 8002878:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_RCC_GetPCLK1Freq+0x40>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	08005ecc 	.word	0x08005ecc

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002896:	f7ff ffcd 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x3c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	603a      	str	r2, [r7, #0]
  return result;
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	40d3      	lsrs	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08005ecc 	.word	0x08005ecc

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b092      	sub	sp, #72	; 0x48
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80d4 	beq.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f8:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10e      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b45      	ldr	r3, [pc, #276]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b42      	ldr	r3, [pc, #264]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a41      	ldr	r2, [pc, #260]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002938:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7fe fafd 	bl	8000f38 <HAL_GetTick>
 800293e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7fe faf9 	bl	8000f38 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b64      	cmp	r3, #100	; 0x64
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e13c      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8084 	beq.w	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800297c:	429a      	cmp	r2, r3
 800297e:	d07c      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	461a      	mov	r2, r3
 80029aa:	2301      	movs	r3, #1
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	fa93 f3a3 	rbit	r3, r3
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	461a      	mov	r2, r3
 80029ce:	2300      	movs	r3, #0
 80029d0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029d2:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe faa9 	bl	8000f38 <HAL_GetTick>
 80029e6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe faa5 	bl	8000f38 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0e6      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	61fb      	str	r3, [r7, #28]
  return result;
 8002a18:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d108      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a2e:	4b01      	ldr	r3, [pc, #4]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	e00d      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	10908100 	.word	0x10908100
 8002a40:	2302      	movs	r3, #2
 8002a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2202      	movs	r2, #2
 8002a52:	613a      	str	r2, [r7, #16]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	fa92 f2a2 	rbit	r2, r2
 8002a5a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	fab2 f282 	clz	r2, r2
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f002 021f 	and.w	r2, r2, #31
 8002a6e:	2101      	movs	r1, #1
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	4013      	ands	r3, r2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0b7      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a7a:	4b57      	ldr	r3, [pc, #348]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4954      	ldr	r1, [pc, #336]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a8c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	4a4f      	ldr	r2, [pc, #316]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f023 0203 	bic.w	r2, r3, #3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4947      	ldr	r1, [pc, #284]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f023 0210 	bic.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4940      	ldr	r1, [pc, #256]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f023 0220 	bic.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	4938      	ldr	r1, [pc, #224]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4931      	ldr	r1, [pc, #196]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	4929      	ldr	r1, [pc, #164]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	491a      	ldr	r1, [pc, #104]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	4913      	ldr	r1, [pc, #76]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	490b      	ldr	r1, [pc, #44]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3748      	adds	r7, #72	; 0x48
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000

08002bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e049      	b.n	8002c82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd ff58 	bl	8000ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f000 fd02 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d001      	beq.n	8002ca4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e033      	b.n	8002d0c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <HAL_TIM_Base_Start+0x8c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIM_Base_Start+0x3e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d004      	beq.n	8002cca <HAL_TIM_Base_Start+0x3e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_TIM_Base_Start+0x90>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d115      	bne.n	8002cf6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <HAL_TIM_Base_Start+0x94>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d015      	beq.n	8002d08 <HAL_TIM_Base_Start+0x7c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d011      	beq.n	8002d08 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf4:	e008      	b.n	8002d08 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0201 	orr.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e000      	b.n	8002d0a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	00010007 	.word	0x00010007

08002d24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e049      	b.n	8002dca <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f841 	bl	8002dd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f000 fc5e 	bl	8003624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_TIM_IC_Start_IT+0x1e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e023      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x66>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_IC_Start_IT+0x2e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	e01b      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x66>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_IC_Start_IT+0x3e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	e013      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x66>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b0c      	cmp	r3, #12
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_IC_Start_IT+0x4e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	e00b      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x66>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b10      	cmp	r3, #16
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_IC_Start_IT+0x5e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e003      	b.n	8002e4e <HAL_TIM_IC_Start_IT+0x66>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d104      	bne.n	8002e60 <HAL_TIM_IC_Start_IT+0x78>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e013      	b.n	8002e88 <HAL_TIM_IC_Start_IT+0xa0>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d104      	bne.n	8002e70 <HAL_TIM_IC_Start_IT+0x88>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e00b      	b.n	8002e88 <HAL_TIM_IC_Start_IT+0xa0>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d104      	bne.n	8002e80 <HAL_TIM_IC_Start_IT+0x98>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e003      	b.n	8002e88 <HAL_TIM_IC_Start_IT+0xa0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d102      	bne.n	8002e96 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e90:	7b7b      	ldrb	r3, [r7, #13]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0c9      	b.n	800302e <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_IC_Start_IT+0xc2>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	e023      	b.n	8002ef2 <HAL_TIM_IC_Start_IT+0x10a>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_IC_Start_IT+0xd2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb8:	e01b      	b.n	8002ef2 <HAL_TIM_IC_Start_IT+0x10a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_IC_Start_IT+0xe2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec8:	e013      	b.n	8002ef2 <HAL_TIM_IC_Start_IT+0x10a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_IC_Start_IT+0xf2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed8:	e00b      	b.n	8002ef2 <HAL_TIM_IC_Start_IT+0x10a>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_IC_Start_IT+0x102>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	e003      	b.n	8002ef2 <HAL_TIM_IC_Start_IT+0x10a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2202      	movs	r2, #2
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_IC_Start_IT+0x11a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f00:	e013      	b.n	8002f2a <HAL_TIM_IC_Start_IT+0x142>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_IC_Start_IT+0x12a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f10:	e00b      	b.n	8002f2a <HAL_TIM_IC_Start_IT+0x142>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_IC_Start_IT+0x13a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f20:	e003      	b.n	8002f2a <HAL_TIM_IC_Start_IT+0x142>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d841      	bhi.n	8002fb4 <HAL_TIM_IC_Start_IT+0x1cc>
 8002f30:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_TIM_IC_Start_IT+0x150>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002fb5 	.word	0x08002fb5
 8002f40:	08002fb5 	.word	0x08002fb5
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08002f7f 	.word	0x08002f7f
 8002f4c:	08002fb5 	.word	0x08002fb5
 8002f50:	08002fb5 	.word	0x08002fb5
 8002f54:	08002fb5 	.word	0x08002fb5
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08002fb5 	.word	0x08002fb5
 8002f68:	08002fa3 	.word	0x08002fa3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0202 	orr.w	r2, r2, #2
 8002f7a:	60da      	str	r2, [r3, #12]
      break;
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0204 	orr.w	r2, r2, #4
 8002f8c:	60da      	str	r2, [r3, #12]
      break;
 8002f8e:	e014      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0208 	orr.w	r2, r2, #8
 8002f9e:	60da      	str	r2, [r3, #12]
      break;
 8002fa0:	e00b      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0210 	orr.w	r2, r2, #16
 8002fb0:	60da      	str	r2, [r3, #12]
      break;
 8002fb2:	e002      	b.n	8002fba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d135      	bne.n	800302c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd3f 	bl	8003a4c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a19      	ldr	r2, [pc, #100]	; (8003038 <HAL_TIM_IC_Start_IT+0x250>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_TIM_IC_Start_IT+0x204>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_IC_Start_IT+0x204>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_TIM_IC_Start_IT+0x254>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d115      	bne.n	8003018 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_TIM_IC_Start_IT+0x258>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d015      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x242>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d011      	beq.n	800302a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003016:	e008      	b.n	800302a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e000      	b.n	800302c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40014000 	.word	0x40014000
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0202 	mvn.w	r2, #2
 8003070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fb28 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 faaa 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fab1 	bl	80035fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0204 	mvn.w	r2, #4
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fafe 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fa80 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fa87 	bl	80035fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d122      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d11b      	bne.n	8003148 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0208 	mvn.w	r2, #8
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2204      	movs	r2, #4
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fad4 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fa56 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fa5d 	bl	80035fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d122      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d11b      	bne.n	800319c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd faaa 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa2c 	bl	80035e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa33 	bl	80035fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10e      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d107      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0201 	mvn.w	r2, #1
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa06 	bl	80035d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d10e      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d107      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fcc2 	bl	8003b78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003202:	d10e      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320e:	2b80      	cmp	r3, #128	; 0x80
 8003210:	d107      	bne.n	8003222 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800321a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fcb5 	bl	8003b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d10e      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323a:	2b40      	cmp	r3, #64	; 0x40
 800323c:	d107      	bne.n	800324e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9e1 	bl	8003610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b20      	cmp	r3, #32
 800325a:	d10e      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f003 0320 	and.w	r3, r3, #32
 8003266:	2b20      	cmp	r3, #32
 8003268:	d107      	bne.n	800327a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0220 	mvn.w	r2, #32
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fc75 	bl	8003b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_TIM_IC_ConfigChannel+0x1e>
 800329c:	2302      	movs	r3, #2
 800329e:	e088      	b.n	80033b2 <HAL_TIM_IC_ConfigChannel+0x130>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11b      	bne.n	80032e6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 fa1f 	bl	8003700 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699a      	ldr	r2, [r3, #24]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020c 	bic.w	r2, r2, #12
 80032d0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6999      	ldr	r1, [r3, #24]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	619a      	str	r2, [r3, #24]
 80032e4:	e060      	b.n	80033a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d11c      	bne.n	8003326 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f000 fa85 	bl	800380a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800330e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6999      	ldr	r1, [r3, #24]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	021a      	lsls	r2, r3, #8
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]
 8003324:	e040      	b.n	80033a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f000 fad2 	bl	80038e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69da      	ldr	r2, [r3, #28]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 020c 	bic.w	r2, r2, #12
 800334e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69d9      	ldr	r1, [r3, #28]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	61da      	str	r2, [r3, #28]
 8003362:	e021      	b.n	80033a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d11c      	bne.n	80033a4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 faef 	bl	800395c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800338c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	021a      	lsls	r2, r3, #8
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	61da      	str	r2, [r3, #28]
 80033a2:	e001      	b.n	80033a8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_TIM_ConfigClockSource+0x1c>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0b6      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x18a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003400:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003412:	d03e      	beq.n	8003492 <HAL_TIM_ConfigClockSource+0xd8>
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003418:	f200 8087 	bhi.w	800352a <HAL_TIM_ConfigClockSource+0x170>
 800341c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003420:	f000 8086 	beq.w	8003530 <HAL_TIM_ConfigClockSource+0x176>
 8003424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003428:	d87f      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 800342a:	2b70      	cmp	r3, #112	; 0x70
 800342c:	d01a      	beq.n	8003464 <HAL_TIM_ConfigClockSource+0xaa>
 800342e:	2b70      	cmp	r3, #112	; 0x70
 8003430:	d87b      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 8003432:	2b60      	cmp	r3, #96	; 0x60
 8003434:	d050      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x11e>
 8003436:	2b60      	cmp	r3, #96	; 0x60
 8003438:	d877      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 800343a:	2b50      	cmp	r3, #80	; 0x50
 800343c:	d03c      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0xfe>
 800343e:	2b50      	cmp	r3, #80	; 0x50
 8003440:	d873      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d058      	beq.n	80034f8 <HAL_TIM_ConfigClockSource+0x13e>
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d86f      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 800344a:	2b30      	cmp	r3, #48	; 0x30
 800344c:	d064      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x15e>
 800344e:	2b30      	cmp	r3, #48	; 0x30
 8003450:	d86b      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 8003452:	2b20      	cmp	r3, #32
 8003454:	d060      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x15e>
 8003456:	2b20      	cmp	r3, #32
 8003458:	d867      	bhi.n	800352a <HAL_TIM_ConfigClockSource+0x170>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d05c      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x15e>
 800345e:	2b10      	cmp	r3, #16
 8003460:	d05a      	beq.n	8003518 <HAL_TIM_ConfigClockSource+0x15e>
 8003462:	e062      	b.n	800352a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f000 faca 	bl	8003a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003486:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]
      break;
 8003490:	e04f      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f000 fab3 	bl	8003a0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b4:	609a      	str	r2, [r3, #8]
      break;
 80034b6:	e03c      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f000 f971 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2150      	movs	r1, #80	; 0x50
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fa80 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 80034d6:	e02c      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f000 f9cd 	bl	8003884 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2160      	movs	r1, #96	; 0x60
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fa70 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 80034f6:	e01c      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	461a      	mov	r2, r3
 8003506:	f000 f951 	bl	80037ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	4618      	mov	r0, r3
 8003512:	f000 fa60 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003516:	e00c      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 fa57 	bl	80039d6 <TIM_ITRx_SetConfig>
      break;
 8003528:	e003      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      break;
 800352e:	e000      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003530:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d831      	bhi.n	80035c4 <HAL_TIM_ReadCapturedValue+0x78>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035c5 	.word	0x080035c5
 8003570:	080035c5 	.word	0x080035c5
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080035a7 	.word	0x080035a7
 800357c:	080035c5 	.word	0x080035c5
 8003580:	080035c5 	.word	0x080035c5
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035c5 	.word	0x080035c5
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035bb 	.word	0x080035bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	60fb      	str	r3, [r7, #12]

      break;
 80035a4:	e00f      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	60fb      	str	r3, [r7, #12]

      break;
 80035ae:	e00a      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	60fb      	str	r3, [r7, #12]

      break;
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	60fb      	str	r3, [r7, #12]

      break;
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035c4:	bf00      	nop
  }

  return tmpreg;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <TIM_Base_SetConfig+0xcc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x20>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_Base_SetConfig+0xcc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_Base_SetConfig+0xd0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <TIM_Base_SetConfig+0xd4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x5a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <TIM_Base_SetConfig+0xd8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <TIM_Base_SetConfig+0xcc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00b      	beq.n	80036d4 <TIM_Base_SetConfig+0xb0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <TIM_Base_SetConfig+0xd0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <TIM_Base_SetConfig+0xb0>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <TIM_Base_SetConfig+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_Base_SetConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0b      	ldr	r2, [pc, #44]	; (80036fc <TIM_Base_SetConfig+0xd8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <TIM_TI1_SetConfig+0xa4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <TIM_TI1_SetConfig+0x3e>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003734:	d003      	beq.n	800373e <TIM_TI1_SetConfig+0x3e>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <TIM_TI1_SetConfig+0xa8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <TIM_TI1_SetConfig+0x42>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <TIM_TI1_SetConfig+0x44>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	e003      	b.n	8003762 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	b2db      	uxtb	r3, r3
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f023 030a 	bic.w	r3, r3, #10
 800377c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 030a 	and.w	r3, r3, #10
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40014000 	.word	0x40014000

080037ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f023 0201 	bic.w	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f023 030a 	bic.w	r3, r3, #10
 80037e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	621a      	str	r2, [r3, #32]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 0210 	bic.w	r2, r3, #16
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	031b      	lsls	r3, r3, #12
 800384e:	b29b      	uxth	r3, r3
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800385c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	621a      	str	r2, [r3, #32]
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f023 0210 	bic.w	r2, r3, #16
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	031b      	lsls	r3, r3, #12
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	621a      	str	r2, [r3, #32]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f023 0303 	bic.w	r3, r3, #3
 8003910:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	b2db      	uxtb	r3, r3
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003934:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	021b      	lsls	r3, r3, #8
 800393a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800399a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	031b      	lsls	r3, r3, #12
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80039ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	031b      	lsls	r3, r3, #12
 80039b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	621a      	str	r2, [r3, #32]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b085      	sub	sp, #20
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f043 0307 	orr.w	r3, r3, #7
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	609a      	str	r2, [r3, #8]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	2201      	movs	r2, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	401a      	ands	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1a      	ldr	r2, [r3, #32]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	431a      	orrs	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e04f      	b.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a21      	ldr	r2, [pc, #132]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d009      	beq.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d004      	beq.n	8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10c      	bne.n	8003b3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40014000 	.word	0x40014000

08003b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e040      	b.n	8003c34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7fc ffd4 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2224      	movs	r2, #36	; 0x24
 8003bcc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fbbe 	bl	8004360 <UART_SetConfig>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e022      	b.n	8003c34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fce8 	bl	80045cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 fd6f 	bl	8004710 <UART_CheckIdleState>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	f040 8082 	bne.w	8003d5a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Transmit+0x26>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e07a      	b.n	8003d5c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x38>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e073      	b.n	8003d5c <HAL_UART_Transmit+0x120>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2221      	movs	r2, #33	; 0x21
 8003c88:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8a:	f7fd f955 	bl	8000f38 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	d108      	bne.n	8003cbc <HAL_UART_Transmit+0x80>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e003      	b.n	8003cc4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ccc:	e02d      	b.n	8003d2a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fd62 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e039      	b.n	8003d5c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	881a      	ldrh	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3302      	adds	r3, #2
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	e008      	b.n	8003d18 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1cb      	bne.n	8003cce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fd2e 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e005      	b.n	8003d5c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3720      	adds	r7, #32
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b0ba      	sub	sp, #232	; 0xe8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003d8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003d92:	4013      	ands	r3, r2
 8003d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003d98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d115      	bne.n	8003dcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da4:	f003 0320 	and.w	r3, r3, #32
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00f      	beq.n	8003dcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d009      	beq.n	8003dcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 82a3 	beq.w	8004308 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
      }
      return;
 8003dca:	e29d      	b.n	8004308 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003dcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8117 	beq.w	8004004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003de2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003de6:	4b85      	ldr	r3, [pc, #532]	; (8003ffc <HAL_UART_IRQHandler+0x298>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 810a 	beq.w	8004004 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d011      	beq.n	8003e20 <HAL_UART_IRQHandler+0xbc>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e16:	f043 0201 	orr.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d011      	beq.n	8003e50 <HAL_UART_IRQHandler+0xec>
 8003e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00b      	beq.n	8003e50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <HAL_UART_IRQHandler+0x11c>
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00b      	beq.n	8003e80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e76:	f043 0202 	orr.w	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d017      	beq.n	8003ebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb2:	f043 0208 	orr.w	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d012      	beq.n	8003eee <HAL_UART_IRQHandler+0x18a>
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8209 	beq.w	800430c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00d      	beq.n	8003f22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d007      	beq.n	8003f22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d04f      	beq.n	8003fe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fcef 	bl	800492a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d141      	bne.n	8003fde <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3308      	adds	r3, #8
 8003f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1d9      	bne.n	8003f5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d013      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <HAL_UART_IRQHandler+0x29c>)
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fd f936 	bl	800122c <HAL_DMA_Abort_IT>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	e00f      	b.n	8003ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9ac 	bl	8004334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	e00b      	b.n	8003ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f9a8 	bl	8004334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe4:	e007      	b.n	8003ff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9a4 	bl	8004334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003ff4:	e18a      	b.n	800430c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff6:	bf00      	nop
    return;
 8003ff8:	e188      	b.n	800430c <HAL_UART_IRQHandler+0x5a8>
 8003ffa:	bf00      	nop
 8003ffc:	04000120 	.word	0x04000120
 8004000:	080049f1 	.word	0x080049f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	2b01      	cmp	r3, #1
 800400a:	f040 8143 	bne.w	8004294 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 813c 	beq.w	8004294 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8135 	beq.w	8004294 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2210      	movs	r2, #16
 8004030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	f040 80b1 	bne.w	80041a4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800404e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 815c 	beq.w	8004310 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800405e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004062:	429a      	cmp	r2, r3
 8004064:	f080 8154 	bcs.w	8004310 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800406e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b20      	cmp	r3, #32
 800407a:	f000 8085 	beq.w	8004188 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800409a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1da      	bne.n	800407e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3308      	adds	r3, #8
 80040ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e1      	bne.n	80040c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800412a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800412e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e3      	bne.n	8004104 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004158:	f023 0310 	bic.w	r3, r3, #16
 800415c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	461a      	mov	r2, r3
 8004166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800416a:	65bb      	str	r3, [r7, #88]	; 0x58
 800416c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e4      	bne.n	8004148 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4618      	mov	r0, r3
 8004184:	f7fd f819 	bl	80011ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004194:	b29b      	uxth	r3, r3
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	b29b      	uxth	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8d3 	bl	8004348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041a2:	e0b5      	b.n	8004310 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a7 	beq.w	8004314 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80041c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80a2 	beq.w	8004314 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041f2:	647b      	str	r3, [r7, #68]	; 0x44
 80041f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e4      	bne.n	80041d0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	623b      	str	r3, [r7, #32]
   return(result);
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800422a:	633a      	str	r2, [r7, #48]	; 0x30
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e3      	bne.n	8004206 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	60fb      	str	r3, [r7, #12]
   return(result);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	69b9      	ldr	r1, [r7, #24]
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	617b      	str	r3, [r7, #20]
   return(result);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e4      	bne.n	8004250 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f85b 	bl	8004348 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004292:	e03f      	b.n	8004314 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <HAL_UART_IRQHandler+0x55a>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d008      	beq.n	80042be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fbda 	bl	8004a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042bc:	e02d      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01c      	beq.n	8004318 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
    }
    return;
 80042e6:	e017      	b.n	8004318 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <HAL_UART_IRQHandler+0x5b6>
 80042f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00c      	beq.n	800431a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb8b 	bl	8004a1c <UART_EndTransmit_IT>
    return;
 8004306:	e008      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004308:	bf00      	nop
 800430a:	e006      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
    return;
 800430c:	bf00      	nop
 800430e:	e004      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004318:	bf00      	nop
  }

}
 800431a:	37e8      	adds	r7, #232	; 0xe8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4313      	orrs	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8a      	ldr	r3, [pc, #552]	; (80045b4 <UART_SetConfig+0x254>)
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	430b      	orrs	r3, r1
 8004396:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a78      	ldr	r2, [pc, #480]	; (80045b8 <UART_SetConfig+0x258>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d120      	bne.n	800441e <UART_SetConfig+0xbe>
 80043dc:	4b77      	ldr	r3, [pc, #476]	; (80045bc <UART_SetConfig+0x25c>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d817      	bhi.n	8004418 <UART_SetConfig+0xb8>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x90>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	0800440d 	.word	0x0800440d
 80043f8:	08004413 	.word	0x08004413
 80043fc:	08004407 	.word	0x08004407
 8004400:	2300      	movs	r3, #0
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e01d      	b.n	8004442 <UART_SetConfig+0xe2>
 8004406:	2302      	movs	r3, #2
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e01a      	b.n	8004442 <UART_SetConfig+0xe2>
 800440c:	2304      	movs	r3, #4
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e017      	b.n	8004442 <UART_SetConfig+0xe2>
 8004412:	2308      	movs	r3, #8
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	e014      	b.n	8004442 <UART_SetConfig+0xe2>
 8004418:	2310      	movs	r3, #16
 800441a:	77fb      	strb	r3, [r7, #31]
 800441c:	e011      	b.n	8004442 <UART_SetConfig+0xe2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a67      	ldr	r2, [pc, #412]	; (80045c0 <UART_SetConfig+0x260>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d102      	bne.n	800442e <UART_SetConfig+0xce>
 8004428:	2300      	movs	r3, #0
 800442a:	77fb      	strb	r3, [r7, #31]
 800442c:	e009      	b.n	8004442 <UART_SetConfig+0xe2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a64      	ldr	r2, [pc, #400]	; (80045c4 <UART_SetConfig+0x264>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d102      	bne.n	800443e <UART_SetConfig+0xde>
 8004438:	2300      	movs	r3, #0
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e001      	b.n	8004442 <UART_SetConfig+0xe2>
 800443e:	2310      	movs	r3, #16
 8004440:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800444a:	d15b      	bne.n	8004504 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800444c:	7ffb      	ldrb	r3, [r7, #31]
 800444e:	2b08      	cmp	r3, #8
 8004450:	d827      	bhi.n	80044a2 <UART_SetConfig+0x142>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <UART_SetConfig+0xf8>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	0800447d 	.word	0x0800447d
 800445c:	08004485 	.word	0x08004485
 8004460:	0800448d 	.word	0x0800448d
 8004464:	080044a3 	.word	0x080044a3
 8004468:	08004493 	.word	0x08004493
 800446c:	080044a3 	.word	0x080044a3
 8004470:	080044a3 	.word	0x080044a3
 8004474:	080044a3 	.word	0x080044a3
 8004478:	0800449b 	.word	0x0800449b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800447c:	f7fe f9e6 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8004480:	61b8      	str	r0, [r7, #24]
        break;
 8004482:	e013      	b.n	80044ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe fa04 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8004488:	61b8      	str	r0, [r7, #24]
        break;
 800448a:	e00f      	b.n	80044ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <UART_SetConfig+0x268>)
 800448e:	61bb      	str	r3, [r7, #24]
        break;
 8004490:	e00c      	b.n	80044ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004492:	f7fe f965 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8004496:	61b8      	str	r0, [r7, #24]
        break;
 8004498:	e008      	b.n	80044ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800449a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449e:	61bb      	str	r3, [r7, #24]
        break;
 80044a0:	e004      	b.n	80044ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	77bb      	strb	r3, [r7, #30]
        break;
 80044aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d074      	beq.n	800459c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	005a      	lsls	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b0f      	cmp	r3, #15
 80044ce:	d916      	bls.n	80044fe <UART_SetConfig+0x19e>
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d6:	d212      	bcs.n	80044fe <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f023 030f 	bic.w	r3, r3, #15
 80044e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	89fa      	ldrh	r2, [r7, #14]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	e04e      	b.n	800459c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	77bb      	strb	r3, [r7, #30]
 8004502:	e04b      	b.n	800459c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004504:	7ffb      	ldrb	r3, [r7, #31]
 8004506:	2b08      	cmp	r3, #8
 8004508:	d827      	bhi.n	800455a <UART_SetConfig+0x1fa>
 800450a:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <UART_SetConfig+0x1b0>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004535 	.word	0x08004535
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004545 	.word	0x08004545
 800451c:	0800455b 	.word	0x0800455b
 8004520:	0800454b 	.word	0x0800454b
 8004524:	0800455b 	.word	0x0800455b
 8004528:	0800455b 	.word	0x0800455b
 800452c:	0800455b 	.word	0x0800455b
 8004530:	08004553 	.word	0x08004553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7fe f98a 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8004538:	61b8      	str	r0, [r7, #24]
        break;
 800453a:	e013      	b.n	8004564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800453c:	f7fe f9a8 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8004540:	61b8      	str	r0, [r7, #24]
        break;
 8004542:	e00f      	b.n	8004564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <UART_SetConfig+0x268>)
 8004546:	61bb      	str	r3, [r7, #24]
        break;
 8004548:	e00c      	b.n	8004564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe f909 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800454e:	61b8      	str	r0, [r7, #24]
        break;
 8004550:	e008      	b.n	8004564 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	61bb      	str	r3, [r7, #24]
        break;
 8004558:	e004      	b.n	8004564 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	77bb      	strb	r3, [r7, #30]
        break;
 8004562:	bf00      	nop
    }

    if (pclk != 0U)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085a      	lsrs	r2, r3, #1
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	441a      	add	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	b29b      	uxth	r3, r3
 800457e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d908      	bls.n	8004598 <UART_SetConfig+0x238>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	efff69f3 	.word	0xefff69f3
 80045b8:	40013800 	.word	0x40013800
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40004400 	.word	0x40004400
 80045c4:	40004800 	.word	0x40004800
 80045c8:	007a1200 	.word	0x007a1200

080045cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0310 	and.w	r3, r3, #16
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ca:	d10a      	bne.n	80046e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004720:	f7fc fc0a 	bl	8000f38 <HAL_GetTick>
 8004724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d10e      	bne.n	8004752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f82d 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e023      	b.n	800479a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b04      	cmp	r3, #4
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f817 	bl	80047a2 <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00d      	b.n	800479a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b09c      	sub	sp, #112	; 0x70
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	4613      	mov	r3, r2
 80047b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b2:	e0a5      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	f000 80a1 	beq.w	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047be:	f7fc fbbb 	bl	8000f38 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d13e      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e8:	667b      	str	r3, [r7, #100]	; 0x64
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e6      	bne.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004810:	e853 3f00 	ldrex	r3, [r3]
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	663b      	str	r3, [r7, #96]	; 0x60
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004826:	64ba      	str	r2, [r7, #72]	; 0x48
 8004828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800482c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800482e:	e841 2300 	strex	r3, r2, [r1]
 8004832:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e5      	bne.n	8004806 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e067      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d04f      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486e:	d147      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004878:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
 800489a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	613b      	str	r3, [r7, #16]
   return(result);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048cc:	623a      	str	r2, [r7, #32]
 80048ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	69f9      	ldr	r1, [r7, #28]
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e010      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	f43f af4a 	beq.w	80047b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3770      	adds	r7, #112	; 0x70
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800492a:	b480      	push	{r7}
 800492c:	b095      	sub	sp, #84	; 0x54
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	643b      	str	r3, [r7, #64]	; 0x40
 8004952:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004956:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e6      	bne.n	8004932 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	e853 3f00 	ldrex	r3, [r3]
 8004972:	61fb      	str	r3, [r7, #28]
   return(result);
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	64bb      	str	r3, [r7, #72]	; 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004984:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498c:	e841 2300 	strex	r3, r2, [r1]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e5      	bne.n	8004964 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	2b01      	cmp	r3, #1
 800499e:	d118      	bne.n	80049d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	e853 3f00 	ldrex	r3, [r3]
 80049ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f023 0310 	bic.w	r3, r3, #16
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6979      	ldr	r1, [r7, #20]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	613b      	str	r3, [r7, #16]
   return(result);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e6      	bne.n	80049a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80049e4:	bf00      	nop
 80049e6:	3754      	adds	r7, #84	; 0x54
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff fc90 	bl	8004334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b088      	sub	sp, #32
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	61bb      	str	r3, [r7, #24]
 8004a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6979      	ldr	r1, [r7, #20]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e6      	bne.n	8004a24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fc5c 	bl	8004320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a68:	bf00      	nop
 8004a6a:	3720      	adds	r7, #32
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <__errno>:
 8004a84:	4b01      	ldr	r3, [pc, #4]	; (8004a8c <__errno+0x8>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000018 	.word	0x20000018

08004a90 <__libc_init_array>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4d0d      	ldr	r5, [pc, #52]	; (8004ac8 <__libc_init_array+0x38>)
 8004a94:	4c0d      	ldr	r4, [pc, #52]	; (8004acc <__libc_init_array+0x3c>)
 8004a96:	1b64      	subs	r4, r4, r5
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	2600      	movs	r6, #0
 8004a9c:	42a6      	cmp	r6, r4
 8004a9e:	d109      	bne.n	8004ab4 <__libc_init_array+0x24>
 8004aa0:	4d0b      	ldr	r5, [pc, #44]	; (8004ad0 <__libc_init_array+0x40>)
 8004aa2:	4c0c      	ldr	r4, [pc, #48]	; (8004ad4 <__libc_init_array+0x44>)
 8004aa4:	f001 f9f4 	bl	8005e90 <_init>
 8004aa8:	1b64      	subs	r4, r4, r5
 8004aaa:	10a4      	asrs	r4, r4, #2
 8004aac:	2600      	movs	r6, #0
 8004aae:	42a6      	cmp	r6, r4
 8004ab0:	d105      	bne.n	8004abe <__libc_init_array+0x2e>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab8:	4798      	blx	r3
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7ee      	b.n	8004a9c <__libc_init_array+0xc>
 8004abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac2:	4798      	blx	r3
 8004ac4:	3601      	adds	r6, #1
 8004ac6:	e7f2      	b.n	8004aae <__libc_init_array+0x1e>
 8004ac8:	08006040 	.word	0x08006040
 8004acc:	08006040 	.word	0x08006040
 8004ad0:	08006040 	.word	0x08006040
 8004ad4:	08006044 	.word	0x08006044

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <rand>:
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <rand+0x60>)
 8004aea:	b510      	push	{r4, lr}
 8004aec:	681c      	ldr	r4, [r3, #0]
 8004aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af0:	b9b3      	cbnz	r3, 8004b20 <rand+0x38>
 8004af2:	2018      	movs	r0, #24
 8004af4:	f000 f888 	bl	8004c08 <malloc>
 8004af8:	63a0      	str	r0, [r4, #56]	; 0x38
 8004afa:	b928      	cbnz	r0, 8004b08 <rand+0x20>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <rand+0x64>)
 8004b00:	4813      	ldr	r0, [pc, #76]	; (8004b50 <rand+0x68>)
 8004b02:	214e      	movs	r1, #78	; 0x4e
 8004b04:	f000 f850 	bl	8004ba8 <__assert_func>
 8004b08:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <rand+0x6c>)
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <rand+0x70>)
 8004b0c:	e9c0 2300 	strd	r2, r3, [r0]
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <rand+0x74>)
 8004b12:	6083      	str	r3, [r0, #8]
 8004b14:	230b      	movs	r3, #11
 8004b16:	8183      	strh	r3, [r0, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004b20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004b22:	480f      	ldr	r0, [pc, #60]	; (8004b60 <rand+0x78>)
 8004b24:	690a      	ldr	r2, [r1, #16]
 8004b26:	694b      	ldr	r3, [r1, #20]
 8004b28:	4c0e      	ldr	r4, [pc, #56]	; (8004b64 <rand+0x7c>)
 8004b2a:	4350      	muls	r0, r2
 8004b2c:	fb04 0003 	mla	r0, r4, r3, r0
 8004b30:	fba2 3404 	umull	r3, r4, r2, r4
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	4404      	add	r4, r0
 8004b38:	f144 0000 	adc.w	r0, r4, #0
 8004b3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004b40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	bf00      	nop
 8004b48:	20000018 	.word	0x20000018
 8004b4c:	08005ef8 	.word	0x08005ef8
 8004b50:	08005f0f 	.word	0x08005f0f
 8004b54:	abcd330e 	.word	0xabcd330e
 8004b58:	e66d1234 	.word	0xe66d1234
 8004b5c:	0005deec 	.word	0x0005deec
 8004b60:	5851f42d 	.word	0x5851f42d
 8004b64:	4c957f2d 	.word	0x4c957f2d

08004b68 <siprintf>:
 8004b68:	b40e      	push	{r1, r2, r3}
 8004b6a:	b500      	push	{lr}
 8004b6c:	b09c      	sub	sp, #112	; 0x70
 8004b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b70:	9002      	str	r0, [sp, #8]
 8004b72:	9006      	str	r0, [sp, #24]
 8004b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b78:	4809      	ldr	r0, [pc, #36]	; (8004ba0 <siprintf+0x38>)
 8004b7a:	9107      	str	r1, [sp, #28]
 8004b7c:	9104      	str	r1, [sp, #16]
 8004b7e:	4909      	ldr	r1, [pc, #36]	; (8004ba4 <siprintf+0x3c>)
 8004b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b84:	9105      	str	r1, [sp, #20]
 8004b86:	6800      	ldr	r0, [r0, #0]
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	a902      	add	r1, sp, #8
 8004b8c:	f000 f94a 	bl	8004e24 <_svfiprintf_r>
 8004b90:	9b02      	ldr	r3, [sp, #8]
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	b01c      	add	sp, #112	; 0x70
 8004b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b9c:	b003      	add	sp, #12
 8004b9e:	4770      	bx	lr
 8004ba0:	20000018 	.word	0x20000018
 8004ba4:	ffff0208 	.word	0xffff0208

08004ba8 <__assert_func>:
 8004ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004baa:	4614      	mov	r4, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <__assert_func+0x2c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	68d8      	ldr	r0, [r3, #12]
 8004bb6:	b14c      	cbz	r4, 8004bcc <__assert_func+0x24>
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <__assert_func+0x30>)
 8004bba:	9100      	str	r1, [sp, #0]
 8004bbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004bc0:	4906      	ldr	r1, [pc, #24]	; (8004bdc <__assert_func+0x34>)
 8004bc2:	462b      	mov	r3, r5
 8004bc4:	f000 f80e 	bl	8004be4 <fiprintf>
 8004bc8:	f000 fdea 	bl	80057a0 <abort>
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <__assert_func+0x38>)
 8004bce:	461c      	mov	r4, r3
 8004bd0:	e7f3      	b.n	8004bba <__assert_func+0x12>
 8004bd2:	bf00      	nop
 8004bd4:	20000018 	.word	0x20000018
 8004bd8:	08005f6e 	.word	0x08005f6e
 8004bdc:	08005f7b 	.word	0x08005f7b
 8004be0:	08005fa9 	.word	0x08005fa9

08004be4 <fiprintf>:
 8004be4:	b40e      	push	{r1, r2, r3}
 8004be6:	b503      	push	{r0, r1, lr}
 8004be8:	4601      	mov	r1, r0
 8004bea:	ab03      	add	r3, sp, #12
 8004bec:	4805      	ldr	r0, [pc, #20]	; (8004c04 <fiprintf+0x20>)
 8004bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bf2:	6800      	ldr	r0, [r0, #0]
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	f000 fa3f 	bl	8005078 <_vfiprintf_r>
 8004bfa:	b002      	add	sp, #8
 8004bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c00:	b003      	add	sp, #12
 8004c02:	4770      	bx	lr
 8004c04:	20000018 	.word	0x20000018

08004c08 <malloc>:
 8004c08:	4b02      	ldr	r3, [pc, #8]	; (8004c14 <malloc+0xc>)
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	f000 b853 	b.w	8004cb8 <_malloc_r>
 8004c12:	bf00      	nop
 8004c14:	20000018 	.word	0x20000018

08004c18 <_free_r>:
 8004c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c1a:	2900      	cmp	r1, #0
 8004c1c:	d048      	beq.n	8004cb0 <_free_r+0x98>
 8004c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c22:	9001      	str	r0, [sp, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f1a1 0404 	sub.w	r4, r1, #4
 8004c2a:	bfb8      	it	lt
 8004c2c:	18e4      	addlt	r4, r4, r3
 8004c2e:	f001 f805 	bl	8005c3c <__malloc_lock>
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <_free_r+0x9c>)
 8004c34:	9801      	ldr	r0, [sp, #4]
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	4615      	mov	r5, r2
 8004c3a:	b933      	cbnz	r3, 8004c4a <_free_r+0x32>
 8004c3c:	6063      	str	r3, [r4, #4]
 8004c3e:	6014      	str	r4, [r2, #0]
 8004c40:	b003      	add	sp, #12
 8004c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c46:	f000 bfff 	b.w	8005c48 <__malloc_unlock>
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	d90b      	bls.n	8004c66 <_free_r+0x4e>
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	1862      	adds	r2, r4, r1
 8004c52:	4293      	cmp	r3, r2
 8004c54:	bf04      	itt	eq
 8004c56:	681a      	ldreq	r2, [r3, #0]
 8004c58:	685b      	ldreq	r3, [r3, #4]
 8004c5a:	6063      	str	r3, [r4, #4]
 8004c5c:	bf04      	itt	eq
 8004c5e:	1852      	addeq	r2, r2, r1
 8004c60:	6022      	streq	r2, [r4, #0]
 8004c62:	602c      	str	r4, [r5, #0]
 8004c64:	e7ec      	b.n	8004c40 <_free_r+0x28>
 8004c66:	461a      	mov	r2, r3
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b10b      	cbz	r3, 8004c70 <_free_r+0x58>
 8004c6c:	42a3      	cmp	r3, r4
 8004c6e:	d9fa      	bls.n	8004c66 <_free_r+0x4e>
 8004c70:	6811      	ldr	r1, [r2, #0]
 8004c72:	1855      	adds	r5, r2, r1
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d10b      	bne.n	8004c90 <_free_r+0x78>
 8004c78:	6824      	ldr	r4, [r4, #0]
 8004c7a:	4421      	add	r1, r4
 8004c7c:	1854      	adds	r4, r2, r1
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6011      	str	r1, [r2, #0]
 8004c82:	d1dd      	bne.n	8004c40 <_free_r+0x28>
 8004c84:	681c      	ldr	r4, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	4421      	add	r1, r4
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	e7d7      	b.n	8004c40 <_free_r+0x28>
 8004c90:	d902      	bls.n	8004c98 <_free_r+0x80>
 8004c92:	230c      	movs	r3, #12
 8004c94:	6003      	str	r3, [r0, #0]
 8004c96:	e7d3      	b.n	8004c40 <_free_r+0x28>
 8004c98:	6825      	ldr	r5, [r4, #0]
 8004c9a:	1961      	adds	r1, r4, r5
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	bf04      	itt	eq
 8004ca0:	6819      	ldreq	r1, [r3, #0]
 8004ca2:	685b      	ldreq	r3, [r3, #4]
 8004ca4:	6063      	str	r3, [r4, #4]
 8004ca6:	bf04      	itt	eq
 8004ca8:	1949      	addeq	r1, r1, r5
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	6054      	str	r4, [r2, #4]
 8004cae:	e7c7      	b.n	8004c40 <_free_r+0x28>
 8004cb0:	b003      	add	sp, #12
 8004cb2:	bd30      	pop	{r4, r5, pc}
 8004cb4:	200000bc 	.word	0x200000bc

08004cb8 <_malloc_r>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	1ccd      	adds	r5, r1, #3
 8004cbc:	f025 0503 	bic.w	r5, r5, #3
 8004cc0:	3508      	adds	r5, #8
 8004cc2:	2d0c      	cmp	r5, #12
 8004cc4:	bf38      	it	cc
 8004cc6:	250c      	movcc	r5, #12
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	4606      	mov	r6, r0
 8004ccc:	db01      	blt.n	8004cd2 <_malloc_r+0x1a>
 8004cce:	42a9      	cmp	r1, r5
 8004cd0:	d903      	bls.n	8004cda <_malloc_r+0x22>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cda:	f000 ffaf 	bl	8005c3c <__malloc_lock>
 8004cde:	4921      	ldr	r1, [pc, #132]	; (8004d64 <_malloc_r+0xac>)
 8004ce0:	680a      	ldr	r2, [r1, #0]
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	b99c      	cbnz	r4, 8004d0e <_malloc_r+0x56>
 8004ce6:	4f20      	ldr	r7, [pc, #128]	; (8004d68 <_malloc_r+0xb0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	b923      	cbnz	r3, 8004cf6 <_malloc_r+0x3e>
 8004cec:	4621      	mov	r1, r4
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 fc86 	bl	8005600 <_sbrk_r>
 8004cf4:	6038      	str	r0, [r7, #0]
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fc81 	bl	8005600 <_sbrk_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d123      	bne.n	8004d4a <_malloc_r+0x92>
 8004d02:	230c      	movs	r3, #12
 8004d04:	6033      	str	r3, [r6, #0]
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 ff9e 	bl	8005c48 <__malloc_unlock>
 8004d0c:	e7e3      	b.n	8004cd6 <_malloc_r+0x1e>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	1b5b      	subs	r3, r3, r5
 8004d12:	d417      	bmi.n	8004d44 <_malloc_r+0x8c>
 8004d14:	2b0b      	cmp	r3, #11
 8004d16:	d903      	bls.n	8004d20 <_malloc_r+0x68>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	441c      	add	r4, r3
 8004d1c:	6025      	str	r5, [r4, #0]
 8004d1e:	e004      	b.n	8004d2a <_malloc_r+0x72>
 8004d20:	6863      	ldr	r3, [r4, #4]
 8004d22:	42a2      	cmp	r2, r4
 8004d24:	bf0c      	ite	eq
 8004d26:	600b      	streq	r3, [r1, #0]
 8004d28:	6053      	strne	r3, [r2, #4]
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f000 ff8c 	bl	8005c48 <__malloc_unlock>
 8004d30:	f104 000b 	add.w	r0, r4, #11
 8004d34:	1d23      	adds	r3, r4, #4
 8004d36:	f020 0007 	bic.w	r0, r0, #7
 8004d3a:	1ac2      	subs	r2, r0, r3
 8004d3c:	d0cc      	beq.n	8004cd8 <_malloc_r+0x20>
 8004d3e:	1a1b      	subs	r3, r3, r0
 8004d40:	50a3      	str	r3, [r4, r2]
 8004d42:	e7c9      	b.n	8004cd8 <_malloc_r+0x20>
 8004d44:	4622      	mov	r2, r4
 8004d46:	6864      	ldr	r4, [r4, #4]
 8004d48:	e7cc      	b.n	8004ce4 <_malloc_r+0x2c>
 8004d4a:	1cc4      	adds	r4, r0, #3
 8004d4c:	f024 0403 	bic.w	r4, r4, #3
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d0e3      	beq.n	8004d1c <_malloc_r+0x64>
 8004d54:	1a21      	subs	r1, r4, r0
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 fc52 	bl	8005600 <_sbrk_r>
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1dd      	bne.n	8004d1c <_malloc_r+0x64>
 8004d60:	e7cf      	b.n	8004d02 <_malloc_r+0x4a>
 8004d62:	bf00      	nop
 8004d64:	200000bc 	.word	0x200000bc
 8004d68:	200000c0 	.word	0x200000c0

08004d6c <__ssputs_r>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	688e      	ldr	r6, [r1, #8]
 8004d72:	429e      	cmp	r6, r3
 8004d74:	4682      	mov	sl, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	4690      	mov	r8, r2
 8004d7a:	461f      	mov	r7, r3
 8004d7c:	d838      	bhi.n	8004df0 <__ssputs_r+0x84>
 8004d7e:	898a      	ldrh	r2, [r1, #12]
 8004d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d84:	d032      	beq.n	8004dec <__ssputs_r+0x80>
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	6909      	ldr	r1, [r1, #16]
 8004d8a:	eba5 0901 	sub.w	r9, r5, r1
 8004d8e:	6965      	ldr	r5, [r4, #20]
 8004d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d98:	3301      	adds	r3, #1
 8004d9a:	444b      	add	r3, r9
 8004d9c:	106d      	asrs	r5, r5, #1
 8004d9e:	429d      	cmp	r5, r3
 8004da0:	bf38      	it	cc
 8004da2:	461d      	movcc	r5, r3
 8004da4:	0553      	lsls	r3, r2, #21
 8004da6:	d531      	bpl.n	8004e0c <__ssputs_r+0xa0>
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7ff ff85 	bl	8004cb8 <_malloc_r>
 8004dae:	4606      	mov	r6, r0
 8004db0:	b950      	cbnz	r0, 8004dc8 <__ssputs_r+0x5c>
 8004db2:	230c      	movs	r3, #12
 8004db4:	f8ca 3000 	str.w	r3, [sl]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	6921      	ldr	r1, [r4, #16]
 8004dca:	464a      	mov	r2, r9
 8004dcc:	f000 ff0e 	bl	8005bec <memcpy>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	6126      	str	r6, [r4, #16]
 8004dde:	6165      	str	r5, [r4, #20]
 8004de0:	444e      	add	r6, r9
 8004de2:	eba5 0509 	sub.w	r5, r5, r9
 8004de6:	6026      	str	r6, [r4, #0]
 8004de8:	60a5      	str	r5, [r4, #8]
 8004dea:	463e      	mov	r6, r7
 8004dec:	42be      	cmp	r6, r7
 8004dee:	d900      	bls.n	8004df2 <__ssputs_r+0x86>
 8004df0:	463e      	mov	r6, r7
 8004df2:	4632      	mov	r2, r6
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	4641      	mov	r1, r8
 8004df8:	f000 ff06 	bl	8005c08 <memmove>
 8004dfc:	68a3      	ldr	r3, [r4, #8]
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	1b9b      	subs	r3, r3, r6
 8004e02:	4432      	add	r2, r6
 8004e04:	60a3      	str	r3, [r4, #8]
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7db      	b.n	8004dc4 <__ssputs_r+0x58>
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	f000 ff21 	bl	8005c54 <_realloc_r>
 8004e12:	4606      	mov	r6, r0
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d1e1      	bne.n	8004ddc <__ssputs_r+0x70>
 8004e18:	6921      	ldr	r1, [r4, #16]
 8004e1a:	4650      	mov	r0, sl
 8004e1c:	f7ff fefc 	bl	8004c18 <_free_r>
 8004e20:	e7c7      	b.n	8004db2 <__ssputs_r+0x46>
	...

08004e24 <_svfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	4698      	mov	r8, r3
 8004e2a:	898b      	ldrh	r3, [r1, #12]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	b09d      	sub	sp, #116	; 0x74
 8004e30:	4607      	mov	r7, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	d50e      	bpl.n	8004e56 <_svfiprintf_r+0x32>
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	b963      	cbnz	r3, 8004e56 <_svfiprintf_r+0x32>
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	f7ff ff3b 	bl	8004cb8 <_malloc_r>
 8004e42:	6028      	str	r0, [r5, #0]
 8004e44:	6128      	str	r0, [r5, #16]
 8004e46:	b920      	cbnz	r0, 8004e52 <_svfiprintf_r+0x2e>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	e0d1      	b.n	8004ff6 <_svfiprintf_r+0x1d2>
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	616b      	str	r3, [r5, #20]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9309      	str	r3, [sp, #36]	; 0x24
 8004e5a:	2320      	movs	r3, #32
 8004e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e64:	2330      	movs	r3, #48	; 0x30
 8004e66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005010 <_svfiprintf_r+0x1ec>
 8004e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e6e:	f04f 0901 	mov.w	r9, #1
 8004e72:	4623      	mov	r3, r4
 8004e74:	469a      	mov	sl, r3
 8004e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7a:	b10a      	cbz	r2, 8004e80 <_svfiprintf_r+0x5c>
 8004e7c:	2a25      	cmp	r2, #37	; 0x25
 8004e7e:	d1f9      	bne.n	8004e74 <_svfiprintf_r+0x50>
 8004e80:	ebba 0b04 	subs.w	fp, sl, r4
 8004e84:	d00b      	beq.n	8004e9e <_svfiprintf_r+0x7a>
 8004e86:	465b      	mov	r3, fp
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4638      	mov	r0, r7
 8004e8e:	f7ff ff6d 	bl	8004d6c <__ssputs_r>
 8004e92:	3001      	adds	r0, #1
 8004e94:	f000 80aa 	beq.w	8004fec <_svfiprintf_r+0x1c8>
 8004e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e9a:	445a      	add	r2, fp
 8004e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80a2 	beq.w	8004fec <_svfiprintf_r+0x1c8>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb2:	f10a 0a01 	add.w	sl, sl, #1
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	9307      	str	r3, [sp, #28]
 8004eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8004ec0:	4654      	mov	r4, sl
 8004ec2:	2205      	movs	r2, #5
 8004ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec8:	4851      	ldr	r0, [pc, #324]	; (8005010 <_svfiprintf_r+0x1ec>)
 8004eca:	f7fb f981 	bl	80001d0 <memchr>
 8004ece:	9a04      	ldr	r2, [sp, #16]
 8004ed0:	b9d8      	cbnz	r0, 8004f0a <_svfiprintf_r+0xe6>
 8004ed2:	06d0      	lsls	r0, r2, #27
 8004ed4:	bf44      	itt	mi
 8004ed6:	2320      	movmi	r3, #32
 8004ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004edc:	0711      	lsls	r1, r2, #28
 8004ede:	bf44      	itt	mi
 8004ee0:	232b      	movmi	r3, #43	; 0x2b
 8004ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eea:	2b2a      	cmp	r3, #42	; 0x2a
 8004eec:	d015      	beq.n	8004f1a <_svfiprintf_r+0xf6>
 8004eee:	9a07      	ldr	r2, [sp, #28]
 8004ef0:	4654      	mov	r4, sl
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f04f 0c0a 	mov.w	ip, #10
 8004ef8:	4621      	mov	r1, r4
 8004efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004efe:	3b30      	subs	r3, #48	; 0x30
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d94e      	bls.n	8004fa2 <_svfiprintf_r+0x17e>
 8004f04:	b1b0      	cbz	r0, 8004f34 <_svfiprintf_r+0x110>
 8004f06:	9207      	str	r2, [sp, #28]
 8004f08:	e014      	b.n	8004f34 <_svfiprintf_r+0x110>
 8004f0a:	eba0 0308 	sub.w	r3, r0, r8
 8004f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f12:	4313      	orrs	r3, r2
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	46a2      	mov	sl, r4
 8004f18:	e7d2      	b.n	8004ec0 <_svfiprintf_r+0x9c>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	1d19      	adds	r1, r3, #4
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	9103      	str	r1, [sp, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bfbb      	ittet	lt
 8004f26:	425b      	neglt	r3, r3
 8004f28:	f042 0202 	orrlt.w	r2, r2, #2
 8004f2c:	9307      	strge	r3, [sp, #28]
 8004f2e:	9307      	strlt	r3, [sp, #28]
 8004f30:	bfb8      	it	lt
 8004f32:	9204      	strlt	r2, [sp, #16]
 8004f34:	7823      	ldrb	r3, [r4, #0]
 8004f36:	2b2e      	cmp	r3, #46	; 0x2e
 8004f38:	d10c      	bne.n	8004f54 <_svfiprintf_r+0x130>
 8004f3a:	7863      	ldrb	r3, [r4, #1]
 8004f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3e:	d135      	bne.n	8004fac <_svfiprintf_r+0x188>
 8004f40:	9b03      	ldr	r3, [sp, #12]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	9203      	str	r2, [sp, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bfb8      	it	lt
 8004f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f50:	3402      	adds	r4, #2
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005020 <_svfiprintf_r+0x1fc>
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	4650      	mov	r0, sl
 8004f5e:	f7fb f937 	bl	80001d0 <memchr>
 8004f62:	b140      	cbz	r0, 8004f76 <_svfiprintf_r+0x152>
 8004f64:	2340      	movs	r3, #64	; 0x40
 8004f66:	eba0 000a 	sub.w	r0, r0, sl
 8004f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f6e:	9b04      	ldr	r3, [sp, #16]
 8004f70:	4303      	orrs	r3, r0
 8004f72:	3401      	adds	r4, #1
 8004f74:	9304      	str	r3, [sp, #16]
 8004f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7a:	4826      	ldr	r0, [pc, #152]	; (8005014 <_svfiprintf_r+0x1f0>)
 8004f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f80:	2206      	movs	r2, #6
 8004f82:	f7fb f925 	bl	80001d0 <memchr>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d038      	beq.n	8004ffc <_svfiprintf_r+0x1d8>
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <_svfiprintf_r+0x1f4>)
 8004f8c:	bb1b      	cbnz	r3, 8004fd6 <_svfiprintf_r+0x1b2>
 8004f8e:	9b03      	ldr	r3, [sp, #12]
 8004f90:	3307      	adds	r3, #7
 8004f92:	f023 0307 	bic.w	r3, r3, #7
 8004f96:	3308      	adds	r3, #8
 8004f98:	9303      	str	r3, [sp, #12]
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	4433      	add	r3, r6
 8004f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004fa0:	e767      	b.n	8004e72 <_svfiprintf_r+0x4e>
 8004fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	2001      	movs	r0, #1
 8004faa:	e7a5      	b.n	8004ef8 <_svfiprintf_r+0xd4>
 8004fac:	2300      	movs	r3, #0
 8004fae:	3401      	adds	r4, #1
 8004fb0:	9305      	str	r3, [sp, #20]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f04f 0c0a 	mov.w	ip, #10
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fbe:	3a30      	subs	r2, #48	; 0x30
 8004fc0:	2a09      	cmp	r2, #9
 8004fc2:	d903      	bls.n	8004fcc <_svfiprintf_r+0x1a8>
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0c5      	beq.n	8004f54 <_svfiprintf_r+0x130>
 8004fc8:	9105      	str	r1, [sp, #20]
 8004fca:	e7c3      	b.n	8004f54 <_svfiprintf_r+0x130>
 8004fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7f0      	b.n	8004fb8 <_svfiprintf_r+0x194>
 8004fd6:	ab03      	add	r3, sp, #12
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	462a      	mov	r2, r5
 8004fdc:	4b0f      	ldr	r3, [pc, #60]	; (800501c <_svfiprintf_r+0x1f8>)
 8004fde:	a904      	add	r1, sp, #16
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f3af 8000 	nop.w
 8004fe6:	1c42      	adds	r2, r0, #1
 8004fe8:	4606      	mov	r6, r0
 8004fea:	d1d6      	bne.n	8004f9a <_svfiprintf_r+0x176>
 8004fec:	89ab      	ldrh	r3, [r5, #12]
 8004fee:	065b      	lsls	r3, r3, #25
 8004ff0:	f53f af2c 	bmi.w	8004e4c <_svfiprintf_r+0x28>
 8004ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ff6:	b01d      	add	sp, #116	; 0x74
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	ab03      	add	r3, sp, #12
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	462a      	mov	r2, r5
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <_svfiprintf_r+0x1f8>)
 8005004:	a904      	add	r1, sp, #16
 8005006:	4638      	mov	r0, r7
 8005008:	f000 f9d4 	bl	80053b4 <_printf_i>
 800500c:	e7eb      	b.n	8004fe6 <_svfiprintf_r+0x1c2>
 800500e:	bf00      	nop
 8005010:	08005faa 	.word	0x08005faa
 8005014:	08005fb4 	.word	0x08005fb4
 8005018:	00000000 	.word	0x00000000
 800501c:	08004d6d 	.word	0x08004d6d
 8005020:	08005fb0 	.word	0x08005fb0

08005024 <__sfputc_r>:
 8005024:	6893      	ldr	r3, [r2, #8]
 8005026:	3b01      	subs	r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	b410      	push	{r4}
 800502c:	6093      	str	r3, [r2, #8]
 800502e:	da08      	bge.n	8005042 <__sfputc_r+0x1e>
 8005030:	6994      	ldr	r4, [r2, #24]
 8005032:	42a3      	cmp	r3, r4
 8005034:	db01      	blt.n	800503a <__sfputc_r+0x16>
 8005036:	290a      	cmp	r1, #10
 8005038:	d103      	bne.n	8005042 <__sfputc_r+0x1e>
 800503a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800503e:	f000 baef 	b.w	8005620 <__swbuf_r>
 8005042:	6813      	ldr	r3, [r2, #0]
 8005044:	1c58      	adds	r0, r3, #1
 8005046:	6010      	str	r0, [r2, #0]
 8005048:	7019      	strb	r1, [r3, #0]
 800504a:	4608      	mov	r0, r1
 800504c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005050:	4770      	bx	lr

08005052 <__sfputs_r>:
 8005052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005054:	4606      	mov	r6, r0
 8005056:	460f      	mov	r7, r1
 8005058:	4614      	mov	r4, r2
 800505a:	18d5      	adds	r5, r2, r3
 800505c:	42ac      	cmp	r4, r5
 800505e:	d101      	bne.n	8005064 <__sfputs_r+0x12>
 8005060:	2000      	movs	r0, #0
 8005062:	e007      	b.n	8005074 <__sfputs_r+0x22>
 8005064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005068:	463a      	mov	r2, r7
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff ffda 	bl	8005024 <__sfputc_r>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d1f3      	bne.n	800505c <__sfputs_r+0xa>
 8005074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005078 <_vfiprintf_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	460d      	mov	r5, r1
 800507e:	b09d      	sub	sp, #116	; 0x74
 8005080:	4614      	mov	r4, r2
 8005082:	4698      	mov	r8, r3
 8005084:	4606      	mov	r6, r0
 8005086:	b118      	cbz	r0, 8005090 <_vfiprintf_r+0x18>
 8005088:	6983      	ldr	r3, [r0, #24]
 800508a:	b90b      	cbnz	r3, 8005090 <_vfiprintf_r+0x18>
 800508c:	f000 fcaa 	bl	80059e4 <__sinit>
 8005090:	4b89      	ldr	r3, [pc, #548]	; (80052b8 <_vfiprintf_r+0x240>)
 8005092:	429d      	cmp	r5, r3
 8005094:	d11b      	bne.n	80050ce <_vfiprintf_r+0x56>
 8005096:	6875      	ldr	r5, [r6, #4]
 8005098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800509a:	07d9      	lsls	r1, r3, #31
 800509c:	d405      	bmi.n	80050aa <_vfiprintf_r+0x32>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	059a      	lsls	r2, r3, #22
 80050a2:	d402      	bmi.n	80050aa <_vfiprintf_r+0x32>
 80050a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050a6:	f000 fd3b 	bl	8005b20 <__retarget_lock_acquire_recursive>
 80050aa:	89ab      	ldrh	r3, [r5, #12]
 80050ac:	071b      	lsls	r3, r3, #28
 80050ae:	d501      	bpl.n	80050b4 <_vfiprintf_r+0x3c>
 80050b0:	692b      	ldr	r3, [r5, #16]
 80050b2:	b9eb      	cbnz	r3, 80050f0 <_vfiprintf_r+0x78>
 80050b4:	4629      	mov	r1, r5
 80050b6:	4630      	mov	r0, r6
 80050b8:	f000 fb04 	bl	80056c4 <__swsetup_r>
 80050bc:	b1c0      	cbz	r0, 80050f0 <_vfiprintf_r+0x78>
 80050be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050c0:	07dc      	lsls	r4, r3, #31
 80050c2:	d50e      	bpl.n	80050e2 <_vfiprintf_r+0x6a>
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	b01d      	add	sp, #116	; 0x74
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <_vfiprintf_r+0x244>)
 80050d0:	429d      	cmp	r5, r3
 80050d2:	d101      	bne.n	80050d8 <_vfiprintf_r+0x60>
 80050d4:	68b5      	ldr	r5, [r6, #8]
 80050d6:	e7df      	b.n	8005098 <_vfiprintf_r+0x20>
 80050d8:	4b79      	ldr	r3, [pc, #484]	; (80052c0 <_vfiprintf_r+0x248>)
 80050da:	429d      	cmp	r5, r3
 80050dc:	bf08      	it	eq
 80050de:	68f5      	ldreq	r5, [r6, #12]
 80050e0:	e7da      	b.n	8005098 <_vfiprintf_r+0x20>
 80050e2:	89ab      	ldrh	r3, [r5, #12]
 80050e4:	0598      	lsls	r0, r3, #22
 80050e6:	d4ed      	bmi.n	80050c4 <_vfiprintf_r+0x4c>
 80050e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ea:	f000 fd1a 	bl	8005b22 <__retarget_lock_release_recursive>
 80050ee:	e7e9      	b.n	80050c4 <_vfiprintf_r+0x4c>
 80050f0:	2300      	movs	r3, #0
 80050f2:	9309      	str	r3, [sp, #36]	; 0x24
 80050f4:	2320      	movs	r3, #32
 80050f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80050fe:	2330      	movs	r3, #48	; 0x30
 8005100:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052c4 <_vfiprintf_r+0x24c>
 8005104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005108:	f04f 0901 	mov.w	r9, #1
 800510c:	4623      	mov	r3, r4
 800510e:	469a      	mov	sl, r3
 8005110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005114:	b10a      	cbz	r2, 800511a <_vfiprintf_r+0xa2>
 8005116:	2a25      	cmp	r2, #37	; 0x25
 8005118:	d1f9      	bne.n	800510e <_vfiprintf_r+0x96>
 800511a:	ebba 0b04 	subs.w	fp, sl, r4
 800511e:	d00b      	beq.n	8005138 <_vfiprintf_r+0xc0>
 8005120:	465b      	mov	r3, fp
 8005122:	4622      	mov	r2, r4
 8005124:	4629      	mov	r1, r5
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff ff93 	bl	8005052 <__sfputs_r>
 800512c:	3001      	adds	r0, #1
 800512e:	f000 80aa 	beq.w	8005286 <_vfiprintf_r+0x20e>
 8005132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005134:	445a      	add	r2, fp
 8005136:	9209      	str	r2, [sp, #36]	; 0x24
 8005138:	f89a 3000 	ldrb.w	r3, [sl]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a2 	beq.w	8005286 <_vfiprintf_r+0x20e>
 8005142:	2300      	movs	r3, #0
 8005144:	f04f 32ff 	mov.w	r2, #4294967295
 8005148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800514c:	f10a 0a01 	add.w	sl, sl, #1
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	9307      	str	r3, [sp, #28]
 8005154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005158:	931a      	str	r3, [sp, #104]	; 0x68
 800515a:	4654      	mov	r4, sl
 800515c:	2205      	movs	r2, #5
 800515e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005162:	4858      	ldr	r0, [pc, #352]	; (80052c4 <_vfiprintf_r+0x24c>)
 8005164:	f7fb f834 	bl	80001d0 <memchr>
 8005168:	9a04      	ldr	r2, [sp, #16]
 800516a:	b9d8      	cbnz	r0, 80051a4 <_vfiprintf_r+0x12c>
 800516c:	06d1      	lsls	r1, r2, #27
 800516e:	bf44      	itt	mi
 8005170:	2320      	movmi	r3, #32
 8005172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005176:	0713      	lsls	r3, r2, #28
 8005178:	bf44      	itt	mi
 800517a:	232b      	movmi	r3, #43	; 0x2b
 800517c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005180:	f89a 3000 	ldrb.w	r3, [sl]
 8005184:	2b2a      	cmp	r3, #42	; 0x2a
 8005186:	d015      	beq.n	80051b4 <_vfiprintf_r+0x13c>
 8005188:	9a07      	ldr	r2, [sp, #28]
 800518a:	4654      	mov	r4, sl
 800518c:	2000      	movs	r0, #0
 800518e:	f04f 0c0a 	mov.w	ip, #10
 8005192:	4621      	mov	r1, r4
 8005194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005198:	3b30      	subs	r3, #48	; 0x30
 800519a:	2b09      	cmp	r3, #9
 800519c:	d94e      	bls.n	800523c <_vfiprintf_r+0x1c4>
 800519e:	b1b0      	cbz	r0, 80051ce <_vfiprintf_r+0x156>
 80051a0:	9207      	str	r2, [sp, #28]
 80051a2:	e014      	b.n	80051ce <_vfiprintf_r+0x156>
 80051a4:	eba0 0308 	sub.w	r3, r0, r8
 80051a8:	fa09 f303 	lsl.w	r3, r9, r3
 80051ac:	4313      	orrs	r3, r2
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	46a2      	mov	sl, r4
 80051b2:	e7d2      	b.n	800515a <_vfiprintf_r+0xe2>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	1d19      	adds	r1, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	9103      	str	r1, [sp, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfbb      	ittet	lt
 80051c0:	425b      	neglt	r3, r3
 80051c2:	f042 0202 	orrlt.w	r2, r2, #2
 80051c6:	9307      	strge	r3, [sp, #28]
 80051c8:	9307      	strlt	r3, [sp, #28]
 80051ca:	bfb8      	it	lt
 80051cc:	9204      	strlt	r2, [sp, #16]
 80051ce:	7823      	ldrb	r3, [r4, #0]
 80051d0:	2b2e      	cmp	r3, #46	; 0x2e
 80051d2:	d10c      	bne.n	80051ee <_vfiprintf_r+0x176>
 80051d4:	7863      	ldrb	r3, [r4, #1]
 80051d6:	2b2a      	cmp	r3, #42	; 0x2a
 80051d8:	d135      	bne.n	8005246 <_vfiprintf_r+0x1ce>
 80051da:	9b03      	ldr	r3, [sp, #12]
 80051dc:	1d1a      	adds	r2, r3, #4
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	9203      	str	r2, [sp, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	bfb8      	it	lt
 80051e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80051ea:	3402      	adds	r4, #2
 80051ec:	9305      	str	r3, [sp, #20]
 80051ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052d4 <_vfiprintf_r+0x25c>
 80051f2:	7821      	ldrb	r1, [r4, #0]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4650      	mov	r0, sl
 80051f8:	f7fa ffea 	bl	80001d0 <memchr>
 80051fc:	b140      	cbz	r0, 8005210 <_vfiprintf_r+0x198>
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	eba0 000a 	sub.w	r0, r0, sl
 8005204:	fa03 f000 	lsl.w	r0, r3, r0
 8005208:	9b04      	ldr	r3, [sp, #16]
 800520a:	4303      	orrs	r3, r0
 800520c:	3401      	adds	r4, #1
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005214:	482c      	ldr	r0, [pc, #176]	; (80052c8 <_vfiprintf_r+0x250>)
 8005216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800521a:	2206      	movs	r2, #6
 800521c:	f7fa ffd8 	bl	80001d0 <memchr>
 8005220:	2800      	cmp	r0, #0
 8005222:	d03f      	beq.n	80052a4 <_vfiprintf_r+0x22c>
 8005224:	4b29      	ldr	r3, [pc, #164]	; (80052cc <_vfiprintf_r+0x254>)
 8005226:	bb1b      	cbnz	r3, 8005270 <_vfiprintf_r+0x1f8>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	3307      	adds	r3, #7
 800522c:	f023 0307 	bic.w	r3, r3, #7
 8005230:	3308      	adds	r3, #8
 8005232:	9303      	str	r3, [sp, #12]
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	443b      	add	r3, r7
 8005238:	9309      	str	r3, [sp, #36]	; 0x24
 800523a:	e767      	b.n	800510c <_vfiprintf_r+0x94>
 800523c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005240:	460c      	mov	r4, r1
 8005242:	2001      	movs	r0, #1
 8005244:	e7a5      	b.n	8005192 <_vfiprintf_r+0x11a>
 8005246:	2300      	movs	r3, #0
 8005248:	3401      	adds	r4, #1
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 0c0a 	mov.w	ip, #10
 8005252:	4620      	mov	r0, r4
 8005254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005258:	3a30      	subs	r2, #48	; 0x30
 800525a:	2a09      	cmp	r2, #9
 800525c:	d903      	bls.n	8005266 <_vfiprintf_r+0x1ee>
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0c5      	beq.n	80051ee <_vfiprintf_r+0x176>
 8005262:	9105      	str	r1, [sp, #20]
 8005264:	e7c3      	b.n	80051ee <_vfiprintf_r+0x176>
 8005266:	fb0c 2101 	mla	r1, ip, r1, r2
 800526a:	4604      	mov	r4, r0
 800526c:	2301      	movs	r3, #1
 800526e:	e7f0      	b.n	8005252 <_vfiprintf_r+0x1da>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <_vfiprintf_r+0x258>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4630      	mov	r0, r6
 800527c:	f3af 8000 	nop.w
 8005280:	4607      	mov	r7, r0
 8005282:	1c78      	adds	r0, r7, #1
 8005284:	d1d6      	bne.n	8005234 <_vfiprintf_r+0x1bc>
 8005286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005288:	07d9      	lsls	r1, r3, #31
 800528a:	d405      	bmi.n	8005298 <_vfiprintf_r+0x220>
 800528c:	89ab      	ldrh	r3, [r5, #12]
 800528e:	059a      	lsls	r2, r3, #22
 8005290:	d402      	bmi.n	8005298 <_vfiprintf_r+0x220>
 8005292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005294:	f000 fc45 	bl	8005b22 <__retarget_lock_release_recursive>
 8005298:	89ab      	ldrh	r3, [r5, #12]
 800529a:	065b      	lsls	r3, r3, #25
 800529c:	f53f af12 	bmi.w	80050c4 <_vfiprintf_r+0x4c>
 80052a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a2:	e711      	b.n	80050c8 <_vfiprintf_r+0x50>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <_vfiprintf_r+0x258>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4630      	mov	r0, r6
 80052b0:	f000 f880 	bl	80053b4 <_printf_i>
 80052b4:	e7e4      	b.n	8005280 <_vfiprintf_r+0x208>
 80052b6:	bf00      	nop
 80052b8:	08006000 	.word	0x08006000
 80052bc:	08006020 	.word	0x08006020
 80052c0:	08005fe0 	.word	0x08005fe0
 80052c4:	08005faa 	.word	0x08005faa
 80052c8:	08005fb4 	.word	0x08005fb4
 80052cc:	00000000 	.word	0x00000000
 80052d0:	08005053 	.word	0x08005053
 80052d4:	08005fb0 	.word	0x08005fb0

080052d8 <_printf_common>:
 80052d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	4616      	mov	r6, r2
 80052de:	4699      	mov	r9, r3
 80052e0:	688a      	ldr	r2, [r1, #8]
 80052e2:	690b      	ldr	r3, [r1, #16]
 80052e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bfb8      	it	lt
 80052ec:	4613      	movlt	r3, r2
 80052ee:	6033      	str	r3, [r6, #0]
 80052f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052f4:	4607      	mov	r7, r0
 80052f6:	460c      	mov	r4, r1
 80052f8:	b10a      	cbz	r2, 80052fe <_printf_common+0x26>
 80052fa:	3301      	adds	r3, #1
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	0699      	lsls	r1, r3, #26
 8005302:	bf42      	ittt	mi
 8005304:	6833      	ldrmi	r3, [r6, #0]
 8005306:	3302      	addmi	r3, #2
 8005308:	6033      	strmi	r3, [r6, #0]
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	f015 0506 	ands.w	r5, r5, #6
 8005310:	d106      	bne.n	8005320 <_printf_common+0x48>
 8005312:	f104 0a19 	add.w	sl, r4, #25
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	6832      	ldr	r2, [r6, #0]
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	42ab      	cmp	r3, r5
 800531e:	dc26      	bgt.n	800536e <_printf_common+0x96>
 8005320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005324:	1e13      	subs	r3, r2, #0
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	bf18      	it	ne
 800532a:	2301      	movne	r3, #1
 800532c:	0692      	lsls	r2, r2, #26
 800532e:	d42b      	bmi.n	8005388 <_printf_common+0xb0>
 8005330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005334:	4649      	mov	r1, r9
 8005336:	4638      	mov	r0, r7
 8005338:	47c0      	blx	r8
 800533a:	3001      	adds	r0, #1
 800533c:	d01e      	beq.n	800537c <_printf_common+0xa4>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	68e5      	ldr	r5, [r4, #12]
 8005342:	6832      	ldr	r2, [r6, #0]
 8005344:	f003 0306 	and.w	r3, r3, #6
 8005348:	2b04      	cmp	r3, #4
 800534a:	bf08      	it	eq
 800534c:	1aad      	subeq	r5, r5, r2
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	6922      	ldr	r2, [r4, #16]
 8005352:	bf0c      	ite	eq
 8005354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005358:	2500      	movne	r5, #0
 800535a:	4293      	cmp	r3, r2
 800535c:	bfc4      	itt	gt
 800535e:	1a9b      	subgt	r3, r3, r2
 8005360:	18ed      	addgt	r5, r5, r3
 8005362:	2600      	movs	r6, #0
 8005364:	341a      	adds	r4, #26
 8005366:	42b5      	cmp	r5, r6
 8005368:	d11a      	bne.n	80053a0 <_printf_common+0xc8>
 800536a:	2000      	movs	r0, #0
 800536c:	e008      	b.n	8005380 <_printf_common+0xa8>
 800536e:	2301      	movs	r3, #1
 8005370:	4652      	mov	r2, sl
 8005372:	4649      	mov	r1, r9
 8005374:	4638      	mov	r0, r7
 8005376:	47c0      	blx	r8
 8005378:	3001      	adds	r0, #1
 800537a:	d103      	bne.n	8005384 <_printf_common+0xac>
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005384:	3501      	adds	r5, #1
 8005386:	e7c6      	b.n	8005316 <_printf_common+0x3e>
 8005388:	18e1      	adds	r1, r4, r3
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	2030      	movs	r0, #48	; 0x30
 800538e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005392:	4422      	add	r2, r4
 8005394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800539c:	3302      	adds	r3, #2
 800539e:	e7c7      	b.n	8005330 <_printf_common+0x58>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4622      	mov	r2, r4
 80053a4:	4649      	mov	r1, r9
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d0e6      	beq.n	800537c <_printf_common+0xa4>
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7d9      	b.n	8005366 <_printf_common+0x8e>
	...

080053b4 <_printf_i>:
 80053b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b8:	460c      	mov	r4, r1
 80053ba:	4691      	mov	r9, r2
 80053bc:	7e27      	ldrb	r7, [r4, #24]
 80053be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053c0:	2f78      	cmp	r7, #120	; 0x78
 80053c2:	4680      	mov	r8, r0
 80053c4:	469a      	mov	sl, r3
 80053c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053ca:	d807      	bhi.n	80053dc <_printf_i+0x28>
 80053cc:	2f62      	cmp	r7, #98	; 0x62
 80053ce:	d80a      	bhi.n	80053e6 <_printf_i+0x32>
 80053d0:	2f00      	cmp	r7, #0
 80053d2:	f000 80d8 	beq.w	8005586 <_printf_i+0x1d2>
 80053d6:	2f58      	cmp	r7, #88	; 0x58
 80053d8:	f000 80a3 	beq.w	8005522 <_printf_i+0x16e>
 80053dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053e4:	e03a      	b.n	800545c <_printf_i+0xa8>
 80053e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ea:	2b15      	cmp	r3, #21
 80053ec:	d8f6      	bhi.n	80053dc <_printf_i+0x28>
 80053ee:	a001      	add	r0, pc, #4	; (adr r0, 80053f4 <_printf_i+0x40>)
 80053f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053f4:	0800544d 	.word	0x0800544d
 80053f8:	08005461 	.word	0x08005461
 80053fc:	080053dd 	.word	0x080053dd
 8005400:	080053dd 	.word	0x080053dd
 8005404:	080053dd 	.word	0x080053dd
 8005408:	080053dd 	.word	0x080053dd
 800540c:	08005461 	.word	0x08005461
 8005410:	080053dd 	.word	0x080053dd
 8005414:	080053dd 	.word	0x080053dd
 8005418:	080053dd 	.word	0x080053dd
 800541c:	080053dd 	.word	0x080053dd
 8005420:	0800556d 	.word	0x0800556d
 8005424:	08005491 	.word	0x08005491
 8005428:	0800554f 	.word	0x0800554f
 800542c:	080053dd 	.word	0x080053dd
 8005430:	080053dd 	.word	0x080053dd
 8005434:	0800558f 	.word	0x0800558f
 8005438:	080053dd 	.word	0x080053dd
 800543c:	08005491 	.word	0x08005491
 8005440:	080053dd 	.word	0x080053dd
 8005444:	080053dd 	.word	0x080053dd
 8005448:	08005557 	.word	0x08005557
 800544c:	680b      	ldr	r3, [r1, #0]
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	600a      	str	r2, [r1, #0]
 8005454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800545c:	2301      	movs	r3, #1
 800545e:	e0a3      	b.n	80055a8 <_printf_i+0x1f4>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	6808      	ldr	r0, [r1, #0]
 8005464:	062e      	lsls	r6, r5, #24
 8005466:	f100 0304 	add.w	r3, r0, #4
 800546a:	d50a      	bpl.n	8005482 <_printf_i+0xce>
 800546c:	6805      	ldr	r5, [r0, #0]
 800546e:	600b      	str	r3, [r1, #0]
 8005470:	2d00      	cmp	r5, #0
 8005472:	da03      	bge.n	800547c <_printf_i+0xc8>
 8005474:	232d      	movs	r3, #45	; 0x2d
 8005476:	426d      	negs	r5, r5
 8005478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547c:	485e      	ldr	r0, [pc, #376]	; (80055f8 <_printf_i+0x244>)
 800547e:	230a      	movs	r3, #10
 8005480:	e019      	b.n	80054b6 <_printf_i+0x102>
 8005482:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005486:	6805      	ldr	r5, [r0, #0]
 8005488:	600b      	str	r3, [r1, #0]
 800548a:	bf18      	it	ne
 800548c:	b22d      	sxthne	r5, r5
 800548e:	e7ef      	b.n	8005470 <_printf_i+0xbc>
 8005490:	680b      	ldr	r3, [r1, #0]
 8005492:	6825      	ldr	r5, [r4, #0]
 8005494:	1d18      	adds	r0, r3, #4
 8005496:	6008      	str	r0, [r1, #0]
 8005498:	0628      	lsls	r0, r5, #24
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0xec>
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	e002      	b.n	80054a6 <_printf_i+0xf2>
 80054a0:	0669      	lsls	r1, r5, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0xe8>
 80054a4:	881d      	ldrh	r5, [r3, #0]
 80054a6:	4854      	ldr	r0, [pc, #336]	; (80055f8 <_printf_i+0x244>)
 80054a8:	2f6f      	cmp	r7, #111	; 0x6f
 80054aa:	bf0c      	ite	eq
 80054ac:	2308      	moveq	r3, #8
 80054ae:	230a      	movne	r3, #10
 80054b0:	2100      	movs	r1, #0
 80054b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054b6:	6866      	ldr	r6, [r4, #4]
 80054b8:	60a6      	str	r6, [r4, #8]
 80054ba:	2e00      	cmp	r6, #0
 80054bc:	bfa2      	ittt	ge
 80054be:	6821      	ldrge	r1, [r4, #0]
 80054c0:	f021 0104 	bicge.w	r1, r1, #4
 80054c4:	6021      	strge	r1, [r4, #0]
 80054c6:	b90d      	cbnz	r5, 80054cc <_printf_i+0x118>
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	d04d      	beq.n	8005568 <_printf_i+0x1b4>
 80054cc:	4616      	mov	r6, r2
 80054ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80054d2:	fb03 5711 	mls	r7, r3, r1, r5
 80054d6:	5dc7      	ldrb	r7, [r0, r7]
 80054d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054dc:	462f      	mov	r7, r5
 80054de:	42bb      	cmp	r3, r7
 80054e0:	460d      	mov	r5, r1
 80054e2:	d9f4      	bls.n	80054ce <_printf_i+0x11a>
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d10b      	bne.n	8005500 <_printf_i+0x14c>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07df      	lsls	r7, r3, #31
 80054ec:	d508      	bpl.n	8005500 <_printf_i+0x14c>
 80054ee:	6923      	ldr	r3, [r4, #16]
 80054f0:	6861      	ldr	r1, [r4, #4]
 80054f2:	4299      	cmp	r1, r3
 80054f4:	bfde      	ittt	le
 80054f6:	2330      	movle	r3, #48	; 0x30
 80054f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005500:	1b92      	subs	r2, r2, r6
 8005502:	6122      	str	r2, [r4, #16]
 8005504:	f8cd a000 	str.w	sl, [sp]
 8005508:	464b      	mov	r3, r9
 800550a:	aa03      	add	r2, sp, #12
 800550c:	4621      	mov	r1, r4
 800550e:	4640      	mov	r0, r8
 8005510:	f7ff fee2 	bl	80052d8 <_printf_common>
 8005514:	3001      	adds	r0, #1
 8005516:	d14c      	bne.n	80055b2 <_printf_i+0x1fe>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	b004      	add	sp, #16
 800551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005522:	4835      	ldr	r0, [pc, #212]	; (80055f8 <_printf_i+0x244>)
 8005524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	680e      	ldr	r6, [r1, #0]
 800552c:	061f      	lsls	r7, r3, #24
 800552e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005532:	600e      	str	r6, [r1, #0]
 8005534:	d514      	bpl.n	8005560 <_printf_i+0x1ac>
 8005536:	07d9      	lsls	r1, r3, #31
 8005538:	bf44      	itt	mi
 800553a:	f043 0320 	orrmi.w	r3, r3, #32
 800553e:	6023      	strmi	r3, [r4, #0]
 8005540:	b91d      	cbnz	r5, 800554a <_printf_i+0x196>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f023 0320 	bic.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2310      	movs	r3, #16
 800554c:	e7b0      	b.n	80054b0 <_printf_i+0xfc>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	2378      	movs	r3, #120	; 0x78
 8005558:	4828      	ldr	r0, [pc, #160]	; (80055fc <_printf_i+0x248>)
 800555a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800555e:	e7e3      	b.n	8005528 <_printf_i+0x174>
 8005560:	065e      	lsls	r6, r3, #25
 8005562:	bf48      	it	mi
 8005564:	b2ad      	uxthmi	r5, r5
 8005566:	e7e6      	b.n	8005536 <_printf_i+0x182>
 8005568:	4616      	mov	r6, r2
 800556a:	e7bb      	b.n	80054e4 <_printf_i+0x130>
 800556c:	680b      	ldr	r3, [r1, #0]
 800556e:	6826      	ldr	r6, [r4, #0]
 8005570:	6960      	ldr	r0, [r4, #20]
 8005572:	1d1d      	adds	r5, r3, #4
 8005574:	600d      	str	r5, [r1, #0]
 8005576:	0635      	lsls	r5, r6, #24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	d501      	bpl.n	8005580 <_printf_i+0x1cc>
 800557c:	6018      	str	r0, [r3, #0]
 800557e:	e002      	b.n	8005586 <_printf_i+0x1d2>
 8005580:	0671      	lsls	r1, r6, #25
 8005582:	d5fb      	bpl.n	800557c <_printf_i+0x1c8>
 8005584:	8018      	strh	r0, [r3, #0]
 8005586:	2300      	movs	r3, #0
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	4616      	mov	r6, r2
 800558c:	e7ba      	b.n	8005504 <_printf_i+0x150>
 800558e:	680b      	ldr	r3, [r1, #0]
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	600a      	str	r2, [r1, #0]
 8005594:	681e      	ldr	r6, [r3, #0]
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	2100      	movs	r1, #0
 800559a:	4630      	mov	r0, r6
 800559c:	f7fa fe18 	bl	80001d0 <memchr>
 80055a0:	b108      	cbz	r0, 80055a6 <_printf_i+0x1f2>
 80055a2:	1b80      	subs	r0, r0, r6
 80055a4:	6060      	str	r0, [r4, #4]
 80055a6:	6863      	ldr	r3, [r4, #4]
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	2300      	movs	r3, #0
 80055ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055b0:	e7a8      	b.n	8005504 <_printf_i+0x150>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	4632      	mov	r2, r6
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d0ab      	beq.n	8005518 <_printf_i+0x164>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	079b      	lsls	r3, r3, #30
 80055c4:	d413      	bmi.n	80055ee <_printf_i+0x23a>
 80055c6:	68e0      	ldr	r0, [r4, #12]
 80055c8:	9b03      	ldr	r3, [sp, #12]
 80055ca:	4298      	cmp	r0, r3
 80055cc:	bfb8      	it	lt
 80055ce:	4618      	movlt	r0, r3
 80055d0:	e7a4      	b.n	800551c <_printf_i+0x168>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4632      	mov	r2, r6
 80055d6:	4649      	mov	r1, r9
 80055d8:	4640      	mov	r0, r8
 80055da:	47d0      	blx	sl
 80055dc:	3001      	adds	r0, #1
 80055de:	d09b      	beq.n	8005518 <_printf_i+0x164>
 80055e0:	3501      	adds	r5, #1
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	9903      	ldr	r1, [sp, #12]
 80055e6:	1a5b      	subs	r3, r3, r1
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dcf2      	bgt.n	80055d2 <_printf_i+0x21e>
 80055ec:	e7eb      	b.n	80055c6 <_printf_i+0x212>
 80055ee:	2500      	movs	r5, #0
 80055f0:	f104 0619 	add.w	r6, r4, #25
 80055f4:	e7f5      	b.n	80055e2 <_printf_i+0x22e>
 80055f6:	bf00      	nop
 80055f8:	08005fbb 	.word	0x08005fbb
 80055fc:	08005fcc 	.word	0x08005fcc

08005600 <_sbrk_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d06      	ldr	r5, [pc, #24]	; (800561c <_sbrk_r+0x1c>)
 8005604:	2300      	movs	r3, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	f7fb fbc8 	bl	8000da0 <_sbrk>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_sbrk_r+0x1a>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_sbrk_r+0x1a>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	20000530 	.word	0x20000530

08005620 <__swbuf_r>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	460e      	mov	r6, r1
 8005624:	4614      	mov	r4, r2
 8005626:	4605      	mov	r5, r0
 8005628:	b118      	cbz	r0, 8005632 <__swbuf_r+0x12>
 800562a:	6983      	ldr	r3, [r0, #24]
 800562c:	b90b      	cbnz	r3, 8005632 <__swbuf_r+0x12>
 800562e:	f000 f9d9 	bl	80059e4 <__sinit>
 8005632:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <__swbuf_r+0x98>)
 8005634:	429c      	cmp	r4, r3
 8005636:	d12b      	bne.n	8005690 <__swbuf_r+0x70>
 8005638:	686c      	ldr	r4, [r5, #4]
 800563a:	69a3      	ldr	r3, [r4, #24]
 800563c:	60a3      	str	r3, [r4, #8]
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	071a      	lsls	r2, r3, #28
 8005642:	d52f      	bpl.n	80056a4 <__swbuf_r+0x84>
 8005644:	6923      	ldr	r3, [r4, #16]
 8005646:	b36b      	cbz	r3, 80056a4 <__swbuf_r+0x84>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	1ac0      	subs	r0, r0, r3
 800564e:	6963      	ldr	r3, [r4, #20]
 8005650:	b2f6      	uxtb	r6, r6
 8005652:	4283      	cmp	r3, r0
 8005654:	4637      	mov	r7, r6
 8005656:	dc04      	bgt.n	8005662 <__swbuf_r+0x42>
 8005658:	4621      	mov	r1, r4
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f92e 	bl	80058bc <_fflush_r>
 8005660:	bb30      	cbnz	r0, 80056b0 <__swbuf_r+0x90>
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	3b01      	subs	r3, #1
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	6022      	str	r2, [r4, #0]
 800566e:	701e      	strb	r6, [r3, #0]
 8005670:	6963      	ldr	r3, [r4, #20]
 8005672:	3001      	adds	r0, #1
 8005674:	4283      	cmp	r3, r0
 8005676:	d004      	beq.n	8005682 <__swbuf_r+0x62>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	07db      	lsls	r3, r3, #31
 800567c:	d506      	bpl.n	800568c <__swbuf_r+0x6c>
 800567e:	2e0a      	cmp	r6, #10
 8005680:	d104      	bne.n	800568c <__swbuf_r+0x6c>
 8005682:	4621      	mov	r1, r4
 8005684:	4628      	mov	r0, r5
 8005686:	f000 f919 	bl	80058bc <_fflush_r>
 800568a:	b988      	cbnz	r0, 80056b0 <__swbuf_r+0x90>
 800568c:	4638      	mov	r0, r7
 800568e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <__swbuf_r+0x9c>)
 8005692:	429c      	cmp	r4, r3
 8005694:	d101      	bne.n	800569a <__swbuf_r+0x7a>
 8005696:	68ac      	ldr	r4, [r5, #8]
 8005698:	e7cf      	b.n	800563a <__swbuf_r+0x1a>
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <__swbuf_r+0xa0>)
 800569c:	429c      	cmp	r4, r3
 800569e:	bf08      	it	eq
 80056a0:	68ec      	ldreq	r4, [r5, #12]
 80056a2:	e7ca      	b.n	800563a <__swbuf_r+0x1a>
 80056a4:	4621      	mov	r1, r4
 80056a6:	4628      	mov	r0, r5
 80056a8:	f000 f80c 	bl	80056c4 <__swsetup_r>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d0cb      	beq.n	8005648 <__swbuf_r+0x28>
 80056b0:	f04f 37ff 	mov.w	r7, #4294967295
 80056b4:	e7ea      	b.n	800568c <__swbuf_r+0x6c>
 80056b6:	bf00      	nop
 80056b8:	08006000 	.word	0x08006000
 80056bc:	08006020 	.word	0x08006020
 80056c0:	08005fe0 	.word	0x08005fe0

080056c4 <__swsetup_r>:
 80056c4:	4b32      	ldr	r3, [pc, #200]	; (8005790 <__swsetup_r+0xcc>)
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	4606      	mov	r6, r0
 80056cc:	460c      	mov	r4, r1
 80056ce:	b125      	cbz	r5, 80056da <__swsetup_r+0x16>
 80056d0:	69ab      	ldr	r3, [r5, #24]
 80056d2:	b913      	cbnz	r3, 80056da <__swsetup_r+0x16>
 80056d4:	4628      	mov	r0, r5
 80056d6:	f000 f985 	bl	80059e4 <__sinit>
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <__swsetup_r+0xd0>)
 80056dc:	429c      	cmp	r4, r3
 80056de:	d10f      	bne.n	8005700 <__swsetup_r+0x3c>
 80056e0:	686c      	ldr	r4, [r5, #4]
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056e8:	0719      	lsls	r1, r3, #28
 80056ea:	d42c      	bmi.n	8005746 <__swsetup_r+0x82>
 80056ec:	06dd      	lsls	r5, r3, #27
 80056ee:	d411      	bmi.n	8005714 <__swsetup_r+0x50>
 80056f0:	2309      	movs	r3, #9
 80056f2:	6033      	str	r3, [r6, #0]
 80056f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295
 80056fe:	e03e      	b.n	800577e <__swsetup_r+0xba>
 8005700:	4b25      	ldr	r3, [pc, #148]	; (8005798 <__swsetup_r+0xd4>)
 8005702:	429c      	cmp	r4, r3
 8005704:	d101      	bne.n	800570a <__swsetup_r+0x46>
 8005706:	68ac      	ldr	r4, [r5, #8]
 8005708:	e7eb      	b.n	80056e2 <__swsetup_r+0x1e>
 800570a:	4b24      	ldr	r3, [pc, #144]	; (800579c <__swsetup_r+0xd8>)
 800570c:	429c      	cmp	r4, r3
 800570e:	bf08      	it	eq
 8005710:	68ec      	ldreq	r4, [r5, #12]
 8005712:	e7e6      	b.n	80056e2 <__swsetup_r+0x1e>
 8005714:	0758      	lsls	r0, r3, #29
 8005716:	d512      	bpl.n	800573e <__swsetup_r+0x7a>
 8005718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800571a:	b141      	cbz	r1, 800572e <__swsetup_r+0x6a>
 800571c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005720:	4299      	cmp	r1, r3
 8005722:	d002      	beq.n	800572a <__swsetup_r+0x66>
 8005724:	4630      	mov	r0, r6
 8005726:	f7ff fa77 	bl	8004c18 <_free_r>
 800572a:	2300      	movs	r3, #0
 800572c:	6363      	str	r3, [r4, #52]	; 0x34
 800572e:	89a3      	ldrh	r3, [r4, #12]
 8005730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005734:	81a3      	strh	r3, [r4, #12]
 8005736:	2300      	movs	r3, #0
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6023      	str	r3, [r4, #0]
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f043 0308 	orr.w	r3, r3, #8
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	b94b      	cbnz	r3, 800575e <__swsetup_r+0x9a>
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005754:	d003      	beq.n	800575e <__swsetup_r+0x9a>
 8005756:	4621      	mov	r1, r4
 8005758:	4630      	mov	r0, r6
 800575a:	f000 fa07 	bl	8005b6c <__smakebuf_r>
 800575e:	89a0      	ldrh	r0, [r4, #12]
 8005760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005764:	f010 0301 	ands.w	r3, r0, #1
 8005768:	d00a      	beq.n	8005780 <__swsetup_r+0xbc>
 800576a:	2300      	movs	r3, #0
 800576c:	60a3      	str	r3, [r4, #8]
 800576e:	6963      	ldr	r3, [r4, #20]
 8005770:	425b      	negs	r3, r3
 8005772:	61a3      	str	r3, [r4, #24]
 8005774:	6923      	ldr	r3, [r4, #16]
 8005776:	b943      	cbnz	r3, 800578a <__swsetup_r+0xc6>
 8005778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800577c:	d1ba      	bne.n	80056f4 <__swsetup_r+0x30>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	0781      	lsls	r1, r0, #30
 8005782:	bf58      	it	pl
 8005784:	6963      	ldrpl	r3, [r4, #20]
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	e7f4      	b.n	8005774 <__swsetup_r+0xb0>
 800578a:	2000      	movs	r0, #0
 800578c:	e7f7      	b.n	800577e <__swsetup_r+0xba>
 800578e:	bf00      	nop
 8005790:	20000018 	.word	0x20000018
 8005794:	08006000 	.word	0x08006000
 8005798:	08006020 	.word	0x08006020
 800579c:	08005fe0 	.word	0x08005fe0

080057a0 <abort>:
 80057a0:	b508      	push	{r3, lr}
 80057a2:	2006      	movs	r0, #6
 80057a4:	f000 faa4 	bl	8005cf0 <raise>
 80057a8:	2001      	movs	r0, #1
 80057aa:	f7fb fa81 	bl	8000cb0 <_exit>
	...

080057b0 <__sflush_r>:
 80057b0:	898a      	ldrh	r2, [r1, #12]
 80057b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b6:	4605      	mov	r5, r0
 80057b8:	0710      	lsls	r0, r2, #28
 80057ba:	460c      	mov	r4, r1
 80057bc:	d458      	bmi.n	8005870 <__sflush_r+0xc0>
 80057be:	684b      	ldr	r3, [r1, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	dc05      	bgt.n	80057d0 <__sflush_r+0x20>
 80057c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dc02      	bgt.n	80057d0 <__sflush_r+0x20>
 80057ca:	2000      	movs	r0, #0
 80057cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d0f9      	beq.n	80057ca <__sflush_r+0x1a>
 80057d6:	2300      	movs	r3, #0
 80057d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057dc:	682f      	ldr	r7, [r5, #0]
 80057de:	602b      	str	r3, [r5, #0]
 80057e0:	d032      	beq.n	8005848 <__sflush_r+0x98>
 80057e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	075a      	lsls	r2, r3, #29
 80057e8:	d505      	bpl.n	80057f6 <__sflush_r+0x46>
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	1ac0      	subs	r0, r0, r3
 80057ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057f0:	b10b      	cbz	r3, 80057f6 <__sflush_r+0x46>
 80057f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f4:	1ac0      	subs	r0, r0, r3
 80057f6:	2300      	movs	r3, #0
 80057f8:	4602      	mov	r2, r0
 80057fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057fc:	6a21      	ldr	r1, [r4, #32]
 80057fe:	4628      	mov	r0, r5
 8005800:	47b0      	blx	r6
 8005802:	1c43      	adds	r3, r0, #1
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	d106      	bne.n	8005816 <__sflush_r+0x66>
 8005808:	6829      	ldr	r1, [r5, #0]
 800580a:	291d      	cmp	r1, #29
 800580c:	d82c      	bhi.n	8005868 <__sflush_r+0xb8>
 800580e:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <__sflush_r+0x108>)
 8005810:	40ca      	lsrs	r2, r1
 8005812:	07d6      	lsls	r6, r2, #31
 8005814:	d528      	bpl.n	8005868 <__sflush_r+0xb8>
 8005816:	2200      	movs	r2, #0
 8005818:	6062      	str	r2, [r4, #4]
 800581a:	04d9      	lsls	r1, r3, #19
 800581c:	6922      	ldr	r2, [r4, #16]
 800581e:	6022      	str	r2, [r4, #0]
 8005820:	d504      	bpl.n	800582c <__sflush_r+0x7c>
 8005822:	1c42      	adds	r2, r0, #1
 8005824:	d101      	bne.n	800582a <__sflush_r+0x7a>
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	b903      	cbnz	r3, 800582c <__sflush_r+0x7c>
 800582a:	6560      	str	r0, [r4, #84]	; 0x54
 800582c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800582e:	602f      	str	r7, [r5, #0]
 8005830:	2900      	cmp	r1, #0
 8005832:	d0ca      	beq.n	80057ca <__sflush_r+0x1a>
 8005834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005838:	4299      	cmp	r1, r3
 800583a:	d002      	beq.n	8005842 <__sflush_r+0x92>
 800583c:	4628      	mov	r0, r5
 800583e:	f7ff f9eb 	bl	8004c18 <_free_r>
 8005842:	2000      	movs	r0, #0
 8005844:	6360      	str	r0, [r4, #52]	; 0x34
 8005846:	e7c1      	b.n	80057cc <__sflush_r+0x1c>
 8005848:	6a21      	ldr	r1, [r4, #32]
 800584a:	2301      	movs	r3, #1
 800584c:	4628      	mov	r0, r5
 800584e:	47b0      	blx	r6
 8005850:	1c41      	adds	r1, r0, #1
 8005852:	d1c7      	bne.n	80057e4 <__sflush_r+0x34>
 8005854:	682b      	ldr	r3, [r5, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0c4      	beq.n	80057e4 <__sflush_r+0x34>
 800585a:	2b1d      	cmp	r3, #29
 800585c:	d001      	beq.n	8005862 <__sflush_r+0xb2>
 800585e:	2b16      	cmp	r3, #22
 8005860:	d101      	bne.n	8005866 <__sflush_r+0xb6>
 8005862:	602f      	str	r7, [r5, #0]
 8005864:	e7b1      	b.n	80057ca <__sflush_r+0x1a>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	e7ad      	b.n	80057cc <__sflush_r+0x1c>
 8005870:	690f      	ldr	r7, [r1, #16]
 8005872:	2f00      	cmp	r7, #0
 8005874:	d0a9      	beq.n	80057ca <__sflush_r+0x1a>
 8005876:	0793      	lsls	r3, r2, #30
 8005878:	680e      	ldr	r6, [r1, #0]
 800587a:	bf08      	it	eq
 800587c:	694b      	ldreq	r3, [r1, #20]
 800587e:	600f      	str	r7, [r1, #0]
 8005880:	bf18      	it	ne
 8005882:	2300      	movne	r3, #0
 8005884:	eba6 0807 	sub.w	r8, r6, r7
 8005888:	608b      	str	r3, [r1, #8]
 800588a:	f1b8 0f00 	cmp.w	r8, #0
 800588e:	dd9c      	ble.n	80057ca <__sflush_r+0x1a>
 8005890:	6a21      	ldr	r1, [r4, #32]
 8005892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005894:	4643      	mov	r3, r8
 8005896:	463a      	mov	r2, r7
 8005898:	4628      	mov	r0, r5
 800589a:	47b0      	blx	r6
 800589c:	2800      	cmp	r0, #0
 800589e:	dc06      	bgt.n	80058ae <__sflush_r+0xfe>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a6:	81a3      	strh	r3, [r4, #12]
 80058a8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ac:	e78e      	b.n	80057cc <__sflush_r+0x1c>
 80058ae:	4407      	add	r7, r0
 80058b0:	eba8 0800 	sub.w	r8, r8, r0
 80058b4:	e7e9      	b.n	800588a <__sflush_r+0xda>
 80058b6:	bf00      	nop
 80058b8:	20400001 	.word	0x20400001

080058bc <_fflush_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	690b      	ldr	r3, [r1, #16]
 80058c0:	4605      	mov	r5, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	b913      	cbnz	r3, 80058cc <_fflush_r+0x10>
 80058c6:	2500      	movs	r5, #0
 80058c8:	4628      	mov	r0, r5
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	b118      	cbz	r0, 80058d6 <_fflush_r+0x1a>
 80058ce:	6983      	ldr	r3, [r0, #24]
 80058d0:	b90b      	cbnz	r3, 80058d6 <_fflush_r+0x1a>
 80058d2:	f000 f887 	bl	80059e4 <__sinit>
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <_fflush_r+0x6c>)
 80058d8:	429c      	cmp	r4, r3
 80058da:	d11b      	bne.n	8005914 <_fflush_r+0x58>
 80058dc:	686c      	ldr	r4, [r5, #4]
 80058de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0ef      	beq.n	80058c6 <_fflush_r+0xa>
 80058e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058e8:	07d0      	lsls	r0, r2, #31
 80058ea:	d404      	bmi.n	80058f6 <_fflush_r+0x3a>
 80058ec:	0599      	lsls	r1, r3, #22
 80058ee:	d402      	bmi.n	80058f6 <_fflush_r+0x3a>
 80058f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058f2:	f000 f915 	bl	8005b20 <__retarget_lock_acquire_recursive>
 80058f6:	4628      	mov	r0, r5
 80058f8:	4621      	mov	r1, r4
 80058fa:	f7ff ff59 	bl	80057b0 <__sflush_r>
 80058fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005900:	07da      	lsls	r2, r3, #31
 8005902:	4605      	mov	r5, r0
 8005904:	d4e0      	bmi.n	80058c8 <_fflush_r+0xc>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	d4dd      	bmi.n	80058c8 <_fflush_r+0xc>
 800590c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800590e:	f000 f908 	bl	8005b22 <__retarget_lock_release_recursive>
 8005912:	e7d9      	b.n	80058c8 <_fflush_r+0xc>
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <_fflush_r+0x70>)
 8005916:	429c      	cmp	r4, r3
 8005918:	d101      	bne.n	800591e <_fflush_r+0x62>
 800591a:	68ac      	ldr	r4, [r5, #8]
 800591c:	e7df      	b.n	80058de <_fflush_r+0x22>
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <_fflush_r+0x74>)
 8005920:	429c      	cmp	r4, r3
 8005922:	bf08      	it	eq
 8005924:	68ec      	ldreq	r4, [r5, #12]
 8005926:	e7da      	b.n	80058de <_fflush_r+0x22>
 8005928:	08006000 	.word	0x08006000
 800592c:	08006020 	.word	0x08006020
 8005930:	08005fe0 	.word	0x08005fe0

08005934 <std>:
 8005934:	2300      	movs	r3, #0
 8005936:	b510      	push	{r4, lr}
 8005938:	4604      	mov	r4, r0
 800593a:	e9c0 3300 	strd	r3, r3, [r0]
 800593e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005942:	6083      	str	r3, [r0, #8]
 8005944:	8181      	strh	r1, [r0, #12]
 8005946:	6643      	str	r3, [r0, #100]	; 0x64
 8005948:	81c2      	strh	r2, [r0, #14]
 800594a:	6183      	str	r3, [r0, #24]
 800594c:	4619      	mov	r1, r3
 800594e:	2208      	movs	r2, #8
 8005950:	305c      	adds	r0, #92	; 0x5c
 8005952:	f7ff f8c1 	bl	8004ad8 <memset>
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <std+0x38>)
 8005958:	6263      	str	r3, [r4, #36]	; 0x24
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <std+0x3c>)
 800595c:	62a3      	str	r3, [r4, #40]	; 0x28
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <std+0x40>)
 8005960:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <std+0x44>)
 8005964:	6224      	str	r4, [r4, #32]
 8005966:	6323      	str	r3, [r4, #48]	; 0x30
 8005968:	bd10      	pop	{r4, pc}
 800596a:	bf00      	nop
 800596c:	08005d29 	.word	0x08005d29
 8005970:	08005d4b 	.word	0x08005d4b
 8005974:	08005d83 	.word	0x08005d83
 8005978:	08005da7 	.word	0x08005da7

0800597c <_cleanup_r>:
 800597c:	4901      	ldr	r1, [pc, #4]	; (8005984 <_cleanup_r+0x8>)
 800597e:	f000 b8af 	b.w	8005ae0 <_fwalk_reent>
 8005982:	bf00      	nop
 8005984:	080058bd 	.word	0x080058bd

08005988 <__sfmoreglue>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	1e4a      	subs	r2, r1, #1
 800598c:	2568      	movs	r5, #104	; 0x68
 800598e:	4355      	muls	r5, r2
 8005990:	460e      	mov	r6, r1
 8005992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005996:	f7ff f98f 	bl	8004cb8 <_malloc_r>
 800599a:	4604      	mov	r4, r0
 800599c:	b140      	cbz	r0, 80059b0 <__sfmoreglue+0x28>
 800599e:	2100      	movs	r1, #0
 80059a0:	e9c0 1600 	strd	r1, r6, [r0]
 80059a4:	300c      	adds	r0, #12
 80059a6:	60a0      	str	r0, [r4, #8]
 80059a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059ac:	f7ff f894 	bl	8004ad8 <memset>
 80059b0:	4620      	mov	r0, r4
 80059b2:	bd70      	pop	{r4, r5, r6, pc}

080059b4 <__sfp_lock_acquire>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__sfp_lock_acquire+0x8>)
 80059b6:	f000 b8b3 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	2000052c 	.word	0x2000052c

080059c0 <__sfp_lock_release>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__sfp_lock_release+0x8>)
 80059c2:	f000 b8ae 	b.w	8005b22 <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	2000052c 	.word	0x2000052c

080059cc <__sinit_lock_acquire>:
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <__sinit_lock_acquire+0x8>)
 80059ce:	f000 b8a7 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 80059d2:	bf00      	nop
 80059d4:	20000527 	.word	0x20000527

080059d8 <__sinit_lock_release>:
 80059d8:	4801      	ldr	r0, [pc, #4]	; (80059e0 <__sinit_lock_release+0x8>)
 80059da:	f000 b8a2 	b.w	8005b22 <__retarget_lock_release_recursive>
 80059de:	bf00      	nop
 80059e0:	20000527 	.word	0x20000527

080059e4 <__sinit>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4604      	mov	r4, r0
 80059e8:	f7ff fff0 	bl	80059cc <__sinit_lock_acquire>
 80059ec:	69a3      	ldr	r3, [r4, #24]
 80059ee:	b11b      	cbz	r3, 80059f8 <__sinit+0x14>
 80059f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059f4:	f7ff bff0 	b.w	80059d8 <__sinit_lock_release>
 80059f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80059fc:	6523      	str	r3, [r4, #80]	; 0x50
 80059fe:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <__sinit+0x68>)
 8005a00:	4a13      	ldr	r2, [pc, #76]	; (8005a50 <__sinit+0x6c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	bf04      	itt	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	61a3      	streq	r3, [r4, #24]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f820 	bl	8005a54 <__sfp>
 8005a14:	6060      	str	r0, [r4, #4]
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f81c 	bl	8005a54 <__sfp>
 8005a1c:	60a0      	str	r0, [r4, #8]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 f818 	bl	8005a54 <__sfp>
 8005a24:	2200      	movs	r2, #0
 8005a26:	60e0      	str	r0, [r4, #12]
 8005a28:	2104      	movs	r1, #4
 8005a2a:	6860      	ldr	r0, [r4, #4]
 8005a2c:	f7ff ff82 	bl	8005934 <std>
 8005a30:	68a0      	ldr	r0, [r4, #8]
 8005a32:	2201      	movs	r2, #1
 8005a34:	2109      	movs	r1, #9
 8005a36:	f7ff ff7d 	bl	8005934 <std>
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	2112      	movs	r1, #18
 8005a40:	f7ff ff78 	bl	8005934 <std>
 8005a44:	2301      	movs	r3, #1
 8005a46:	61a3      	str	r3, [r4, #24]
 8005a48:	e7d2      	b.n	80059f0 <__sinit+0xc>
 8005a4a:	bf00      	nop
 8005a4c:	08005ef4 	.word	0x08005ef4
 8005a50:	0800597d 	.word	0x0800597d

08005a54 <__sfp>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	4607      	mov	r7, r0
 8005a58:	f7ff ffac 	bl	80059b4 <__sfp_lock_acquire>
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <__sfp+0x84>)
 8005a5e:	681e      	ldr	r6, [r3, #0]
 8005a60:	69b3      	ldr	r3, [r6, #24]
 8005a62:	b913      	cbnz	r3, 8005a6a <__sfp+0x16>
 8005a64:	4630      	mov	r0, r6
 8005a66:	f7ff ffbd 	bl	80059e4 <__sinit>
 8005a6a:	3648      	adds	r6, #72	; 0x48
 8005a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	d503      	bpl.n	8005a7c <__sfp+0x28>
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	b30b      	cbz	r3, 8005abc <__sfp+0x68>
 8005a78:	6836      	ldr	r6, [r6, #0]
 8005a7a:	e7f7      	b.n	8005a6c <__sfp+0x18>
 8005a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a80:	b9d5      	cbnz	r5, 8005ab8 <__sfp+0x64>
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <__sfp+0x88>)
 8005a84:	60e3      	str	r3, [r4, #12]
 8005a86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a8a:	6665      	str	r5, [r4, #100]	; 0x64
 8005a8c:	f000 f847 	bl	8005b1e <__retarget_lock_init_recursive>
 8005a90:	f7ff ff96 	bl	80059c0 <__sfp_lock_release>
 8005a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005a9c:	6025      	str	r5, [r4, #0]
 8005a9e:	61a5      	str	r5, [r4, #24]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aa8:	f7ff f816 	bl	8004ad8 <memset>
 8005aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab8:	3468      	adds	r4, #104	; 0x68
 8005aba:	e7d9      	b.n	8005a70 <__sfp+0x1c>
 8005abc:	2104      	movs	r1, #4
 8005abe:	4638      	mov	r0, r7
 8005ac0:	f7ff ff62 	bl	8005988 <__sfmoreglue>
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	6030      	str	r0, [r6, #0]
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d1d5      	bne.n	8005a78 <__sfp+0x24>
 8005acc:	f7ff ff78 	bl	80059c0 <__sfp_lock_release>
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	603b      	str	r3, [r7, #0]
 8005ad4:	e7ee      	b.n	8005ab4 <__sfp+0x60>
 8005ad6:	bf00      	nop
 8005ad8:	08005ef4 	.word	0x08005ef4
 8005adc:	ffff0001 	.word	0xffff0001

08005ae0 <_fwalk_reent>:
 8005ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae4:	4606      	mov	r6, r0
 8005ae6:	4688      	mov	r8, r1
 8005ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005aec:	2700      	movs	r7, #0
 8005aee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af2:	f1b9 0901 	subs.w	r9, r9, #1
 8005af6:	d505      	bpl.n	8005b04 <_fwalk_reent+0x24>
 8005af8:	6824      	ldr	r4, [r4, #0]
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	d1f7      	bne.n	8005aee <_fwalk_reent+0xe>
 8005afe:	4638      	mov	r0, r7
 8005b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b04:	89ab      	ldrh	r3, [r5, #12]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d907      	bls.n	8005b1a <_fwalk_reent+0x3a>
 8005b0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	d003      	beq.n	8005b1a <_fwalk_reent+0x3a>
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	47c0      	blx	r8
 8005b18:	4307      	orrs	r7, r0
 8005b1a:	3568      	adds	r5, #104	; 0x68
 8005b1c:	e7e9      	b.n	8005af2 <_fwalk_reent+0x12>

08005b1e <__retarget_lock_init_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <__swhatbuf_r>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	460e      	mov	r6, r1
 8005b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	b096      	sub	sp, #88	; 0x58
 8005b30:	4614      	mov	r4, r2
 8005b32:	461d      	mov	r5, r3
 8005b34:	da07      	bge.n	8005b46 <__swhatbuf_r+0x22>
 8005b36:	2300      	movs	r3, #0
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	89b3      	ldrh	r3, [r6, #12]
 8005b3c:	061a      	lsls	r2, r3, #24
 8005b3e:	d410      	bmi.n	8005b62 <__swhatbuf_r+0x3e>
 8005b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b44:	e00e      	b.n	8005b64 <__swhatbuf_r+0x40>
 8005b46:	466a      	mov	r2, sp
 8005b48:	f000 f954 	bl	8005df4 <_fstat_r>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	dbf2      	blt.n	8005b36 <__swhatbuf_r+0x12>
 8005b50:	9a01      	ldr	r2, [sp, #4]
 8005b52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b5a:	425a      	negs	r2, r3
 8005b5c:	415a      	adcs	r2, r3
 8005b5e:	602a      	str	r2, [r5, #0]
 8005b60:	e7ee      	b.n	8005b40 <__swhatbuf_r+0x1c>
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	2000      	movs	r0, #0
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	b016      	add	sp, #88	; 0x58
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}

08005b6c <__smakebuf_r>:
 8005b6c:	898b      	ldrh	r3, [r1, #12]
 8005b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b70:	079d      	lsls	r5, r3, #30
 8005b72:	4606      	mov	r6, r0
 8005b74:	460c      	mov	r4, r1
 8005b76:	d507      	bpl.n	8005b88 <__smakebuf_r+0x1c>
 8005b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	6123      	str	r3, [r4, #16]
 8005b80:	2301      	movs	r3, #1
 8005b82:	6163      	str	r3, [r4, #20]
 8005b84:	b002      	add	sp, #8
 8005b86:	bd70      	pop	{r4, r5, r6, pc}
 8005b88:	ab01      	add	r3, sp, #4
 8005b8a:	466a      	mov	r2, sp
 8005b8c:	f7ff ffca 	bl	8005b24 <__swhatbuf_r>
 8005b90:	9900      	ldr	r1, [sp, #0]
 8005b92:	4605      	mov	r5, r0
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff f88f 	bl	8004cb8 <_malloc_r>
 8005b9a:	b948      	cbnz	r0, 8005bb0 <__smakebuf_r+0x44>
 8005b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba0:	059a      	lsls	r2, r3, #22
 8005ba2:	d4ef      	bmi.n	8005b84 <__smakebuf_r+0x18>
 8005ba4:	f023 0303 	bic.w	r3, r3, #3
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	e7e3      	b.n	8005b78 <__smakebuf_r+0xc>
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <__smakebuf_r+0x7c>)
 8005bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	6020      	str	r0, [r4, #0]
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	9b00      	ldr	r3, [sp, #0]
 8005bc0:	6163      	str	r3, [r4, #20]
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	6120      	str	r0, [r4, #16]
 8005bc6:	b15b      	cbz	r3, 8005be0 <__smakebuf_r+0x74>
 8005bc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f000 f923 	bl	8005e18 <_isatty_r>
 8005bd2:	b128      	cbz	r0, 8005be0 <__smakebuf_r+0x74>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	f043 0301 	orr.w	r3, r3, #1
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	89a0      	ldrh	r0, [r4, #12]
 8005be2:	4305      	orrs	r5, r0
 8005be4:	81a5      	strh	r5, [r4, #12]
 8005be6:	e7cd      	b.n	8005b84 <__smakebuf_r+0x18>
 8005be8:	0800597d 	.word	0x0800597d

08005bec <memcpy>:
 8005bec:	440a      	add	r2, r1
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bf4:	d100      	bne.n	8005bf8 <memcpy+0xc>
 8005bf6:	4770      	bx	lr
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c02:	4291      	cmp	r1, r2
 8005c04:	d1f9      	bne.n	8005bfa <memcpy+0xe>
 8005c06:	bd10      	pop	{r4, pc}

08005c08 <memmove>:
 8005c08:	4288      	cmp	r0, r1
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	eb01 0402 	add.w	r4, r1, r2
 8005c10:	d902      	bls.n	8005c18 <memmove+0x10>
 8005c12:	4284      	cmp	r4, r0
 8005c14:	4623      	mov	r3, r4
 8005c16:	d807      	bhi.n	8005c28 <memmove+0x20>
 8005c18:	1e43      	subs	r3, r0, #1
 8005c1a:	42a1      	cmp	r1, r4
 8005c1c:	d008      	beq.n	8005c30 <memmove+0x28>
 8005c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c26:	e7f8      	b.n	8005c1a <memmove+0x12>
 8005c28:	4402      	add	r2, r0
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	428a      	cmp	r2, r1
 8005c2e:	d100      	bne.n	8005c32 <memmove+0x2a>
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c3a:	e7f7      	b.n	8005c2c <memmove+0x24>

08005c3c <__malloc_lock>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__malloc_lock+0x8>)
 8005c3e:	f7ff bf6f 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 8005c42:	bf00      	nop
 8005c44:	20000528 	.word	0x20000528

08005c48 <__malloc_unlock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__malloc_unlock+0x8>)
 8005c4a:	f7ff bf6a 	b.w	8005b22 <__retarget_lock_release_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20000528 	.word	0x20000528

08005c54 <_realloc_r>:
 8005c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c56:	4607      	mov	r7, r0
 8005c58:	4614      	mov	r4, r2
 8005c5a:	460e      	mov	r6, r1
 8005c5c:	b921      	cbnz	r1, 8005c68 <_realloc_r+0x14>
 8005c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c62:	4611      	mov	r1, r2
 8005c64:	f7ff b828 	b.w	8004cb8 <_malloc_r>
 8005c68:	b922      	cbnz	r2, 8005c74 <_realloc_r+0x20>
 8005c6a:	f7fe ffd5 	bl	8004c18 <_free_r>
 8005c6e:	4625      	mov	r5, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c74:	f000 f8f2 	bl	8005e5c <_malloc_usable_size_r>
 8005c78:	42a0      	cmp	r0, r4
 8005c7a:	d20f      	bcs.n	8005c9c <_realloc_r+0x48>
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4638      	mov	r0, r7
 8005c80:	f7ff f81a 	bl	8004cb8 <_malloc_r>
 8005c84:	4605      	mov	r5, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d0f2      	beq.n	8005c70 <_realloc_r+0x1c>
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	f7ff ffad 	bl	8005bec <memcpy>
 8005c92:	4631      	mov	r1, r6
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7fe ffbf 	bl	8004c18 <_free_r>
 8005c9a:	e7e9      	b.n	8005c70 <_realloc_r+0x1c>
 8005c9c:	4635      	mov	r5, r6
 8005c9e:	e7e7      	b.n	8005c70 <_realloc_r+0x1c>

08005ca0 <_raise_r>:
 8005ca0:	291f      	cmp	r1, #31
 8005ca2:	b538      	push	{r3, r4, r5, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	460d      	mov	r5, r1
 8005ca8:	d904      	bls.n	8005cb4 <_raise_r+0x14>
 8005caa:	2316      	movs	r3, #22
 8005cac:	6003      	str	r3, [r0, #0]
 8005cae:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cb6:	b112      	cbz	r2, 8005cbe <_raise_r+0x1e>
 8005cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cbc:	b94b      	cbnz	r3, 8005cd2 <_raise_r+0x32>
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 f830 	bl	8005d24 <_getpid_r>
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4601      	mov	r1, r0
 8005cc8:	4620      	mov	r0, r4
 8005cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cce:	f000 b817 	b.w	8005d00 <_kill_r>
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d00a      	beq.n	8005cec <_raise_r+0x4c>
 8005cd6:	1c59      	adds	r1, r3, #1
 8005cd8:	d103      	bne.n	8005ce2 <_raise_r+0x42>
 8005cda:	2316      	movs	r3, #22
 8005cdc:	6003      	str	r3, [r0, #0]
 8005cde:	2001      	movs	r0, #1
 8005ce0:	e7e7      	b.n	8005cb2 <_raise_r+0x12>
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ce8:	4628      	mov	r0, r5
 8005cea:	4798      	blx	r3
 8005cec:	2000      	movs	r0, #0
 8005cee:	e7e0      	b.n	8005cb2 <_raise_r+0x12>

08005cf0 <raise>:
 8005cf0:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <raise+0xc>)
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f7ff bfd3 	b.w	8005ca0 <_raise_r>
 8005cfa:	bf00      	nop
 8005cfc:	20000018 	.word	0x20000018

08005d00 <_kill_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d07      	ldr	r5, [pc, #28]	; (8005d20 <_kill_r+0x20>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	f7fa ffbf 	bl	8000c90 <_kill>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	d102      	bne.n	8005d1c <_kill_r+0x1c>
 8005d16:	682b      	ldr	r3, [r5, #0]
 8005d18:	b103      	cbz	r3, 8005d1c <_kill_r+0x1c>
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	bf00      	nop
 8005d20:	20000530 	.word	0x20000530

08005d24 <_getpid_r>:
 8005d24:	f7fa bfac 	b.w	8000c80 <_getpid>

08005d28 <__sread>:
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d30:	f000 f89c 	bl	8005e6c <_read_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	bfab      	itete	ge
 8005d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d3c:	181b      	addge	r3, r3, r0
 8005d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d42:	bfac      	ite	ge
 8005d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d46:	81a3      	strhlt	r3, [r4, #12]
 8005d48:	bd10      	pop	{r4, pc}

08005d4a <__swrite>:
 8005d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4e:	461f      	mov	r7, r3
 8005d50:	898b      	ldrh	r3, [r1, #12]
 8005d52:	05db      	lsls	r3, r3, #23
 8005d54:	4605      	mov	r5, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	4616      	mov	r6, r2
 8005d5a:	d505      	bpl.n	8005d68 <__swrite+0x1e>
 8005d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d60:	2302      	movs	r3, #2
 8005d62:	2200      	movs	r2, #0
 8005d64:	f000 f868 	bl	8005e38 <_lseek_r>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	4632      	mov	r2, r6
 8005d76:	463b      	mov	r3, r7
 8005d78:	4628      	mov	r0, r5
 8005d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7e:	f000 b817 	b.w	8005db0 <_write_r>

08005d82 <__sseek>:
 8005d82:	b510      	push	{r4, lr}
 8005d84:	460c      	mov	r4, r1
 8005d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8a:	f000 f855 	bl	8005e38 <_lseek_r>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	bf15      	itete	ne
 8005d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d9e:	81a3      	strheq	r3, [r4, #12]
 8005da0:	bf18      	it	ne
 8005da2:	81a3      	strhne	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__sclose>:
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 b813 	b.w	8005dd4 <_close_r>
	...

08005db0 <_write_r>:
 8005db0:	b538      	push	{r3, r4, r5, lr}
 8005db2:	4d07      	ldr	r5, [pc, #28]	; (8005dd0 <_write_r+0x20>)
 8005db4:	4604      	mov	r4, r0
 8005db6:	4608      	mov	r0, r1
 8005db8:	4611      	mov	r1, r2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f7fa ff9d 	bl	8000cfe <_write>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_write_r+0x1e>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_write_r+0x1e>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000530 	.word	0x20000530

08005dd4 <_close_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d06      	ldr	r5, [pc, #24]	; (8005df0 <_close_r+0x1c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	602b      	str	r3, [r5, #0]
 8005de0:	f7fa ffa9 	bl	8000d36 <_close>
 8005de4:	1c43      	adds	r3, r0, #1
 8005de6:	d102      	bne.n	8005dee <_close_r+0x1a>
 8005de8:	682b      	ldr	r3, [r5, #0]
 8005dea:	b103      	cbz	r3, 8005dee <_close_r+0x1a>
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	bd38      	pop	{r3, r4, r5, pc}
 8005df0:	20000530 	.word	0x20000530

08005df4 <_fstat_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4d07      	ldr	r5, [pc, #28]	; (8005e14 <_fstat_r+0x20>)
 8005df8:	2300      	movs	r3, #0
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	f7fa ffa4 	bl	8000d4e <_fstat>
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d102      	bne.n	8005e10 <_fstat_r+0x1c>
 8005e0a:	682b      	ldr	r3, [r5, #0]
 8005e0c:	b103      	cbz	r3, 8005e10 <_fstat_r+0x1c>
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	bd38      	pop	{r3, r4, r5, pc}
 8005e12:	bf00      	nop
 8005e14:	20000530 	.word	0x20000530

08005e18 <_isatty_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	; (8005e34 <_isatty_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fa ffa3 	bl	8000d6e <_isatty>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_isatty_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_isatty_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000530 	.word	0x20000530

08005e38 <_lseek_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4d07      	ldr	r5, [pc, #28]	; (8005e58 <_lseek_r+0x20>)
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	4608      	mov	r0, r1
 8005e40:	4611      	mov	r1, r2
 8005e42:	2200      	movs	r2, #0
 8005e44:	602a      	str	r2, [r5, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	f7fa ff9c 	bl	8000d84 <_lseek>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_lseek_r+0x1e>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_lseek_r+0x1e>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	20000530 	.word	0x20000530

08005e5c <_malloc_usable_size_r>:
 8005e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e60:	1f18      	subs	r0, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbc      	itt	lt
 8005e66:	580b      	ldrlt	r3, [r1, r0]
 8005e68:	18c0      	addlt	r0, r0, r3
 8005e6a:	4770      	bx	lr

08005e6c <_read_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	4d07      	ldr	r5, [pc, #28]	; (8005e8c <_read_r+0x20>)
 8005e70:	4604      	mov	r4, r0
 8005e72:	4608      	mov	r0, r1
 8005e74:	4611      	mov	r1, r2
 8005e76:	2200      	movs	r2, #0
 8005e78:	602a      	str	r2, [r5, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f7fa ff22 	bl	8000cc4 <_read>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_read_r+0x1e>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_read_r+0x1e>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20000530 	.word	0x20000530

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr


Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006300  08006300  00016300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006498  08006498  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006498  08006498  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006498  08006498  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080064a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000007c  0800651c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800651c  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012155  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247f  00000000  00000000  00032201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca8  00000000  00000000  00036158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f1e  00000000  00000000  0004ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cb2  00000000  00000000  0005dd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e79d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e4  00000000  00000000  000e7a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062e8 	.word	0x080062e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080062e8 	.word	0x080062e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 ffec 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f84e 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f974 	bl	8000568 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8a2 	bl	80003c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f938 	bl	80004f8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f90e 	bl	80004a8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028c:	481a      	ldr	r0, [pc, #104]	; (80002f8 <main+0x88>)
 800028e:	f002 fefb 	bl	8003088 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000292:	481a      	ldr	r0, [pc, #104]	; (80002fc <main+0x8c>)
 8000294:	f002 fef8 	bl	8003088 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	4817      	ldr	r0, [pc, #92]	; (80002f8 <main+0x88>)
 800029c:	f002 ffa2 	bl	80031e4 <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <main+0x8c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <main+0x90>)
 80002aa:	801a      	strh	r2, [r3, #0]
  timer_val_get = timer_val;
 80002ac:	4b14      	ldr	r3, [pc, #80]	; (8000300 <main+0x90>)
 80002ae:	881a      	ldrh	r2, [r3, #0]
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <main+0x94>)
 80002b2:	801a      	strh	r2, [r3, #0]
*/
	 // BEEP(600,100);
	  //HAL_Delay(1000);
//---------------------------------------------------------------------------------------------------

	  if (level==1) {
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <main+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d101      	bne.n	80002c0 <main+0x50>
	     generate_sequence();
 80002bc:	f000 fbc0 	bl	8000a40 <generate_sequence>
	   }
	  show_sequence();
 80002c0:	f000 fc0c 	bl	8000adc <show_sequence>
	  get_sequence();
 80002c4:	f000 fc88 	bl	8000bd8 <get_sequence>
	  //level++;
	  //wrong_sequence();
	  HAL_Delay(1000);
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f001 f826 	bl	800131c <HAL_Delay>
	  UART_SendText("\r\n");
	  */


//-------------------------------------------------------------------------------------------------------------------------
	  UART_SendText("Frequency ");
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x9c>)
 80002d2:	f000 f9d7 	bl	8000684 <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <main+0xa0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f9f8 	bl	80006d0 <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <main+0xa4>)
 80002e2:	f000 f9cf 	bl	8000684 <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002ea:	f001 f817 	bl	800131c <HAL_Delay>
	  Frequency = 0;
 80002ee:	4b08      	ldr	r3, [pc, #32]	; (8000310 <main+0xa0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
	  if (level==1) {
 80002f4:	e7de      	b.n	80002b4 <main+0x44>
 80002f6:	bf00      	nop
 80002f8:	20000404 	.word	0x20000404
 80002fc:	200004d4 	.word	0x200004d4
 8000300:	200000b4 	.word	0x200000b4
 8000304:	200000b6 	.word	0x200000b6
 8000308:	20000004 	.word	0x20000004
 800030c:	08006300 	.word	0x08006300
 8000310:	200000a4 	.word	0x200000a4
 8000314:	0800630c 	.word	0x0800630c

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b09c      	sub	sp, #112	; 0x70
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fdd4 	bl	8004ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2230      	movs	r2, #48	; 0x30
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fdc6 	bl	8004ed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000348:	2302      	movs	r3, #2
 800034a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2310      	movs	r3, #16
 8000352:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000354:	2300      	movs	r3, #0
 8000356:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fb45 	bl	80019ec <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000368:	f000 fd62 	bl	8000e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000370:	2300      	movs	r3, #0
 8000372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000380:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fa38 	bl	80027fc <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000392:	f000 fd4d 	bl	8000e30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 8000396:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800039a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800039c:	2300      	movs	r3, #0
 800039e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fc94 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ae:	f000 fd3f 	bl	8000e30 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003b8:	2000      	movs	r0, #0
 80003ba:	f002 fb9b 	bl	8002af4 <HAL_RCC_MCOConfig>
}
 80003be:	bf00      	nop
 80003c0:	3770      	adds	r7, #112	; 0x70
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b08c      	sub	sp, #48	; 0x30
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ce:	f107 0320 	add.w	r3, r7, #32
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <MX_TIM2_Init+0xdc>)
 80003f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003fc:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <MX_TIM2_Init+0xdc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b28      	ldr	r3, [pc, #160]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000408:	4b26      	ldr	r3, [pc, #152]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800040a:	f04f 32ff 	mov.w	r2, #4294967295
 800040e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000410:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000412:	2200      	movs	r2, #0
 8000414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800041c:	4821      	ldr	r0, [pc, #132]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800041e:	f002 fddb 	bl	8002fd8 <HAL_TIM_Base_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000428:	f000 fd02 	bl	8000e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000430:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000432:	f107 0320 	add.w	r3, r7, #32
 8000436:	4619      	mov	r1, r3
 8000438:	481a      	ldr	r0, [pc, #104]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800043a:	f003 f9bc 	bl	80037b6 <HAL_TIM_ConfigClockSource>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000444:	f000 fcf4 	bl	8000e30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000448:	4816      	ldr	r0, [pc, #88]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800044a:	f002 fe69 	bl	8003120 <HAL_TIM_IC_Init>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000454:	f000 fcec 	bl	8000e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	4619      	mov	r1, r3
 8000466:	480f      	ldr	r0, [pc, #60]	; (80004a4 <MX_TIM2_Init+0xdc>)
 8000468:	f003 fd14 	bl	8003e94 <HAL_TIMEx_MasterConfigSynchronization>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000472:	f000 fcdd 	bl	8000e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800047a:	2301      	movs	r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_TIM2_Init+0xdc>)
 800048e:	f003 f8f6 	bl	800367e <HAL_TIM_IC_ConfigChannel>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000498:	f000 fcca 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	3730      	adds	r7, #48	; 0x30
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000404 	.word	0x20000404

080004a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <MX_TIM16_Init+0x4c>)
 80004b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004b4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <MX_TIM16_Init+0x48>)
 80004dc:	f002 fd7c 	bl	8002fd8 <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004e6:	f000 fca3 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	200004d4 	.word	0x200004d4
 80004f4:	40014400 	.word	0x40014400

080004f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_USART2_UART_Init+0x64>)
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <MX_USART2_UART_Init+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000508:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_USART2_UART_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_USART2_UART_Init+0x64>)
 800051e:	220c      	movs	r2, #12
 8000520:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_USART2_UART_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_USART2_UART_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800053a:	4808      	ldr	r0, [pc, #32]	; (800055c <MX_USART2_UART_Init+0x64>)
 800053c:	f003 fd2e 	bl	8003f9c <HAL_UART_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000546:	f000 fc73 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART2_UART_Init+0x6c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <MX_USART2_UART_Init+0x6c>)
 8000550:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000554:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000450 	.word	0x20000450
 8000560:	40004400 	.word	0x40004400
 8000564:	40013800 	.word	0x40013800

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800057e:	4b3f      	ldr	r3, [pc, #252]	; (800067c <MX_GPIO_Init+0x114>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a3e      	ldr	r2, [pc, #248]	; (800067c <MX_GPIO_Init+0x114>)
 8000584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b3c      	ldr	r3, [pc, #240]	; (800067c <MX_GPIO_Init+0x114>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b39      	ldr	r3, [pc, #228]	; (800067c <MX_GPIO_Init+0x114>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	4a38      	ldr	r2, [pc, #224]	; (800067c <MX_GPIO_Init+0x114>)
 800059c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a0:	6153      	str	r3, [r2, #20]
 80005a2:	4b36      	ldr	r3, [pc, #216]	; (800067c <MX_GPIO_Init+0x114>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <MX_GPIO_Init+0x114>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a32      	ldr	r2, [pc, #200]	; (800067c <MX_GPIO_Init+0x114>)
 80005b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <MX_GPIO_Init+0x114>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	21c0      	movs	r1, #192	; 0xc0
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 f9db 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	212b      	movs	r1, #43	; 0x2b
 80005d6:	482a      	ldr	r0, [pc, #168]	; (8000680 <MX_GPIO_Init+0x118>)
 80005d8:	f001 f9d6 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005dc:	23c0      	movs	r3, #192	; 0xc0
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f001 f83d 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin|BUZZER_Pin;
 80005fa:	232b      	movs	r3, #43	; 0x2b
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4619      	mov	r1, r3
 8000610:	481b      	ldr	r0, [pc, #108]	; (8000680 <MX_GPIO_Init+0x118>)
 8000612:	f001 f82f 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f001 f81d 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BT_1_Pin */
  GPIO_InitStruct.Pin = BT_1_Pin;
 800063a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800063e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BT_1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000652:	f001 f80f 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_2_Pin BT_3_Pin BT_4_Pin */
  GPIO_InitStruct.Pin = BT_2_Pin|BT_3_Pin|BT_4_Pin;
 8000656:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 f801 	bl	8001674 <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	48000400 	.word	0x48000400

08000684 <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 8000694:	e005      	b.n	80006a2 <UART_SendText+0x1e>
	{
		size++;
 8000696:	89bb      	ldrh	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	81bb      	strh	r3, [r7, #12]
		i++;
 800069c:	89fb      	ldrh	r3, [r7, #14]
 800069e:	3301      	adds	r3, #1
 80006a0:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 80006a2:	89fb      	ldrh	r3, [r7, #14]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f2      	bne.n	8000696 <UART_SendText+0x12>
	}
	size++; // '\0'
 80006b0:	89bb      	ldrh	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 80006b6:	89ba      	ldrh	r2, [r7, #12]
 80006b8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <UART_SendText+0x48>)
 80006c0:	f003 fcba 	bl	8004038 <HAL_UART_Transmit>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000450 	.word	0x20000450

080006d0 <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09c      	sub	sp, #112	; 0x70
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <UART_SendNumber+0x28>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 fc6d 	bl	8004fc0 <siprintf>
	UART_SendText(temp);
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffca 	bl	8000684 <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006f0:	bf00      	nop
 80006f2:	3770      	adds	r7, #112	; 0x70
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08006310 	.word	0x08006310

080006fc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a4a      	ldr	r2, [pc, #296]	; (8000830 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000708:	4293      	cmp	r3, r2
 800070a:	f040 808d 	bne.w	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	7f1b      	ldrb	r3, [r3, #28]
 8000712:	2b01      	cmp	r3, #1
 8000714:	f040 8088 	bne.w	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x138>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d10a      	bne.n	8000736 <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 8000720:	2100      	movs	r1, #0
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f003 f910 	bl	8003948 <HAL_TIM_ReadCapturedValue>
 8000728:	4603      	mov	r3, r0
 800072a:	4a43      	ldr	r2, [pc, #268]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800072c:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 800072e:	4b41      	ldr	r3, [pc, #260]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 8000734:	e078      	b.n	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 8000736:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d074      	beq.n	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800073e:	2100      	movs	r1, #0
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f003 f901 	bl	8003948 <HAL_TIM_ReadCapturedValue>
 8000746:	4603      	mov	r3, r0
 8000748:	4a3c      	ldr	r2, [pc, #240]	; (800083c <HAL_TIM_IC_CaptureCallback+0x140>)
 800074a:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 800074c:	4b3b      	ldr	r3, [pc, #236]	; (800083c <HAL_TIM_IC_CaptureCallback+0x140>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b39      	ldr	r3, [pc, #228]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d907      	bls.n	8000768 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <HAL_TIM_IC_CaptureCallback+0x140>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	4a37      	ldr	r2, [pc, #220]	; (8000840 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	e011      	b.n	800078c <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <HAL_TIM_IC_CaptureCallback+0x140>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d209      	bcs.n	8000788 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000774:	4b31      	ldr	r3, [pc, #196]	; (800083c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000782:	4a2f      	ldr	r2, [pc, #188]	; (8000840 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	e001      	b.n	800078c <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000788:	f000 fb52 	bl	8000e30 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 800078c:	f002 fa5c 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8000790:	4602      	mov	r2, r0
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4a2a      	ldr	r2, [pc, #168]	; (8000844 <HAL_TIM_IC_CaptureCallback+0x148>)
 800079c:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x138>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <HAL_TIM_IC_CaptureCallback+0x150>)
 80007ac:	8812      	ldrh	r2, [r2, #0]
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007b4:	d338      	bcc.n	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <HAL_TIM_IC_CaptureCallback+0x154>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a24      	ldr	r2, [pc, #144]	; (8000850 <HAL_TIM_IC_CaptureCallback+0x154>)
 80007be:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80007c0:	4b21      	ldr	r3, [pc, #132]	; (8000848 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <HAL_TIM_IC_CaptureCallback+0x150>)
 80007ca:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <HAL_TIM_IC_CaptureCallback+0x148>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d827      	bhi.n	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e6:	2108      	movs	r1, #8
 80007e8:	481b      	ldr	r0, [pc, #108]	; (8000858 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ea:	f001 f8e5 	bl	80019b8 <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d118      	bne.n	8000828 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000804:	f001 f8c0 	bl	8001988 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2102      	movs	r1, #2
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800080e:	f001 f8bb 	bl	8001988 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f001 f8b5 	bl	8001988 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2101      	movs	r1, #1
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000824:	f001 f8b0 	bl	8001988 <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000404 	.word	0x20000404
 8000834:	200000ac 	.word	0x200000ac
 8000838:	20000098 	.word	0x20000098
 800083c:	2000009c 	.word	0x2000009c
 8000840:	200000a0 	.word	0x200000a0
 8000844:	200000a4 	.word	0x200000a4
 8000848:	200004d4 	.word	0x200004d4
 800084c:	200000b4 	.word	0x200000b4
 8000850:	200000a8 	.word	0x200000a8
 8000854:	200000b0 	.word	0x200000b0
 8000858:	48000400 	.word	0x48000400
 800085c:	20000000 	.word	0x20000000

08000860 <start>:

void start()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	  uint16_t start_rand=0;
 8000866:	2300      	movs	r3, #0
 8000868:	80fb      	strh	r3, [r7, #6]

	  while(ALLUME_START == 1)
 800086a:	e01d      	b.n	80008a8 <start+0x48>
	  {
		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f001 f8a1 	bl	80019b8 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000876:	20c8      	movs	r0, #200	; 0xc8
 8000878:	f000 fd50 	bl	800131c <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 800087c:	2102      	movs	r1, #2
 800087e:	481f      	ldr	r0, [pc, #124]	; (80008fc <start+0x9c>)
 8000880:	f001 f89a 	bl	80019b8 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000884:	20c8      	movs	r0, #200	; 0xc8
 8000886:	f000 fd49 	bl	800131c <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000890:	f001 f892 	bl	80019b8 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8000894:	20c8      	movs	r0, #200	; 0xc8
 8000896:	f000 fd41 	bl	800131c <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800089a:	2101      	movs	r1, #1
 800089c:	4817      	ldr	r0, [pc, #92]	; (80008fc <start+0x9c>)
 800089e:	f001 f88b 	bl	80019b8 <HAL_GPIO_TogglePin>
		  start_rand++;
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	3301      	adds	r3, #1
 80008a6:	80fb      	strh	r3, [r7, #6]
	  while(ALLUME_START == 1)
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <start+0xa0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d0dd      	beq.n	800086c <start+0xc>
	  }
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <start+0x9c>)
 80008b6:	f001 f867 	bl	8001988 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f001 f861 	bl	8001988 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2102      	movs	r1, #2
 80008ca:	480c      	ldr	r0, [pc, #48]	; (80008fc <start+0x9c>)
 80008cc:	f001 f85c 	bl	8001988 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f001 f856 	bl	8001988 <HAL_GPIO_WritePin>
	  srand(start_rand);
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 fb00 	bl	8004ee4 <srand>
	  ALLUME_LED = 0;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <start+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <start+0x9c>)
 80008f0:	f001 f84a 	bl	8001988 <HAL_GPIO_WritePin>

}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	48000400 	.word	0x48000400
 8000900:	20000000 	.word	0x20000000
 8000904:	200000b0 	.word	0x200000b0

08000908 <right_sequence>:

void right_sequence()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2101      	movs	r1, #1
 8000910:	4820      	ldr	r0, [pc, #128]	; (8000994 <right_sequence+0x8c>)
 8000912:	f001 f839 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f001 f833 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2102      	movs	r1, #2
 8000926:	481b      	ldr	r0, [pc, #108]	; (8000994 <right_sequence+0x8c>)
 8000928:	f001 f82e 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f001 f828 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800093c:	f000 fcee 	bl	800131c <HAL_Delay>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2101      	movs	r1, #1
 8000944:	4813      	ldr	r0, [pc, #76]	; (8000994 <right_sequence+0x8c>)
 8000946:	f001 f81f 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f001 f819 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2102      	movs	r1, #2
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <right_sequence+0x8c>)
 800095c:	f001 f814 	bl	8001988 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000968:	f001 f80e 	bl	8001988 <HAL_GPIO_WritePin>
	if (level<MAX_LEVEL) {
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <right_sequence+0x90>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b63      	cmp	r3, #99	; 0x63
 8000972:	dc04      	bgt.n	800097e <right_sequence+0x76>
	  level++;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <right_sequence+0x90>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <right_sequence+0x90>)
 800097c:	6013      	str	r3, [r2, #0]
	}
	velocity -=50;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <right_sequence+0x94>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3b32      	subs	r3, #50	; 0x32
 8000984:	4a05      	ldr	r2, [pc, #20]	; (800099c <right_sequence+0x94>)
 8000986:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 8000988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098c:	f000 fcc6 	bl	800131c <HAL_Delay>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	48000400 	.word	0x48000400
 8000998:	20000004 	.word	0x20000004
 800099c:	20000008 	.word	0x20000008

080009a0 <wrong_sequence>:

void wrong_sequence()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i<3; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	e034      	b.n	8000a16 <wrong_sequence+0x76>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <wrong_sequence+0x94>)
 80009b2:	f000 ffe9 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009be:	f000 ffe3 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2102      	movs	r1, #2
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <wrong_sequence+0x94>)
 80009c8:	f000 ffde 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 ffd8 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80009d8:	20c8      	movs	r0, #200	; 0xc8
 80009da:	f000 fc9f 	bl	800131c <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2101      	movs	r1, #1
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <wrong_sequence+0x94>)
 80009e4:	f000 ffd0 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f000 ffca 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2102      	movs	r1, #2
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <wrong_sequence+0x94>)
 80009fa:	f000 ffc5 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 ffbf 	bl	8001988 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000a0a:	20c8      	movs	r0, #200	; 0xc8
 8000a0c:	f000 fc86 	bl	800131c <HAL_Delay>
	for(i = 0; i<3; i++)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	ddc7      	ble.n	80009ac <wrong_sequence+0xc>
	}
	level = 1;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <wrong_sequence+0x98>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	velocity = 1000;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <wrong_sequence+0x9c>)
 8000a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a28:	601a      	str	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	48000400 	.word	0x48000400
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000008 	.word	0x20000008

08000a40 <generate_sequence>:

void generate_sequence(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	start();
 8000a46:	f7ff ff0b 	bl	8000860 <start>
	 int i;
	 int random = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
	 for (i = 0; i < MAX_LEVEL; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e039      	b.n	8000ac8 <generate_sequence+0x88>
		random = rand() % 4;
 8000a54:	f004 fa74 	bl	8004f40 <rand>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	425a      	negs	r2, r3
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	f002 0203 	and.w	r2, r2, #3
 8000a64:	bf58      	it	pl
 8000a66:	4253      	negpl	r3, r2
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	d823      	bhi.n	8000ab8 <generate_sequence+0x78>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <generate_sequence+0x38>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a89 	.word	0x08000a89
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aa1 	.word	0x08000aa1
 8000a84:	08000aad 	.word	0x08000aad
		switch(random)
		{
			case 0:
				sequence[i]=LED1_hex;
 8000a88:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <generate_sequence+0x98>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000a92:	e016      	b.n	8000ac2 <generate_sequence+0x82>
			case 1:
				sequence[i]=LED2_hex;
 8000a94:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <generate_sequence+0x98>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2180      	movs	r1, #128	; 0x80
 8000a9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000a9e:	e010      	b.n	8000ac2 <generate_sequence+0x82>
			case 2:
				sequence[i]=LED3_hex;
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <generate_sequence+0x98>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000aaa:	e00a      	b.n	8000ac2 <generate_sequence+0x82>
			case 3:
				sequence[i]=LED4_hex;
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <generate_sequence+0x98>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ab6:	e004      	b.n	8000ac2 <generate_sequence+0x82>
			default:
				sequence[i]=LED1_hex;
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <generate_sequence+0x98>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i < MAX_LEVEL; i++) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b63      	cmp	r3, #99	; 0x63
 8000acc:	ddc2      	ble.n	8000a54 <generate_sequence+0x14>
//	 for (i = 0; i <5; i++) {
//		 sequence[i] = LED1_hex;
//	 }
//	 sequence[5] = LED2_hex;
//	 level++;
}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000c4 	.word	0x200000c4

08000adc <show_sequence>:

void show_sequence()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	 int i;
	 for(i=0; i < level; i++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	e065      	b.n	8000bb4 <show_sequence+0xd8>
	 //for(i=0; i < 6; i++)
	 {
		 switch(sequence[i])
 8000ae8:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <show_sequence+0xec>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b80      	cmp	r3, #128	; 0x80
 8000af2:	d01f      	beq.n	8000b34 <show_sequence+0x58>
 8000af4:	2b80      	cmp	r3, #128	; 0x80
 8000af6:	dc58      	bgt.n	8000baa <show_sequence+0xce>
 8000af8:	2b40      	cmp	r3, #64	; 0x40
 8000afa:	d006      	beq.n	8000b0a <show_sequence+0x2e>
 8000afc:	2b40      	cmp	r3, #64	; 0x40
 8000afe:	dc54      	bgt.n	8000baa <show_sequence+0xce>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d03f      	beq.n	8000b84 <show_sequence+0xa8>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d02a      	beq.n	8000b5e <show_sequence+0x82>
 8000b08:	e04f      	b.n	8000baa <show_sequence+0xce>
			{
				case LED1_hex: //O
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2140      	movs	r1, #64	; 0x40
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 ff39 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <show_sequence+0xf0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 fbfe 	bl	800131c <HAL_Delay>
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b28:	f000 ff2e 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000b2c:	20c8      	movs	r0, #200	; 0xc8
 8000b2e:	f000 fbf5 	bl	800131c <HAL_Delay>
					break;
 8000b32:	e03c      	b.n	8000bae <show_sequence+0xd2>
				case LED2_hex: //1
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 ff24 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <show_sequence+0xf0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fbe9 	bl	800131c <HAL_Delay>
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 ff19 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000b56:	20c8      	movs	r0, #200	; 0xc8
 8000b58:	f000 fbe0 	bl	800131c <HAL_Delay>
					break;
 8000b5c:	e027      	b.n	8000bae <show_sequence+0xd2>
				case LED3_hex: //2
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2101      	movs	r1, #1
 8000b62:	481b      	ldr	r0, [pc, #108]	; (8000bd0 <show_sequence+0xf4>)
 8000b64:	f000 ff10 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <show_sequence+0xf0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fbd5 	bl	800131c <HAL_Delay>
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <show_sequence+0xf4>)
 8000b78:	f000 ff06 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000b7c:	20c8      	movs	r0, #200	; 0xc8
 8000b7e:	f000 fbcd 	bl	800131c <HAL_Delay>
					break;
 8000b82:	e014      	b.n	8000bae <show_sequence+0xd2>
				case LED4_hex: //3
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2102      	movs	r1, #2
 8000b88:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <show_sequence+0xf4>)
 8000b8a:	f000 fefd 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <show_sequence+0xf0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fbc2 	bl	800131c <HAL_Delay>
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <show_sequence+0xf4>)
 8000b9e:	f000 fef3 	bl	8001988 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000ba2:	20c8      	movs	r0, #200	; 0xc8
 8000ba4:	f000 fbba 	bl	800131c <HAL_Delay>
					break;
 8000ba8:	e001      	b.n	8000bae <show_sequence+0xd2>
				default:
					wrong_sequence();
 8000baa:	f7ff fef9 	bl	80009a0 <wrong_sequence>
	 for(i=0; i < level; i++)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <show_sequence+0xf8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	db94      	blt.n	8000ae8 <show_sequence+0xc>
			}
	 }
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000c4 	.word	0x200000c4
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <get_sequence>:

void get_sequence()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	bool flag;
	int i;
	int temp_freq = Frequency;
 8000bde:	4b8c      	ldr	r3, [pc, #560]	; (8000e10 <get_sequence+0x238>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	607b      	str	r3, [r7, #4]
	for(i=0; i<level;i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	e106      	b.n	8000df8 <get_sequence+0x220>
	{
			flag = false;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
			while(flag == false)
 8000bee:	e0f9      	b.n	8000de4 <get_sequence+0x20c>
			{HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	4887      	ldr	r0, [pc, #540]	; (8000e14 <get_sequence+0x23c>)
 8000bf6:	f000 fec7 	bl	8001988 <HAL_GPIO_WritePin>

					if(HAL_GPIO_ReadPin(BT_1_GPIO_Port,BT_1_Pin) == GPIO_PIN_SET)
 8000bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f000 fea9 	bl	8001958 <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d127      	bne.n	8000c5c <get_sequence+0x84>
					{
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c14:	f000 feb8 	bl	8001988 <HAL_GPIO_WritePin>
						your_sequence[i] = LED1_hex;
 8000c18:	4a7f      	ldr	r2, [pc, #508]	; (8000e18 <get_sequence+0x240>)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000c26:	20c8      	movs	r0, #200	; 0xc8
 8000c28:	f000 fb78 	bl	800131c <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4878      	ldr	r0, [pc, #480]	; (8000e14 <get_sequence+0x23c>)
 8000c32:	f000 fea9 	bl	8001988 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000c36:	4a78      	ldr	r2, [pc, #480]	; (8000e18 <get_sequence+0x240>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c3e:	4977      	ldr	r1, [pc, #476]	; (8000e1c <get_sequence+0x244>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d002      	beq.n	8000c50 <get_sequence+0x78>
						{
							wrong_sequence();
 8000c4a:	f7ff fea9 	bl	80009a0 <wrong_sequence>
							return;
 8000c4e:	e0db      	b.n	8000e08 <get_sequence+0x230>
						}
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c58:	f000 fe96 	bl	8001988 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_2_GPIO_Port,BT_2_Pin) == GPIO_PIN_SET)
 8000c5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f000 fe78 	bl	8001958 <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d127      	bne.n	8000cbe <get_sequence+0xe6>
					{
						HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f000 fe87 	bl	8001988 <HAL_GPIO_WritePin>
						your_sequence[i] = LED2_hex;
 8000c7a:	4a67      	ldr	r2, [pc, #412]	; (8000e18 <get_sequence+0x240>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2180      	movs	r1, #128	; 0x80
 8000c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000c88:	20c8      	movs	r0, #200	; 0xc8
 8000c8a:	f000 fb47 	bl	800131c <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2108      	movs	r1, #8
 8000c92:	4860      	ldr	r0, [pc, #384]	; (8000e14 <get_sequence+0x23c>)
 8000c94:	f000 fe78 	bl	8001988 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000c98:	4a5f      	ldr	r2, [pc, #380]	; (8000e18 <get_sequence+0x240>)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca0:	495e      	ldr	r1, [pc, #376]	; (8000e1c <get_sequence+0x244>)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d002      	beq.n	8000cb2 <get_sequence+0xda>
						{
							wrong_sequence();
 8000cac:	f7ff fe78 	bl	80009a0 <wrong_sequence>
							return;
 8000cb0:	e0aa      	b.n	8000e08 <get_sequence+0x230>
						}
						HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f000 fe65 	bl	8001988 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_3_GPIO_Port,BT_3_Pin) == GPIO_PIN_SET)
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f000 fe47 	bl	8001958 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d125      	bne.n	8000d1c <get_sequence+0x144>
					{
						HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	484f      	ldr	r0, [pc, #316]	; (8000e14 <get_sequence+0x23c>)
 8000cd6:	f000 fe57 	bl	8001988 <HAL_GPIO_WritePin>
						your_sequence[i] = LED3_hex;
 8000cda:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <get_sequence+0x240>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2102      	movs	r1, #2
 8000ce0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000ce8:	20c8      	movs	r0, #200	; 0xc8
 8000cea:	f000 fb17 	bl	800131c <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	4848      	ldr	r0, [pc, #288]	; (8000e14 <get_sequence+0x23c>)
 8000cf4:	f000 fe48 	bl	8001988 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000cf8:	4a47      	ldr	r2, [pc, #284]	; (8000e18 <get_sequence+0x240>)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d00:	4946      	ldr	r1, [pc, #280]	; (8000e1c <get_sequence+0x244>)
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d002      	beq.n	8000d12 <get_sequence+0x13a>
						{
							wrong_sequence();
 8000d0c:	f7ff fe48 	bl	80009a0 <wrong_sequence>
							return;
 8000d10:	e07a      	b.n	8000e08 <get_sequence+0x230>
						}
						HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	483f      	ldr	r0, [pc, #252]	; (8000e14 <get_sequence+0x23c>)
 8000d18:	f000 fe36 	bl	8001988 <HAL_GPIO_WritePin>

					}
					if(HAL_GPIO_ReadPin(BT_4_GPIO_Port,BT_4_Pin) == GPIO_PIN_SET)
 8000d1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 fe18 	bl	8001958 <HAL_GPIO_ReadPin>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d125      	bne.n	8000d7a <get_sequence+0x1a2>
					{
						HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2102      	movs	r1, #2
 8000d32:	4838      	ldr	r0, [pc, #224]	; (8000e14 <get_sequence+0x23c>)
 8000d34:	f000 fe28 	bl	8001988 <HAL_GPIO_WritePin>
						your_sequence[i] = LED4_hex;
 8000d38:	4a37      	ldr	r2, [pc, #220]	; (8000e18 <get_sequence+0x240>)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000d46:	20c8      	movs	r0, #200	; 0xc8
 8000d48:	f000 fae8 	bl	800131c <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <get_sequence+0x23c>)
 8000d52:	f000 fe19 	bl	8001988 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000d56:	4a30      	ldr	r2, [pc, #192]	; (8000e18 <get_sequence+0x240>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d5e:	492f      	ldr	r1, [pc, #188]	; (8000e1c <get_sequence+0x244>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d002      	beq.n	8000d70 <get_sequence+0x198>
						{
							wrong_sequence();
 8000d6a:	f7ff fe19 	bl	80009a0 <wrong_sequence>
							return;
 8000d6e:	e04b      	b.n	8000e08 <get_sequence+0x230>
						}
						HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2102      	movs	r1, #2
 8000d74:	4827      	ldr	r0, [pc, #156]	; (8000e14 <get_sequence+0x23c>)
 8000d76:	f000 fe07 	bl	8001988 <HAL_GPIO_WritePin>

					}
					if(Frequency < 10000 && Frequency != temp_freq )
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <get_sequence+0x238>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d81f      	bhi.n	8000dc6 <get_sequence+0x1ee>
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <get_sequence+0x238>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d01a      	beq.n	8000dc6 <get_sequence+0x1ee>
					//if(Frequency != temp_freq )
					{
						Frequency = 0;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <get_sequence+0x238>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
						temp_freq = Frequency;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <get_sequence+0x238>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	607b      	str	r3, [r7, #4]
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2108      	movs	r1, #8
 8000da0:	481c      	ldr	r0, [pc, #112]	; (8000e14 <get_sequence+0x23c>)
 8000da2:	f000 fdf1 	bl	8001988 <HAL_GPIO_WritePin>
						flag=true;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000daa:	20c8      	movs	r0, #200	; 0xc8
 8000dac:	f000 fab6 	bl	800131c <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2108      	movs	r1, #8
 8000db4:	4817      	ldr	r0, [pc, #92]	; (8000e14 <get_sequence+0x23c>)
 8000db6:	f000 fde7 	bl	8001988 <HAL_GPIO_WritePin>
						ALLUME_START = 1;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <get_sequence+0x248>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
						wrong_sequence();
 8000dc0:	f7ff fdee 	bl	80009a0 <wrong_sequence>
						return;
 8000dc4:	e020      	b.n	8000e08 <get_sequence+0x230>
					}

			while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 160);
 8000dc6:	bf00      	nop
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <get_sequence+0x24c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4a16      	ldr	r2, [pc, #88]	; (8000e28 <get_sequence+0x250>)
 8000dd0:	8812      	ldrh	r2, [r2, #0]
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	2ba0      	cmp	r3, #160	; 0xa0
 8000dd6:	d9f7      	bls.n	8000dc8 <get_sequence+0x1f0>
			timer_val_get = __HAL_TIM_GET_COUNTER(&htim16);
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <get_sequence+0x24c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <get_sequence+0x250>)
 8000de2:	801a      	strh	r2, [r3, #0]
			while(flag == false)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f083 0301 	eor.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f47f aeff 	bne.w	8000bf0 <get_sequence+0x18>
	for(i=0; i<level;i++)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <get_sequence+0x254>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	f6ff aef3 	blt.w	8000bea <get_sequence+0x12>

		}

	}
	 right_sequence();
 8000e04:	f7ff fd80 	bl	8000908 <right_sequence>
}
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000a4 	.word	0x200000a4
 8000e14:	48000400 	.word	0x48000400
 8000e18:	20000274 	.word	0x20000274
 8000e1c:	200000c4 	.word	0x200000c4
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200004d4 	.word	0x200004d4
 8000e28:	200000b6 	.word	0x200000b6
 8000e2c:	20000004 	.word	0x20000004

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_MspInit+0x44>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_MspInit+0x44>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6193      	str	r3, [r2, #24]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_MspInit+0x44>)
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x44>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x44>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x44>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d131      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6153      	str	r3, [r2, #20]
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f000 fbbe 	bl	8001674 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	201c      	movs	r0, #28
 8000efe:	f000 fb0c 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f02:	201c      	movs	r0, #28
 8000f04:	f000 fb25 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f08:	e010      	b.n	8000f2c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_TIM_Base_MspInit+0xb4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d10b      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_TIM_Base_MspInit+0xb0>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40014400 	.word	0x40014400

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_UART_MspInit+0x8c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d130      	bne.n	8000fc0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	61d3      	str	r3, [r2, #28]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_UART_MspInit+0x90>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f000 fb62 	bl	8001674 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2026      	movs	r0, #38	; 0x26
 8000fb6:	f000 fab0 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fba:	2026      	movs	r0, #38	; 0x26
 8000fbc:	f000 fac9 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f95e 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM2_IRQHandler+0x10>)
 800102a:	f002 fa09 	bl	8003440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000404 	.word	0x20000404

08001038 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART2_IRQHandler+0x10>)
 800103e:	f003 f88f 	bl	8004160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000450 	.word	0x20000450

0800104c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <_kill>:

int _kill(int pid, int sig)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001066:	f003 ff0b 	bl	8004e80 <__errno>
 800106a:	4603      	mov	r3, r0
 800106c:	2216      	movs	r2, #22
 800106e:	601a      	str	r2, [r3, #0]
	return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_exit>:

void _exit (int status)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe7 	bl	800105c <_kill>
	while (1) {}		/* Make sure we hang here */
 800108e:	e7fe      	b.n	800108e <_exit+0x12>

08001090 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e00a      	b.n	80010b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010a2:	f3af 8000 	nop.w
 80010a6:	4601      	mov	r1, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60ba      	str	r2, [r7, #8]
 80010ae:	b2ca      	uxtb	r2, r1
 80010b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf0      	blt.n	80010a2 <_read+0x12>
	}

return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e009      	b.n	80010f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf1      	blt.n	80010dc <_write+0x12>
	}
	return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_close>:

int _close(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return -1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112a:	605a      	str	r2, [r3, #4]
	return 0;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_isatty>:

int _isatty(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f003 fe70 	bl	8004e80 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20004000 	.word	0x20004000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200000b8 	.word	0x200000b8
 80011d4:	20000538 	.word	0x20000538

080011d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490e      	ldr	r1, [pc, #56]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0b      	ldr	r4, [pc, #44]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001226:	f7ff ffd7 	bl	80011d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 fe2f 	bl	8004e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f81f 	bl	8000270 <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001234:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001240:	080064a0 	.word	0x080064a0
  ldr r2, =_sbss
 8001244:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001248:	20000534 	.word	0x20000534

0800124c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_IRQHandler>
	...

08001250 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f94f 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fde6 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f967 	bl	800156e <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f92f 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	20000014 	.word	0x20000014
 80012d8:	20000010 	.word	0x20000010

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x20>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_IncTick+0x24>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_IncTick+0x24>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000014 	.word	0x20000014
 8001300:	20000520 	.word	0x20000520

08001304 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;  
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000520 	.word	0x20000520

0800131c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d005      	beq.n	8001342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_Delay+0x44>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001342:	bf00      	nop
 8001344:	f7ff ffde 	bl	8001304 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	429a      	cmp	r2, r3
 8001352:	d8f7      	bhi.n	8001344 <HAL_Delay+0x28>
  {
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000014 	.word	0x20000014

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800138c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff3e 	bl	80013ac <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff8e 	bl	8001458 <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5d 	bl	8001404 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff31 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001594:	2b02      	cmp	r3, #2
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e020      	b.n	80015ec <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 020e 	bic.w	r2, r2, #14
 80015b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	2101      	movs	r1, #1
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
 80015d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e027      	b.n	800166a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    } 
  }
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e14e      	b.n	8001922 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8140 	beq.w	800191c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	6939      	ldr	r1, [r7, #16]
 80017a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0203 	and.w	r2, r3, #3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 809a 	beq.w	800191c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a54      	ldr	r2, [pc, #336]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b52      	ldr	r3, [pc, #328]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001800:	4a50      	ldr	r2, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800182a:	d013      	beq.n	8001854 <HAL_GPIO_Init+0x1e0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_GPIO_Init+0x2d4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d00d      	beq.n	8001850 <HAL_GPIO_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a45      	ldr	r2, [pc, #276]	; (800194c <HAL_GPIO_Init+0x2d8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d007      	beq.n	800184c <HAL_GPIO_Init+0x1d8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a44      	ldr	r2, [pc, #272]	; (8001950 <HAL_GPIO_Init+0x2dc>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d101      	bne.n	8001848 <HAL_GPIO_Init+0x1d4>
 8001844:	2303      	movs	r3, #3
 8001846:	e006      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001848:	2305      	movs	r3, #5
 800184a:	e004      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 800184c:	2302      	movs	r3, #2
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_GPIO_Init+0x1e2>
 8001854:	2300      	movs	r3, #0
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	f002 0203 	and.w	r2, r2, #3
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	4093      	lsls	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001866:	4937      	ldr	r1, [pc, #220]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	089b      	lsrs	r3, r3, #2
 800186c:	3302      	adds	r3, #2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001898:	4a2e      	ldr	r2, [pc, #184]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_GPIO_Init+0x2e0>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3301      	adds	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f aea9 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000
 8001944:	40010000 	.word	0x40010000
 8001948:	48000400 	.word	0x48000400
 800194c:	48000800 	.word	0x48000800
 8001950:	48000c00 	.word	0x48000c00
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e001      	b.n	800197a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	43d9      	mvns	r1, r3
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	400b      	ands	r3, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f000 bef4 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 816a 	beq.w	8001cea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a16:	4bb3      	ldr	r3, [pc, #716]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d00c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a22:	4bb0      	ldr	r3, [pc, #704]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d159      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
 8001a2e:	4bad      	ldr	r3, [pc, #692]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d152      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
 8001a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a50:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_OscConfig+0x82>
 8001a68:	4b9e      	ldr	r3, [pc, #632]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0xae>
 8001a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a96:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001aa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001aa6:	fa92 f2a2 	rbit	r2, r2
 8001aaa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001aae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ab2:	fab2 f282 	clz	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 810c 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x2fc>
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8106 	bne.w	8001ce8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	f000 be86 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x110>
 8001aee:	4b7d      	ldr	r3, [pc, #500]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7c      	ldr	r2, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e030      	b.n	8001b5e <HAL_RCC_OscConfig+0x172>
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x134>
 8001b06:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a76      	ldr	r2, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b74      	ldr	r3, [pc, #464]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a73      	ldr	r2, [pc, #460]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01e      	b.n	8001b5e <HAL_RCC_OscConfig+0x172>
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x15a>
 8001b2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6c      	ldr	r2, [pc, #432]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a69      	ldr	r2, [pc, #420]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x172>
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a66      	ldr	r2, [pc, #408]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b64      	ldr	r3, [pc, #400]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a63      	ldr	r2, [pc, #396]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	495d      	ldr	r1, [pc, #372]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d059      	beq.n	8001c30 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fbc2 	bl	8001304 <HAL_GetTick>
 8001b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b86:	f7ff fbbd 	bl	8001304 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d902      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	f000 be29 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001bb0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0x1e2>
 8001bc8:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x20e>
 8001bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001bea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001c02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c12:	fab2 f282 	clz	r2, r2
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	f042 0220 	orr.w	r2, r2, #32
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f002 021f 	and.w	r2, r2, #31
 8001c22:	2101      	movs	r1, #1
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ab      	beq.n	8001b86 <HAL_RCC_OscConfig+0x19a>
 8001c2e:	e05c      	b.n	8001cea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb68 	bl	8001304 <HAL_GetTick>
 8001c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fb63 	bl	8001304 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d902      	bls.n	8001c50 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f000 bdcf 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
 8001c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c5c:	fa93 f3a3 	rbit	r3, r3
 8001c60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c64:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_OscConfig+0x296>
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x2c2>
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_RCC_OscConfig+0x2f8>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cba:	fa92 f2a2 	rbit	r2, r2
 8001cbe:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cc2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001cc6:	fab2 f282 	clz	r2, r2
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	f042 0220 	orr.w	r2, r2, #32
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f002 021f 	and.w	r2, r2, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ab      	bne.n	8001c3a <HAL_RCC_OscConfig+0x24e>
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_OscConfig+0x2fe>
 8001ce4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 816f 	beq.w	8001fd8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cfa:	4bd0      	ldr	r3, [pc, #832]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d06:	4bcd      	ldr	r3, [pc, #820]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d16c      	bne.n	8001dec <HAL_RCC_OscConfig+0x400>
 8001d12:	4bca      	ldr	r3, [pc, #808]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d166      	bne.n	8001dec <HAL_RCC_OscConfig+0x400>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0x362>
 8001d48:	4bbc      	ldr	r3, [pc, #752]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	e013      	b.n	8001d76 <HAL_RCC_OscConfig+0x38a>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d72:	4bb2      	ldr	r3, [pc, #712]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	2202      	movs	r2, #2
 8001d78:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d7c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d88:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d8c:	fab2 f282 	clz	r2, r2
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	f042 0220 	orr.w	r2, r2, #32
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f002 021f 	and.w	r2, r2, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f000 bd1b 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4ba0      	ldr	r3, [pc, #640]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	21f8      	movs	r1, #248	; 0xf8
 8001dc8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dd0:	fa91 f1a1 	rbit	r1, r1
 8001dd4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dd8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ddc:	fab1 f181 	clz	r1, r1
 8001de0:	b2c9      	uxtb	r1, r1
 8001de2:	408b      	lsls	r3, r1
 8001de4:	4995      	ldr	r1, [pc, #596]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dea:	e0f5      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8085 	beq.w	8001f02 <HAL_RCC_OscConfig+0x516>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2301      	movs	r3, #1
 8001e22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fa6e 	bl	8001304 <HAL_GetTick>
 8001e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fa69 	bl	8001304 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d902      	bls.n	8001e44 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	f000 bcd5 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
 8001e44:	2302      	movs	r3, #2
 8001e46:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e56:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0x488>
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x4b0>
 8001e74:	2302      	movs	r3, #2
 8001e76:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e8c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001ea2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001eae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001eb2:	fab2 f282 	clz	r2, r2
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0af      	beq.n	8001e2e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	21f8      	movs	r1, #248	; 0xf8
 8001ede:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ee6:	fa91 f1a1 	rbit	r1, r1
 8001eea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001eee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001ef2:	fab1 f181 	clz	r1, r1
 8001ef6:	b2c9      	uxtb	r1, r1
 8001ef8:	408b      	lsls	r3, r1
 8001efa:	4950      	ldr	r1, [pc, #320]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e06a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5ec>
 8001f02:	2301      	movs	r3, #1
 8001f04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f9e9 	bl	8001304 <HAL_GetTick>
 8001f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f38:	f7ff f9e4 	bl	8001304 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d902      	bls.n	8001f4e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	f000 bc50 	b.w	80027ee <HAL_RCC_OscConfig+0xe02>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_OscConfig+0x592>
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e013      	b.n	8001fa6 <HAL_RCC_OscConfig+0x5ba>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f88:	fa93 f3a3 	rbit	r3, r3
 8001f8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f90:	2302      	movs	r3, #2
 8001f92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x650>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fb8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f002 021f 	and.w	r2, r2, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1af      	bne.n	8001f38 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80da 	beq.w	800219c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d069      	beq.n	80020c6 <HAL_RCC_OscConfig+0x6da>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_OscConfig+0x654>)
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	461a      	mov	r2, r3
 8002018:	2301      	movs	r3, #1
 800201a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff f972 	bl	8001304 <HAL_GetTick>
 8002020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	e00e      	b.n	8002044 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff f96d 	bl	8001304 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d906      	bls.n	8002044 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e3d9      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	10908120 	.word	0x10908120
 8002044:	2302      	movs	r3, #2
 8002046:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002056:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800205a:	2202      	movs	r2, #2
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	fa93 f2a3 	rbit	r2, r3
 8002080:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002084:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4ba5      	ldr	r3, [pc, #660]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800208e:	2102      	movs	r1, #2
 8002090:	6019      	str	r1, [r3, #0]
 8002092:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f1a3 	rbit	r1, r3
 800209c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020a0:	6019      	str	r1, [r3, #0]
  return result;
 80020a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0b0      	beq.n	8002026 <HAL_RCC_OscConfig+0x63a>
 80020c4:	e06a      	b.n	800219c <HAL_RCC_OscConfig+0x7b0>
 80020c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020ca:	2201      	movs	r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020dc:	601a      	str	r2, [r3, #0]
  return result;
 80020de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b8c      	ldr	r3, [pc, #560]	; (8002320 <HAL_RCC_OscConfig+0x934>)
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	461a      	mov	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff f904 	bl	8001304 <HAL_GetTick>
 80020fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e009      	b.n	8002116 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff f8ff 	bl	8001304 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e36b      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 8002116:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800215c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215e:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002166:	2102      	movs	r1, #2
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f1a3 	rbit	r1, r3
 8002174:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002178:	6019      	str	r1, [r3, #0]
  return result;
 800217a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1b2      	bne.n	8002102 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8158 	beq.w	800245c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b5a      	ldr	r3, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x930>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d112      	bne.n	80021e4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x930>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a56      	ldr	r2, [pc, #344]	; (800231c <HAL_RCC_OscConfig+0x930>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_RCC_OscConfig+0x930>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f107 0308 	add.w	r3, r7, #8
 80021dc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x938>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11a      	bne.n	8002226 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f0:	4b4c      	ldr	r3, [pc, #304]	; (8002324 <HAL_RCC_OscConfig+0x938>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_RCC_OscConfig+0x938>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fc:	f7ff f882 	bl	8001304 <HAL_GetTick>
 8002200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e009      	b.n	800221a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff f87d 	bl	8001304 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e2e9      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <HAL_RCC_OscConfig+0x938>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ef      	beq.n	8002206 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x852>
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6213      	str	r3, [r2, #32]
 800223c:	e02f      	b.n	800229e <HAL_RCC_OscConfig+0x8b2>
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0x876>
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a33      	ldr	r2, [pc, #204]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	4b31      	ldr	r3, [pc, #196]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a30      	ldr	r2, [pc, #192]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e01d      	b.n	800229e <HAL_RCC_OscConfig+0x8b2>
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10c      	bne.n	8002286 <HAL_RCC_OscConfig+0x89a>
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	4b28      	ldr	r3, [pc, #160]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e00b      	b.n	800229e <HAL_RCC_OscConfig+0x8b2>
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a24      	ldr	r2, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x930>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d06b      	beq.n	8002380 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7ff f82c 	bl	8001304 <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7ff f827 	bl	8001304 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e291      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 80022ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022ce:	2202      	movs	r2, #2
 80022d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022e6:	2202      	movs	r2, #2
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fa93 f2a3 	rbit	r2, r3
 80022f4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022f8:	601a      	str	r2, [r3, #0]
  return result;
 80022fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	b2db      	uxtb	r3, r3
 800230a:	f043 0302 	orr.w	r3, r3, #2
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d109      	bne.n	8002328 <HAL_RCC_OscConfig+0x93c>
 8002314:	4b01      	ldr	r3, [pc, #4]	; (800231c <HAL_RCC_OscConfig+0x930>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x958>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	10908120 	.word	0x10908120
 8002324:	40007000 	.word	0x40007000
 8002328:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	fa93 f2a3 	rbit	r2, r3
 800233a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4bbb      	ldr	r3, [pc, #748]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002348:	2102      	movs	r1, #2
 800234a:	6011      	str	r1, [r2, #0]
 800234c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	fa92 f1a2 	rbit	r1, r2
 8002356:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800235a:	6011      	str	r1, [r2, #0]
  return result;
 800235c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d099      	beq.n	80022b2 <HAL_RCC_OscConfig+0x8c6>
 800237e:	e063      	b.n	8002448 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe ffc0 	bl	8001304 <HAL_GetTick>
 8002384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe ffbb 	bl	8001304 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e225      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 80023a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023a6:	2202      	movs	r2, #2
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d102      	bne.n	80023f2 <HAL_RCC_OscConfig+0xa06>
 80023ec:	4b90      	ldr	r3, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	e00d      	b.n	800240e <HAL_RCC_OscConfig+0xa22>
 80023f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023f6:	2202      	movs	r2, #2
 80023f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002412:	2102      	movs	r1, #2
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	fa92 f1a2 	rbit	r1, r2
 8002420:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002424:	6011      	str	r1, [r2, #0]
  return result;
 8002426:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1a0      	bne.n	800238a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002448:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b77      	ldr	r3, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a76      	ldr	r2, [pc, #472]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 81c2 	beq.w	80027ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	f000 819c 	beq.w	80027ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b02      	cmp	r3, #2
 800247e:	f040 8114 	bne.w	80026aa <HAL_RCC_OscConfig+0xcbe>
 8002482:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002486:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800248a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800249a:	601a      	str	r2, [r3, #0]
  return result;
 800249c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80024a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	461a      	mov	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe ff24 	bl	8001304 <HAL_GetTick>
 80024bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7fe ff1f 	bl	8001304 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e18b      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 80024d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024ee:	601a      	str	r2, [r3, #0]
  return result;
 80024f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d102      	bne.n	8002510 <HAL_RCC_OscConfig+0xb24>
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	e01b      	b.n	8002548 <HAL_RCC_OscConfig+0xb5c>
 8002510:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800252e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4b3a      	ldr	r3, [pc, #232]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800254c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002550:	6011      	str	r1, [r2, #0]
 8002552:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fa92 f1a2 	rbit	r1, r2
 800255c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002560:	6011      	str	r1, [r2, #0]
  return result;
 8002562:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	fab2 f282 	clz	r2, r2
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	f002 021f 	and.w	r2, r2, #31
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d19e      	bne.n	80024c2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	430b      	orrs	r3, r1
 800259a:	4925      	ldr	r1, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b8:	601a      	str	r2, [r3, #0]
  return result;
 80025ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	2301      	movs	r3, #1
 80025d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fe95 	bl	8001304 <HAL_GetTick>
 80025da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025de:	e009      	b.n	80025f4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fe90 	bl	8001304 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0fc      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 80025f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	fa93 f2a3 	rbit	r2, r3
 8002608:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800260c:	601a      	str	r2, [r3, #0]
  return result;
 800260e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002612:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCC_OscConfig+0xc48>
 8002628:	4b01      	ldr	r3, [pc, #4]	; (8002630 <HAL_RCC_OscConfig+0xc44>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	e01e      	b.n	800266c <HAL_RCC_OscConfig+0xc80>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	fa93 f2a3 	rbit	r2, r3
 8002648:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	fa93 f2a3 	rbit	r2, r3
 8002662:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <HAL_RCC_OscConfig+0xe0c>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002670:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002674:	6011      	str	r1, [r2, #0]
 8002676:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	fa92 f1a2 	rbit	r1, r2
 8002680:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002684:	6011      	str	r1, [r2, #0]
  return result;
 8002686:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d09b      	beq.n	80025e0 <HAL_RCC_OscConfig+0xbf4>
 80026a8:	e0a0      	b.n	80027ec <HAL_RCC_OscConfig+0xe00>
 80026aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	601a      	str	r2, [r3, #0]
  return result;
 80026c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	461a      	mov	r2, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe10 	bl	8001304 <HAL_GetTick>
 80026e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	e009      	b.n	80026fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fe0b 	bl	8001304 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e077      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
 80026fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	fa93 f2a3 	rbit	r2, r3
 8002712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002716:	601a      	str	r2, [r3, #0]
  return result;
 8002718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0xd4c>
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_RCC_OscConfig+0xe0c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e01b      	b.n	8002770 <HAL_RCC_OscConfig+0xd84>
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f107 0320 	add.w	r3, r7, #32
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	f107 0318 	add.w	r3, r7, #24
 8002756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	f107 0318 	add.w	r3, r7, #24
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	fa93 f2a3 	rbit	r2, r3
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_OscConfig+0xe0c>)
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	f107 0210 	add.w	r2, r7, #16
 8002774:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002778:	6011      	str	r1, [r2, #0]
 800277a:	f107 0210 	add.w	r2, r7, #16
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	fa92 f1a2 	rbit	r1, r2
 8002784:	f107 020c 	add.w	r2, r7, #12
 8002788:	6011      	str	r1, [r2, #0]
  return result;
 800278a:	f107 020c 	add.w	r2, r7, #12
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	fab2 f282 	clz	r2, r2
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	f042 0220 	orr.w	r2, r2, #32
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	f002 021f 	and.w	r2, r2, #31
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f202 	lsl.w	r2, r1, r2
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d19e      	bne.n	80026ea <HAL_RCC_OscConfig+0xcfe>
 80027ac:	e01e      	b.n	80027ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e018      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_RCC_OscConfig+0xe0c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d108      	bne.n	80027e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000

080027fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b09e      	sub	sp, #120	; 0x78
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e162      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4b90      	ldr	r3, [pc, #576]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d910      	bls.n	8002844 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b8d      	ldr	r3, [pc, #564]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	498b      	ldr	r1, [pc, #556]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b89      	ldr	r3, [pc, #548]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e14a      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	497f      	ldr	r1, [pc, #508]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 80dc 	beq.w	8002a28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d13c      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xf6>
 8002878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800287c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	b2db      	uxtb	r3, r3
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xa6>
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	e00f      	b.n	80028c2 <HAL_RCC_ClockConfig+0xc6>
 80028a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	667b      	str	r3, [r7, #100]	; 0x64
 80028b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b4:	663b      	str	r3, [r7, #96]	; 0x60
 80028b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80028c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f042 0220 	orr.w	r2, r2, #32
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f002 021f 	and.w	r2, r2, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f202 	lsl.w	r2, r1, r2
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d17b      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e0f3      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d13c      	bne.n	8002974 <HAL_RCC_ClockConfig+0x178>
 80028fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d102      	bne.n	8002924 <HAL_RCC_ClockConfig+0x128>
 800291e:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	e00f      	b.n	8002944 <HAL_RCC_ClockConfig+0x148>
 8002924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
 8002932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002936:	643b      	str	r3, [r7, #64]	; 0x40
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002948:	63ba      	str	r2, [r7, #56]	; 0x38
 800294a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	f042 0220 	orr.w	r2, r2, #32
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f002 021f 	and.w	r2, r2, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	4013      	ands	r3, r2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d13a      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0b2      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
 8002974:	2302      	movs	r3, #2
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d102      	bne.n	800299c <HAL_RCC_ClockConfig+0x1a0>
 8002996:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	e00d      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1bc>
 800299c:	2302      	movs	r3, #2
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
 80029a8:	2302      	movs	r3, #2
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2202      	movs	r2, #2
 80029ba:	61ba      	str	r2, [r7, #24]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	617a      	str	r2, [r7, #20]
  return result;
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e079      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	491a      	ldr	r1, [pc, #104]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fe fc84 	bl	8001304 <HAL_GetTick>
 80029fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fe fc80 	bl	8001304 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e061      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_RCC_ClockConfig+0x260>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d214      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4906      	ldr	r1, [pc, #24]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <HAL_RCC_ClockConfig+0x25c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e040      	b.n	8002ada <HAL_RCC_ClockConfig+0x2de>
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	491a      	ldr	r1, [pc, #104]	; (8002ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	4912      	ldr	r1, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a9e:	f000 f85d 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aac:	22f0      	movs	r2, #240	; 0xf0
 8002aae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	40d3      	lsrs	r3, r2
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x2ec>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_RCC_ClockConfig+0x2f0>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_ClockConfig+0x2f4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fe fbd2 	bl	800127c <HAL_InitTick>
  
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3778      	adds	r7, #120	; 0x78
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08006314 	.word	0x08006314
 8002aec:	2000000c 	.word	0x2000000c
 8002af0:	20000010 	.word	0x20000010

08002af4 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002b0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b10:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002b16:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <HAL_RCC_MCOConfig+0x64>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	; (8002b58 <HAL_RCC_MCOConfig+0x64>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b20:	6153      	str	r3, [r2, #20]
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <HAL_RCC_MCOConfig+0x64>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b38:	f7fe fd9c 	bl	8001674 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_MCOConfig+0x64>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_MCOConfig+0x64>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
 8002b60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b76:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d002      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x30>
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x36>
 8002b8a:	e03c      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b8e:	623b      	str	r3, [r7, #32]
      break;
 8002b90:	e03c      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	fa92 f2a2 	rbit	r2, r2
 8002ba4:	607a      	str	r2, [r7, #4]
  return result;
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	fab2 f282 	clz	r2, r2
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	40d3      	lsrs	r3, r2
 8002bb0:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	fa92 f2a2 	rbit	r2, r2
 8002bc8:	60fa      	str	r2, [r7, #12]
  return result;
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	40d3      	lsrs	r3, r2
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	e004      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	623b      	str	r3, [r7, #32]
      break;
 8002c04:	e002      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c08:	623b      	str	r3, [r7, #32]
      break;
 8002c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	372c      	adds	r7, #44	; 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	007a1200 	.word	0x007a1200
 8002c24:	0800632c 	.word	0x0800632c
 8002c28:	0800633c 	.word	0x0800633c
 8002c2c:	003d0900 	.word	0x003d0900

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000000c 	.word	0x2000000c

08002c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c4e:	f7ff ffef 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c52:	4601      	mov	r1, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c5c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	fa92 f2a2 	rbit	r2, r2
 8002c68:	603a      	str	r2, [r7, #0]
  return result;
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	40d3      	lsrs	r3, r2
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08006324 	.word	0x08006324

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c92:	f7ff ffcd 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002ca0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	fa92 f2a2 	rbit	r2, r2
 8002cac:	603a      	str	r2, [r7, #0]
  return result;
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	fab2 f282 	clz	r2, r2
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	40d3      	lsrs	r3, r2
 8002cb8:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08006324 	.word	0x08006324

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b092      	sub	sp, #72	; 0x48
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80d4 	beq.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf4:	4b4e      	ldr	r3, [pc, #312]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10e      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b4b      	ldr	r3, [pc, #300]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	4a4a      	ldr	r2, [pc, #296]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	61d3      	str	r3, [r2, #28]
 8002d0c:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b45      	ldr	r3, [pc, #276]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d118      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2a:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fae5 	bl	8001304 <HAL_GetTick>
 8002d3a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	e008      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe fae1 	bl	8001304 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	; 0x64
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e13c      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5c:	4b34      	ldr	r3, [pc, #208]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d64:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 8084 	beq.w	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d07c      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7c:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	461a      	mov	r2, r3
 8002da6:	2301      	movs	r3, #1
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04b      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe fa91 	bl	8001304 <HAL_GetTick>
 8002de2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de6:	f7fe fa8d 	bl	8001304 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e0e6      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	2302      	movs	r3, #2
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	61fb      	str	r3, [r7, #28]
  return result;
 8002e14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d108      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e2a:	4b01      	ldr	r3, [pc, #4]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	e00d      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	10908100 	.word	0x10908100
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa93 f3a3 	rbit	r3, r3
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	613a      	str	r2, [r7, #16]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	fa92 f2a2 	rbit	r2, r2
 8002e56:	60fa      	str	r2, [r7, #12]
  return result;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fab2 f282 	clz	r2, r2
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f002 021f 	and.w	r2, r2, #31
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0b7      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4954      	ldr	r1, [pc, #336]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e88:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e90:	4b50      	ldr	r3, [pc, #320]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f023 0203 	bic.w	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4947      	ldr	r1, [pc, #284]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f023 0210 	bic.w	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4940      	ldr	r1, [pc, #256]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee4:	4b3b      	ldr	r3, [pc, #236]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	f023 0220 	bic.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4938      	ldr	r1, [pc, #224]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4931      	ldr	r1, [pc, #196]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f20:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	4929      	ldr	r1, [pc, #164]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002f3e:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4922      	ldr	r1, [pc, #136]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	491a      	ldr	r1, [pc, #104]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d008      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	4913      	ldr	r1, [pc, #76]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	490b      	ldr	r1, [pc, #44]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3748      	adds	r7, #72	; 0x48
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e049      	b.n	800307e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7fd ff40 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4619      	mov	r1, r3
 8003016:	4610      	mov	r0, r2
 8003018:	f000 fd02 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e033      	b.n	8003108 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_TIM_Base_Start+0x8c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d009      	beq.n	80030c6 <HAL_TIM_Base_Start+0x3e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d004      	beq.n	80030c6 <HAL_TIM_Base_Start+0x3e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <HAL_TIM_Base_Start+0x90>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d115      	bne.n	80030f2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_TIM_Base_Start+0x94>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b06      	cmp	r3, #6
 80030d6:	d015      	beq.n	8003104 <HAL_TIM_Base_Start+0x7c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030de:	d011      	beq.n	8003104 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	e008      	b.n	8003104 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0201 	orr.w	r2, r2, #1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e000      	b.n	8003106 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40012c00 	.word	0x40012c00
 8003118:	40014000 	.word	0x40014000
 800311c:	00010007 	.word	0x00010007

08003120 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e049      	b.n	80031c6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f841 	bl	80031ce <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f000 fc5e 	bl	8003a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start_IT+0x1e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e023      	b.n	800324a <HAL_TIM_IC_Start_IT+0x66>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_IC_Start_IT+0x2e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800320e:	b2db      	uxtb	r3, r3
 8003210:	e01b      	b.n	800324a <HAL_TIM_IC_Start_IT+0x66>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_IC_Start_IT+0x3e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e013      	b.n	800324a <HAL_TIM_IC_Start_IT+0x66>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d104      	bne.n	8003232 <HAL_TIM_IC_Start_IT+0x4e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322e:	b2db      	uxtb	r3, r3
 8003230:	e00b      	b.n	800324a <HAL_TIM_IC_Start_IT+0x66>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b10      	cmp	r3, #16
 8003236:	d104      	bne.n	8003242 <HAL_TIM_IC_Start_IT+0x5e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323e:	b2db      	uxtb	r3, r3
 8003240:	e003      	b.n	800324a <HAL_TIM_IC_Start_IT+0x66>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d104      	bne.n	800325c <HAL_TIM_IC_Start_IT+0x78>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e013      	b.n	8003284 <HAL_TIM_IC_Start_IT+0xa0>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b04      	cmp	r3, #4
 8003260:	d104      	bne.n	800326c <HAL_TIM_IC_Start_IT+0x88>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e00b      	b.n	8003284 <HAL_TIM_IC_Start_IT+0xa0>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d104      	bne.n	800327c <HAL_TIM_IC_Start_IT+0x98>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e003      	b.n	8003284 <HAL_TIM_IC_Start_IT+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003282:	b2db      	uxtb	r3, r3
 8003284:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003286:	7bbb      	ldrb	r3, [r7, #14]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d102      	bne.n	8003292 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800328c:	7b7b      	ldrb	r3, [r7, #13]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0c9      	b.n	800342a <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <HAL_TIM_IC_Start_IT+0xc2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a4:	e023      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x10a>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_IC_Start_IT+0xd2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	e01b      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x10a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_IC_Start_IT+0xe2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c4:	e013      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x10a>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b0c      	cmp	r3, #12
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start_IT+0xf2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032d4:	e00b      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x10a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_IC_Start_IT+0x102>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e4:	e003      	b.n	80032ee <HAL_TIM_IC_Start_IT+0x10a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0x11a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032fc:	e013      	b.n	8003326 <HAL_TIM_IC_Start_IT+0x142>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start_IT+0x12a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800330c:	e00b      	b.n	8003326 <HAL_TIM_IC_Start_IT+0x142>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b08      	cmp	r3, #8
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start_IT+0x13a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800331c:	e003      	b.n	8003326 <HAL_TIM_IC_Start_IT+0x142>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d841      	bhi.n	80033b0 <HAL_TIM_IC_Start_IT+0x1cc>
 800332c:	a201      	add	r2, pc, #4	; (adr r2, 8003334 <HAL_TIM_IC_Start_IT+0x150>)
 800332e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003332:	bf00      	nop
 8003334:	08003369 	.word	0x08003369
 8003338:	080033b1 	.word	0x080033b1
 800333c:	080033b1 	.word	0x080033b1
 8003340:	080033b1 	.word	0x080033b1
 8003344:	0800337b 	.word	0x0800337b
 8003348:	080033b1 	.word	0x080033b1
 800334c:	080033b1 	.word	0x080033b1
 8003350:	080033b1 	.word	0x080033b1
 8003354:	0800338d 	.word	0x0800338d
 8003358:	080033b1 	.word	0x080033b1
 800335c:	080033b1 	.word	0x080033b1
 8003360:	080033b1 	.word	0x080033b1
 8003364:	0800339f 	.word	0x0800339f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0202 	orr.w	r2, r2, #2
 8003376:	60da      	str	r2, [r3, #12]
      break;
 8003378:	e01d      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0204 	orr.w	r2, r2, #4
 8003388:	60da      	str	r2, [r3, #12]
      break;
 800338a:	e014      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0208 	orr.w	r2, r2, #8
 800339a:	60da      	str	r2, [r3, #12]
      break;
 800339c:	e00b      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0210 	orr.w	r2, r2, #16
 80033ac:	60da      	str	r2, [r3, #12]
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d135      	bne.n	8003428 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	6839      	ldr	r1, [r7, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fd3f 	bl	8003e48 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a19      	ldr	r2, [pc, #100]	; (8003434 <HAL_TIM_IC_Start_IT+0x250>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_TIM_IC_Start_IT+0x204>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d004      	beq.n	80033e8 <HAL_TIM_IC_Start_IT+0x204>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a15      	ldr	r2, [pc, #84]	; (8003438 <HAL_TIM_IC_Start_IT+0x254>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d115      	bne.n	8003414 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_TIM_IC_Start_IT+0x258>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d015      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x242>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d011      	beq.n	8003426 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	e008      	b.n	8003426 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e000      	b.n	8003428 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00
 8003438:	40014000 	.word	0x40014000
 800343c:	00010007 	.word	0x00010007

08003440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0202 	mvn.w	r2, #2
 800346c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd f93a 	bl	80006fc <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 faaa 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fab1 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0204 	mvn.w	r2, #4
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd f910 	bl	80006fc <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa80 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fa87 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b08      	cmp	r3, #8
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd f8e6 	bl	80006fc <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa56 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa5d 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b10      	cmp	r3, #16
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	2b10      	cmp	r3, #16
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0210 	mvn.w	r2, #16
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2208      	movs	r2, #8
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd f8bc 	bl	80006fc <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fa2c 	bl	80039e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa33 	bl	80039f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0201 	mvn.w	r2, #1
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa06 	bl	80039d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	2b80      	cmp	r3, #128	; 0x80
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035dc:	2b80      	cmp	r3, #128	; 0x80
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fcc2 	bl	8003f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d10e      	bne.n	800361e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	2b80      	cmp	r3, #128	; 0x80
 800360c:	d107      	bne.n	800361e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fcb5 	bl	8003f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d10e      	bne.n	800364a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b40      	cmp	r3, #64	; 0x40
 8003638:	d107      	bne.n	800364a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f9e1 	bl	8003a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d10e      	bne.n	8003676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b20      	cmp	r3, #32
 8003664:	d107      	bne.n	8003676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0220 	mvn.w	r2, #32
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fc75 	bl	8003f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b086      	sub	sp, #24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003698:	2302      	movs	r3, #2
 800369a:	e088      	b.n	80037ae <HAL_TIM_IC_ConfigChannel+0x130>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11b      	bne.n	80036e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f000 fa1f 	bl	8003afc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 020c 	bic.w	r2, r2, #12
 80036cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6999      	ldr	r1, [r3, #24]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	619a      	str	r2, [r3, #24]
 80036e0:	e060      	b.n	80037a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d11c      	bne.n	8003722 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f000 fa85 	bl	8003c06 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800370a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021a      	lsls	r2, r3, #8
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
 8003720:	e040      	b.n	80037a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d11b      	bne.n	8003760 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6819      	ldr	r1, [r3, #0]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f000 fad2 	bl	8003ce0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 020c 	bic.w	r2, r2, #12
 800374a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69d9      	ldr	r1, [r3, #28]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	61da      	str	r2, [r3, #28]
 800375e:	e021      	b.n	80037a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d11c      	bne.n	80037a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f000 faef 	bl	8003d58 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003788:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	021a      	lsls	r2, r3, #8
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	61da      	str	r2, [r3, #28]
 800379e:	e001      	b.n	80037a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_TIM_ConfigClockSource+0x1c>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e0b6      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x18a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	d03e      	beq.n	800388e <HAL_TIM_ConfigClockSource+0xd8>
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	f200 8087 	bhi.w	8003926 <HAL_TIM_ConfigClockSource+0x170>
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	f000 8086 	beq.w	800392c <HAL_TIM_ConfigClockSource+0x176>
 8003820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003824:	d87f      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 8003826:	2b70      	cmp	r3, #112	; 0x70
 8003828:	d01a      	beq.n	8003860 <HAL_TIM_ConfigClockSource+0xaa>
 800382a:	2b70      	cmp	r3, #112	; 0x70
 800382c:	d87b      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 800382e:	2b60      	cmp	r3, #96	; 0x60
 8003830:	d050      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0x11e>
 8003832:	2b60      	cmp	r3, #96	; 0x60
 8003834:	d877      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 8003836:	2b50      	cmp	r3, #80	; 0x50
 8003838:	d03c      	beq.n	80038b4 <HAL_TIM_ConfigClockSource+0xfe>
 800383a:	2b50      	cmp	r3, #80	; 0x50
 800383c:	d873      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 800383e:	2b40      	cmp	r3, #64	; 0x40
 8003840:	d058      	beq.n	80038f4 <HAL_TIM_ConfigClockSource+0x13e>
 8003842:	2b40      	cmp	r3, #64	; 0x40
 8003844:	d86f      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 8003846:	2b30      	cmp	r3, #48	; 0x30
 8003848:	d064      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x15e>
 800384a:	2b30      	cmp	r3, #48	; 0x30
 800384c:	d86b      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 800384e:	2b20      	cmp	r3, #32
 8003850:	d060      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x15e>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d867      	bhi.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d05c      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x15e>
 800385a:	2b10      	cmp	r3, #16
 800385c:	d05a      	beq.n	8003914 <HAL_TIM_ConfigClockSource+0x15e>
 800385e:	e062      	b.n	8003926 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	6899      	ldr	r1, [r3, #8]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f000 faca 	bl	8003e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003882:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
      break;
 800388c:	e04f      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6899      	ldr	r1, [r3, #8]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f000 fab3 	bl	8003e08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b0:	609a      	str	r2, [r3, #8]
      break;
 80038b2:	e03c      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	461a      	mov	r2, r3
 80038c2:	f000 f971 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2150      	movs	r1, #80	; 0x50
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fa80 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80038d2:	e02c      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	461a      	mov	r2, r3
 80038e2:	f000 f9cd 	bl	8003c80 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2160      	movs	r1, #96	; 0x60
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa70 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80038f2:	e01c      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	461a      	mov	r2, r3
 8003902:	f000 f951 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fa60 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 8003912:	e00c      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 fa57 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 8003924:	e003      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
      break;
 800392a:	e000      	b.n	800392e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800392c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800393e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d831      	bhi.n	80039c0 <HAL_TIM_ReadCapturedValue+0x78>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <HAL_TIM_ReadCapturedValue+0x1c>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003999 	.word	0x08003999
 8003968:	080039c1 	.word	0x080039c1
 800396c:	080039c1 	.word	0x080039c1
 8003970:	080039c1 	.word	0x080039c1
 8003974:	080039a3 	.word	0x080039a3
 8003978:	080039c1 	.word	0x080039c1
 800397c:	080039c1 	.word	0x080039c1
 8003980:	080039c1 	.word	0x080039c1
 8003984:	080039ad 	.word	0x080039ad
 8003988:	080039c1 	.word	0x080039c1
 800398c:	080039c1 	.word	0x080039c1
 8003990:	080039c1 	.word	0x080039c1
 8003994:	080039b7 	.word	0x080039b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	60fb      	str	r3, [r7, #12]

      break;
 80039a0:	e00f      	b.n	80039c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	60fb      	str	r3, [r7, #12]

      break;
 80039aa:	e00a      	b.n	80039c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	60fb      	str	r3, [r7, #12]

      break;
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	60fb      	str	r3, [r7, #12]

      break;
 80039be:	e000      	b.n	80039c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80039c0:	bf00      	nop
  }

  return tmpreg;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a2e      	ldr	r2, [pc, #184]	; (8003aec <TIM_Base_SetConfig+0xcc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x20>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a25      	ldr	r2, [pc, #148]	; (8003aec <TIM_Base_SetConfig+0xcc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00f      	beq.n	8003a7a <TIM_Base_SetConfig+0x5a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d00b      	beq.n	8003a7a <TIM_Base_SetConfig+0x5a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a22      	ldr	r2, [pc, #136]	; (8003af0 <TIM_Base_SetConfig+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <TIM_Base_SetConfig+0x5a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a21      	ldr	r2, [pc, #132]	; (8003af4 <TIM_Base_SetConfig+0xd4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <TIM_Base_SetConfig+0x5a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <TIM_Base_SetConfig+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0e      	ldr	r2, [pc, #56]	; (8003aec <TIM_Base_SetConfig+0xcc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_Base_SetConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <TIM_Base_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_Base_SetConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <TIM_Base_SetConfig+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_Base_SetConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <TIM_Base_SetConfig+0xd8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d103      	bne.n	8003ad8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	615a      	str	r2, [r3, #20]
}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800

08003afc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0201 	bic.w	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <TIM_TI1_SetConfig+0xa4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_TI1_SetConfig+0x3e>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d003      	beq.n	8003b3a <TIM_TI1_SetConfig+0x3e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <TIM_TI1_SetConfig+0xa8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <TIM_TI1_SetConfig+0x42>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <TIM_TI1_SetConfig+0x44>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e003      	b.n	8003b5e <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f023 030a 	bic.w	r3, r3, #10
 8003b78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 030a 	and.w	r3, r3, #10
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40014000 	.word	0x40014000

08003ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 030a 	bic.w	r3, r3, #10
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f023 0210 	bic.w	r2, r3, #16
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	031b      	lsls	r3, r3, #12
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f023 0210 	bic.w	r2, r3, #16
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003caa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	031b      	lsls	r3, r3, #12
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0303 	bic.w	r3, r3, #3
 8003d0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003d30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	031b      	lsls	r3, r3, #12
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	031b      	lsls	r3, r3, #12
 8003db0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f043 0307 	orr.w	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	021a      	lsls	r2, r3, #8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e04f      	b.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d108      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003edc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f14:	d004      	beq.n	8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10c      	bne.n	8003f3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014000 	.word	0x40014000

08003f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e040      	b.n	8004030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc ffbc 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2224      	movs	r2, #36	; 0x24
 8003fc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fbbe 	bl	800475c <UART_SetConfig>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e022      	b.n	8004030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fce8 	bl	80049c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fd6f 	bl	8004b0c <UART_CheckIdleState>
 800402e:	4603      	mov	r3, r0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08a      	sub	sp, #40	; 0x28
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800404c:	2b20      	cmp	r3, #32
 800404e:	f040 8082 	bne.w	8004156 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <HAL_UART_Transmit+0x26>
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07a      	b.n	8004158 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_UART_Transmit+0x38>
 800406c:	2302      	movs	r3, #2
 800406e:	e073      	b.n	8004158 <HAL_UART_Transmit+0x120>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2221      	movs	r2, #33	; 0x21
 8004084:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004086:	f7fd f93d 	bl	8001304 <HAL_GetTick>
 800408a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	88fa      	ldrh	r2, [r7, #6]
 8004098:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x80>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040c8:	e02d      	b.n	8004126 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fd62 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e039      	b.n	8004158 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f6:	b292      	uxth	r2, r2
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3302      	adds	r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e008      	b.n	8004114 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b292      	uxth	r2, r2
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1cb      	bne.n	80040ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2140      	movs	r1, #64	; 0x40
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fd2e 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e005      	b.n	8004158 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b0ba      	sub	sp, #232	; 0xe8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800418a:	f640 030f 	movw	r3, #2063	; 0x80f
 800418e:	4013      	ands	r3, r2
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800419c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00f      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d009      	beq.n	80041c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 82a3 	beq.w	8004704 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
      }
      return;
 80041c6:	e29d      	b.n	8004704 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8117 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041e2:	4b85      	ldr	r3, [pc, #532]	; (80043f8 <HAL_UART_IRQHandler+0x298>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 810a 	beq.w	8004400 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d011      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
 8004228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2202      	movs	r2, #2
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d011      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2204      	movs	r2, #4
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d105      	bne.n	80042a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2208      	movs	r2, #8
 80042a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ae:	f043 0208 	orr.w	r2, r3, #8
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8209 	beq.w	8004708 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d005      	beq.n	8004342 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04f      	beq.n	80043e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fcef 	bl	8004d26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d141      	bne.n	80043da <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3308      	adds	r3, #8
 800435c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800436c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004382:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800438e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800439a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1d9      	bne.n	8004356 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d013      	beq.n	80043d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_UART_IRQHandler+0x29c>)
 80043b0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd f91e 	bl	80015f8 <HAL_DMA_Abort_IT>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80043cc:	4610      	mov	r0, r2
 80043ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	e00f      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9ac 	bl	8004730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d8:	e00b      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9a8 	bl	8004730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e0:	e007      	b.n	80043f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9a4 	bl	8004730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043f0:	e18a      	b.n	8004708 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f2:	bf00      	nop
    return;
 80043f4:	e188      	b.n	8004708 <HAL_UART_IRQHandler+0x5a8>
 80043f6:	bf00      	nop
 80043f8:	04000120 	.word	0x04000120
 80043fc:	08004ded 	.word	0x08004ded

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004404:	2b01      	cmp	r3, #1
 8004406:	f040 8143 	bne.w	8004690 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 813c 	beq.w	8004690 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8135 	beq.w	8004690 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b40      	cmp	r3, #64	; 0x40
 800443a:	f040 80b1 	bne.w	80045a0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 815c 	beq.w	800470c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800445a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800445e:	429a      	cmp	r2, r3
 8004460:	f080 8154 	bcs.w	800470c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800446a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b20      	cmp	r3, #32
 8004476:	f000 8085 	beq.w	8004584 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800448e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1da      	bne.n	800447a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e1      	bne.n	80044c4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004524:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800452a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e3      	bne.n	8004500 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004566:	65bb      	str	r3, [r7, #88]	; 0x58
 8004568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800456c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e4      	bne.n	8004544 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd f801 	bl	8001586 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004590:	b29b      	uxth	r3, r3
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b29b      	uxth	r3, r3
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8d3 	bl	8004744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800459e:	e0b5      	b.n	800470c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a7 	beq.w	8004710 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80045c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 80a2 	beq.w	8004710 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	461a      	mov	r2, r3
 80045ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
 80045f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e4      	bne.n	80045cc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	623b      	str	r3, [r7, #32]
   return(result);
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004626:	633a      	str	r2, [r7, #48]	; 0x30
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800462c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e3      	bne.n	8004602 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60fb      	str	r3, [r7, #12]
   return(result);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	69b9      	ldr	r1, [r7, #24]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	617b      	str	r3, [r7, #20]
   return(result);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e4      	bne.n	800464c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f85b 	bl	8004744 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800468e:	e03f      	b.n	8004710 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00e      	beq.n	80046ba <HAL_UART_IRQHandler+0x55a>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d008      	beq.n	80046ba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fbda 	bl	8004e6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046b8:	e02d      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01c      	beq.n	8004714 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
    }
    return;
 80046e2:	e017      	b.n	8004714 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <HAL_UART_IRQHandler+0x5b6>
 80046f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00c      	beq.n	8004716 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb8b 	bl	8004e18 <UART_EndTransmit_IT>
    return;
 8004702:	e008      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004704:	bf00      	nop
 8004706:	e006      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004708:	bf00      	nop
 800470a:	e004      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004714:	bf00      	nop
  }

}
 8004716:	37e8      	adds	r7, #232	; 0xe8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b8a      	ldr	r3, [pc, #552]	; (80049b0 <UART_SetConfig+0x254>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	6979      	ldr	r1, [r7, #20]
 8004790:	430b      	orrs	r3, r1
 8004792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a78      	ldr	r2, [pc, #480]	; (80049b4 <UART_SetConfig+0x258>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d120      	bne.n	800481a <UART_SetConfig+0xbe>
 80047d8:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <UART_SetConfig+0x25c>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d817      	bhi.n	8004814 <UART_SetConfig+0xb8>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x90>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	080047fd 	.word	0x080047fd
 80047f0:	08004809 	.word	0x08004809
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004803 	.word	0x08004803
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e01d      	b.n	800483e <UART_SetConfig+0xe2>
 8004802:	2302      	movs	r3, #2
 8004804:	77fb      	strb	r3, [r7, #31]
 8004806:	e01a      	b.n	800483e <UART_SetConfig+0xe2>
 8004808:	2304      	movs	r3, #4
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e017      	b.n	800483e <UART_SetConfig+0xe2>
 800480e:	2308      	movs	r3, #8
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e014      	b.n	800483e <UART_SetConfig+0xe2>
 8004814:	2310      	movs	r3, #16
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e011      	b.n	800483e <UART_SetConfig+0xe2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a67      	ldr	r2, [pc, #412]	; (80049bc <UART_SetConfig+0x260>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d102      	bne.n	800482a <UART_SetConfig+0xce>
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e009      	b.n	800483e <UART_SetConfig+0xe2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a64      	ldr	r2, [pc, #400]	; (80049c0 <UART_SetConfig+0x264>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d102      	bne.n	800483a <UART_SetConfig+0xde>
 8004834:	2300      	movs	r3, #0
 8004836:	77fb      	strb	r3, [r7, #31]
 8004838:	e001      	b.n	800483e <UART_SetConfig+0xe2>
 800483a:	2310      	movs	r3, #16
 800483c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004846:	d15b      	bne.n	8004900 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004848:	7ffb      	ldrb	r3, [r7, #31]
 800484a:	2b08      	cmp	r3, #8
 800484c:	d827      	bhi.n	800489e <UART_SetConfig+0x142>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xf8>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	0800489f 	.word	0x0800489f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800489f 	.word	0x0800489f
 800486c:	0800489f 	.word	0x0800489f
 8004870:	0800489f 	.word	0x0800489f
 8004874:	08004897 	.word	0x08004897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004878:	f7fe f9e6 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e013      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004880:	f7fe fa04 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8004884:	61b8      	str	r0, [r7, #24]
        break;
 8004886:	e00f      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004888:	4b4e      	ldr	r3, [pc, #312]	; (80049c4 <UART_SetConfig+0x268>)
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00c      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800488e:	f7fe f965 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8004892:	61b8      	str	r0, [r7, #24]
        break;
 8004894:	e008      	b.n	80048a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489a:	61bb      	str	r3, [r7, #24]
        break;
 800489c:	e004      	b.n	80048a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	77bb      	strb	r3, [r7, #30]
        break;
 80048a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d074      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	005a      	lsls	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	085b      	lsrs	r3, r3, #1
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b0f      	cmp	r3, #15
 80048ca:	d916      	bls.n	80048fa <UART_SetConfig+0x19e>
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d212      	bcs.n	80048fa <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f023 030f 	bic.w	r3, r3, #15
 80048dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	89fb      	ldrh	r3, [r7, #14]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	89fa      	ldrh	r2, [r7, #14]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e04e      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	77bb      	strb	r3, [r7, #30]
 80048fe:	e04b      	b.n	8004998 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004900:	7ffb      	ldrb	r3, [r7, #31]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d827      	bhi.n	8004956 <UART_SetConfig+0x1fa>
 8004906:	a201      	add	r2, pc, #4	; (adr r2, 800490c <UART_SetConfig+0x1b0>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	08004931 	.word	0x08004931
 8004910:	08004939 	.word	0x08004939
 8004914:	08004941 	.word	0x08004941
 8004918:	08004957 	.word	0x08004957
 800491c:	08004947 	.word	0x08004947
 8004920:	08004957 	.word	0x08004957
 8004924:	08004957 	.word	0x08004957
 8004928:	08004957 	.word	0x08004957
 800492c:	0800494f 	.word	0x0800494f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004930:	f7fe f98a 	bl	8002c48 <HAL_RCC_GetPCLK1Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e013      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004938:	f7fe f9a8 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 800493c:	61b8      	str	r0, [r7, #24]
        break;
 800493e:	e00f      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <UART_SetConfig+0x268>)
 8004942:	61bb      	str	r3, [r7, #24]
        break;
 8004944:	e00c      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004946:	f7fe f909 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 800494a:	61b8      	str	r0, [r7, #24]
        break;
 800494c:	e008      	b.n	8004960 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800494e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004952:	61bb      	str	r3, [r7, #24]
        break;
 8004954:	e004      	b.n	8004960 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	77bb      	strb	r3, [r7, #30]
        break;
 800495e:	bf00      	nop
    }

    if (pclk != 0U)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d018      	beq.n	8004998 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085a      	lsrs	r2, r3, #1
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	441a      	add	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	b29b      	uxth	r3, r3
 800497a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b0f      	cmp	r3, #15
 8004980:	d908      	bls.n	8004994 <UART_SetConfig+0x238>
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d204      	bcs.n	8004994 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e001      	b.n	8004998 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	efff69f3 	.word	0xefff69f3
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40004400 	.word	0x40004400
 80049c0:	40004800 	.word	0x40004800
 80049c4:	007a1200 	.word	0x007a1200

080049c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0320 	and.w	r3, r3, #32
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01a      	beq.n	8004ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10a      	bne.n	8004ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b1c:	f7fc fbf2 	bl	8001304 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f82d 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e023      	b.n	8004b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d10e      	bne.n	8004b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f817 	bl	8004b9e <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00d      	b.n	8004b96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b09c      	sub	sp, #112	; 0x70
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bae:	e0a5      	b.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	f000 80a1 	beq.w	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fc fba3 	bl	8001304 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d13e      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be4:	667b      	str	r3, [r7, #100]	; 0x64
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	461a      	mov	r2, r3
 8004bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bf0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e6      	bne.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	663b      	str	r3, [r7, #96]	; 0x60
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c22:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e5      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e067      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d04f      	beq.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d147      	bne.n	8004cfc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc8:	623a      	str	r2, [r7, #32]
 8004cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e010      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	f43f af4a 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3770      	adds	r7, #112	; 0x70
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b095      	sub	sp, #84	; 0x54
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e5      	bne.n	8004d60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d118      	bne.n	8004dce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	f023 0310 	bic.w	r3, r3, #16
 8004db0:	647b      	str	r3, [r7, #68]	; 0x44
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6979      	ldr	r1, [r7, #20]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e6      	bne.n	8004d9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004de0:	bf00      	nop
 8004de2:	3754      	adds	r7, #84	; 0x54
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f7ff fc90 	bl	8004730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6979      	ldr	r1, [r7, #20]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e6      	bne.n	8004e20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fc5c 	bl	800471c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e64:	bf00      	nop
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <__errno>:
 8004e80:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <__errno+0x8>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000018 	.word	0x20000018

08004e8c <__libc_init_array>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4d0d      	ldr	r5, [pc, #52]	; (8004ec4 <__libc_init_array+0x38>)
 8004e90:	4c0d      	ldr	r4, [pc, #52]	; (8004ec8 <__libc_init_array+0x3c>)
 8004e92:	1b64      	subs	r4, r4, r5
 8004e94:	10a4      	asrs	r4, r4, #2
 8004e96:	2600      	movs	r6, #0
 8004e98:	42a6      	cmp	r6, r4
 8004e9a:	d109      	bne.n	8004eb0 <__libc_init_array+0x24>
 8004e9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ecc <__libc_init_array+0x40>)
 8004e9e:	4c0c      	ldr	r4, [pc, #48]	; (8004ed0 <__libc_init_array+0x44>)
 8004ea0:	f001 fa22 	bl	80062e8 <_init>
 8004ea4:	1b64      	subs	r4, r4, r5
 8004ea6:	10a4      	asrs	r4, r4, #2
 8004ea8:	2600      	movs	r6, #0
 8004eaa:	42a6      	cmp	r6, r4
 8004eac:	d105      	bne.n	8004eba <__libc_init_array+0x2e>
 8004eae:	bd70      	pop	{r4, r5, r6, pc}
 8004eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb4:	4798      	blx	r3
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7ee      	b.n	8004e98 <__libc_init_array+0xc>
 8004eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebe:	4798      	blx	r3
 8004ec0:	3601      	adds	r6, #1
 8004ec2:	e7f2      	b.n	8004eaa <__libc_init_array+0x1e>
 8004ec4:	08006498 	.word	0x08006498
 8004ec8:	08006498 	.word	0x08006498
 8004ecc:	08006498 	.word	0x08006498
 8004ed0:	0800649c 	.word	0x0800649c

08004ed4 <memset>:
 8004ed4:	4402      	add	r2, r0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d100      	bne.n	8004ede <memset+0xa>
 8004edc:	4770      	bx	lr
 8004ede:	f803 1b01 	strb.w	r1, [r3], #1
 8004ee2:	e7f9      	b.n	8004ed8 <memset+0x4>

08004ee4 <srand>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <srand+0x44>)
 8004ee8:	681d      	ldr	r5, [r3, #0]
 8004eea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004eec:	4604      	mov	r4, r0
 8004eee:	b9b3      	cbnz	r3, 8004f1e <srand+0x3a>
 8004ef0:	2018      	movs	r0, #24
 8004ef2:	f000 f8b5 	bl	8005060 <malloc>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	63a8      	str	r0, [r5, #56]	; 0x38
 8004efa:	b920      	cbnz	r0, 8004f06 <srand+0x22>
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <srand+0x48>)
 8004efe:	480c      	ldr	r0, [pc, #48]	; (8004f30 <srand+0x4c>)
 8004f00:	2142      	movs	r1, #66	; 0x42
 8004f02:	f000 f87d 	bl	8005000 <__assert_func>
 8004f06:	490b      	ldr	r1, [pc, #44]	; (8004f34 <srand+0x50>)
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <srand+0x54>)
 8004f0a:	e9c0 1300 	strd	r1, r3, [r0]
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <srand+0x58>)
 8004f10:	6083      	str	r3, [r0, #8]
 8004f12:	230b      	movs	r3, #11
 8004f14:	8183      	strh	r3, [r0, #12]
 8004f16:	2100      	movs	r1, #0
 8004f18:	2001      	movs	r0, #1
 8004f1a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004f1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f20:	2200      	movs	r2, #0
 8004f22:	611c      	str	r4, [r3, #16]
 8004f24:	615a      	str	r2, [r3, #20]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	20000018 	.word	0x20000018
 8004f2c:	08006350 	.word	0x08006350
 8004f30:	08006367 	.word	0x08006367
 8004f34:	abcd330e 	.word	0xabcd330e
 8004f38:	e66d1234 	.word	0xe66d1234
 8004f3c:	0005deec 	.word	0x0005deec

08004f40 <rand>:
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <rand+0x60>)
 8004f42:	b510      	push	{r4, lr}
 8004f44:	681c      	ldr	r4, [r3, #0]
 8004f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f48:	b9b3      	cbnz	r3, 8004f78 <rand+0x38>
 8004f4a:	2018      	movs	r0, #24
 8004f4c:	f000 f888 	bl	8005060 <malloc>
 8004f50:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f52:	b928      	cbnz	r0, 8004f60 <rand+0x20>
 8004f54:	4602      	mov	r2, r0
 8004f56:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <rand+0x64>)
 8004f58:	4813      	ldr	r0, [pc, #76]	; (8004fa8 <rand+0x68>)
 8004f5a:	214e      	movs	r1, #78	; 0x4e
 8004f5c:	f000 f850 	bl	8005000 <__assert_func>
 8004f60:	4a12      	ldr	r2, [pc, #72]	; (8004fac <rand+0x6c>)
 8004f62:	4b13      	ldr	r3, [pc, #76]	; (8004fb0 <rand+0x70>)
 8004f64:	e9c0 2300 	strd	r2, r3, [r0]
 8004f68:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <rand+0x74>)
 8004f6a:	6083      	str	r3, [r0, #8]
 8004f6c:	230b      	movs	r3, #11
 8004f6e:	8183      	strh	r3, [r0, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	2300      	movs	r3, #0
 8004f74:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004f78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f7a:	480f      	ldr	r0, [pc, #60]	; (8004fb8 <rand+0x78>)
 8004f7c:	690a      	ldr	r2, [r1, #16]
 8004f7e:	694b      	ldr	r3, [r1, #20]
 8004f80:	4c0e      	ldr	r4, [pc, #56]	; (8004fbc <rand+0x7c>)
 8004f82:	4350      	muls	r0, r2
 8004f84:	fb04 0003 	mla	r0, r4, r3, r0
 8004f88:	fba2 3404 	umull	r3, r4, r2, r4
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	4404      	add	r4, r0
 8004f90:	f144 0000 	adc.w	r0, r4, #0
 8004f94:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8004f98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000018 	.word	0x20000018
 8004fa4:	08006350 	.word	0x08006350
 8004fa8:	08006367 	.word	0x08006367
 8004fac:	abcd330e 	.word	0xabcd330e
 8004fb0:	e66d1234 	.word	0xe66d1234
 8004fb4:	0005deec 	.word	0x0005deec
 8004fb8:	5851f42d 	.word	0x5851f42d
 8004fbc:	4c957f2d 	.word	0x4c957f2d

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	b500      	push	{lr}
 8004fc4:	b09c      	sub	sp, #112	; 0x70
 8004fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004fc8:	9002      	str	r0, [sp, #8]
 8004fca:	9006      	str	r0, [sp, #24]
 8004fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd0:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <siprintf+0x38>)
 8004fd2:	9107      	str	r1, [sp, #28]
 8004fd4:	9104      	str	r1, [sp, #16]
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	9301      	str	r3, [sp, #4]
 8004fe2:	a902      	add	r1, sp, #8
 8004fe4:	f000 f94a 	bl	800527c <_svfiprintf_r>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	; 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000018 	.word	0x20000018
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <__assert_func>:
 8005000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005002:	4614      	mov	r4, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4b09      	ldr	r3, [pc, #36]	; (800502c <__assert_func+0x2c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	68d8      	ldr	r0, [r3, #12]
 800500e:	b14c      	cbz	r4, 8005024 <__assert_func+0x24>
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <__assert_func+0x30>)
 8005012:	9100      	str	r1, [sp, #0]
 8005014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005018:	4906      	ldr	r1, [pc, #24]	; (8005034 <__assert_func+0x34>)
 800501a:	462b      	mov	r3, r5
 800501c:	f000 f80e 	bl	800503c <fiprintf>
 8005020:	f000 fdea 	bl	8005bf8 <abort>
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <__assert_func+0x38>)
 8005026:	461c      	mov	r4, r3
 8005028:	e7f3      	b.n	8005012 <__assert_func+0x12>
 800502a:	bf00      	nop
 800502c:	20000018 	.word	0x20000018
 8005030:	080063c6 	.word	0x080063c6
 8005034:	080063d3 	.word	0x080063d3
 8005038:	08006401 	.word	0x08006401

0800503c <fiprintf>:
 800503c:	b40e      	push	{r1, r2, r3}
 800503e:	b503      	push	{r0, r1, lr}
 8005040:	4601      	mov	r1, r0
 8005042:	ab03      	add	r3, sp, #12
 8005044:	4805      	ldr	r0, [pc, #20]	; (800505c <fiprintf+0x20>)
 8005046:	f853 2b04 	ldr.w	r2, [r3], #4
 800504a:	6800      	ldr	r0, [r0, #0]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	f000 fa3f 	bl	80054d0 <_vfiprintf_r>
 8005052:	b002      	add	sp, #8
 8005054:	f85d eb04 	ldr.w	lr, [sp], #4
 8005058:	b003      	add	sp, #12
 800505a:	4770      	bx	lr
 800505c:	20000018 	.word	0x20000018

08005060 <malloc>:
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <malloc+0xc>)
 8005062:	4601      	mov	r1, r0
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f000 b853 	b.w	8005110 <_malloc_r>
 800506a:	bf00      	nop
 800506c:	20000018 	.word	0x20000018

08005070 <_free_r>:
 8005070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005072:	2900      	cmp	r1, #0
 8005074:	d048      	beq.n	8005108 <_free_r+0x98>
 8005076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f1a1 0404 	sub.w	r4, r1, #4
 8005082:	bfb8      	it	lt
 8005084:	18e4      	addlt	r4, r4, r3
 8005086:	f001 f805 	bl	8006094 <__malloc_lock>
 800508a:	4a20      	ldr	r2, [pc, #128]	; (800510c <_free_r+0x9c>)
 800508c:	9801      	ldr	r0, [sp, #4]
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	4615      	mov	r5, r2
 8005092:	b933      	cbnz	r3, 80050a2 <_free_r+0x32>
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6014      	str	r4, [r2, #0]
 8005098:	b003      	add	sp, #12
 800509a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800509e:	f000 bfff 	b.w	80060a0 <__malloc_unlock>
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	d90b      	bls.n	80050be <_free_r+0x4e>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	1862      	adds	r2, r4, r1
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf04      	itt	eq
 80050ae:	681a      	ldreq	r2, [r3, #0]
 80050b0:	685b      	ldreq	r3, [r3, #4]
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	bf04      	itt	eq
 80050b6:	1852      	addeq	r2, r2, r1
 80050b8:	6022      	streq	r2, [r4, #0]
 80050ba:	602c      	str	r4, [r5, #0]
 80050bc:	e7ec      	b.n	8005098 <_free_r+0x28>
 80050be:	461a      	mov	r2, r3
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b10b      	cbz	r3, 80050c8 <_free_r+0x58>
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d9fa      	bls.n	80050be <_free_r+0x4e>
 80050c8:	6811      	ldr	r1, [r2, #0]
 80050ca:	1855      	adds	r5, r2, r1
 80050cc:	42a5      	cmp	r5, r4
 80050ce:	d10b      	bne.n	80050e8 <_free_r+0x78>
 80050d0:	6824      	ldr	r4, [r4, #0]
 80050d2:	4421      	add	r1, r4
 80050d4:	1854      	adds	r4, r2, r1
 80050d6:	42a3      	cmp	r3, r4
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	d1dd      	bne.n	8005098 <_free_r+0x28>
 80050dc:	681c      	ldr	r4, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	6053      	str	r3, [r2, #4]
 80050e2:	4421      	add	r1, r4
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	e7d7      	b.n	8005098 <_free_r+0x28>
 80050e8:	d902      	bls.n	80050f0 <_free_r+0x80>
 80050ea:	230c      	movs	r3, #12
 80050ec:	6003      	str	r3, [r0, #0]
 80050ee:	e7d3      	b.n	8005098 <_free_r+0x28>
 80050f0:	6825      	ldr	r5, [r4, #0]
 80050f2:	1961      	adds	r1, r4, r5
 80050f4:	428b      	cmp	r3, r1
 80050f6:	bf04      	itt	eq
 80050f8:	6819      	ldreq	r1, [r3, #0]
 80050fa:	685b      	ldreq	r3, [r3, #4]
 80050fc:	6063      	str	r3, [r4, #4]
 80050fe:	bf04      	itt	eq
 8005100:	1949      	addeq	r1, r1, r5
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	6054      	str	r4, [r2, #4]
 8005106:	e7c7      	b.n	8005098 <_free_r+0x28>
 8005108:	b003      	add	sp, #12
 800510a:	bd30      	pop	{r4, r5, pc}
 800510c:	200000bc 	.word	0x200000bc

08005110 <_malloc_r>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	1ccd      	adds	r5, r1, #3
 8005114:	f025 0503 	bic.w	r5, r5, #3
 8005118:	3508      	adds	r5, #8
 800511a:	2d0c      	cmp	r5, #12
 800511c:	bf38      	it	cc
 800511e:	250c      	movcc	r5, #12
 8005120:	2d00      	cmp	r5, #0
 8005122:	4606      	mov	r6, r0
 8005124:	db01      	blt.n	800512a <_malloc_r+0x1a>
 8005126:	42a9      	cmp	r1, r5
 8005128:	d903      	bls.n	8005132 <_malloc_r+0x22>
 800512a:	230c      	movs	r3, #12
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	2000      	movs	r0, #0
 8005130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005132:	f000 ffaf 	bl	8006094 <__malloc_lock>
 8005136:	4921      	ldr	r1, [pc, #132]	; (80051bc <_malloc_r+0xac>)
 8005138:	680a      	ldr	r2, [r1, #0]
 800513a:	4614      	mov	r4, r2
 800513c:	b99c      	cbnz	r4, 8005166 <_malloc_r+0x56>
 800513e:	4f20      	ldr	r7, [pc, #128]	; (80051c0 <_malloc_r+0xb0>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b923      	cbnz	r3, 800514e <_malloc_r+0x3e>
 8005144:	4621      	mov	r1, r4
 8005146:	4630      	mov	r0, r6
 8005148:	f000 fc86 	bl	8005a58 <_sbrk_r>
 800514c:	6038      	str	r0, [r7, #0]
 800514e:	4629      	mov	r1, r5
 8005150:	4630      	mov	r0, r6
 8005152:	f000 fc81 	bl	8005a58 <_sbrk_r>
 8005156:	1c43      	adds	r3, r0, #1
 8005158:	d123      	bne.n	80051a2 <_malloc_r+0x92>
 800515a:	230c      	movs	r3, #12
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	4630      	mov	r0, r6
 8005160:	f000 ff9e 	bl	80060a0 <__malloc_unlock>
 8005164:	e7e3      	b.n	800512e <_malloc_r+0x1e>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	1b5b      	subs	r3, r3, r5
 800516a:	d417      	bmi.n	800519c <_malloc_r+0x8c>
 800516c:	2b0b      	cmp	r3, #11
 800516e:	d903      	bls.n	8005178 <_malloc_r+0x68>
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	441c      	add	r4, r3
 8005174:	6025      	str	r5, [r4, #0]
 8005176:	e004      	b.n	8005182 <_malloc_r+0x72>
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	42a2      	cmp	r2, r4
 800517c:	bf0c      	ite	eq
 800517e:	600b      	streq	r3, [r1, #0]
 8005180:	6053      	strne	r3, [r2, #4]
 8005182:	4630      	mov	r0, r6
 8005184:	f000 ff8c 	bl	80060a0 <__malloc_unlock>
 8005188:	f104 000b 	add.w	r0, r4, #11
 800518c:	1d23      	adds	r3, r4, #4
 800518e:	f020 0007 	bic.w	r0, r0, #7
 8005192:	1ac2      	subs	r2, r0, r3
 8005194:	d0cc      	beq.n	8005130 <_malloc_r+0x20>
 8005196:	1a1b      	subs	r3, r3, r0
 8005198:	50a3      	str	r3, [r4, r2]
 800519a:	e7c9      	b.n	8005130 <_malloc_r+0x20>
 800519c:	4622      	mov	r2, r4
 800519e:	6864      	ldr	r4, [r4, #4]
 80051a0:	e7cc      	b.n	800513c <_malloc_r+0x2c>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d0e3      	beq.n	8005174 <_malloc_r+0x64>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 fc52 	bl	8005a58 <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d1dd      	bne.n	8005174 <_malloc_r+0x64>
 80051b8:	e7cf      	b.n	800515a <_malloc_r+0x4a>
 80051ba:	bf00      	nop
 80051bc:	200000bc 	.word	0x200000bc
 80051c0:	200000c0 	.word	0x200000c0

080051c4 <__ssputs_r>:
 80051c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c8:	688e      	ldr	r6, [r1, #8]
 80051ca:	429e      	cmp	r6, r3
 80051cc:	4682      	mov	sl, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	4690      	mov	r8, r2
 80051d2:	461f      	mov	r7, r3
 80051d4:	d838      	bhi.n	8005248 <__ssputs_r+0x84>
 80051d6:	898a      	ldrh	r2, [r1, #12]
 80051d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051dc:	d032      	beq.n	8005244 <__ssputs_r+0x80>
 80051de:	6825      	ldr	r5, [r4, #0]
 80051e0:	6909      	ldr	r1, [r1, #16]
 80051e2:	eba5 0901 	sub.w	r9, r5, r1
 80051e6:	6965      	ldr	r5, [r4, #20]
 80051e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051f0:	3301      	adds	r3, #1
 80051f2:	444b      	add	r3, r9
 80051f4:	106d      	asrs	r5, r5, #1
 80051f6:	429d      	cmp	r5, r3
 80051f8:	bf38      	it	cc
 80051fa:	461d      	movcc	r5, r3
 80051fc:	0553      	lsls	r3, r2, #21
 80051fe:	d531      	bpl.n	8005264 <__ssputs_r+0xa0>
 8005200:	4629      	mov	r1, r5
 8005202:	f7ff ff85 	bl	8005110 <_malloc_r>
 8005206:	4606      	mov	r6, r0
 8005208:	b950      	cbnz	r0, 8005220 <__ssputs_r+0x5c>
 800520a:	230c      	movs	r3, #12
 800520c:	f8ca 3000 	str.w	r3, [sl]
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005220:	6921      	ldr	r1, [r4, #16]
 8005222:	464a      	mov	r2, r9
 8005224:	f000 ff0e 	bl	8006044 <memcpy>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005232:	81a3      	strh	r3, [r4, #12]
 8005234:	6126      	str	r6, [r4, #16]
 8005236:	6165      	str	r5, [r4, #20]
 8005238:	444e      	add	r6, r9
 800523a:	eba5 0509 	sub.w	r5, r5, r9
 800523e:	6026      	str	r6, [r4, #0]
 8005240:	60a5      	str	r5, [r4, #8]
 8005242:	463e      	mov	r6, r7
 8005244:	42be      	cmp	r6, r7
 8005246:	d900      	bls.n	800524a <__ssputs_r+0x86>
 8005248:	463e      	mov	r6, r7
 800524a:	4632      	mov	r2, r6
 800524c:	6820      	ldr	r0, [r4, #0]
 800524e:	4641      	mov	r1, r8
 8005250:	f000 ff06 	bl	8006060 <memmove>
 8005254:	68a3      	ldr	r3, [r4, #8]
 8005256:	6822      	ldr	r2, [r4, #0]
 8005258:	1b9b      	subs	r3, r3, r6
 800525a:	4432      	add	r2, r6
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	2000      	movs	r0, #0
 8005262:	e7db      	b.n	800521c <__ssputs_r+0x58>
 8005264:	462a      	mov	r2, r5
 8005266:	f000 ff21 	bl	80060ac <_realloc_r>
 800526a:	4606      	mov	r6, r0
 800526c:	2800      	cmp	r0, #0
 800526e:	d1e1      	bne.n	8005234 <__ssputs_r+0x70>
 8005270:	6921      	ldr	r1, [r4, #16]
 8005272:	4650      	mov	r0, sl
 8005274:	f7ff fefc 	bl	8005070 <_free_r>
 8005278:	e7c7      	b.n	800520a <__ssputs_r+0x46>
	...

0800527c <_svfiprintf_r>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	4698      	mov	r8, r3
 8005282:	898b      	ldrh	r3, [r1, #12]
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	b09d      	sub	sp, #116	; 0x74
 8005288:	4607      	mov	r7, r0
 800528a:	460d      	mov	r5, r1
 800528c:	4614      	mov	r4, r2
 800528e:	d50e      	bpl.n	80052ae <_svfiprintf_r+0x32>
 8005290:	690b      	ldr	r3, [r1, #16]
 8005292:	b963      	cbnz	r3, 80052ae <_svfiprintf_r+0x32>
 8005294:	2140      	movs	r1, #64	; 0x40
 8005296:	f7ff ff3b 	bl	8005110 <_malloc_r>
 800529a:	6028      	str	r0, [r5, #0]
 800529c:	6128      	str	r0, [r5, #16]
 800529e:	b920      	cbnz	r0, 80052aa <_svfiprintf_r+0x2e>
 80052a0:	230c      	movs	r3, #12
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	e0d1      	b.n	800544e <_svfiprintf_r+0x1d2>
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	616b      	str	r3, [r5, #20]
 80052ae:	2300      	movs	r3, #0
 80052b0:	9309      	str	r3, [sp, #36]	; 0x24
 80052b2:	2320      	movs	r3, #32
 80052b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80052bc:	2330      	movs	r3, #48	; 0x30
 80052be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005468 <_svfiprintf_r+0x1ec>
 80052c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c6:	f04f 0901 	mov.w	r9, #1
 80052ca:	4623      	mov	r3, r4
 80052cc:	469a      	mov	sl, r3
 80052ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052d2:	b10a      	cbz	r2, 80052d8 <_svfiprintf_r+0x5c>
 80052d4:	2a25      	cmp	r2, #37	; 0x25
 80052d6:	d1f9      	bne.n	80052cc <_svfiprintf_r+0x50>
 80052d8:	ebba 0b04 	subs.w	fp, sl, r4
 80052dc:	d00b      	beq.n	80052f6 <_svfiprintf_r+0x7a>
 80052de:	465b      	mov	r3, fp
 80052e0:	4622      	mov	r2, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff ff6d 	bl	80051c4 <__ssputs_r>
 80052ea:	3001      	adds	r0, #1
 80052ec:	f000 80aa 	beq.w	8005444 <_svfiprintf_r+0x1c8>
 80052f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052f2:	445a      	add	r2, fp
 80052f4:	9209      	str	r2, [sp, #36]	; 0x24
 80052f6:	f89a 3000 	ldrb.w	r3, [sl]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a2 	beq.w	8005444 <_svfiprintf_r+0x1c8>
 8005300:	2300      	movs	r3, #0
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800530a:	f10a 0a01 	add.w	sl, sl, #1
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	9307      	str	r3, [sp, #28]
 8005312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005316:	931a      	str	r3, [sp, #104]	; 0x68
 8005318:	4654      	mov	r4, sl
 800531a:	2205      	movs	r2, #5
 800531c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005320:	4851      	ldr	r0, [pc, #324]	; (8005468 <_svfiprintf_r+0x1ec>)
 8005322:	f7fa ff55 	bl	80001d0 <memchr>
 8005326:	9a04      	ldr	r2, [sp, #16]
 8005328:	b9d8      	cbnz	r0, 8005362 <_svfiprintf_r+0xe6>
 800532a:	06d0      	lsls	r0, r2, #27
 800532c:	bf44      	itt	mi
 800532e:	2320      	movmi	r3, #32
 8005330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005334:	0711      	lsls	r1, r2, #28
 8005336:	bf44      	itt	mi
 8005338:	232b      	movmi	r3, #43	; 0x2b
 800533a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800533e:	f89a 3000 	ldrb.w	r3, [sl]
 8005342:	2b2a      	cmp	r3, #42	; 0x2a
 8005344:	d015      	beq.n	8005372 <_svfiprintf_r+0xf6>
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	4654      	mov	r4, sl
 800534a:	2000      	movs	r0, #0
 800534c:	f04f 0c0a 	mov.w	ip, #10
 8005350:	4621      	mov	r1, r4
 8005352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005356:	3b30      	subs	r3, #48	; 0x30
 8005358:	2b09      	cmp	r3, #9
 800535a:	d94e      	bls.n	80053fa <_svfiprintf_r+0x17e>
 800535c:	b1b0      	cbz	r0, 800538c <_svfiprintf_r+0x110>
 800535e:	9207      	str	r2, [sp, #28]
 8005360:	e014      	b.n	800538c <_svfiprintf_r+0x110>
 8005362:	eba0 0308 	sub.w	r3, r0, r8
 8005366:	fa09 f303 	lsl.w	r3, r9, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	9304      	str	r3, [sp, #16]
 800536e:	46a2      	mov	sl, r4
 8005370:	e7d2      	b.n	8005318 <_svfiprintf_r+0x9c>
 8005372:	9b03      	ldr	r3, [sp, #12]
 8005374:	1d19      	adds	r1, r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	9103      	str	r1, [sp, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	bfbb      	ittet	lt
 800537e:	425b      	neglt	r3, r3
 8005380:	f042 0202 	orrlt.w	r2, r2, #2
 8005384:	9307      	strge	r3, [sp, #28]
 8005386:	9307      	strlt	r3, [sp, #28]
 8005388:	bfb8      	it	lt
 800538a:	9204      	strlt	r2, [sp, #16]
 800538c:	7823      	ldrb	r3, [r4, #0]
 800538e:	2b2e      	cmp	r3, #46	; 0x2e
 8005390:	d10c      	bne.n	80053ac <_svfiprintf_r+0x130>
 8005392:	7863      	ldrb	r3, [r4, #1]
 8005394:	2b2a      	cmp	r3, #42	; 0x2a
 8005396:	d135      	bne.n	8005404 <_svfiprintf_r+0x188>
 8005398:	9b03      	ldr	r3, [sp, #12]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	9203      	str	r2, [sp, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bfb8      	it	lt
 80053a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a8:	3402      	adds	r4, #2
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005478 <_svfiprintf_r+0x1fc>
 80053b0:	7821      	ldrb	r1, [r4, #0]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4650      	mov	r0, sl
 80053b6:	f7fa ff0b 	bl	80001d0 <memchr>
 80053ba:	b140      	cbz	r0, 80053ce <_svfiprintf_r+0x152>
 80053bc:	2340      	movs	r3, #64	; 0x40
 80053be:	eba0 000a 	sub.w	r0, r0, sl
 80053c2:	fa03 f000 	lsl.w	r0, r3, r0
 80053c6:	9b04      	ldr	r3, [sp, #16]
 80053c8:	4303      	orrs	r3, r0
 80053ca:	3401      	adds	r4, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d2:	4826      	ldr	r0, [pc, #152]	; (800546c <_svfiprintf_r+0x1f0>)
 80053d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d8:	2206      	movs	r2, #6
 80053da:	f7fa fef9 	bl	80001d0 <memchr>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d038      	beq.n	8005454 <_svfiprintf_r+0x1d8>
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <_svfiprintf_r+0x1f4>)
 80053e4:	bb1b      	cbnz	r3, 800542e <_svfiprintf_r+0x1b2>
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3307      	adds	r3, #7
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	3308      	adds	r3, #8
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	4433      	add	r3, r6
 80053f6:	9309      	str	r3, [sp, #36]	; 0x24
 80053f8:	e767      	b.n	80052ca <_svfiprintf_r+0x4e>
 80053fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80053fe:	460c      	mov	r4, r1
 8005400:	2001      	movs	r0, #1
 8005402:	e7a5      	b.n	8005350 <_svfiprintf_r+0xd4>
 8005404:	2300      	movs	r3, #0
 8005406:	3401      	adds	r4, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	f04f 0c0a 	mov.w	ip, #10
 8005410:	4620      	mov	r0, r4
 8005412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005416:	3a30      	subs	r2, #48	; 0x30
 8005418:	2a09      	cmp	r2, #9
 800541a:	d903      	bls.n	8005424 <_svfiprintf_r+0x1a8>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0c5      	beq.n	80053ac <_svfiprintf_r+0x130>
 8005420:	9105      	str	r1, [sp, #20]
 8005422:	e7c3      	b.n	80053ac <_svfiprintf_r+0x130>
 8005424:	fb0c 2101 	mla	r1, ip, r1, r2
 8005428:	4604      	mov	r4, r0
 800542a:	2301      	movs	r3, #1
 800542c:	e7f0      	b.n	8005410 <_svfiprintf_r+0x194>
 800542e:	ab03      	add	r3, sp, #12
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	462a      	mov	r2, r5
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <_svfiprintf_r+0x1f8>)
 8005436:	a904      	add	r1, sp, #16
 8005438:	4638      	mov	r0, r7
 800543a:	f3af 8000 	nop.w
 800543e:	1c42      	adds	r2, r0, #1
 8005440:	4606      	mov	r6, r0
 8005442:	d1d6      	bne.n	80053f2 <_svfiprintf_r+0x176>
 8005444:	89ab      	ldrh	r3, [r5, #12]
 8005446:	065b      	lsls	r3, r3, #25
 8005448:	f53f af2c 	bmi.w	80052a4 <_svfiprintf_r+0x28>
 800544c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544e:	b01d      	add	sp, #116	; 0x74
 8005450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005454:	ab03      	add	r3, sp, #12
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	462a      	mov	r2, r5
 800545a:	4b06      	ldr	r3, [pc, #24]	; (8005474 <_svfiprintf_r+0x1f8>)
 800545c:	a904      	add	r1, sp, #16
 800545e:	4638      	mov	r0, r7
 8005460:	f000 f9d4 	bl	800580c <_printf_i>
 8005464:	e7eb      	b.n	800543e <_svfiprintf_r+0x1c2>
 8005466:	bf00      	nop
 8005468:	08006402 	.word	0x08006402
 800546c:	0800640c 	.word	0x0800640c
 8005470:	00000000 	.word	0x00000000
 8005474:	080051c5 	.word	0x080051c5
 8005478:	08006408 	.word	0x08006408

0800547c <__sfputc_r>:
 800547c:	6893      	ldr	r3, [r2, #8]
 800547e:	3b01      	subs	r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	b410      	push	{r4}
 8005484:	6093      	str	r3, [r2, #8]
 8005486:	da08      	bge.n	800549a <__sfputc_r+0x1e>
 8005488:	6994      	ldr	r4, [r2, #24]
 800548a:	42a3      	cmp	r3, r4
 800548c:	db01      	blt.n	8005492 <__sfputc_r+0x16>
 800548e:	290a      	cmp	r1, #10
 8005490:	d103      	bne.n	800549a <__sfputc_r+0x1e>
 8005492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005496:	f000 baef 	b.w	8005a78 <__swbuf_r>
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	1c58      	adds	r0, r3, #1
 800549e:	6010      	str	r0, [r2, #0]
 80054a0:	7019      	strb	r1, [r3, #0]
 80054a2:	4608      	mov	r0, r1
 80054a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <__sfputs_r>:
 80054aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ac:	4606      	mov	r6, r0
 80054ae:	460f      	mov	r7, r1
 80054b0:	4614      	mov	r4, r2
 80054b2:	18d5      	adds	r5, r2, r3
 80054b4:	42ac      	cmp	r4, r5
 80054b6:	d101      	bne.n	80054bc <__sfputs_r+0x12>
 80054b8:	2000      	movs	r0, #0
 80054ba:	e007      	b.n	80054cc <__sfputs_r+0x22>
 80054bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c0:	463a      	mov	r2, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7ff ffda 	bl	800547c <__sfputc_r>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d1f3      	bne.n	80054b4 <__sfputs_r+0xa>
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054d0 <_vfiprintf_r>:
 80054d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d4:	460d      	mov	r5, r1
 80054d6:	b09d      	sub	sp, #116	; 0x74
 80054d8:	4614      	mov	r4, r2
 80054da:	4698      	mov	r8, r3
 80054dc:	4606      	mov	r6, r0
 80054de:	b118      	cbz	r0, 80054e8 <_vfiprintf_r+0x18>
 80054e0:	6983      	ldr	r3, [r0, #24]
 80054e2:	b90b      	cbnz	r3, 80054e8 <_vfiprintf_r+0x18>
 80054e4:	f000 fcaa 	bl	8005e3c <__sinit>
 80054e8:	4b89      	ldr	r3, [pc, #548]	; (8005710 <_vfiprintf_r+0x240>)
 80054ea:	429d      	cmp	r5, r3
 80054ec:	d11b      	bne.n	8005526 <_vfiprintf_r+0x56>
 80054ee:	6875      	ldr	r5, [r6, #4]
 80054f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054f2:	07d9      	lsls	r1, r3, #31
 80054f4:	d405      	bmi.n	8005502 <_vfiprintf_r+0x32>
 80054f6:	89ab      	ldrh	r3, [r5, #12]
 80054f8:	059a      	lsls	r2, r3, #22
 80054fa:	d402      	bmi.n	8005502 <_vfiprintf_r+0x32>
 80054fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054fe:	f000 fd3b 	bl	8005f78 <__retarget_lock_acquire_recursive>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	d501      	bpl.n	800550c <_vfiprintf_r+0x3c>
 8005508:	692b      	ldr	r3, [r5, #16]
 800550a:	b9eb      	cbnz	r3, 8005548 <_vfiprintf_r+0x78>
 800550c:	4629      	mov	r1, r5
 800550e:	4630      	mov	r0, r6
 8005510:	f000 fb04 	bl	8005b1c <__swsetup_r>
 8005514:	b1c0      	cbz	r0, 8005548 <_vfiprintf_r+0x78>
 8005516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005518:	07dc      	lsls	r4, r3, #31
 800551a:	d50e      	bpl.n	800553a <_vfiprintf_r+0x6a>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	b01d      	add	sp, #116	; 0x74
 8005522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005526:	4b7b      	ldr	r3, [pc, #492]	; (8005714 <_vfiprintf_r+0x244>)
 8005528:	429d      	cmp	r5, r3
 800552a:	d101      	bne.n	8005530 <_vfiprintf_r+0x60>
 800552c:	68b5      	ldr	r5, [r6, #8]
 800552e:	e7df      	b.n	80054f0 <_vfiprintf_r+0x20>
 8005530:	4b79      	ldr	r3, [pc, #484]	; (8005718 <_vfiprintf_r+0x248>)
 8005532:	429d      	cmp	r5, r3
 8005534:	bf08      	it	eq
 8005536:	68f5      	ldreq	r5, [r6, #12]
 8005538:	e7da      	b.n	80054f0 <_vfiprintf_r+0x20>
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	0598      	lsls	r0, r3, #22
 800553e:	d4ed      	bmi.n	800551c <_vfiprintf_r+0x4c>
 8005540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005542:	f000 fd1a 	bl	8005f7a <__retarget_lock_release_recursive>
 8005546:	e7e9      	b.n	800551c <_vfiprintf_r+0x4c>
 8005548:	2300      	movs	r3, #0
 800554a:	9309      	str	r3, [sp, #36]	; 0x24
 800554c:	2320      	movs	r3, #32
 800554e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005552:	f8cd 800c 	str.w	r8, [sp, #12]
 8005556:	2330      	movs	r3, #48	; 0x30
 8005558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800571c <_vfiprintf_r+0x24c>
 800555c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005560:	f04f 0901 	mov.w	r9, #1
 8005564:	4623      	mov	r3, r4
 8005566:	469a      	mov	sl, r3
 8005568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800556c:	b10a      	cbz	r2, 8005572 <_vfiprintf_r+0xa2>
 800556e:	2a25      	cmp	r2, #37	; 0x25
 8005570:	d1f9      	bne.n	8005566 <_vfiprintf_r+0x96>
 8005572:	ebba 0b04 	subs.w	fp, sl, r4
 8005576:	d00b      	beq.n	8005590 <_vfiprintf_r+0xc0>
 8005578:	465b      	mov	r3, fp
 800557a:	4622      	mov	r2, r4
 800557c:	4629      	mov	r1, r5
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff ff93 	bl	80054aa <__sfputs_r>
 8005584:	3001      	adds	r0, #1
 8005586:	f000 80aa 	beq.w	80056de <_vfiprintf_r+0x20e>
 800558a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800558c:	445a      	add	r2, fp
 800558e:	9209      	str	r2, [sp, #36]	; 0x24
 8005590:	f89a 3000 	ldrb.w	r3, [sl]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a2 	beq.w	80056de <_vfiprintf_r+0x20e>
 800559a:	2300      	movs	r3, #0
 800559c:	f04f 32ff 	mov.w	r2, #4294967295
 80055a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055a4:	f10a 0a01 	add.w	sl, sl, #1
 80055a8:	9304      	str	r3, [sp, #16]
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055b0:	931a      	str	r3, [sp, #104]	; 0x68
 80055b2:	4654      	mov	r4, sl
 80055b4:	2205      	movs	r2, #5
 80055b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ba:	4858      	ldr	r0, [pc, #352]	; (800571c <_vfiprintf_r+0x24c>)
 80055bc:	f7fa fe08 	bl	80001d0 <memchr>
 80055c0:	9a04      	ldr	r2, [sp, #16]
 80055c2:	b9d8      	cbnz	r0, 80055fc <_vfiprintf_r+0x12c>
 80055c4:	06d1      	lsls	r1, r2, #27
 80055c6:	bf44      	itt	mi
 80055c8:	2320      	movmi	r3, #32
 80055ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ce:	0713      	lsls	r3, r2, #28
 80055d0:	bf44      	itt	mi
 80055d2:	232b      	movmi	r3, #43	; 0x2b
 80055d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055d8:	f89a 3000 	ldrb.w	r3, [sl]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d015      	beq.n	800560c <_vfiprintf_r+0x13c>
 80055e0:	9a07      	ldr	r2, [sp, #28]
 80055e2:	4654      	mov	r4, sl
 80055e4:	2000      	movs	r0, #0
 80055e6:	f04f 0c0a 	mov.w	ip, #10
 80055ea:	4621      	mov	r1, r4
 80055ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055f0:	3b30      	subs	r3, #48	; 0x30
 80055f2:	2b09      	cmp	r3, #9
 80055f4:	d94e      	bls.n	8005694 <_vfiprintf_r+0x1c4>
 80055f6:	b1b0      	cbz	r0, 8005626 <_vfiprintf_r+0x156>
 80055f8:	9207      	str	r2, [sp, #28]
 80055fa:	e014      	b.n	8005626 <_vfiprintf_r+0x156>
 80055fc:	eba0 0308 	sub.w	r3, r0, r8
 8005600:	fa09 f303 	lsl.w	r3, r9, r3
 8005604:	4313      	orrs	r3, r2
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	46a2      	mov	sl, r4
 800560a:	e7d2      	b.n	80055b2 <_vfiprintf_r+0xe2>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	1d19      	adds	r1, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	9103      	str	r1, [sp, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfbb      	ittet	lt
 8005618:	425b      	neglt	r3, r3
 800561a:	f042 0202 	orrlt.w	r2, r2, #2
 800561e:	9307      	strge	r3, [sp, #28]
 8005620:	9307      	strlt	r3, [sp, #28]
 8005622:	bfb8      	it	lt
 8005624:	9204      	strlt	r2, [sp, #16]
 8005626:	7823      	ldrb	r3, [r4, #0]
 8005628:	2b2e      	cmp	r3, #46	; 0x2e
 800562a:	d10c      	bne.n	8005646 <_vfiprintf_r+0x176>
 800562c:	7863      	ldrb	r3, [r4, #1]
 800562e:	2b2a      	cmp	r3, #42	; 0x2a
 8005630:	d135      	bne.n	800569e <_vfiprintf_r+0x1ce>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	1d1a      	adds	r2, r3, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	9203      	str	r2, [sp, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfb8      	it	lt
 800563e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005642:	3402      	adds	r4, #2
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800572c <_vfiprintf_r+0x25c>
 800564a:	7821      	ldrb	r1, [r4, #0]
 800564c:	2203      	movs	r2, #3
 800564e:	4650      	mov	r0, sl
 8005650:	f7fa fdbe 	bl	80001d0 <memchr>
 8005654:	b140      	cbz	r0, 8005668 <_vfiprintf_r+0x198>
 8005656:	2340      	movs	r3, #64	; 0x40
 8005658:	eba0 000a 	sub.w	r0, r0, sl
 800565c:	fa03 f000 	lsl.w	r0, r3, r0
 8005660:	9b04      	ldr	r3, [sp, #16]
 8005662:	4303      	orrs	r3, r0
 8005664:	3401      	adds	r4, #1
 8005666:	9304      	str	r3, [sp, #16]
 8005668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566c:	482c      	ldr	r0, [pc, #176]	; (8005720 <_vfiprintf_r+0x250>)
 800566e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005672:	2206      	movs	r2, #6
 8005674:	f7fa fdac 	bl	80001d0 <memchr>
 8005678:	2800      	cmp	r0, #0
 800567a:	d03f      	beq.n	80056fc <_vfiprintf_r+0x22c>
 800567c:	4b29      	ldr	r3, [pc, #164]	; (8005724 <_vfiprintf_r+0x254>)
 800567e:	bb1b      	cbnz	r3, 80056c8 <_vfiprintf_r+0x1f8>
 8005680:	9b03      	ldr	r3, [sp, #12]
 8005682:	3307      	adds	r3, #7
 8005684:	f023 0307 	bic.w	r3, r3, #7
 8005688:	3308      	adds	r3, #8
 800568a:	9303      	str	r3, [sp, #12]
 800568c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800568e:	443b      	add	r3, r7
 8005690:	9309      	str	r3, [sp, #36]	; 0x24
 8005692:	e767      	b.n	8005564 <_vfiprintf_r+0x94>
 8005694:	fb0c 3202 	mla	r2, ip, r2, r3
 8005698:	460c      	mov	r4, r1
 800569a:	2001      	movs	r0, #1
 800569c:	e7a5      	b.n	80055ea <_vfiprintf_r+0x11a>
 800569e:	2300      	movs	r3, #0
 80056a0:	3401      	adds	r4, #1
 80056a2:	9305      	str	r3, [sp, #20]
 80056a4:	4619      	mov	r1, r3
 80056a6:	f04f 0c0a 	mov.w	ip, #10
 80056aa:	4620      	mov	r0, r4
 80056ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056b0:	3a30      	subs	r2, #48	; 0x30
 80056b2:	2a09      	cmp	r2, #9
 80056b4:	d903      	bls.n	80056be <_vfiprintf_r+0x1ee>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0c5      	beq.n	8005646 <_vfiprintf_r+0x176>
 80056ba:	9105      	str	r1, [sp, #20]
 80056bc:	e7c3      	b.n	8005646 <_vfiprintf_r+0x176>
 80056be:	fb0c 2101 	mla	r1, ip, r1, r2
 80056c2:	4604      	mov	r4, r0
 80056c4:	2301      	movs	r3, #1
 80056c6:	e7f0      	b.n	80056aa <_vfiprintf_r+0x1da>
 80056c8:	ab03      	add	r3, sp, #12
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	462a      	mov	r2, r5
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <_vfiprintf_r+0x258>)
 80056d0:	a904      	add	r1, sp, #16
 80056d2:	4630      	mov	r0, r6
 80056d4:	f3af 8000 	nop.w
 80056d8:	4607      	mov	r7, r0
 80056da:	1c78      	adds	r0, r7, #1
 80056dc:	d1d6      	bne.n	800568c <_vfiprintf_r+0x1bc>
 80056de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e0:	07d9      	lsls	r1, r3, #31
 80056e2:	d405      	bmi.n	80056f0 <_vfiprintf_r+0x220>
 80056e4:	89ab      	ldrh	r3, [r5, #12]
 80056e6:	059a      	lsls	r2, r3, #22
 80056e8:	d402      	bmi.n	80056f0 <_vfiprintf_r+0x220>
 80056ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056ec:	f000 fc45 	bl	8005f7a <__retarget_lock_release_recursive>
 80056f0:	89ab      	ldrh	r3, [r5, #12]
 80056f2:	065b      	lsls	r3, r3, #25
 80056f4:	f53f af12 	bmi.w	800551c <_vfiprintf_r+0x4c>
 80056f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056fa:	e711      	b.n	8005520 <_vfiprintf_r+0x50>
 80056fc:	ab03      	add	r3, sp, #12
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	462a      	mov	r2, r5
 8005702:	4b09      	ldr	r3, [pc, #36]	; (8005728 <_vfiprintf_r+0x258>)
 8005704:	a904      	add	r1, sp, #16
 8005706:	4630      	mov	r0, r6
 8005708:	f000 f880 	bl	800580c <_printf_i>
 800570c:	e7e4      	b.n	80056d8 <_vfiprintf_r+0x208>
 800570e:	bf00      	nop
 8005710:	08006458 	.word	0x08006458
 8005714:	08006478 	.word	0x08006478
 8005718:	08006438 	.word	0x08006438
 800571c:	08006402 	.word	0x08006402
 8005720:	0800640c 	.word	0x0800640c
 8005724:	00000000 	.word	0x00000000
 8005728:	080054ab 	.word	0x080054ab
 800572c:	08006408 	.word	0x08006408

08005730 <_printf_common>:
 8005730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005734:	4616      	mov	r6, r2
 8005736:	4699      	mov	r9, r3
 8005738:	688a      	ldr	r2, [r1, #8]
 800573a:	690b      	ldr	r3, [r1, #16]
 800573c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005740:	4293      	cmp	r3, r2
 8005742:	bfb8      	it	lt
 8005744:	4613      	movlt	r3, r2
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800574c:	4607      	mov	r7, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b10a      	cbz	r2, 8005756 <_printf_common+0x26>
 8005752:	3301      	adds	r3, #1
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	0699      	lsls	r1, r3, #26
 800575a:	bf42      	ittt	mi
 800575c:	6833      	ldrmi	r3, [r6, #0]
 800575e:	3302      	addmi	r3, #2
 8005760:	6033      	strmi	r3, [r6, #0]
 8005762:	6825      	ldr	r5, [r4, #0]
 8005764:	f015 0506 	ands.w	r5, r5, #6
 8005768:	d106      	bne.n	8005778 <_printf_common+0x48>
 800576a:	f104 0a19 	add.w	sl, r4, #25
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	6832      	ldr	r2, [r6, #0]
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	42ab      	cmp	r3, r5
 8005776:	dc26      	bgt.n	80057c6 <_printf_common+0x96>
 8005778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800577c:	1e13      	subs	r3, r2, #0
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	bf18      	it	ne
 8005782:	2301      	movne	r3, #1
 8005784:	0692      	lsls	r2, r2, #26
 8005786:	d42b      	bmi.n	80057e0 <_printf_common+0xb0>
 8005788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800578c:	4649      	mov	r1, r9
 800578e:	4638      	mov	r0, r7
 8005790:	47c0      	blx	r8
 8005792:	3001      	adds	r0, #1
 8005794:	d01e      	beq.n	80057d4 <_printf_common+0xa4>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	68e5      	ldr	r5, [r4, #12]
 800579a:	6832      	ldr	r2, [r6, #0]
 800579c:	f003 0306 	and.w	r3, r3, #6
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	bf08      	it	eq
 80057a4:	1aad      	subeq	r5, r5, r2
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	bf0c      	ite	eq
 80057ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057b0:	2500      	movne	r5, #0
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bfc4      	itt	gt
 80057b6:	1a9b      	subgt	r3, r3, r2
 80057b8:	18ed      	addgt	r5, r5, r3
 80057ba:	2600      	movs	r6, #0
 80057bc:	341a      	adds	r4, #26
 80057be:	42b5      	cmp	r5, r6
 80057c0:	d11a      	bne.n	80057f8 <_printf_common+0xc8>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e008      	b.n	80057d8 <_printf_common+0xa8>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4652      	mov	r2, sl
 80057ca:	4649      	mov	r1, r9
 80057cc:	4638      	mov	r0, r7
 80057ce:	47c0      	blx	r8
 80057d0:	3001      	adds	r0, #1
 80057d2:	d103      	bne.n	80057dc <_printf_common+0xac>
 80057d4:	f04f 30ff 	mov.w	r0, #4294967295
 80057d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057dc:	3501      	adds	r5, #1
 80057de:	e7c6      	b.n	800576e <_printf_common+0x3e>
 80057e0:	18e1      	adds	r1, r4, r3
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	2030      	movs	r0, #48	; 0x30
 80057e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ea:	4422      	add	r2, r4
 80057ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f4:	3302      	adds	r3, #2
 80057f6:	e7c7      	b.n	8005788 <_printf_common+0x58>
 80057f8:	2301      	movs	r3, #1
 80057fa:	4622      	mov	r2, r4
 80057fc:	4649      	mov	r1, r9
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	3001      	adds	r0, #1
 8005804:	d0e6      	beq.n	80057d4 <_printf_common+0xa4>
 8005806:	3601      	adds	r6, #1
 8005808:	e7d9      	b.n	80057be <_printf_common+0x8e>
	...

0800580c <_printf_i>:
 800580c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	4691      	mov	r9, r2
 8005814:	7e27      	ldrb	r7, [r4, #24]
 8005816:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005818:	2f78      	cmp	r7, #120	; 0x78
 800581a:	4680      	mov	r8, r0
 800581c:	469a      	mov	sl, r3
 800581e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005822:	d807      	bhi.n	8005834 <_printf_i+0x28>
 8005824:	2f62      	cmp	r7, #98	; 0x62
 8005826:	d80a      	bhi.n	800583e <_printf_i+0x32>
 8005828:	2f00      	cmp	r7, #0
 800582a:	f000 80d8 	beq.w	80059de <_printf_i+0x1d2>
 800582e:	2f58      	cmp	r7, #88	; 0x58
 8005830:	f000 80a3 	beq.w	800597a <_printf_i+0x16e>
 8005834:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800583c:	e03a      	b.n	80058b4 <_printf_i+0xa8>
 800583e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005842:	2b15      	cmp	r3, #21
 8005844:	d8f6      	bhi.n	8005834 <_printf_i+0x28>
 8005846:	a001      	add	r0, pc, #4	; (adr r0, 800584c <_printf_i+0x40>)
 8005848:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800584c:	080058a5 	.word	0x080058a5
 8005850:	080058b9 	.word	0x080058b9
 8005854:	08005835 	.word	0x08005835
 8005858:	08005835 	.word	0x08005835
 800585c:	08005835 	.word	0x08005835
 8005860:	08005835 	.word	0x08005835
 8005864:	080058b9 	.word	0x080058b9
 8005868:	08005835 	.word	0x08005835
 800586c:	08005835 	.word	0x08005835
 8005870:	08005835 	.word	0x08005835
 8005874:	08005835 	.word	0x08005835
 8005878:	080059c5 	.word	0x080059c5
 800587c:	080058e9 	.word	0x080058e9
 8005880:	080059a7 	.word	0x080059a7
 8005884:	08005835 	.word	0x08005835
 8005888:	08005835 	.word	0x08005835
 800588c:	080059e7 	.word	0x080059e7
 8005890:	08005835 	.word	0x08005835
 8005894:	080058e9 	.word	0x080058e9
 8005898:	08005835 	.word	0x08005835
 800589c:	08005835 	.word	0x08005835
 80058a0:	080059af 	.word	0x080059af
 80058a4:	680b      	ldr	r3, [r1, #0]
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	600a      	str	r2, [r1, #0]
 80058ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0a3      	b.n	8005a00 <_printf_i+0x1f4>
 80058b8:	6825      	ldr	r5, [r4, #0]
 80058ba:	6808      	ldr	r0, [r1, #0]
 80058bc:	062e      	lsls	r6, r5, #24
 80058be:	f100 0304 	add.w	r3, r0, #4
 80058c2:	d50a      	bpl.n	80058da <_printf_i+0xce>
 80058c4:	6805      	ldr	r5, [r0, #0]
 80058c6:	600b      	str	r3, [r1, #0]
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	da03      	bge.n	80058d4 <_printf_i+0xc8>
 80058cc:	232d      	movs	r3, #45	; 0x2d
 80058ce:	426d      	negs	r5, r5
 80058d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058d4:	485e      	ldr	r0, [pc, #376]	; (8005a50 <_printf_i+0x244>)
 80058d6:	230a      	movs	r3, #10
 80058d8:	e019      	b.n	800590e <_printf_i+0x102>
 80058da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058de:	6805      	ldr	r5, [r0, #0]
 80058e0:	600b      	str	r3, [r1, #0]
 80058e2:	bf18      	it	ne
 80058e4:	b22d      	sxthne	r5, r5
 80058e6:	e7ef      	b.n	80058c8 <_printf_i+0xbc>
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	6825      	ldr	r5, [r4, #0]
 80058ec:	1d18      	adds	r0, r3, #4
 80058ee:	6008      	str	r0, [r1, #0]
 80058f0:	0628      	lsls	r0, r5, #24
 80058f2:	d501      	bpl.n	80058f8 <_printf_i+0xec>
 80058f4:	681d      	ldr	r5, [r3, #0]
 80058f6:	e002      	b.n	80058fe <_printf_i+0xf2>
 80058f8:	0669      	lsls	r1, r5, #25
 80058fa:	d5fb      	bpl.n	80058f4 <_printf_i+0xe8>
 80058fc:	881d      	ldrh	r5, [r3, #0]
 80058fe:	4854      	ldr	r0, [pc, #336]	; (8005a50 <_printf_i+0x244>)
 8005900:	2f6f      	cmp	r7, #111	; 0x6f
 8005902:	bf0c      	ite	eq
 8005904:	2308      	moveq	r3, #8
 8005906:	230a      	movne	r3, #10
 8005908:	2100      	movs	r1, #0
 800590a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800590e:	6866      	ldr	r6, [r4, #4]
 8005910:	60a6      	str	r6, [r4, #8]
 8005912:	2e00      	cmp	r6, #0
 8005914:	bfa2      	ittt	ge
 8005916:	6821      	ldrge	r1, [r4, #0]
 8005918:	f021 0104 	bicge.w	r1, r1, #4
 800591c:	6021      	strge	r1, [r4, #0]
 800591e:	b90d      	cbnz	r5, 8005924 <_printf_i+0x118>
 8005920:	2e00      	cmp	r6, #0
 8005922:	d04d      	beq.n	80059c0 <_printf_i+0x1b4>
 8005924:	4616      	mov	r6, r2
 8005926:	fbb5 f1f3 	udiv	r1, r5, r3
 800592a:	fb03 5711 	mls	r7, r3, r1, r5
 800592e:	5dc7      	ldrb	r7, [r0, r7]
 8005930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005934:	462f      	mov	r7, r5
 8005936:	42bb      	cmp	r3, r7
 8005938:	460d      	mov	r5, r1
 800593a:	d9f4      	bls.n	8005926 <_printf_i+0x11a>
 800593c:	2b08      	cmp	r3, #8
 800593e:	d10b      	bne.n	8005958 <_printf_i+0x14c>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	07df      	lsls	r7, r3, #31
 8005944:	d508      	bpl.n	8005958 <_printf_i+0x14c>
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	6861      	ldr	r1, [r4, #4]
 800594a:	4299      	cmp	r1, r3
 800594c:	bfde      	ittt	le
 800594e:	2330      	movle	r3, #48	; 0x30
 8005950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005954:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005958:	1b92      	subs	r2, r2, r6
 800595a:	6122      	str	r2, [r4, #16]
 800595c:	f8cd a000 	str.w	sl, [sp]
 8005960:	464b      	mov	r3, r9
 8005962:	aa03      	add	r2, sp, #12
 8005964:	4621      	mov	r1, r4
 8005966:	4640      	mov	r0, r8
 8005968:	f7ff fee2 	bl	8005730 <_printf_common>
 800596c:	3001      	adds	r0, #1
 800596e:	d14c      	bne.n	8005a0a <_printf_i+0x1fe>
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	b004      	add	sp, #16
 8005976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800597a:	4835      	ldr	r0, [pc, #212]	; (8005a50 <_printf_i+0x244>)
 800597c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	680e      	ldr	r6, [r1, #0]
 8005984:	061f      	lsls	r7, r3, #24
 8005986:	f856 5b04 	ldr.w	r5, [r6], #4
 800598a:	600e      	str	r6, [r1, #0]
 800598c:	d514      	bpl.n	80059b8 <_printf_i+0x1ac>
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	bf44      	itt	mi
 8005992:	f043 0320 	orrmi.w	r3, r3, #32
 8005996:	6023      	strmi	r3, [r4, #0]
 8005998:	b91d      	cbnz	r5, 80059a2 <_printf_i+0x196>
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	f023 0320 	bic.w	r3, r3, #32
 80059a0:	6023      	str	r3, [r4, #0]
 80059a2:	2310      	movs	r3, #16
 80059a4:	e7b0      	b.n	8005908 <_printf_i+0xfc>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f043 0320 	orr.w	r3, r3, #32
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	2378      	movs	r3, #120	; 0x78
 80059b0:	4828      	ldr	r0, [pc, #160]	; (8005a54 <_printf_i+0x248>)
 80059b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059b6:	e7e3      	b.n	8005980 <_printf_i+0x174>
 80059b8:	065e      	lsls	r6, r3, #25
 80059ba:	bf48      	it	mi
 80059bc:	b2ad      	uxthmi	r5, r5
 80059be:	e7e6      	b.n	800598e <_printf_i+0x182>
 80059c0:	4616      	mov	r6, r2
 80059c2:	e7bb      	b.n	800593c <_printf_i+0x130>
 80059c4:	680b      	ldr	r3, [r1, #0]
 80059c6:	6826      	ldr	r6, [r4, #0]
 80059c8:	6960      	ldr	r0, [r4, #20]
 80059ca:	1d1d      	adds	r5, r3, #4
 80059cc:	600d      	str	r5, [r1, #0]
 80059ce:	0635      	lsls	r5, r6, #24
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	d501      	bpl.n	80059d8 <_printf_i+0x1cc>
 80059d4:	6018      	str	r0, [r3, #0]
 80059d6:	e002      	b.n	80059de <_printf_i+0x1d2>
 80059d8:	0671      	lsls	r1, r6, #25
 80059da:	d5fb      	bpl.n	80059d4 <_printf_i+0x1c8>
 80059dc:	8018      	strh	r0, [r3, #0]
 80059de:	2300      	movs	r3, #0
 80059e0:	6123      	str	r3, [r4, #16]
 80059e2:	4616      	mov	r6, r2
 80059e4:	e7ba      	b.n	800595c <_printf_i+0x150>
 80059e6:	680b      	ldr	r3, [r1, #0]
 80059e8:	1d1a      	adds	r2, r3, #4
 80059ea:	600a      	str	r2, [r1, #0]
 80059ec:	681e      	ldr	r6, [r3, #0]
 80059ee:	6862      	ldr	r2, [r4, #4]
 80059f0:	2100      	movs	r1, #0
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7fa fbec 	bl	80001d0 <memchr>
 80059f8:	b108      	cbz	r0, 80059fe <_printf_i+0x1f2>
 80059fa:	1b80      	subs	r0, r0, r6
 80059fc:	6060      	str	r0, [r4, #4]
 80059fe:	6863      	ldr	r3, [r4, #4]
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	2300      	movs	r3, #0
 8005a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a08:	e7a8      	b.n	800595c <_printf_i+0x150>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4649      	mov	r1, r9
 8005a10:	4640      	mov	r0, r8
 8005a12:	47d0      	blx	sl
 8005a14:	3001      	adds	r0, #1
 8005a16:	d0ab      	beq.n	8005970 <_printf_i+0x164>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	d413      	bmi.n	8005a46 <_printf_i+0x23a>
 8005a1e:	68e0      	ldr	r0, [r4, #12]
 8005a20:	9b03      	ldr	r3, [sp, #12]
 8005a22:	4298      	cmp	r0, r3
 8005a24:	bfb8      	it	lt
 8005a26:	4618      	movlt	r0, r3
 8005a28:	e7a4      	b.n	8005974 <_printf_i+0x168>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4632      	mov	r2, r6
 8005a2e:	4649      	mov	r1, r9
 8005a30:	4640      	mov	r0, r8
 8005a32:	47d0      	blx	sl
 8005a34:	3001      	adds	r0, #1
 8005a36:	d09b      	beq.n	8005970 <_printf_i+0x164>
 8005a38:	3501      	adds	r5, #1
 8005a3a:	68e3      	ldr	r3, [r4, #12]
 8005a3c:	9903      	ldr	r1, [sp, #12]
 8005a3e:	1a5b      	subs	r3, r3, r1
 8005a40:	42ab      	cmp	r3, r5
 8005a42:	dcf2      	bgt.n	8005a2a <_printf_i+0x21e>
 8005a44:	e7eb      	b.n	8005a1e <_printf_i+0x212>
 8005a46:	2500      	movs	r5, #0
 8005a48:	f104 0619 	add.w	r6, r4, #25
 8005a4c:	e7f5      	b.n	8005a3a <_printf_i+0x22e>
 8005a4e:	bf00      	nop
 8005a50:	08006413 	.word	0x08006413
 8005a54:	08006424 	.word	0x08006424

08005a58 <_sbrk_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d06      	ldr	r5, [pc, #24]	; (8005a74 <_sbrk_r+0x1c>)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	4604      	mov	r4, r0
 8005a60:	4608      	mov	r0, r1
 8005a62:	602b      	str	r3, [r5, #0]
 8005a64:	f7fb fb82 	bl	800116c <_sbrk>
 8005a68:	1c43      	adds	r3, r0, #1
 8005a6a:	d102      	bne.n	8005a72 <_sbrk_r+0x1a>
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	b103      	cbz	r3, 8005a72 <_sbrk_r+0x1a>
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20000530 	.word	0x20000530

08005a78 <__swbuf_r>:
 8005a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7a:	460e      	mov	r6, r1
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	4605      	mov	r5, r0
 8005a80:	b118      	cbz	r0, 8005a8a <__swbuf_r+0x12>
 8005a82:	6983      	ldr	r3, [r0, #24]
 8005a84:	b90b      	cbnz	r3, 8005a8a <__swbuf_r+0x12>
 8005a86:	f000 f9d9 	bl	8005e3c <__sinit>
 8005a8a:	4b21      	ldr	r3, [pc, #132]	; (8005b10 <__swbuf_r+0x98>)
 8005a8c:	429c      	cmp	r4, r3
 8005a8e:	d12b      	bne.n	8005ae8 <__swbuf_r+0x70>
 8005a90:	686c      	ldr	r4, [r5, #4]
 8005a92:	69a3      	ldr	r3, [r4, #24]
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	071a      	lsls	r2, r3, #28
 8005a9a:	d52f      	bpl.n	8005afc <__swbuf_r+0x84>
 8005a9c:	6923      	ldr	r3, [r4, #16]
 8005a9e:	b36b      	cbz	r3, 8005afc <__swbuf_r+0x84>
 8005aa0:	6923      	ldr	r3, [r4, #16]
 8005aa2:	6820      	ldr	r0, [r4, #0]
 8005aa4:	1ac0      	subs	r0, r0, r3
 8005aa6:	6963      	ldr	r3, [r4, #20]
 8005aa8:	b2f6      	uxtb	r6, r6
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	4637      	mov	r7, r6
 8005aae:	dc04      	bgt.n	8005aba <__swbuf_r+0x42>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 f92e 	bl	8005d14 <_fflush_r>
 8005ab8:	bb30      	cbnz	r0, 8005b08 <__swbuf_r+0x90>
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60a3      	str	r3, [r4, #8]
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	701e      	strb	r6, [r3, #0]
 8005ac8:	6963      	ldr	r3, [r4, #20]
 8005aca:	3001      	adds	r0, #1
 8005acc:	4283      	cmp	r3, r0
 8005ace:	d004      	beq.n	8005ada <__swbuf_r+0x62>
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	07db      	lsls	r3, r3, #31
 8005ad4:	d506      	bpl.n	8005ae4 <__swbuf_r+0x6c>
 8005ad6:	2e0a      	cmp	r6, #10
 8005ad8:	d104      	bne.n	8005ae4 <__swbuf_r+0x6c>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f919 	bl	8005d14 <_fflush_r>
 8005ae2:	b988      	cbnz	r0, 8005b08 <__swbuf_r+0x90>
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <__swbuf_r+0x9c>)
 8005aea:	429c      	cmp	r4, r3
 8005aec:	d101      	bne.n	8005af2 <__swbuf_r+0x7a>
 8005aee:	68ac      	ldr	r4, [r5, #8]
 8005af0:	e7cf      	b.n	8005a92 <__swbuf_r+0x1a>
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <__swbuf_r+0xa0>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	bf08      	it	eq
 8005af8:	68ec      	ldreq	r4, [r5, #12]
 8005afa:	e7ca      	b.n	8005a92 <__swbuf_r+0x1a>
 8005afc:	4621      	mov	r1, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f80c 	bl	8005b1c <__swsetup_r>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d0cb      	beq.n	8005aa0 <__swbuf_r+0x28>
 8005b08:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0c:	e7ea      	b.n	8005ae4 <__swbuf_r+0x6c>
 8005b0e:	bf00      	nop
 8005b10:	08006458 	.word	0x08006458
 8005b14:	08006478 	.word	0x08006478
 8005b18:	08006438 	.word	0x08006438

08005b1c <__swsetup_r>:
 8005b1c:	4b32      	ldr	r3, [pc, #200]	; (8005be8 <__swsetup_r+0xcc>)
 8005b1e:	b570      	push	{r4, r5, r6, lr}
 8005b20:	681d      	ldr	r5, [r3, #0]
 8005b22:	4606      	mov	r6, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	b125      	cbz	r5, 8005b32 <__swsetup_r+0x16>
 8005b28:	69ab      	ldr	r3, [r5, #24]
 8005b2a:	b913      	cbnz	r3, 8005b32 <__swsetup_r+0x16>
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 f985 	bl	8005e3c <__sinit>
 8005b32:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <__swsetup_r+0xd0>)
 8005b34:	429c      	cmp	r4, r3
 8005b36:	d10f      	bne.n	8005b58 <__swsetup_r+0x3c>
 8005b38:	686c      	ldr	r4, [r5, #4]
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b40:	0719      	lsls	r1, r3, #28
 8005b42:	d42c      	bmi.n	8005b9e <__swsetup_r+0x82>
 8005b44:	06dd      	lsls	r5, r3, #27
 8005b46:	d411      	bmi.n	8005b6c <__swsetup_r+0x50>
 8005b48:	2309      	movs	r3, #9
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	f04f 30ff 	mov.w	r0, #4294967295
 8005b56:	e03e      	b.n	8005bd6 <__swsetup_r+0xba>
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <__swsetup_r+0xd4>)
 8005b5a:	429c      	cmp	r4, r3
 8005b5c:	d101      	bne.n	8005b62 <__swsetup_r+0x46>
 8005b5e:	68ac      	ldr	r4, [r5, #8]
 8005b60:	e7eb      	b.n	8005b3a <__swsetup_r+0x1e>
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <__swsetup_r+0xd8>)
 8005b64:	429c      	cmp	r4, r3
 8005b66:	bf08      	it	eq
 8005b68:	68ec      	ldreq	r4, [r5, #12]
 8005b6a:	e7e6      	b.n	8005b3a <__swsetup_r+0x1e>
 8005b6c:	0758      	lsls	r0, r3, #29
 8005b6e:	d512      	bpl.n	8005b96 <__swsetup_r+0x7a>
 8005b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b72:	b141      	cbz	r1, 8005b86 <__swsetup_r+0x6a>
 8005b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b78:	4299      	cmp	r1, r3
 8005b7a:	d002      	beq.n	8005b82 <__swsetup_r+0x66>
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7ff fa77 	bl	8005070 <_free_r>
 8005b82:	2300      	movs	r3, #0
 8005b84:	6363      	str	r3, [r4, #52]	; 0x34
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	f043 0308 	orr.w	r3, r3, #8
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	b94b      	cbnz	r3, 8005bb6 <__swsetup_r+0x9a>
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bac:	d003      	beq.n	8005bb6 <__swsetup_r+0x9a>
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f000 fa07 	bl	8005fc4 <__smakebuf_r>
 8005bb6:	89a0      	ldrh	r0, [r4, #12]
 8005bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bbc:	f010 0301 	ands.w	r3, r0, #1
 8005bc0:	d00a      	beq.n	8005bd8 <__swsetup_r+0xbc>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60a3      	str	r3, [r4, #8]
 8005bc6:	6963      	ldr	r3, [r4, #20]
 8005bc8:	425b      	negs	r3, r3
 8005bca:	61a3      	str	r3, [r4, #24]
 8005bcc:	6923      	ldr	r3, [r4, #16]
 8005bce:	b943      	cbnz	r3, 8005be2 <__swsetup_r+0xc6>
 8005bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bd4:	d1ba      	bne.n	8005b4c <__swsetup_r+0x30>
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}
 8005bd8:	0781      	lsls	r1, r0, #30
 8005bda:	bf58      	it	pl
 8005bdc:	6963      	ldrpl	r3, [r4, #20]
 8005bde:	60a3      	str	r3, [r4, #8]
 8005be0:	e7f4      	b.n	8005bcc <__swsetup_r+0xb0>
 8005be2:	2000      	movs	r0, #0
 8005be4:	e7f7      	b.n	8005bd6 <__swsetup_r+0xba>
 8005be6:	bf00      	nop
 8005be8:	20000018 	.word	0x20000018
 8005bec:	08006458 	.word	0x08006458
 8005bf0:	08006478 	.word	0x08006478
 8005bf4:	08006438 	.word	0x08006438

08005bf8 <abort>:
 8005bf8:	b508      	push	{r3, lr}
 8005bfa:	2006      	movs	r0, #6
 8005bfc:	f000 faa4 	bl	8006148 <raise>
 8005c00:	2001      	movs	r0, #1
 8005c02:	f7fb fa3b 	bl	800107c <_exit>
	...

08005c08 <__sflush_r>:
 8005c08:	898a      	ldrh	r2, [r1, #12]
 8005c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	4605      	mov	r5, r0
 8005c10:	0710      	lsls	r0, r2, #28
 8005c12:	460c      	mov	r4, r1
 8005c14:	d458      	bmi.n	8005cc8 <__sflush_r+0xc0>
 8005c16:	684b      	ldr	r3, [r1, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dc05      	bgt.n	8005c28 <__sflush_r+0x20>
 8005c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	dc02      	bgt.n	8005c28 <__sflush_r+0x20>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	d0f9      	beq.n	8005c22 <__sflush_r+0x1a>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c34:	682f      	ldr	r7, [r5, #0]
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	d032      	beq.n	8005ca0 <__sflush_r+0x98>
 8005c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	075a      	lsls	r2, r3, #29
 8005c40:	d505      	bpl.n	8005c4e <__sflush_r+0x46>
 8005c42:	6863      	ldr	r3, [r4, #4]
 8005c44:	1ac0      	subs	r0, r0, r3
 8005c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c48:	b10b      	cbz	r3, 8005c4e <__sflush_r+0x46>
 8005c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c4c:	1ac0      	subs	r0, r0, r3
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4602      	mov	r2, r0
 8005c52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c54:	6a21      	ldr	r1, [r4, #32]
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b0      	blx	r6
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	89a3      	ldrh	r3, [r4, #12]
 8005c5e:	d106      	bne.n	8005c6e <__sflush_r+0x66>
 8005c60:	6829      	ldr	r1, [r5, #0]
 8005c62:	291d      	cmp	r1, #29
 8005c64:	d82c      	bhi.n	8005cc0 <__sflush_r+0xb8>
 8005c66:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <__sflush_r+0x108>)
 8005c68:	40ca      	lsrs	r2, r1
 8005c6a:	07d6      	lsls	r6, r2, #31
 8005c6c:	d528      	bpl.n	8005cc0 <__sflush_r+0xb8>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	6062      	str	r2, [r4, #4]
 8005c72:	04d9      	lsls	r1, r3, #19
 8005c74:	6922      	ldr	r2, [r4, #16]
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	d504      	bpl.n	8005c84 <__sflush_r+0x7c>
 8005c7a:	1c42      	adds	r2, r0, #1
 8005c7c:	d101      	bne.n	8005c82 <__sflush_r+0x7a>
 8005c7e:	682b      	ldr	r3, [r5, #0]
 8005c80:	b903      	cbnz	r3, 8005c84 <__sflush_r+0x7c>
 8005c82:	6560      	str	r0, [r4, #84]	; 0x54
 8005c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c86:	602f      	str	r7, [r5, #0]
 8005c88:	2900      	cmp	r1, #0
 8005c8a:	d0ca      	beq.n	8005c22 <__sflush_r+0x1a>
 8005c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c90:	4299      	cmp	r1, r3
 8005c92:	d002      	beq.n	8005c9a <__sflush_r+0x92>
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7ff f9eb 	bl	8005070 <_free_r>
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005c9e:	e7c1      	b.n	8005c24 <__sflush_r+0x1c>
 8005ca0:	6a21      	ldr	r1, [r4, #32]
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	1c41      	adds	r1, r0, #1
 8005caa:	d1c7      	bne.n	8005c3c <__sflush_r+0x34>
 8005cac:	682b      	ldr	r3, [r5, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0c4      	beq.n	8005c3c <__sflush_r+0x34>
 8005cb2:	2b1d      	cmp	r3, #29
 8005cb4:	d001      	beq.n	8005cba <__sflush_r+0xb2>
 8005cb6:	2b16      	cmp	r3, #22
 8005cb8:	d101      	bne.n	8005cbe <__sflush_r+0xb6>
 8005cba:	602f      	str	r7, [r5, #0]
 8005cbc:	e7b1      	b.n	8005c22 <__sflush_r+0x1a>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	e7ad      	b.n	8005c24 <__sflush_r+0x1c>
 8005cc8:	690f      	ldr	r7, [r1, #16]
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d0a9      	beq.n	8005c22 <__sflush_r+0x1a>
 8005cce:	0793      	lsls	r3, r2, #30
 8005cd0:	680e      	ldr	r6, [r1, #0]
 8005cd2:	bf08      	it	eq
 8005cd4:	694b      	ldreq	r3, [r1, #20]
 8005cd6:	600f      	str	r7, [r1, #0]
 8005cd8:	bf18      	it	ne
 8005cda:	2300      	movne	r3, #0
 8005cdc:	eba6 0807 	sub.w	r8, r6, r7
 8005ce0:	608b      	str	r3, [r1, #8]
 8005ce2:	f1b8 0f00 	cmp.w	r8, #0
 8005ce6:	dd9c      	ble.n	8005c22 <__sflush_r+0x1a>
 8005ce8:	6a21      	ldr	r1, [r4, #32]
 8005cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cec:	4643      	mov	r3, r8
 8005cee:	463a      	mov	r2, r7
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	dc06      	bgt.n	8005d06 <__sflush_r+0xfe>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e78e      	b.n	8005c24 <__sflush_r+0x1c>
 8005d06:	4407      	add	r7, r0
 8005d08:	eba8 0800 	sub.w	r8, r8, r0
 8005d0c:	e7e9      	b.n	8005ce2 <__sflush_r+0xda>
 8005d0e:	bf00      	nop
 8005d10:	20400001 	.word	0x20400001

08005d14 <_fflush_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	690b      	ldr	r3, [r1, #16]
 8005d18:	4605      	mov	r5, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b913      	cbnz	r3, 8005d24 <_fflush_r+0x10>
 8005d1e:	2500      	movs	r5, #0
 8005d20:	4628      	mov	r0, r5
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	b118      	cbz	r0, 8005d2e <_fflush_r+0x1a>
 8005d26:	6983      	ldr	r3, [r0, #24]
 8005d28:	b90b      	cbnz	r3, 8005d2e <_fflush_r+0x1a>
 8005d2a:	f000 f887 	bl	8005e3c <__sinit>
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <_fflush_r+0x6c>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d11b      	bne.n	8005d6c <_fflush_r+0x58>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ef      	beq.n	8005d1e <_fflush_r+0xa>
 8005d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d40:	07d0      	lsls	r0, r2, #31
 8005d42:	d404      	bmi.n	8005d4e <_fflush_r+0x3a>
 8005d44:	0599      	lsls	r1, r3, #22
 8005d46:	d402      	bmi.n	8005d4e <_fflush_r+0x3a>
 8005d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d4a:	f000 f915 	bl	8005f78 <__retarget_lock_acquire_recursive>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4621      	mov	r1, r4
 8005d52:	f7ff ff59 	bl	8005c08 <__sflush_r>
 8005d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d58:	07da      	lsls	r2, r3, #31
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	d4e0      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	059b      	lsls	r3, r3, #22
 8005d62:	d4dd      	bmi.n	8005d20 <_fflush_r+0xc>
 8005d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d66:	f000 f908 	bl	8005f7a <__retarget_lock_release_recursive>
 8005d6a:	e7d9      	b.n	8005d20 <_fflush_r+0xc>
 8005d6c:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <_fflush_r+0x70>)
 8005d6e:	429c      	cmp	r4, r3
 8005d70:	d101      	bne.n	8005d76 <_fflush_r+0x62>
 8005d72:	68ac      	ldr	r4, [r5, #8]
 8005d74:	e7df      	b.n	8005d36 <_fflush_r+0x22>
 8005d76:	4b04      	ldr	r3, [pc, #16]	; (8005d88 <_fflush_r+0x74>)
 8005d78:	429c      	cmp	r4, r3
 8005d7a:	bf08      	it	eq
 8005d7c:	68ec      	ldreq	r4, [r5, #12]
 8005d7e:	e7da      	b.n	8005d36 <_fflush_r+0x22>
 8005d80:	08006458 	.word	0x08006458
 8005d84:	08006478 	.word	0x08006478
 8005d88:	08006438 	.word	0x08006438

08005d8c <std>:
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	b510      	push	{r4, lr}
 8005d90:	4604      	mov	r4, r0
 8005d92:	e9c0 3300 	strd	r3, r3, [r0]
 8005d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d9a:	6083      	str	r3, [r0, #8]
 8005d9c:	8181      	strh	r1, [r0, #12]
 8005d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8005da0:	81c2      	strh	r2, [r0, #14]
 8005da2:	6183      	str	r3, [r0, #24]
 8005da4:	4619      	mov	r1, r3
 8005da6:	2208      	movs	r2, #8
 8005da8:	305c      	adds	r0, #92	; 0x5c
 8005daa:	f7ff f893 	bl	8004ed4 <memset>
 8005dae:	4b05      	ldr	r3, [pc, #20]	; (8005dc4 <std+0x38>)
 8005db0:	6263      	str	r3, [r4, #36]	; 0x24
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <std+0x3c>)
 8005db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <std+0x40>)
 8005db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <std+0x44>)
 8005dbc:	6224      	str	r4, [r4, #32]
 8005dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	08006181 	.word	0x08006181
 8005dc8:	080061a3 	.word	0x080061a3
 8005dcc:	080061db 	.word	0x080061db
 8005dd0:	080061ff 	.word	0x080061ff

08005dd4 <_cleanup_r>:
 8005dd4:	4901      	ldr	r1, [pc, #4]	; (8005ddc <_cleanup_r+0x8>)
 8005dd6:	f000 b8af 	b.w	8005f38 <_fwalk_reent>
 8005dda:	bf00      	nop
 8005ddc:	08005d15 	.word	0x08005d15

08005de0 <__sfmoreglue>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	1e4a      	subs	r2, r1, #1
 8005de4:	2568      	movs	r5, #104	; 0x68
 8005de6:	4355      	muls	r5, r2
 8005de8:	460e      	mov	r6, r1
 8005dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dee:	f7ff f98f 	bl	8005110 <_malloc_r>
 8005df2:	4604      	mov	r4, r0
 8005df4:	b140      	cbz	r0, 8005e08 <__sfmoreglue+0x28>
 8005df6:	2100      	movs	r1, #0
 8005df8:	e9c0 1600 	strd	r1, r6, [r0]
 8005dfc:	300c      	adds	r0, #12
 8005dfe:	60a0      	str	r0, [r4, #8]
 8005e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e04:	f7ff f866 	bl	8004ed4 <memset>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}

08005e0c <__sfp_lock_acquire>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__sfp_lock_acquire+0x8>)
 8005e0e:	f000 b8b3 	b.w	8005f78 <__retarget_lock_acquire_recursive>
 8005e12:	bf00      	nop
 8005e14:	2000052c 	.word	0x2000052c

08005e18 <__sfp_lock_release>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__sfp_lock_release+0x8>)
 8005e1a:	f000 b8ae 	b.w	8005f7a <__retarget_lock_release_recursive>
 8005e1e:	bf00      	nop
 8005e20:	2000052c 	.word	0x2000052c

08005e24 <__sinit_lock_acquire>:
 8005e24:	4801      	ldr	r0, [pc, #4]	; (8005e2c <__sinit_lock_acquire+0x8>)
 8005e26:	f000 b8a7 	b.w	8005f78 <__retarget_lock_acquire_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	20000527 	.word	0x20000527

08005e30 <__sinit_lock_release>:
 8005e30:	4801      	ldr	r0, [pc, #4]	; (8005e38 <__sinit_lock_release+0x8>)
 8005e32:	f000 b8a2 	b.w	8005f7a <__retarget_lock_release_recursive>
 8005e36:	bf00      	nop
 8005e38:	20000527 	.word	0x20000527

08005e3c <__sinit>:
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4604      	mov	r4, r0
 8005e40:	f7ff fff0 	bl	8005e24 <__sinit_lock_acquire>
 8005e44:	69a3      	ldr	r3, [r4, #24]
 8005e46:	b11b      	cbz	r3, 8005e50 <__sinit+0x14>
 8005e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e4c:	f7ff bff0 	b.w	8005e30 <__sinit_lock_release>
 8005e50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e54:	6523      	str	r3, [r4, #80]	; 0x50
 8005e56:	4b13      	ldr	r3, [pc, #76]	; (8005ea4 <__sinit+0x68>)
 8005e58:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <__sinit+0x6c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e5e:	42a3      	cmp	r3, r4
 8005e60:	bf04      	itt	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	61a3      	streq	r3, [r4, #24]
 8005e66:	4620      	mov	r0, r4
 8005e68:	f000 f820 	bl	8005eac <__sfp>
 8005e6c:	6060      	str	r0, [r4, #4]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f000 f81c 	bl	8005eac <__sfp>
 8005e74:	60a0      	str	r0, [r4, #8]
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 f818 	bl	8005eac <__sfp>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	60e0      	str	r0, [r4, #12]
 8005e80:	2104      	movs	r1, #4
 8005e82:	6860      	ldr	r0, [r4, #4]
 8005e84:	f7ff ff82 	bl	8005d8c <std>
 8005e88:	68a0      	ldr	r0, [r4, #8]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	2109      	movs	r1, #9
 8005e8e:	f7ff ff7d 	bl	8005d8c <std>
 8005e92:	68e0      	ldr	r0, [r4, #12]
 8005e94:	2202      	movs	r2, #2
 8005e96:	2112      	movs	r1, #18
 8005e98:	f7ff ff78 	bl	8005d8c <std>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	61a3      	str	r3, [r4, #24]
 8005ea0:	e7d2      	b.n	8005e48 <__sinit+0xc>
 8005ea2:	bf00      	nop
 8005ea4:	0800634c 	.word	0x0800634c
 8005ea8:	08005dd5 	.word	0x08005dd5

08005eac <__sfp>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	4607      	mov	r7, r0
 8005eb0:	f7ff ffac 	bl	8005e0c <__sfp_lock_acquire>
 8005eb4:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <__sfp+0x84>)
 8005eb6:	681e      	ldr	r6, [r3, #0]
 8005eb8:	69b3      	ldr	r3, [r6, #24]
 8005eba:	b913      	cbnz	r3, 8005ec2 <__sfp+0x16>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff ffbd 	bl	8005e3c <__sinit>
 8005ec2:	3648      	adds	r6, #72	; 0x48
 8005ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	d503      	bpl.n	8005ed4 <__sfp+0x28>
 8005ecc:	6833      	ldr	r3, [r6, #0]
 8005ece:	b30b      	cbz	r3, 8005f14 <__sfp+0x68>
 8005ed0:	6836      	ldr	r6, [r6, #0]
 8005ed2:	e7f7      	b.n	8005ec4 <__sfp+0x18>
 8005ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ed8:	b9d5      	cbnz	r5, 8005f10 <__sfp+0x64>
 8005eda:	4b16      	ldr	r3, [pc, #88]	; (8005f34 <__sfp+0x88>)
 8005edc:	60e3      	str	r3, [r4, #12]
 8005ede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ee4:	f000 f847 	bl	8005f76 <__retarget_lock_init_recursive>
 8005ee8:	f7ff ff96 	bl	8005e18 <__sfp_lock_release>
 8005eec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ef4:	6025      	str	r5, [r4, #0]
 8005ef6:	61a5      	str	r5, [r4, #24]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	4629      	mov	r1, r5
 8005efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f00:	f7fe ffe8 	bl	8004ed4 <memset>
 8005f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f10:	3468      	adds	r4, #104	; 0x68
 8005f12:	e7d9      	b.n	8005ec8 <__sfp+0x1c>
 8005f14:	2104      	movs	r1, #4
 8005f16:	4638      	mov	r0, r7
 8005f18:	f7ff ff62 	bl	8005de0 <__sfmoreglue>
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	6030      	str	r0, [r6, #0]
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d1d5      	bne.n	8005ed0 <__sfp+0x24>
 8005f24:	f7ff ff78 	bl	8005e18 <__sfp_lock_release>
 8005f28:	230c      	movs	r3, #12
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	e7ee      	b.n	8005f0c <__sfp+0x60>
 8005f2e:	bf00      	nop
 8005f30:	0800634c 	.word	0x0800634c
 8005f34:	ffff0001 	.word	0xffff0001

08005f38 <_fwalk_reent>:
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	4688      	mov	r8, r1
 8005f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f44:	2700      	movs	r7, #0
 8005f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f4e:	d505      	bpl.n	8005f5c <_fwalk_reent+0x24>
 8005f50:	6824      	ldr	r4, [r4, #0]
 8005f52:	2c00      	cmp	r4, #0
 8005f54:	d1f7      	bne.n	8005f46 <_fwalk_reent+0xe>
 8005f56:	4638      	mov	r0, r7
 8005f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5c:	89ab      	ldrh	r3, [r5, #12]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d907      	bls.n	8005f72 <_fwalk_reent+0x3a>
 8005f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f66:	3301      	adds	r3, #1
 8005f68:	d003      	beq.n	8005f72 <_fwalk_reent+0x3a>
 8005f6a:	4629      	mov	r1, r5
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	47c0      	blx	r8
 8005f70:	4307      	orrs	r7, r0
 8005f72:	3568      	adds	r5, #104	; 0x68
 8005f74:	e7e9      	b.n	8005f4a <_fwalk_reent+0x12>

08005f76 <__retarget_lock_init_recursive>:
 8005f76:	4770      	bx	lr

08005f78 <__retarget_lock_acquire_recursive>:
 8005f78:	4770      	bx	lr

08005f7a <__retarget_lock_release_recursive>:
 8005f7a:	4770      	bx	lr

08005f7c <__swhatbuf_r>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	460e      	mov	r6, r1
 8005f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f84:	2900      	cmp	r1, #0
 8005f86:	b096      	sub	sp, #88	; 0x58
 8005f88:	4614      	mov	r4, r2
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	da07      	bge.n	8005f9e <__swhatbuf_r+0x22>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	89b3      	ldrh	r3, [r6, #12]
 8005f94:	061a      	lsls	r2, r3, #24
 8005f96:	d410      	bmi.n	8005fba <__swhatbuf_r+0x3e>
 8005f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f9c:	e00e      	b.n	8005fbc <__swhatbuf_r+0x40>
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f000 f954 	bl	800624c <_fstat_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	dbf2      	blt.n	8005f8e <__swhatbuf_r+0x12>
 8005fa8:	9a01      	ldr	r2, [sp, #4]
 8005faa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005fae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005fb2:	425a      	negs	r2, r3
 8005fb4:	415a      	adcs	r2, r3
 8005fb6:	602a      	str	r2, [r5, #0]
 8005fb8:	e7ee      	b.n	8005f98 <__swhatbuf_r+0x1c>
 8005fba:	2340      	movs	r3, #64	; 0x40
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	b016      	add	sp, #88	; 0x58
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}

08005fc4 <__smakebuf_r>:
 8005fc4:	898b      	ldrh	r3, [r1, #12]
 8005fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005fc8:	079d      	lsls	r5, r3, #30
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460c      	mov	r4, r1
 8005fce:	d507      	bpl.n	8005fe0 <__smakebuf_r+0x1c>
 8005fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	2301      	movs	r3, #1
 8005fda:	6163      	str	r3, [r4, #20]
 8005fdc:	b002      	add	sp, #8
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	ab01      	add	r3, sp, #4
 8005fe2:	466a      	mov	r2, sp
 8005fe4:	f7ff ffca 	bl	8005f7c <__swhatbuf_r>
 8005fe8:	9900      	ldr	r1, [sp, #0]
 8005fea:	4605      	mov	r5, r0
 8005fec:	4630      	mov	r0, r6
 8005fee:	f7ff f88f 	bl	8005110 <_malloc_r>
 8005ff2:	b948      	cbnz	r0, 8006008 <__smakebuf_r+0x44>
 8005ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff8:	059a      	lsls	r2, r3, #22
 8005ffa:	d4ef      	bmi.n	8005fdc <__smakebuf_r+0x18>
 8005ffc:	f023 0303 	bic.w	r3, r3, #3
 8006000:	f043 0302 	orr.w	r3, r3, #2
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	e7e3      	b.n	8005fd0 <__smakebuf_r+0xc>
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <__smakebuf_r+0x7c>)
 800600a:	62b3      	str	r3, [r6, #40]	; 0x28
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	6020      	str	r0, [r4, #0]
 8006010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006014:	81a3      	strh	r3, [r4, #12]
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	6163      	str	r3, [r4, #20]
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	6120      	str	r0, [r4, #16]
 800601e:	b15b      	cbz	r3, 8006038 <__smakebuf_r+0x74>
 8006020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006024:	4630      	mov	r0, r6
 8006026:	f000 f923 	bl	8006270 <_isatty_r>
 800602a:	b128      	cbz	r0, 8006038 <__smakebuf_r+0x74>
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	f023 0303 	bic.w	r3, r3, #3
 8006032:	f043 0301 	orr.w	r3, r3, #1
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	89a0      	ldrh	r0, [r4, #12]
 800603a:	4305      	orrs	r5, r0
 800603c:	81a5      	strh	r5, [r4, #12]
 800603e:	e7cd      	b.n	8005fdc <__smakebuf_r+0x18>
 8006040:	08005dd5 	.word	0x08005dd5

08006044 <memcpy>:
 8006044:	440a      	add	r2, r1
 8006046:	4291      	cmp	r1, r2
 8006048:	f100 33ff 	add.w	r3, r0, #4294967295
 800604c:	d100      	bne.n	8006050 <memcpy+0xc>
 800604e:	4770      	bx	lr
 8006050:	b510      	push	{r4, lr}
 8006052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605a:	4291      	cmp	r1, r2
 800605c:	d1f9      	bne.n	8006052 <memcpy+0xe>
 800605e:	bd10      	pop	{r4, pc}

08006060 <memmove>:
 8006060:	4288      	cmp	r0, r1
 8006062:	b510      	push	{r4, lr}
 8006064:	eb01 0402 	add.w	r4, r1, r2
 8006068:	d902      	bls.n	8006070 <memmove+0x10>
 800606a:	4284      	cmp	r4, r0
 800606c:	4623      	mov	r3, r4
 800606e:	d807      	bhi.n	8006080 <memmove+0x20>
 8006070:	1e43      	subs	r3, r0, #1
 8006072:	42a1      	cmp	r1, r4
 8006074:	d008      	beq.n	8006088 <memmove+0x28>
 8006076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800607a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800607e:	e7f8      	b.n	8006072 <memmove+0x12>
 8006080:	4402      	add	r2, r0
 8006082:	4601      	mov	r1, r0
 8006084:	428a      	cmp	r2, r1
 8006086:	d100      	bne.n	800608a <memmove+0x2a>
 8006088:	bd10      	pop	{r4, pc}
 800608a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800608e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006092:	e7f7      	b.n	8006084 <memmove+0x24>

08006094 <__malloc_lock>:
 8006094:	4801      	ldr	r0, [pc, #4]	; (800609c <__malloc_lock+0x8>)
 8006096:	f7ff bf6f 	b.w	8005f78 <__retarget_lock_acquire_recursive>
 800609a:	bf00      	nop
 800609c:	20000528 	.word	0x20000528

080060a0 <__malloc_unlock>:
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <__malloc_unlock+0x8>)
 80060a2:	f7ff bf6a 	b.w	8005f7a <__retarget_lock_release_recursive>
 80060a6:	bf00      	nop
 80060a8:	20000528 	.word	0x20000528

080060ac <_realloc_r>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	4607      	mov	r7, r0
 80060b0:	4614      	mov	r4, r2
 80060b2:	460e      	mov	r6, r1
 80060b4:	b921      	cbnz	r1, 80060c0 <_realloc_r+0x14>
 80060b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80060ba:	4611      	mov	r1, r2
 80060bc:	f7ff b828 	b.w	8005110 <_malloc_r>
 80060c0:	b922      	cbnz	r2, 80060cc <_realloc_r+0x20>
 80060c2:	f7fe ffd5 	bl	8005070 <_free_r>
 80060c6:	4625      	mov	r5, r4
 80060c8:	4628      	mov	r0, r5
 80060ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060cc:	f000 f8f2 	bl	80062b4 <_malloc_usable_size_r>
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d20f      	bcs.n	80060f4 <_realloc_r+0x48>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4638      	mov	r0, r7
 80060d8:	f7ff f81a 	bl	8005110 <_malloc_r>
 80060dc:	4605      	mov	r5, r0
 80060de:	2800      	cmp	r0, #0
 80060e0:	d0f2      	beq.n	80060c8 <_realloc_r+0x1c>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4622      	mov	r2, r4
 80060e6:	f7ff ffad 	bl	8006044 <memcpy>
 80060ea:	4631      	mov	r1, r6
 80060ec:	4638      	mov	r0, r7
 80060ee:	f7fe ffbf 	bl	8005070 <_free_r>
 80060f2:	e7e9      	b.n	80060c8 <_realloc_r+0x1c>
 80060f4:	4635      	mov	r5, r6
 80060f6:	e7e7      	b.n	80060c8 <_realloc_r+0x1c>

080060f8 <_raise_r>:
 80060f8:	291f      	cmp	r1, #31
 80060fa:	b538      	push	{r3, r4, r5, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	460d      	mov	r5, r1
 8006100:	d904      	bls.n	800610c <_raise_r+0x14>
 8006102:	2316      	movs	r3, #22
 8006104:	6003      	str	r3, [r0, #0]
 8006106:	f04f 30ff 	mov.w	r0, #4294967295
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800610e:	b112      	cbz	r2, 8006116 <_raise_r+0x1e>
 8006110:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006114:	b94b      	cbnz	r3, 800612a <_raise_r+0x32>
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f830 	bl	800617c <_getpid_r>
 800611c:	462a      	mov	r2, r5
 800611e:	4601      	mov	r1, r0
 8006120:	4620      	mov	r0, r4
 8006122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006126:	f000 b817 	b.w	8006158 <_kill_r>
 800612a:	2b01      	cmp	r3, #1
 800612c:	d00a      	beq.n	8006144 <_raise_r+0x4c>
 800612e:	1c59      	adds	r1, r3, #1
 8006130:	d103      	bne.n	800613a <_raise_r+0x42>
 8006132:	2316      	movs	r3, #22
 8006134:	6003      	str	r3, [r0, #0]
 8006136:	2001      	movs	r0, #1
 8006138:	e7e7      	b.n	800610a <_raise_r+0x12>
 800613a:	2400      	movs	r4, #0
 800613c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006140:	4628      	mov	r0, r5
 8006142:	4798      	blx	r3
 8006144:	2000      	movs	r0, #0
 8006146:	e7e0      	b.n	800610a <_raise_r+0x12>

08006148 <raise>:
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <raise+0xc>)
 800614a:	4601      	mov	r1, r0
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	f7ff bfd3 	b.w	80060f8 <_raise_r>
 8006152:	bf00      	nop
 8006154:	20000018 	.word	0x20000018

08006158 <_kill_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	; (8006178 <_kill_r+0x20>)
 800615c:	2300      	movs	r3, #0
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	4611      	mov	r1, r2
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	f7fa ff79 	bl	800105c <_kill>
 800616a:	1c43      	adds	r3, r0, #1
 800616c:	d102      	bne.n	8006174 <_kill_r+0x1c>
 800616e:	682b      	ldr	r3, [r5, #0]
 8006170:	b103      	cbz	r3, 8006174 <_kill_r+0x1c>
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	bd38      	pop	{r3, r4, r5, pc}
 8006176:	bf00      	nop
 8006178:	20000530 	.word	0x20000530

0800617c <_getpid_r>:
 800617c:	f7fa bf66 	b.w	800104c <_getpid>

08006180 <__sread>:
 8006180:	b510      	push	{r4, lr}
 8006182:	460c      	mov	r4, r1
 8006184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006188:	f000 f89c 	bl	80062c4 <_read_r>
 800618c:	2800      	cmp	r0, #0
 800618e:	bfab      	itete	ge
 8006190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006192:	89a3      	ldrhlt	r3, [r4, #12]
 8006194:	181b      	addge	r3, r3, r0
 8006196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800619a:	bfac      	ite	ge
 800619c:	6563      	strge	r3, [r4, #84]	; 0x54
 800619e:	81a3      	strhlt	r3, [r4, #12]
 80061a0:	bd10      	pop	{r4, pc}

080061a2 <__swrite>:
 80061a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a6:	461f      	mov	r7, r3
 80061a8:	898b      	ldrh	r3, [r1, #12]
 80061aa:	05db      	lsls	r3, r3, #23
 80061ac:	4605      	mov	r5, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	4616      	mov	r6, r2
 80061b2:	d505      	bpl.n	80061c0 <__swrite+0x1e>
 80061b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b8:	2302      	movs	r3, #2
 80061ba:	2200      	movs	r2, #0
 80061bc:	f000 f868 	bl	8006290 <_lseek_r>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	4632      	mov	r2, r6
 80061ce:	463b      	mov	r3, r7
 80061d0:	4628      	mov	r0, r5
 80061d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061d6:	f000 b817 	b.w	8006208 <_write_r>

080061da <__sseek>:
 80061da:	b510      	push	{r4, lr}
 80061dc:	460c      	mov	r4, r1
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 f855 	bl	8006290 <_lseek_r>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	bf15      	itete	ne
 80061ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061f6:	81a3      	strheq	r3, [r4, #12]
 80061f8:	bf18      	it	ne
 80061fa:	81a3      	strhne	r3, [r4, #12]
 80061fc:	bd10      	pop	{r4, pc}

080061fe <__sclose>:
 80061fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006202:	f000 b813 	b.w	800622c <_close_r>
	...

08006208 <_write_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	; (8006228 <_write_r+0x20>)
 800620c:	4604      	mov	r4, r0
 800620e:	4608      	mov	r0, r1
 8006210:	4611      	mov	r1, r2
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f7fa ff57 	bl	80010ca <_write>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_write_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_write_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000530 	.word	0x20000530

0800622c <_close_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d06      	ldr	r5, [pc, #24]	; (8006248 <_close_r+0x1c>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fa ff63 	bl	8001102 <_close>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d102      	bne.n	8006246 <_close_r+0x1a>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	b103      	cbz	r3, 8006246 <_close_r+0x1a>
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	bd38      	pop	{r3, r4, r5, pc}
 8006248:	20000530 	.word	0x20000530

0800624c <_fstat_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d07      	ldr	r5, [pc, #28]	; (800626c <_fstat_r+0x20>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	f7fa ff5e 	bl	800111a <_fstat>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	d102      	bne.n	8006268 <_fstat_r+0x1c>
 8006262:	682b      	ldr	r3, [r5, #0]
 8006264:	b103      	cbz	r3, 8006268 <_fstat_r+0x1c>
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	20000530 	.word	0x20000530

08006270 <_isatty_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d06      	ldr	r5, [pc, #24]	; (800628c <_isatty_r+0x1c>)
 8006274:	2300      	movs	r3, #0
 8006276:	4604      	mov	r4, r0
 8006278:	4608      	mov	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fa ff5d 	bl	800113a <_isatty>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_isatty_r+0x1a>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_isatty_r+0x1a>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000530 	.word	0x20000530

08006290 <_lseek_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	; (80062b0 <_lseek_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fa ff56 	bl	8001150 <_lseek>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_lseek_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_lseek_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000530 	.word	0x20000530

080062b4 <_malloc_usable_size_r>:
 80062b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062b8:	1f18      	subs	r0, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bfbc      	itt	lt
 80062be:	580b      	ldrlt	r3, [r1, r0]
 80062c0:	18c0      	addlt	r0, r0, r3
 80062c2:	4770      	bx	lr

080062c4 <_read_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d07      	ldr	r5, [pc, #28]	; (80062e4 <_read_r+0x20>)
 80062c8:	4604      	mov	r4, r0
 80062ca:	4608      	mov	r0, r1
 80062cc:	4611      	mov	r1, r2
 80062ce:	2200      	movs	r2, #0
 80062d0:	602a      	str	r2, [r5, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	f7fa fedc 	bl	8001090 <_read>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d102      	bne.n	80062e2 <_read_r+0x1e>
 80062dc:	682b      	ldr	r3, [r5, #0]
 80062de:	b103      	cbz	r3, 80062e2 <_read_r+0x1e>
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000530 	.word	0x20000530

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr

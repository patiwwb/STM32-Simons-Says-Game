
Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a0  080061a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080061a0  080061a0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061a0  080061a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080061a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  2000007c  08006224  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  08006224  00020534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ac  00000000  00000000  0003216f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  000353e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4e  00000000  00000000  000360d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d8f  00000000  00000000  0004cd26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b98  00000000  00000000  0005dab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e764d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004498  00000000  00000000  000e76a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ff0 	.word	0x08005ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08005ff0 	.word	0x08005ff0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fec8 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f852 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f978 	bl	8000570 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000280:	f000 f8a6 	bl	80003d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000284:	f000 f93c 	bl	8000500 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000288:	f000 f912 	bl	80004b0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 800028c:	481c      	ldr	r0, [pc, #112]	; (8000300 <main+0x90>)
 800028e:	f002 fdbf 	bl	8002e10 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 8000292:	481c      	ldr	r0, [pc, #112]	; (8000304 <main+0x94>)
 8000294:	f002 fdbc 	bl	8002e10 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000298:	2100      	movs	r1, #0
 800029a:	4819      	ldr	r0, [pc, #100]	; (8000300 <main+0x90>)
 800029c:	f002 fe66 	bl	8002f6c <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <main+0x94>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <main+0x98>)
 80002aa:	801a      	strh	r2, [r3, #0]
  timer_val_get = timer_val;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <main+0x98>)
 80002ae:	881a      	ldrh	r2, [r3, #0]
 80002b0:	4b16      	ldr	r3, [pc, #88]	; (800030c <main+0x9c>)
 80002b2:	801a      	strh	r2, [r3, #0]
	  }
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);


	  if (level==1) {
 80002b4:	4b16      	ldr	r3, [pc, #88]	; (8000310 <main+0xa0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d101      	bne.n	80002c0 <main+0x50>
	     generate_sequence();
 80002bc:	f000 fb8a 	bl	80009d4 <generate_sequence>
	   }
	  show_sequence();
 80002c0:	f000 fbac 	bl	8000a1c <show_sequence>
	  get_sequence();
 80002c4:	f000 fc24 	bl	8000b10 <get_sequence>
	  level++;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <main+0xa0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <main+0xa0>)
 80002d0:	6013      	str	r3, [r2, #0]
	  //wrong_sequence();
	  HAL_Delay(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 fefd 	bl	80010d4 <HAL_Delay>
	  UART_SendNumber(timer_val);
	  HAL_Delay(1000);
	  UART_SendText("\r\n");
	  */

	  UART_SendText("Frequency ");
 80002da:	480e      	ldr	r0, [pc, #56]	; (8000314 <main+0xa4>)
 80002dc:	f000 f9ba 	bl	8000654 <UART_SendText>
	  //HAL_Delay(500);
	  UART_SendNumber(Frequency);
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0xa8>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9db 	bl	80006a0 <UART_SendNumber>
	  //HAL_Delay(500);
	  UART_SendText("\r\n");
 80002ea:	480c      	ldr	r0, [pc, #48]	; (800031c <main+0xac>)
 80002ec:	f000 f9b2 	bl	8000654 <UART_SendText>
	  //HAL_Delay(500);
	  HAL_Delay(300);
 80002f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80002f4:	f000 feee 	bl	80010d4 <HAL_Delay>
	  Frequency = 0;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0xa8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
	  if (level==1) {
 80002fe:	e7d9      	b.n	80002b4 <main+0x44>
 8000300:	20000404 	.word	0x20000404
 8000304:	200004d4 	.word	0x200004d4
 8000308:	200000b4 	.word	0x200000b4
 800030c:	200000b6 	.word	0x200000b6
 8000310:	20000004 	.word	0x20000004
 8000314:	08006008 	.word	0x08006008
 8000318:	200000a4 	.word	0x200000a4
 800031c:	08006014 	.word	0x08006014

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09c      	sub	sp, #112	; 0x70
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f004 fc94 	bl	8004c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2230      	movs	r2, #48	; 0x30
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fc86 	bl	8004c5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	2302      	movs	r3, #2
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2310      	movs	r3, #16
 800035a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	2300      	movs	r3, #0
 800035e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000364:	4618      	mov	r0, r3
 8000366:	f001 fa05 	bl	8001774 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000370:	f000 fc3a 	bl	8000be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000378:	2300      	movs	r3, #0
 800037a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f002 f8f8 	bl	8002584 <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800039a:	f000 fc25 	bl	8000be8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 800039e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80003a4:	2300      	movs	r3, #0
 80003a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fb54 	bl	8002a58 <HAL_RCCEx_PeriphCLKConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003b6:	f000 fc17 	bl	8000be8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80003c0:	2000      	movs	r0, #0
 80003c2:	f002 fa5b 	bl	800287c <HAL_RCC_MCOConfig>
}
 80003c6:	bf00      	nop
 80003c8:	3770      	adds	r7, #112	; 0x70
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08c      	sub	sp, #48	; 0x30
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0320 	add.w	r3, r7, #32
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fc:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <MX_TIM2_Init+0xdc>)
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000404:	4b29      	ldr	r3, [pc, #164]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <MX_TIM2_Init+0xdc>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000412:	f04f 32ff 	mov.w	r2, #4294967295
 8000416:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000418:	4b24      	ldr	r3, [pc, #144]	; (80004ac <MX_TIM2_Init+0xdc>)
 800041a:	2200      	movs	r2, #0
 800041c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	4b23      	ldr	r3, [pc, #140]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000424:	4821      	ldr	r0, [pc, #132]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000426:	f002 fc9b 	bl	8002d60 <HAL_TIM_Base_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000430:	f000 fbda 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000438:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800043a:	f107 0320 	add.w	r3, r7, #32
 800043e:	4619      	mov	r1, r3
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000442:	f003 f87c 	bl	800353e <HAL_TIM_ConfigClockSource>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800044c:	f000 fbcc 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000450:	4816      	ldr	r0, [pc, #88]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000452:	f002 fd29 	bl	8002ea8 <HAL_TIM_IC_Init>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800045c:	f000 fbc4 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000468:	f107 0314 	add.w	r3, r7, #20
 800046c:	4619      	mov	r1, r3
 800046e:	480f      	ldr	r0, [pc, #60]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000470:	f003 fbd4 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800047a:	f000 fbb5 	bl	8000be8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000482:	2301      	movs	r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	4619      	mov	r1, r3
 8000494:	4805      	ldr	r0, [pc, #20]	; (80004ac <MX_TIM2_Init+0xdc>)
 8000496:	f002 ffb6 	bl	8003406 <HAL_TIM_IC_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80004a0:	f000 fba2 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a4:	bf00      	nop
 80004a6:	3730      	adds	r7, #48	; 0x30
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000404 	.word	0x20000404

080004b0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <MX_TIM16_Init+0x4c>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004bc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80004c0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ce:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80004d6:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_TIM16_Init+0x48>)
 80004e4:	f002 fc3c 	bl	8002d60 <HAL_TIM_Base_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80004ee:	f000 fb7b 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	200004d4 	.word	0x200004d4
 80004fc:	40014400 	.word	0x40014400

08000500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000506:	4a18      	ldr	r2, [pc, #96]	; (8000568 <MX_USART2_UART_Init+0x68>)
 8000508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_USART2_UART_Init+0x64>)
 800050c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_USART2_UART_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000520:	2200      	movs	r2, #0
 8000522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000526:	220c      	movs	r2, #12
 8000528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART2_UART_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART2_UART_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000542:	4808      	ldr	r0, [pc, #32]	; (8000564 <MX_USART2_UART_Init+0x64>)
 8000544:	f003 fbee 	bl	8003d24 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 fb4b 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_USART2_UART_Init+0x6c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <MX_USART2_UART_Init+0x6c>)
 8000558:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 800055c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000450 	.word	0x20000450
 8000568:	40004400 	.word	0x40004400
 800056c:	40013800 	.word	0x40013800

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b31      	ldr	r3, [pc, #196]	; (800064c <MX_GPIO_Init+0xdc>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a30      	ldr	r2, [pc, #192]	; (800064c <MX_GPIO_Init+0xdc>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b2e      	ldr	r3, [pc, #184]	; (800064c <MX_GPIO_Init+0xdc>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_GPIO_Init+0xdc>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a2a      	ldr	r2, [pc, #168]	; (800064c <MX_GPIO_Init+0xdc>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <MX_GPIO_Init+0xdc>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <MX_GPIO_Init+0xdc>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <MX_GPIO_Init+0xdc>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_GPIO_Init+0xdc>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	21c0      	movs	r1, #192	; 0xc0
 80005d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d6:	f001 f89b 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	210b      	movs	r1, #11
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <MX_GPIO_Init+0xe0>)
 80005e0:	f001 f896 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80005e4:	23c0      	movs	r3, #192	; 0xc0
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fe:	f000 ff15 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 8000602:	230b      	movs	r3, #11
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	4619      	mov	r1, r3
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_GPIO_Init+0xe0>)
 800061a:	f000 ff07 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800061e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f000 fef5 	bl	800142c <HAL_GPIO_Init>

}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48000400 	.word	0x48000400

08000654 <UART_SendText>:

/* USER CODE BEGIN 4 */
void UART_SendText(volatile char* s)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	81fb      	strh	r3, [r7, #14]
	uint16_t size = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	81bb      	strh	r3, [r7, #12]
	while(s[i])
 8000664:	e005      	b.n	8000672 <UART_SendText+0x1e>
	{
		size++;
 8000666:	89bb      	ldrh	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	81bb      	strh	r3, [r7, #12]
		i++;
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	3301      	adds	r3, #1
 8000670:	81fb      	strh	r3, [r7, #14]
	while(s[i])
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	4413      	add	r3, r2
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f2      	bne.n	8000666 <UART_SendText+0x12>
	}
	size++; // '\0'
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)s, size, 300);
 8000686:	89ba      	ldrh	r2, [r7, #12]
 8000688:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <UART_SendText+0x48>)
 8000690:	f003 fb96 	bl	8003dc0 <HAL_UART_Transmit>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000450 	.word	0x20000450

080006a0 <UART_SendNumber>:

void UART_SendNumber(uint32_t x)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09c      	sub	sp, #112	; 0x70
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	char temp[100];
	sprintf(temp, "%d", x);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4906      	ldr	r1, [pc, #24]	; (80006c8 <UART_SendNumber+0x28>)
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fb09 	bl	8004cc8 <siprintf>
	UART_SendText(temp);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffca 	bl	8000654 <UART_SendText>
	  {
		HAL_UART_Transmit(&huart2, (uint8_t *)value[--i], sizeof(char), 300);

	  }
	  */
}
 80006c0:	bf00      	nop
 80006c2:	3770      	adds	r7, #112	; 0x70
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	08006018 	.word	0x08006018

080006cc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a4a      	ldr	r2, [pc, #296]	; (8000800 <HAL_TIM_IC_CaptureCallback+0x134>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	f040 808d 	bne.w	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7f1b      	ldrb	r3, [r3, #28]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	f040 8088 	bne.w	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x138>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10a      	bne.n	8000706 <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80006f0:	2100      	movs	r1, #0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f002 ffec 	bl	80036d0 <HAL_TIM_ReadCapturedValue>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a43      	ldr	r2, [pc, #268]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80006fc:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 8000704:	e078      	b.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 8000706:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d074      	beq.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800070e:	2100      	movs	r1, #0
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f002 ffdd 	bl	80036d0 <HAL_TIM_ReadCapturedValue>
 8000716:	4603      	mov	r3, r0
 8000718:	4a3c      	ldr	r2, [pc, #240]	; (800080c <HAL_TIM_IC_CaptureCallback+0x140>)
 800071a:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 800071c:	4b3b      	ldr	r3, [pc, #236]	; (800080c <HAL_TIM_IC_CaptureCallback+0x140>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d907      	bls.n	8000738 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <HAL_TIM_IC_CaptureCallback+0x140>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4a37      	ldr	r2, [pc, #220]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e011      	b.n	800075c <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 8000738:	4b34      	ldr	r3, [pc, #208]	; (800080c <HAL_TIM_IC_CaptureCallback+0x140>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	429a      	cmp	r2, r3
 8000742:	d209      	bcs.n	8000758 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 8000744:	4b31      	ldr	r3, [pc, #196]	; (800080c <HAL_TIM_IC_CaptureCallback+0x140>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	e001      	b.n	800075c <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 8000758:	f000 fa46 	bl	8000be8 <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 800075c:	f002 f938 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8000760:	4602      	mov	r2, r0
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x148>)
 800076c:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	4a28      	ldr	r2, [pc, #160]	; (800081c <HAL_TIM_IC_CaptureCallback+0x150>)
 800077c:	8812      	ldrh	r2, [r2, #0]
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000784:	d338      	bcc.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 8000786:	4b26      	ldr	r3, [pc, #152]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a24      	ldr	r2, [pc, #144]	; (8000820 <HAL_TIM_IC_CaptureCallback+0x154>)
 800078e:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <HAL_TIM_IC_CaptureCallback+0x150>)
 800079a:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <HAL_TIM_IC_CaptureCallback+0x148>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d827      	bhi.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 80007a8:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007b6:	2108      	movs	r1, #8
 80007b8:	481b      	ldr	r0, [pc, #108]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007ba:	f000 ffc1 	bl	8001740 <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d118      	bne.n	80007f8 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <HAL_TIM_IC_CaptureCallback+0x160>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f000 ff9c 	bl	8001710 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2102      	movs	r1, #2
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007de:	f000 ff97 	bl	8001710 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f000 ff91 	bl	8001710 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2101      	movs	r1, #1
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80007f4:	f000 ff8c 	bl	8001710 <HAL_GPIO_WritePin>
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000404 	.word	0x20000404
 8000804:	200000ac 	.word	0x200000ac
 8000808:	20000098 	.word	0x20000098
 800080c:	2000009c 	.word	0x2000009c
 8000810:	200000a0 	.word	0x200000a0
 8000814:	200000a4 	.word	0x200000a4
 8000818:	200004d4 	.word	0x200004d4
 800081c:	200000b4 	.word	0x200000b4
 8000820:	200000a8 	.word	0x200000a8
 8000824:	200000b0 	.word	0x200000b0
 8000828:	48000400 	.word	0x48000400
 800082c:	20000000 	.word	0x20000000

08000830 <start>:

void start()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	  uint16_t start_rand=0;
 8000836:	2300      	movs	r3, #0
 8000838:	80fb      	strh	r3, [r7, #6]
	  srand(start_rand);
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	4618      	mov	r0, r3
 800083e:	f004 fa15 	bl	8004c6c <srand>
	  while(ALLUME_START == 1)
 8000842:	e01a      	b.n	800087a <start+0x4a>
	  {
		  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000844:	2140      	movs	r1, #64	; 0x40
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f000 ff79 	bl	8001740 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800084e:	20c8      	movs	r0, #200	; 0xc8
 8000850:	f000 fc40 	bl	80010d4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000854:	2102      	movs	r1, #2
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <start+0x98>)
 8000858:	f000 ff72 	bl	8001740 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800085c:	20c8      	movs	r0, #200	; 0xc8
 800085e:	f000 fc39 	bl	80010d4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f000 ff6a 	bl	8001740 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800086c:	20c8      	movs	r0, #200	; 0xc8
 800086e:	f000 fc31 	bl	80010d4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000872:	2101      	movs	r1, #1
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <start+0x98>)
 8000876:	f000 ff63 	bl	8001740 <HAL_GPIO_TogglePin>
	  while(ALLUME_START == 1)
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <start+0x9c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d0e0      	beq.n	8000844 <start+0x14>
	  }
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <start+0x98>)
 8000888:	f000 ff42 	bl	8001710 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 ff3c 	bl	8001710 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2102      	movs	r1, #2
 800089c:	480a      	ldr	r0, [pc, #40]	; (80008c8 <start+0x98>)
 800089e:	f000 ff37 	bl	8001710 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 ff31 	bl	8001710 <HAL_GPIO_WritePin>

	  ALLUME_LED = 0;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <start+0xa0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2108      	movs	r1, #8
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <start+0x98>)
 80008ba:	f000 ff29 	bl	8001710 <HAL_GPIO_WritePin>

}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	48000400 	.word	0x48000400
 80008cc:	20000000 	.word	0x20000000
 80008d0:	200000b0 	.word	0x200000b0

080008d4 <right_sequence>:

void right_sequence()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4819      	ldr	r0, [pc, #100]	; (8000944 <right_sequence+0x70>)
 80008de:	f000 ff17 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 ff11 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <right_sequence+0x70>)
 80008f4:	f000 ff0c 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2140      	movs	r1, #64	; 0x40
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 ff06 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000904:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000908:	f000 fbe4 	bl	80010d4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2101      	movs	r1, #1
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <right_sequence+0x70>)
 8000912:	f000 fefd 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f000 fef7 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2102      	movs	r1, #2
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <right_sequence+0x70>)
 8000928:	f000 fef2 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f000 feec 	bl	8001710 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800093c:	f000 fbca 	bl	80010d4 <HAL_Delay>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	48000400 	.word	0x48000400

08000948 <wrong_sequence>:

void wrong_sequence()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i<3; i++)
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	e034      	b.n	80009be <wrong_sequence+0x76>
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2101      	movs	r1, #1
 8000958:	481d      	ldr	r0, [pc, #116]	; (80009d0 <wrong_sequence+0x88>)
 800095a:	f000 fed9 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f000 fed3 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2102      	movs	r1, #2
 800096e:	4818      	ldr	r0, [pc, #96]	; (80009d0 <wrong_sequence+0x88>)
 8000970:	f000 fece 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f000 fec8 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000980:	20c8      	movs	r0, #200	; 0xc8
 8000982:	f000 fba7 	bl	80010d4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2101      	movs	r1, #1
 800098a:	4811      	ldr	r0, [pc, #68]	; (80009d0 <wrong_sequence+0x88>)
 800098c:	f000 fec0 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000998:	f000 feba 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2102      	movs	r1, #2
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <wrong_sequence+0x88>)
 80009a2:	f000 feb5 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ae:	f000 feaf 	bl	8001710 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80009b2:	20c8      	movs	r0, #200	; 0xc8
 80009b4:	f000 fb8e 	bl	80010d4 <HAL_Delay>
	for(i = 0; i<3; i++)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	ddc7      	ble.n	8000954 <wrong_sequence+0xc>
	}
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	48000400 	.word	0x48000400

080009d4 <generate_sequence>:

void generate_sequence(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	start();
 80009da:	f7ff ff29 	bl	8000830 <start>
//				sequence[i]=0x0040U;
//		}
//
//
//	 }
	 for (i = 0; i <5; i++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	e007      	b.n	80009f4 <generate_sequence+0x20>
		 sequence[i] = LED1_hex;
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <generate_sequence+0x40>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (i = 0; i <5; i++) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3301      	adds	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	ddf4      	ble.n	80009e4 <generate_sequence+0x10>
	 }
	 sequence[5] = LED2_hex;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <generate_sequence+0x40>)
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	615a      	str	r2, [r3, #20]
	 level++;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <generate_sequence+0x44>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3301      	adds	r3, #1
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <generate_sequence+0x44>)
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000c4 	.word	0x200000c4
 8000a18:	20000004 	.word	0x20000004

08000a1c <show_sequence>:

void show_sequence()
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	 int i;
	 for(i=0; i < 6; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e065      	b.n	8000af4 <show_sequence+0xd8>
	 {
		 switch(sequence[i])
 8000a28:	4a36      	ldr	r2, [pc, #216]	; (8000b04 <show_sequence+0xe8>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	2b80      	cmp	r3, #128	; 0x80
 8000a32:	d01f      	beq.n	8000a74 <show_sequence+0x58>
 8000a34:	2b80      	cmp	r3, #128	; 0x80
 8000a36:	dc58      	bgt.n	8000aea <show_sequence+0xce>
 8000a38:	2b40      	cmp	r3, #64	; 0x40
 8000a3a:	d006      	beq.n	8000a4a <show_sequence+0x2e>
 8000a3c:	2b40      	cmp	r3, #64	; 0x40
 8000a3e:	dc54      	bgt.n	8000aea <show_sequence+0xce>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d02c      	beq.n	8000a9e <show_sequence+0x82>
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d03d      	beq.n	8000ac4 <show_sequence+0xa8>
 8000a48:	e04f      	b.n	8000aea <show_sequence+0xce>
			{
				case 0x0040U: //O
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fe5d 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <show_sequence+0xec>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fb3a 	bl	80010d4 <HAL_Delay>
					HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fe52 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a6c:	20c8      	movs	r0, #200	; 0xc8
 8000a6e:	f000 fb31 	bl	80010d4 <HAL_Delay>
					break;
 8000a72:	e03c      	b.n	8000aee <show_sequence+0xd2>
				case 0x0080U: //1
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fe48 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <show_sequence+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fb25 	bl	80010d4 <HAL_Delay>
					HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2180      	movs	r1, #128	; 0x80
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 fe3d 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000a96:	20c8      	movs	r0, #200	; 0xc8
 8000a98:	f000 fb1c 	bl	80010d4 <HAL_Delay>
					break;
 8000a9c:	e027      	b.n	8000aee <show_sequence+0xd2>
				case 0x0001U: //2
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	481a      	ldr	r0, [pc, #104]	; (8000b0c <show_sequence+0xf0>)
 8000aa4:	f000 fe34 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <show_sequence+0xec>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 fb11 	bl	80010d4 <HAL_Delay>
					HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <show_sequence+0xf0>)
 8000ab8:	f000 fe2a 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000abc:	20c8      	movs	r0, #200	; 0xc8
 8000abe:	f000 fb09 	bl	80010d4 <HAL_Delay>
					break;
 8000ac2:	e014      	b.n	8000aee <show_sequence+0xd2>
				case 0x0002U: //3
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	4810      	ldr	r0, [pc, #64]	; (8000b0c <show_sequence+0xf0>)
 8000aca:	f000 fe21 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(velocity);
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <show_sequence+0xec>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fafe 	bl	80010d4 <HAL_Delay>
					HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <show_sequence+0xf0>)
 8000ade:	f000 fe17 	bl	8001710 <HAL_GPIO_WritePin>
					HAL_Delay(200);
 8000ae2:	20c8      	movs	r0, #200	; 0xc8
 8000ae4:	f000 faf6 	bl	80010d4 <HAL_Delay>
					break;
 8000ae8:	e001      	b.n	8000aee <show_sequence+0xd2>
				default:
					wrong_sequence();
 8000aea:	f7ff ff2d 	bl	8000948 <wrong_sequence>
	 for(i=0; i < 6; i++)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3301      	adds	r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	dd96      	ble.n	8000a28 <show_sequence+0xc>
			}
	 }
}
 8000afa:	bf00      	nop
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000c4 	.word	0x200000c4
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	48000400 	.word	0x48000400

08000b10 <get_sequence>:

void get_sequence()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
	bool flag;
	int i;
	int temp_freq = Frequency;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <get_sequence+0xc0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	607b      	str	r3, [r7, #4]
	for(i=0; i<6;i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	e04e      	b.n	8000bc0 <get_sequence+0xb0>
	{
			flag = false;
 8000b22:	2300      	movs	r3, #0
 8000b24:	73fb      	strb	r3, [r7, #15]
			while(flag == false)
 8000b26:	e042      	b.n	8000bae <get_sequence+0x9e>
			{
				while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
				{
					if(Frequency != temp_freq )
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <get_sequence+0xc0>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d02d      	beq.n	8000b8e <get_sequence+0x7e>
					{
						Frequency = 0;
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <get_sequence+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
						temp_freq = Frequency;
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <get_sequence+0xc0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	607b      	str	r3, [r7, #4]
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f000 fde3 	bl	8001710 <HAL_GPIO_WritePin>
						your_sequence[i] = 0x0040U;
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <get_sequence+0xc4>)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2140      	movs	r1, #64	; 0x40
 8000b50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						flag=true;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
						HAL_Delay(200);
 8000b58:	20c8      	movs	r0, #200	; 0xc8
 8000b5a:	f000 fabb 	bl	80010d4 <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2108      	movs	r1, #8
 8000b62:	481d      	ldr	r0, [pc, #116]	; (8000bd8 <get_sequence+0xc8>)
 8000b64:	f000 fdd4 	bl	8001710 <HAL_GPIO_WritePin>
						if (your_sequence[i] != sequence[i])
 8000b68:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <get_sequence+0xc4>)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b70:	491a      	ldr	r1, [pc, #104]	; (8000bdc <get_sequence+0xcc>)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d002      	beq.n	8000b82 <get_sequence+0x72>
						{
							wrong_sequence();
 8000b7c:	f7ff fee4 	bl	8000948 <wrong_sequence>
							return;
 8000b80:	e023      	b.n	8000bca <get_sequence+0xba>
						}
						HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8a:	f000 fdc1 	bl	8001710 <HAL_GPIO_WritePin>
				while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <get_sequence+0xd0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <get_sequence+0xd4>)
 8000b96:	8812      	ldrh	r2, [r2, #0]
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d9c2      	bls.n	8000b28 <get_sequence+0x18>
		//					return;
		//				}
		//				HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
		//			}
			}
			timer_val_get = __HAL_TIM_GET_COUNTER(&htim16);
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <get_sequence+0xd0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <get_sequence+0xd4>)
 8000bac:	801a      	strh	r2, [r3, #0]
			while(flag == false)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1e9      	bne.n	8000b8e <get_sequence+0x7e>
	for(i=0; i<6;i++)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	ddad      	ble.n	8000b22 <get_sequence+0x12>
		}

	}
	 right_sequence(); //Як послідовність вірна, викличемо функцію right_sequence
 8000bc6:	f7ff fe85 	bl	80008d4 <right_sequence>
}
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200000a4 	.word	0x200000a4
 8000bd4:	20000274 	.word	0x20000274
 8000bd8:	48000400 	.word	0x48000400
 8000bdc:	200000c4 	.word	0x200000c4
 8000be0:	200004d4 	.word	0x200004d4
 8000be4:	200000b6 	.word	0x200000b6

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x44>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c5c:	d131      	bne.n	8000cc2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f000 fbbe 	bl	800142c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f000 fb0c 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f000 fb25 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000cc0:	e010      	b.n	8000ce4 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d10b      	bne.n	8000ce4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <HAL_TIM_Base_MspInit+0xb0>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40014400 	.word	0x40014400

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d130      	bne.n	8000d78 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	61d3      	str	r3, [r2, #28]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	6153      	str	r3, [r2, #20]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_UART_MspInit+0x90>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d46:	230c      	movs	r3, #12
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d56:	2307      	movs	r3, #7
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 fb62 	bl	800142c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2026      	movs	r0, #38	; 0x26
 8000d6e:	f000 fab0 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d72:	2026      	movs	r0, #38	; 0x26
 8000d74:	f000 fac9 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40021000 	.word	0x40021000

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f95e 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM2_IRQHandler+0x10>)
 8000de2:	f002 f9f1 	bl	80031c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000404 	.word	0x20000404

08000df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	f003 f877 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000450 	.word	0x20000450

08000e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
	return 1;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_kill>:

int _kill(int pid, int sig)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e1e:	f003 fef3 	bl	8004c08 <__errno>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2216      	movs	r2, #22
 8000e26:	601a      	str	r2, [r3, #0]
	return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_exit>:

void _exit (int status)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ffe7 	bl	8000e14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e46:	e7fe      	b.n	8000e46 <_exit+0x12>

08000e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00a      	b.n	8000e70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5a:	f3af 8000 	nop.w
 8000e5e:	4601      	mov	r1, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <_read+0x12>
	}

return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e009      	b.n	8000ea8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf1      	blt.n	8000e94 <_write+0x12>
	}
	return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fe58 	bl	8004c08 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20004000 	.word	0x20004000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	200000b8 	.word	0x200000b8
 8000f8c:	20000538 	.word	0x20000538

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fde:	f7ff ffd7 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fe17 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff f943 	bl	8000270 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ff8:	080061a8 	.word	0x080061a8
  ldr r2, =_sbss
 8000ffc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001000:	20000534 	.word	0x20000534

08001004 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_IRQHandler>
	...

08001008 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <HAL_Init+0x28>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_Init+0x28>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f94f 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	200f      	movs	r0, #15
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fde6 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40022000 	.word	0x40022000

08001034 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f967 	bl	8001326 <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f92f 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	; (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000014 	.word	0x20000014
 8001090:	20000010 	.word	0x20000010

08001094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000014 	.word	0x20000014
 80010b8:	20000520 	.word	0x20000520

080010bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000520 	.word	0x20000520

080010d4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000014 	.word	0x20000014

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff29 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff3e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800134c:	2b02      	cmp	r3, #2
 800134e:	d008      	beq.n	8001362 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e020      	b.n	80013a4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020e 	bic.w	r2, r2, #14
 8001370:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0201 	bic.w	r2, r2, #1
 8001380:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d005      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e027      	b.n	8001422 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 020e 	bic.w	r2, r2, #14
 80013e0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0201 	bic.w	r2, r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
    } 
  }
  return status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143a:	e14e      	b.n	80016da <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	4013      	ands	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 8140 	beq.w	80016d4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b01      	cmp	r3, #1
 800145e:	d005      	beq.n	800146c <HAL_GPIO_Init+0x40>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 0201 	and.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d017      	beq.n	800150a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d123      	bne.n	800155e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691a      	ldr	r2, [r3, #16]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	6939      	ldr	r1, [r7, #16]
 800155a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	2203      	movs	r2, #3
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 0203 	and.w	r2, r3, #3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 809a 	beq.w	80016d4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a0:	4b55      	ldr	r3, [pc, #340]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <HAL_GPIO_Init+0x2cc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015b8:	4a50      	ldr	r2, [pc, #320]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e2:	d013      	beq.n	800160c <HAL_GPIO_Init+0x1e0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <HAL_GPIO_Init+0x2d4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00d      	beq.n	8001608 <HAL_GPIO_Init+0x1dc>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a45      	ldr	r2, [pc, #276]	; (8001704 <HAL_GPIO_Init+0x2d8>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d007      	beq.n	8001604 <HAL_GPIO_Init+0x1d8>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a44      	ldr	r2, [pc, #272]	; (8001708 <HAL_GPIO_Init+0x2dc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d101      	bne.n	8001600 <HAL_GPIO_Init+0x1d4>
 80015fc:	2303      	movs	r3, #3
 80015fe:	e006      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001600:	2305      	movs	r3, #5
 8001602:	e004      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001604:	2302      	movs	r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_GPIO_Init+0x1e2>
 800160c:	2300      	movs	r3, #0
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	f002 0203 	and.w	r2, r2, #3
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	4093      	lsls	r3, r2
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161e:	4937      	ldr	r1, [pc, #220]	; (80016fc <HAL_GPIO_Init+0x2d0>)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	3302      	adds	r3, #2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_GPIO_Init+0x2e0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001650:	4a2e      	ldr	r2, [pc, #184]	; (800170c <HAL_GPIO_Init+0x2e0>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2e0>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2e0>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_GPIO_Init+0x2e0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2e0>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2e0>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2e0>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aea9 	bne.w	800143c <HAL_GPIO_Init+0x10>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	48000400 	.word	0x48000400
 8001704:	48000800 	.word	0x48000800
 8001708:	48000c00 	.word	0x48000c00
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	041a      	lsls	r2, r3, #16
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43d9      	mvns	r1, r3
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	400b      	ands	r3, r1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	619a      	str	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800177a:	af00      	add	r7, sp, #0
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f000 bef4 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 816a 	beq.w	8001a72 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800179e:	4bb3      	ldr	r3, [pc, #716]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d00c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017aa:	4bb0      	ldr	r3, [pc, #704]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d159      	bne.n	800186a <HAL_RCC_OscConfig+0xf6>
 80017b6:	4bad      	ldr	r3, [pc, #692]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c2:	d152      	bne.n	800186a <HAL_RCC_OscConfig+0xf6>
 80017c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d102      	bne.n	80017f6 <HAL_RCC_OscConfig+0x82>
 80017f0:	4b9e      	ldr	r3, [pc, #632]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0xae>
 80017f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800180a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001812:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800181e:	4b93      	ldr	r3, [pc, #588]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001826:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800182a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800182e:	fa92 f2a2 	rbit	r2, r2
 8001832:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001836:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	f042 0220 	orr.w	r2, r2, #32
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f002 021f 	and.w	r2, r2, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 810c 	beq.w	8001a70 <HAL_RCC_OscConfig+0x2fc>
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8106 	bne.w	8001a70 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	f000 be86 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x110>
 8001876:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7c      	ldr	r2, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e030      	b.n	80018e6 <HAL_RCC_OscConfig+0x172>
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x134>
 800188e:	4b77      	ldr	r3, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a76      	ldr	r2, [pc, #472]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b74      	ldr	r3, [pc, #464]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e01e      	b.n	80018e6 <HAL_RCC_OscConfig+0x172>
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b2:	d10c      	bne.n	80018ce <HAL_RCC_OscConfig+0x15a>
 80018b4:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6c      	ldr	r2, [pc, #432]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a69      	ldr	r2, [pc, #420]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x172>
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a66      	ldr	r2, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a63      	ldr	r2, [pc, #396]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018e6:	4b61      	ldr	r3, [pc, #388]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ea:	f023 020f 	bic.w	r2, r3, #15
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	495d      	ldr	r1, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d059      	beq.n	80019b8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fbda 	bl	80010bc <HAL_GetTick>
 8001908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fbd5 	bl	80010bc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 be29 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
 8001924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001928:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001938:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b01      	cmp	r3, #1
 800194e:	d102      	bne.n	8001956 <HAL_RCC_OscConfig+0x1e2>
 8001950:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x20e>
 8001956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800196a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001972:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001986:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800198a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800198e:	fa92 f2a2 	rbit	r2, r2
 8001992:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001996:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800199a:	fab2 f282 	clz	r2, r2
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	f042 0220 	orr.w	r2, r2, #32
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	f002 021f 	and.w	r2, r2, #31
 80019aa:	2101      	movs	r1, #1
 80019ac:	fa01 f202 	lsl.w	r2, r1, r2
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0ab      	beq.n	800190e <HAL_RCC_OscConfig+0x19a>
 80019b6:	e05c      	b.n	8001a72 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb80 	bl	80010bc <HAL_GetTick>
 80019bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb7b 	bl	80010bc <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d902      	bls.n	80019d8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	f000 bdcf 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
 80019d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019dc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80019ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x296>
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x2c2>
 8001a0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a12:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a26:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_RCC_OscConfig+0x2f8>)
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a3a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a3e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a42:	fa92 f2a2 	rbit	r2, r2
 8001a46:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a4a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a4e:	fab2 f282 	clz	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f042 0220 	orr.w	r2, r2, #32
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	f002 021f 	and.w	r2, r2, #31
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ab      	bne.n	80019c2 <HAL_RCC_OscConfig+0x24e>
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_OscConfig+0x2fe>
 8001a6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 816f 	beq.w	8001d60 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a82:	4bd0      	ldr	r3, [pc, #832]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a8e:	4bcd      	ldr	r3, [pc, #820]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d16c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x400>
 8001a9a:	4bca      	ldr	r3, [pc, #808]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d166      	bne.n	8001b74 <HAL_RCC_OscConfig+0x400>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ab8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x362>
 8001ad0:	4bbc      	ldr	r3, [pc, #752]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e013      	b.n	8001afe <HAL_RCC_OscConfig+0x38a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ae0:	fa93 f3a3 	rbit	r3, r3
 8001ae4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001aee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001afa:	4bb2      	ldr	r3, [pc, #712]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2202      	movs	r2, #2
 8001b00:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b04:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b08:	fa92 f2a2 	rbit	r2, r2
 8001b0c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b10:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0220 	orr.w	r2, r2, #32
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	f000 bd1b 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4ba0      	ldr	r3, [pc, #640]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	21f8      	movs	r1, #248	; 0xf8
 8001b50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b58:	fa91 f1a1 	rbit	r1, r1
 8001b5c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b60:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b64:	fab1 f181 	clz	r1, r1
 8001b68:	b2c9      	uxtb	r1, r1
 8001b6a:	408b      	lsls	r3, r1
 8001b6c:	4995      	ldr	r1, [pc, #596]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e0f5      	b.n	8001d60 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8085 	beq.w	8001c8a <HAL_RCC_OscConfig+0x516>
 8001b80:	2301      	movs	r3, #1
 8001b82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b92:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ba0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	2301      	movs	r3, #1
 8001baa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fa86 	bl	80010bc <HAL_GetTick>
 8001bb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fa81 	bl	80010bc <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d902      	bls.n	8001bcc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	f000 bcd5 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bde:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d102      	bne.n	8001bfc <HAL_RCC_OscConfig+0x488>
 8001bf6:	4b73      	ldr	r3, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	e013      	b.n	8001c24 <HAL_RCC_OscConfig+0x4b0>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c06:	fa93 f3a3 	rbit	r3, r3
 8001c0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c0e:	2302      	movs	r3, #2
 8001c10:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2202      	movs	r2, #2
 8001c26:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c2a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c2e:	fa92 f2a2 	rbit	r2, r2
 8001c32:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c36:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c3a:	fab2 f282 	clz	r2, r2
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f042 0220 	orr.w	r2, r2, #32
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	f002 021f 	and.w	r2, r2, #31
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0af      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b5b      	ldr	r3, [pc, #364]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	21f8      	movs	r1, #248	; 0xf8
 8001c66:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c6e:	fa91 f1a1 	rbit	r1, r1
 8001c72:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c76:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c7a:	fab1 f181 	clz	r1, r1
 8001c7e:	b2c9      	uxtb	r1, r1
 8001c80:	408b      	lsls	r3, r1
 8001c82:	4950      	ldr	r1, [pc, #320]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e06a      	b.n	8001d60 <HAL_RCC_OscConfig+0x5ec>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001caa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fa01 	bl	80010bc <HAL_GetTick>
 8001cba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f9fc 	bl	80010bc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d902      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f000 bc50 	b.w	8002576 <HAL_RCC_OscConfig+0xe02>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_RCC_OscConfig+0x592>
 8001d00:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e013      	b.n	8001d2e <HAL_RCC_OscConfig+0x5ba>
 8001d06:	2302      	movs	r3, #2
 8001d08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d22:	fa93 f3a3 	rbit	r3, r3
 8001d26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_RCC_OscConfig+0x650>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d40:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1af      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80da 	beq.w	8001f24 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d069      	beq.n	8001e4e <HAL_RCC_OscConfig+0x6da>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x654>)
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff f98a 	bl	80010bc <HAL_GetTick>
 8001da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dac:	e00e      	b.n	8001dcc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff f985 	bl	80010bc <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d906      	bls.n	8001dcc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e3d9      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	10908120 	.word	0x10908120
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dde:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	fa93 f2a3 	rbit	r2, r3
 8001df0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e16:	2102      	movs	r1, #2
 8001e18:	6019      	str	r1, [r3, #0]
 8001e1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f1a3 	rbit	r1, r3
 8001e24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e28:	6019      	str	r1, [r3, #0]
  return result;
 8001e2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0b0      	beq.n	8001dae <HAL_RCC_OscConfig+0x63a>
 8001e4c:	e06a      	b.n	8001f24 <HAL_RCC_OscConfig+0x7b0>
 8001e4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e64:	601a      	str	r2, [r3, #0]
  return result;
 8001e66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e6a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_RCC_OscConfig+0x934>)
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e80:	f7ff f91c 	bl	80010bc <HAL_GetTick>
 8001e84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	e009      	b.n	8001e9e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f917 	bl	80010bc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e36b      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 8001e9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eba:	2202      	movs	r2, #2
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ee4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001eee:	2102      	movs	r1, #2
 8001ef0:	6019      	str	r1, [r3, #0]
 8001ef2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f1a3 	rbit	r1, r3
 8001efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f00:	6019      	str	r1, [r3, #0]
  return result;
 8001f02:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1b2      	bne.n	8001e8a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8158 	beq.w	80021e4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d112      	bne.n	8001f6c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b57      	ldr	r3, [pc, #348]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a56      	ldr	r2, [pc, #344]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b4f      	ldr	r3, [pc, #316]	; (80020ac <HAL_RCC_OscConfig+0x938>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d11a      	bne.n	8001fae <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <HAL_RCC_OscConfig+0x938>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a4b      	ldr	r2, [pc, #300]	; (80020ac <HAL_RCC_OscConfig+0x938>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f84:	f7ff f89a 	bl	80010bc <HAL_GetTick>
 8001f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e009      	b.n	8001fa2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff f895 	bl	80010bc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e2e9      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa2:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x938>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ef      	beq.n	8001f8e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x852>
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e02f      	b.n	8002026 <HAL_RCC_OscConfig+0x8b2>
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10c      	bne.n	8001fea <HAL_RCC_OscConfig+0x876>
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a33      	ldr	r2, [pc, #204]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001fe2:	f023 0304 	bic.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	e01d      	b.n	8002026 <HAL_RCC_OscConfig+0x8b2>
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x89a>
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0x8b2>
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a24      	ldr	r2, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d06b      	beq.n	8002108 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff f844 	bl	80010bc <HAL_GetTick>
 8002034:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	e00b      	b.n	8002052 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff f83f 	bl	80010bc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e291      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 8002052:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002080:	601a      	str	r2, [r3, #0]
  return result;
 8002082:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002086:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_OscConfig+0x93c>
 800209c:	4b01      	ldr	r3, [pc, #4]	; (80020a4 <HAL_RCC_OscConfig+0x930>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	e014      	b.n	80020cc <HAL_RCC_OscConfig+0x958>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	10908120 	.word	0x10908120
 80020ac:	40007000 	.word	0x40007000
 80020b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020b4:	2202      	movs	r2, #2
 80020b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	fa93 f2a3 	rbit	r2, r3
 80020c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	4bbb      	ldr	r3, [pc, #748]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020d0:	2102      	movs	r1, #2
 80020d2:	6011      	str	r1, [r2, #0]
 80020d4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020d8:	6812      	ldr	r2, [r2, #0]
 80020da:	fa92 f1a2 	rbit	r1, r2
 80020de:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020e2:	6011      	str	r1, [r2, #0]
  return result;
 80020e4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	fab2 f282 	clz	r2, r2
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f002 021f 	and.w	r2, r2, #31
 80020fa:	2101      	movs	r1, #1
 80020fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d099      	beq.n	800203a <HAL_RCC_OscConfig+0x8c6>
 8002106:	e063      	b.n	80021d0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe ffd8 	bl	80010bc <HAL_GetTick>
 800210c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7fe ffd3 	bl	80010bc <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e225      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 800212a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002146:	2202      	movs	r2, #2
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002158:	601a      	str	r2, [r3, #0]
  return result;
 800215a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800215e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d102      	bne.n	800217a <HAL_RCC_OscConfig+0xa06>
 8002174:	4b90      	ldr	r3, [pc, #576]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	e00d      	b.n	8002196 <HAL_RCC_OscConfig+0xa22>
 800217a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800217e:	2202      	movs	r2, #2
 8002180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800219a:	2102      	movs	r1, #2
 800219c:	6011      	str	r1, [r2, #0]
 800219e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	fa92 f1a2 	rbit	r1, r2
 80021a8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021ac:	6011      	str	r1, [r2, #0]
  return result;
 80021ae:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1a0      	bne.n	8002112 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b77      	ldr	r3, [pc, #476]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	4a76      	ldr	r2, [pc, #472]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 81c2 	beq.w	8002574 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f0:	4b71      	ldr	r3, [pc, #452]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f000 819c 	beq.w	8002536 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	2b02      	cmp	r3, #2
 8002206:	f040 8114 	bne.w	8002432 <HAL_RCC_OscConfig+0xcbe>
 800220a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800220e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fa93 f2a3 	rbit	r2, r3
 800221e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002222:	601a      	str	r2, [r3, #0]
  return result;
 8002224:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002228:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	461a      	mov	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe ff3c 	bl	80010bc <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	e009      	b.n	800225e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe ff37 	bl	80010bc <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e18b      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 800225e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002266:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	fa93 f2a3 	rbit	r2, r3
 8002272:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800227c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d102      	bne.n	8002298 <HAL_RCC_OscConfig+0xb24>
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	e01b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb5c>
 8002298:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	fa93 f2a3 	rbit	r2, r3
 80022ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	fa93 f2a3 	rbit	r2, r3
 80022c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022d8:	6011      	str	r1, [r2, #0]
 80022da:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fa92 f1a2 	rbit	r1, r2
 80022e4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022e8:	6011      	str	r1, [r2, #0]
  return result;
 80022ea:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f042 0220 	orr.w	r2, r2, #32
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	f002 021f 	and.w	r2, r2, #31
 8002300:	2101      	movs	r1, #1
 8002302:	fa01 f202 	lsl.w	r2, r1, r2
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d19e      	bne.n	800224a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	430b      	orrs	r3, r1
 8002322:	4925      	ldr	r1, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800232c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002340:	601a      	str	r2, [r3, #0]
  return result;
 8002342:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002346:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	461a      	mov	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fead 	bl	80010bc <HAL_GetTick>
 8002362:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fea8 	bl	80010bc <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e0fc      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 800237c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002380:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	fa93 f2a3 	rbit	r2, r3
 8002390:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002394:	601a      	str	r2, [r3, #0]
  return result;
 8002396:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800239a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0xc48>
 80023b0:	4b01      	ldr	r3, [pc, #4]	; (80023b8 <HAL_RCC_OscConfig+0xc44>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e01e      	b.n	80023f4 <HAL_RCC_OscConfig+0xc80>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_OscConfig+0xe0c>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023fc:	6011      	str	r1, [r2, #0]
 80023fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	fa92 f1a2 	rbit	r1, r2
 8002408:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800240c:	6011      	str	r1, [r2, #0]
  return result;
 800240e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	fab2 f282 	clz	r2, r2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	f042 0220 	orr.w	r2, r2, #32
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	f002 021f 	and.w	r2, r2, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f202 	lsl.w	r2, r1, r2
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d09b      	beq.n	8002368 <HAL_RCC_OscConfig+0xbf4>
 8002430:	e0a0      	b.n	8002574 <HAL_RCC_OscConfig+0xe00>
 8002432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002436:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	601a      	str	r2, [r3, #0]
  return result;
 800244c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002450:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800245c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	461a      	mov	r2, r3
 8002464:	2300      	movs	r3, #0
 8002466:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fe28 	bl	80010bc <HAL_GetTick>
 800246c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002470:	e009      	b.n	8002486 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f7fe fe23 	bl	80010bc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e077      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
 8002486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800248a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	601a      	str	r2, [r3, #0]
  return result;
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0xd4c>
 80024ba:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0xe0c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	e01b      	b.n	80024f8 <HAL_RCC_OscConfig+0xd84>
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f107 0320 	add.w	r3, r7, #32
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fa93 f2a3 	rbit	r2, r3
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	f107 0318 	add.w	r3, r7, #24
 80024de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f107 0318 	add.w	r3, r7, #24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0xe0c>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f107 0210 	add.w	r2, r7, #16
 80024fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	f107 0210 	add.w	r2, r7, #16
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	fa92 f1a2 	rbit	r1, r2
 800250c:	f107 020c 	add.w	r2, r7, #12
 8002510:	6011      	str	r1, [r2, #0]
  return result;
 8002512:	f107 020c 	add.w	r2, r7, #12
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	fab2 f282 	clz	r2, r2
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f042 0220 	orr.w	r2, r2, #32
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f002 021f 	and.w	r2, r2, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f202 	lsl.w	r2, r1, r2
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d19e      	bne.n	8002472 <HAL_RCC_OscConfig+0xcfe>
 8002534:	e01e      	b.n	8002574 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e018      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCC_OscConfig+0xe0c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800254c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002550:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	429a      	cmp	r2, r3
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800255e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b09e      	sub	sp, #120	; 0x78
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e162      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b90      	ldr	r3, [pc, #576]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	498b      	ldr	r1, [pc, #556]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e14a      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b82      	ldr	r3, [pc, #520]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	497f      	ldr	r1, [pc, #508]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80dc 	beq.w	80027b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d13c      	bne.n	800267a <HAL_RCC_ClockConfig+0xf6>
 8002600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002604:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <HAL_RCC_ClockConfig+0xa6>
 8002624:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e00f      	b.n	800264a <HAL_RCC_ClockConfig+0xc6>
 800262a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	667b      	str	r3, [r7, #100]	; 0x64
 8002638:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263c:	663b      	str	r3, [r7, #96]	; 0x60
 800263e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800264e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002650:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002652:	fa92 f2a2 	rbit	r2, r2
 8002656:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800265a:	fab2 f282 	clz	r2, r2
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	f042 0220 	orr.w	r2, r2, #32
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	f002 021f 	and.w	r2, r2, #31
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f202 	lsl.w	r2, r1, r2
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d17b      	bne.n	800276e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0f3      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d13c      	bne.n	80026fc <HAL_RCC_ClockConfig+0x178>
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_ClockConfig+0x128>
 80026a6:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e00f      	b.n	80026cc <HAL_RCC_ClockConfig+0x148>
 80026ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
 80026ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026be:	643b      	str	r3, [r7, #64]	; 0x40
 80026c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026c8:	4b46      	ldr	r3, [pc, #280]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80026d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f042 0220 	orr.w	r2, r2, #32
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	f002 021f 	and.w	r2, r2, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d13a      	bne.n	800276e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0b2      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
 80026fc:	2302      	movs	r3, #2
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d102      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1a0>
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e00d      	b.n	8002740 <HAL_RCC_ClockConfig+0x1bc>
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2202      	movs	r2, #2
 8002742:	61ba      	str	r2, [r7, #24]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	617a      	str	r2, [r7, #20]
  return result;
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f042 0220 	orr.w	r2, r2, #32
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e079      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	491a      	ldr	r1, [pc, #104]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fc9c 	bl	80010bc <HAL_GetTick>
 8002784:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fc98 	bl	80010bc <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e061      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d214      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4906      	ldr	r1, [pc, #24]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e040      	b.n	8002862 <HAL_RCC_ClockConfig+0x2de>
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_RCC_ClockConfig+0x2e8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	491a      	ldr	r1, [pc, #104]	; (800286c <HAL_RCC_ClockConfig+0x2e8>)
 8002802:	4313      	orrs	r3, r2
 8002804:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002812:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x2e8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4912      	ldr	r1, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x2e8>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002826:	f000 f85d 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800282a:	4601      	mov	r1, r0
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <HAL_RCC_ClockConfig+0x2e8>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	22f0      	movs	r2, #240	; 0xf0
 8002836:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	fa92 f2a2 	rbit	r2, r2
 800283e:	60fa      	str	r2, [r7, #12]
  return result;
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	fab2 f282 	clz	r2, r2
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	40d3      	lsrs	r3, r2
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x2ec>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	fa21 f303 	lsr.w	r3, r1, r3
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x2f0>)
 8002854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_RCC_ClockConfig+0x2f4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fbea 	bl	8001034 <HAL_InitTick>
  
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3778      	adds	r7, #120	; 0x78
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	0800601c 	.word	0x0800601c
 8002874:	2000000c 	.word	0x2000000c
 8002878:	20000010 	.word	0x20000010

0800287c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	; 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002898:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_MCOConfig+0x64>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_RCC_MCOConfig+0x64>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a8:	6153      	str	r3, [r2, #20]
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_MCOConfig+0x64>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c0:	f7fe fdb4 	bl	800142c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_MCOConfig+0x64>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	4903      	ldr	r1, [pc, #12]	; (80028e0 <HAL_RCC_MCOConfig+0x64>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
}
 80028d8:	bf00      	nop
 80028da:	3728      	adds	r7, #40	; 0x28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b08b      	sub	sp, #44	; 0x2c
 80028e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028fe:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x30>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x36>
 8002912:	e03c      	b.n	800298e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002916:	623b      	str	r3, [r7, #32]
      break;
 8002918:	e03c      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002920:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002924:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	fa92 f2a2 	rbit	r2, r2
 800292c:	607a      	str	r2, [r7, #4]
  return result;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	40d3      	lsrs	r3, r2
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_RCC_GetSysClockFreq+0xc8>)
 800293a:	5cd3      	ldrb	r3, [r2, r3]
 800293c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800293e:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	220f      	movs	r2, #15
 8002948:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	60fa      	str	r2, [r7, #12]
  return result;
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	40d3      	lsrs	r3, r2
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e004      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	623b      	str	r3, [r7, #32]
      break;
 800298c:	e002      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002990:	623b      	str	r3, [r7, #32]
      break;
 8002992:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002994:	6a3b      	ldr	r3, [r7, #32]
}
 8002996:	4618      	mov	r0, r3
 8002998:	372c      	adds	r7, #44	; 0x2c
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
 80029a8:	007a1200 	.word	0x007a1200
 80029ac:	08006034 	.word	0x08006034
 80029b0:	08006044 	.word	0x08006044
 80029b4:	003d0900 	.word	0x003d0900

080029b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_RCC_GetHCLKFreq+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	2000000c 	.word	0x2000000c

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80029d6:	f7ff ffef 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029da:	4601      	mov	r1, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029e4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	603a      	str	r2, [r7, #0]
  return result;
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	40d3      	lsrs	r3, r2
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_RCC_GetPCLK1Freq+0x40>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	0800602c 	.word	0x0800602c

08002a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002a1a:	f7ff ffcd 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002a28:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002a2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	fa92 f2a2 	rbit	r2, r2
 8002a34:	603a      	str	r2, [r7, #0]
  return result;
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	fab2 f282 	clz	r2, r2
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	40d3      	lsrs	r3, r2
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	0800602c 	.word	0x0800602c

08002a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b092      	sub	sp, #72	; 0x48
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 80d4 	beq.w	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10e      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	61d3      	str	r3, [r2, #28]
 8002a94:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d118      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab2:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a41      	ldr	r2, [pc, #260]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fafd 	bl	80010bc <HAL_GetTick>
 8002ac2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac6:	f7fe faf9 	bl	80010bc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e13c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8084 	beq.w	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d07c      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	fa93 f3a3 	rbit	r3, r3
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	461a      	mov	r2, r3
 8002b52:	2300      	movs	r3, #0
 8002b54:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04b      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b66:	f7fe faa9 	bl	80010bc <HAL_GetTick>
 8002b6a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe faa5 	bl	80010bc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0e6      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002b84:	2302      	movs	r3, #2
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b90:	2302      	movs	r3, #2
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d108      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bb2:	4b01      	ldr	r3, [pc, #4]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	e00d      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	10908100 	.word	0x10908100
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	613a      	str	r2, [r7, #16]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	fa92 f2a2 	rbit	r2, r2
 8002bde:	60fa      	str	r2, [r7, #12]
  return result;
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	fab2 f282 	clz	r2, r2
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f002 021f 	and.w	r2, r2, #31
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0b7      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4954      	ldr	r1, [pc, #336]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	4a4f      	ldr	r2, [pc, #316]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c30:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f023 0203 	bic.w	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4947      	ldr	r1, [pc, #284]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c4e:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f023 0210 	bic.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4940      	ldr	r1, [pc, #256]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c6c:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f023 0220 	bic.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4938      	ldr	r1, [pc, #224]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4931      	ldr	r1, [pc, #196]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4929      	ldr	r1, [pc, #164]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002cc6:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	4922      	ldr	r1, [pc, #136]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	491a      	ldr	r1, [pc, #104]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	4913      	ldr	r1, [pc, #76]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	490b      	ldr	r1, [pc, #44]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d008      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d3e:	4b07      	ldr	r3, [pc, #28]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	4904      	ldr	r1, [pc, #16]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3748      	adds	r7, #72	; 0x48
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e049      	b.n	8002e06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd ff58 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 fd02 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e033      	b.n	8002e90 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_TIM_Base_Start+0x8c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_TIM_Base_Start+0x3e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e42:	d004      	beq.n	8002e4e <HAL_TIM_Base_Start+0x3e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_TIM_Base_Start+0x90>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d115      	bne.n	8002e7a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <HAL_TIM_Base_Start+0x94>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d015      	beq.n	8002e8c <HAL_TIM_Base_Start+0x7c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d011      	beq.n	8002e8c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e78:	e008      	b.n	8002e8c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e000      	b.n	8002e8e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40014000 	.word	0x40014000
 8002ea4:	00010007 	.word	0x00010007

08002ea8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e049      	b.n	8002f4e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f841 	bl	8002f56 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f000 fc5e 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_IC_Start_IT+0x1e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e023      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_IC_Start_IT+0x2e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	e01b      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d104      	bne.n	8002faa <HAL_TIM_IC_Start_IT+0x3e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e013      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d104      	bne.n	8002fba <HAL_TIM_IC_Start_IT+0x4e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e00b      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_IC_Start_IT+0x5e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e003      	b.n	8002fd2 <HAL_TIM_IC_Start_IT+0x66>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_TIM_IC_Start_IT+0x78>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e013      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d104      	bne.n	8002ff4 <HAL_TIM_IC_Start_IT+0x88>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e00b      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d104      	bne.n	8003004 <HAL_TIM_IC_Start_IT+0x98>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e003      	b.n	800300c <HAL_TIM_IC_Start_IT+0xa0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800300a:	b2db      	uxtb	r3, r3
 800300c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003014:	7b7b      	ldrb	r3, [r7, #13]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0c9      	b.n	80031b2 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_TIM_IC_Start_IT+0xc2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	e023      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d104      	bne.n	800303e <HAL_TIM_IC_Start_IT+0xd2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303c:	e01b      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d104      	bne.n	800304e <HAL_TIM_IC_Start_IT+0xe2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304c:	e013      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d104      	bne.n	800305e <HAL_TIM_IC_Start_IT+0xf2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800305c:	e00b      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b10      	cmp	r3, #16
 8003062:	d104      	bne.n	800306e <HAL_TIM_IC_Start_IT+0x102>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	e003      	b.n	8003076 <HAL_TIM_IC_Start_IT+0x10a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d104      	bne.n	8003086 <HAL_TIM_IC_Start_IT+0x11a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003084:	e013      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b04      	cmp	r3, #4
 800308a:	d104      	bne.n	8003096 <HAL_TIM_IC_Start_IT+0x12a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003094:	e00b      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_IC_Start_IT+0x13a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030a4:	e003      	b.n	80030ae <HAL_TIM_IC_Start_IT+0x142>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d841      	bhi.n	8003138 <HAL_TIM_IC_Start_IT+0x1cc>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <HAL_TIM_IC_Start_IT+0x150>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003139 	.word	0x08003139
 80030c4:	08003139 	.word	0x08003139
 80030c8:	08003139 	.word	0x08003139
 80030cc:	08003103 	.word	0x08003103
 80030d0:	08003139 	.word	0x08003139
 80030d4:	08003139 	.word	0x08003139
 80030d8:	08003139 	.word	0x08003139
 80030dc:	08003115 	.word	0x08003115
 80030e0:	08003139 	.word	0x08003139
 80030e4:	08003139 	.word	0x08003139
 80030e8:	08003139 	.word	0x08003139
 80030ec:	08003127 	.word	0x08003127
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0202 	orr.w	r2, r2, #2
 80030fe:	60da      	str	r2, [r3, #12]
      break;
 8003100:	e01d      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0204 	orr.w	r2, r2, #4
 8003110:	60da      	str	r2, [r3, #12]
      break;
 8003112:	e014      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0208 	orr.w	r2, r2, #8
 8003122:	60da      	str	r2, [r3, #12]
      break;
 8003124:	e00b      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0210 	orr.w	r2, r2, #16
 8003134:	60da      	str	r2, [r3, #12]
      break;
 8003136:	e002      	b.n	800313e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      break;
 800313c:	bf00      	nop
  }

  if (status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d135      	bne.n	80031b0 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2201      	movs	r2, #1
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fd3f 	bl	8003bd0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_IC_Start_IT+0x250>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_TIM_IC_Start_IT+0x204>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d004      	beq.n	8003170 <HAL_TIM_IC_Start_IT+0x204>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <HAL_TIM_IC_Start_IT+0x254>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d115      	bne.n	800319c <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_TIM_IC_Start_IT+0x258>)
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d015      	beq.n	80031ae <HAL_TIM_IC_Start_IT+0x242>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d011      	beq.n	80031ae <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319a:	e008      	b.n	80031ae <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e000      	b.n	80031b0 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	00010007 	.word	0x00010007

080031c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0202 	mvn.w	r2, #2
 80031f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fa5e 	bl	80006cc <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 faaa 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fab1 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d122      	bne.n	8003278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d11b      	bne.n	8003278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0204 	mvn.w	r2, #4
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fa34 	bl	80006cc <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 fa80 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fa87 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b08      	cmp	r3, #8
 8003284:	d122      	bne.n	80032cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b08      	cmp	r3, #8
 8003292:	d11b      	bne.n	80032cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0208 	mvn.w	r2, #8
 800329c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd fa0a 	bl	80006cc <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa56 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fa5d 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0210 	mvn.w	r2, #16
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2208      	movs	r2, #8
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd f9e0 	bl	80006cc <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fa2c 	bl	800376c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fa33 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0201 	mvn.w	r2, #1
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa06 	bl	8003758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003364:	2b80      	cmp	r3, #128	; 0x80
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fcc2 	bl	8003cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003386:	d10e      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d107      	bne.n	80033a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800339e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fcb5 	bl	8003d10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d10e      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d107      	bne.n	80033d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f9e1 	bl	8003794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d10e      	bne.n	80033fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f06f 0220 	mvn.w	r2, #32
 80033f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fc75 	bl	8003ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003420:	2302      	movs	r3, #2
 8003422:	e088      	b.n	8003536 <HAL_TIM_IC_ConfigChannel+0x130>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f000 fa1f 	bl	8003884 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 020c 	bic.w	r2, r2, #12
 8003454:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6999      	ldr	r1, [r3, #24]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
 8003468:	e060      	b.n	800352c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d11c      	bne.n	80034aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f000 fa85 	bl	800398e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003492:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021a      	lsls	r2, r3, #8
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
 80034a8:	e040      	b.n	800352c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 fad2 	bl	8003a68 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020c 	bic.w	r2, r2, #12
 80034d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69d9      	ldr	r1, [r3, #28]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	61da      	str	r2, [r3, #28]
 80034e6:	e021      	b.n	800352c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b0c      	cmp	r3, #12
 80034ec:	d11c      	bne.n	8003528 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6819      	ldr	r1, [r3, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f000 faef 	bl	8003ae0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003510:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	021a      	lsls	r2, r3, #8
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	61da      	str	r2, [r3, #28]
 8003526:	e001      	b.n	800352c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_TIM_ConfigClockSource+0x1c>
 8003556:	2302      	movs	r3, #2
 8003558:	e0b6      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x18a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003578:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800357c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003584:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003596:	d03e      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xd8>
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359c:	f200 8087 	bhi.w	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a4:	f000 8086 	beq.w	80036b4 <HAL_TIM_ConfigClockSource+0x176>
 80035a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ac:	d87f      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035ae:	2b70      	cmp	r3, #112	; 0x70
 80035b0:	d01a      	beq.n	80035e8 <HAL_TIM_ConfigClockSource+0xaa>
 80035b2:	2b70      	cmp	r3, #112	; 0x70
 80035b4:	d87b      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035b6:	2b60      	cmp	r3, #96	; 0x60
 80035b8:	d050      	beq.n	800365c <HAL_TIM_ConfigClockSource+0x11e>
 80035ba:	2b60      	cmp	r3, #96	; 0x60
 80035bc:	d877      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035be:	2b50      	cmp	r3, #80	; 0x50
 80035c0:	d03c      	beq.n	800363c <HAL_TIM_ConfigClockSource+0xfe>
 80035c2:	2b50      	cmp	r3, #80	; 0x50
 80035c4:	d873      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d058      	beq.n	800367c <HAL_TIM_ConfigClockSource+0x13e>
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d86f      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d064      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x15e>
 80035d2:	2b30      	cmp	r3, #48	; 0x30
 80035d4:	d86b      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d060      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x15e>
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d867      	bhi.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d05c      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x15e>
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d05a      	beq.n	800369c <HAL_TIM_ConfigClockSource+0x15e>
 80035e6:	e062      	b.n	80036ae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f000 faca 	bl	8003b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800360a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e04f      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 fab3 	bl	8003b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003638:	609a      	str	r2, [r3, #8]
      break;
 800363a:	e03c      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	461a      	mov	r2, r3
 800364a:	f000 f971 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2150      	movs	r1, #80	; 0x50
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fa80 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 800365a:	e02c      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	f000 f9cd 	bl	8003a08 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2160      	movs	r1, #96	; 0x60
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fa70 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 800367a:	e01c      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	461a      	mov	r2, r3
 800368a:	f000 f951 	bl	8003930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2140      	movs	r1, #64	; 0x40
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fa60 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 800369a:	e00c      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4619      	mov	r1, r3
 80036a6:	4610      	mov	r0, r2
 80036a8:	f000 fa57 	bl	8003b5a <TIM_ITRx_SetConfig>
      break;
 80036ac:	e003      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      break;
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d831      	bhi.n	8003748 <HAL_TIM_ReadCapturedValue+0x78>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	08003721 	.word	0x08003721
 80036f0:	08003749 	.word	0x08003749
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003749 	.word	0x08003749
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	08003749 	.word	0x08003749
 8003704:	08003749 	.word	0x08003749
 8003708:	08003749 	.word	0x08003749
 800370c:	08003735 	.word	0x08003735
 8003710:	08003749 	.word	0x08003749
 8003714:	08003749 	.word	0x08003749
 8003718:	08003749 	.word	0x08003749
 800371c:	0800373f 	.word	0x0800373f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	60fb      	str	r3, [r7, #12]

      break;
 8003728:	e00f      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	60fb      	str	r3, [r7, #12]

      break;
 8003732:	e00a      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	60fb      	str	r3, [r7, #12]

      break;
 800373c:	e005      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	60fb      	str	r3, [r7, #12]

      break;
 8003746:	e000      	b.n	800374a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003748:	bf00      	nop
  }

  return tmpreg;
 800374a:	68fb      	ldr	r3, [r7, #12]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <TIM_Base_SetConfig+0xcc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x20>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a25      	ldr	r2, [pc, #148]	; (8003874 <TIM_Base_SetConfig+0xcc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00f      	beq.n	8003802 <TIM_Base_SetConfig+0x5a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e8:	d00b      	beq.n	8003802 <TIM_Base_SetConfig+0x5a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a22      	ldr	r2, [pc, #136]	; (8003878 <TIM_Base_SetConfig+0xd0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d007      	beq.n	8003802 <TIM_Base_SetConfig+0x5a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a21      	ldr	r2, [pc, #132]	; (800387c <TIM_Base_SetConfig+0xd4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0x5a>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a20      	ldr	r2, [pc, #128]	; (8003880 <TIM_Base_SetConfig+0xd8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d108      	bne.n	8003814 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <TIM_Base_SetConfig+0xcc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00b      	beq.n	8003858 <TIM_Base_SetConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <TIM_Base_SetConfig+0xd0>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d007      	beq.n	8003858 <TIM_Base_SetConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a0c      	ldr	r2, [pc, #48]	; (800387c <TIM_Base_SetConfig+0xd4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_Base_SetConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <TIM_Base_SetConfig+0xd8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d103      	bne.n	8003860 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	615a      	str	r2, [r3, #20]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800

08003884 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <TIM_TI1_SetConfig+0xa4>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d007      	beq.n	80038c2 <TIM_TI1_SetConfig+0x3e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d003      	beq.n	80038c2 <TIM_TI1_SetConfig+0x3e>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <TIM_TI1_SetConfig+0xa8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <TIM_TI1_SetConfig+0x42>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <TIM_TI1_SetConfig+0x44>
 80038c6:	2300      	movs	r3, #0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e003      	b.n	80038e6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f023 030a 	bic.w	r3, r3, #10
 8003900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 030a 	and.w	r3, r3, #10
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40014000 	.word	0x40014000

08003930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0201 	bic.w	r2, r3, #1
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800395a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f023 030a 	bic.w	r3, r3, #10
 800396c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b087      	sub	sp, #28
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f023 0210 	bic.w	r2, r3, #16
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	621a      	str	r2, [r3, #32]
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f023 0210 	bic.w	r2, r3, #16
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	031b      	lsls	r3, r3, #12
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	621a      	str	r2, [r3, #32]
}
 8003a5c:	bf00      	nop
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f023 0303 	bic.w	r3, r3, #3
 8003a94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	621a      	str	r2, [r3, #32]
}
 8003ad4:	bf00      	nop
 8003ad6:	371c      	adds	r7, #28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	031b      	lsls	r3, r3, #12
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	031b      	lsls	r3, r3, #12
 8003b38:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f043 0307 	orr.w	r3, r3, #7
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1a      	ldr	r2, [r3, #32]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 031f 	and.w	r3, r3, #31
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d108      	bne.n	8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d10c      	bne.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40014000 	.word	0x40014000

08003ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e040      	b.n	8003db8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fc ffd4 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fbbe 	bl	80044e4 <UART_SetConfig>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fce8 	bl	8004750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0201 	orr.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fd6f 	bl	8004894 <UART_CheckIdleState>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	f040 8082 	bne.w	8003ede <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_UART_Transmit+0x26>
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e07a      	b.n	8003ee0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Transmit+0x38>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e073      	b.n	8003ee0 <HAL_UART_Transmit+0x120>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2221      	movs	r2, #33	; 0x21
 8003e0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0e:	f7fd f955 	bl	80010bc <HAL_GetTick>
 8003e12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	88fa      	ldrh	r2, [r7, #6]
 8003e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d108      	bne.n	8003e40 <HAL_UART_Transmit+0x80>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d104      	bne.n	8003e40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e003      	b.n	8003e48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e50:	e02d      	b.n	8003eae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fd62 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e039      	b.n	8003ee0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	881a      	ldrh	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	3302      	adds	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e008      	b.n	8003e9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	b292      	uxth	r2, r2
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1cb      	bne.n	8003e52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2140      	movs	r1, #64	; 0x40
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fd2e 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e005      	b.n	8003ee0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0ba      	sub	sp, #232	; 0xe8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f16:	4013      	ands	r3, r2
 8003f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d115      	bne.n	8003f50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f28:	f003 0320 	and.w	r3, r3, #32
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00f      	beq.n	8003f50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 82a3 	beq.w	800448c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
      }
      return;
 8003f4e:	e29d      	b.n	800448c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8117 	beq.w	8004188 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f6a:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_UART_IRQHandler+0x298>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 810a 	beq.w	8004188 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d011      	beq.n	8003fa4 <HAL_UART_IRQHandler+0xbc>
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d011      	beq.n	8003fd4 <HAL_UART_IRQHandler+0xec>
 8003fb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00b      	beq.n	8003fd4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fca:	f043 0204 	orr.w	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_UART_IRQHandler+0x11c>
 8003fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00b      	beq.n	8004004 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ffa:	f043 0202 	orr.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d105      	bne.n	8004028 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800401c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004020:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00b      	beq.n	8004040 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2208      	movs	r2, #8
 800402e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004036:	f043 0208 	orr.w	r2, r3, #8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004048:	2b00      	cmp	r3, #0
 800404a:	d012      	beq.n	8004072 <HAL_UART_IRQHandler+0x18a>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00c      	beq.n	8004072 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8209 	beq.w	8004490 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800408a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408e:	f003 0320 	and.w	r3, r3, #32
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04f      	beq.n	800416a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fcef 	bl	8004aae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b40      	cmp	r3, #64	; 0x40
 80040dc:	d141      	bne.n	8004162 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800410a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800410e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1d9      	bne.n	80040de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	2b00      	cmp	r3, #0
 8004130:	d013      	beq.n	800415a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	4a13      	ldr	r2, [pc, #76]	; (8004184 <HAL_UART_IRQHandler+0x29c>)
 8004138:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd f936 	bl	80013b0 <HAL_DMA_Abort_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d017      	beq.n	800417a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004154:	4610      	mov	r0, r2
 8004156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00f      	b.n	800417a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f9ac 	bl	80044b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e00b      	b.n	800417a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f9a8 	bl	80044b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e007      	b.n	800417a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9a4 	bl	80044b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004178:	e18a      	b.n	8004490 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417a:	bf00      	nop
    return;
 800417c:	e188      	b.n	8004490 <HAL_UART_IRQHandler+0x5a8>
 800417e:	bf00      	nop
 8004180:	04000120 	.word	0x04000120
 8004184:	08004b75 	.word	0x08004b75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	2b01      	cmp	r3, #1
 800418e:	f040 8143 	bne.w	8004418 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 813c 	beq.w	8004418 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8135 	beq.w	8004418 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2210      	movs	r2, #16
 80041b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	f040 80b1 	bne.w	8004328 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 815c 	beq.w	8004494 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041e6:	429a      	cmp	r2, r3
 80041e8:	f080 8154 	bcs.w	8004494 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	f000 8085 	beq.w	800430c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800421a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800422c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004230:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004238:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004244:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1da      	bne.n	8004202 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004256:	e853 3f00 	ldrex	r3, [r3]
 800425a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800425c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004270:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004274:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004278:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e1      	bne.n	800424c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3308      	adds	r3, #8
 80042a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e3      	bne.n	8004288 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80042f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e4      	bne.n	80042cc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4618      	mov	r0, r3
 8004308:	f7fd f819 	bl	800133e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004318:	b29b      	uxth	r3, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8d3 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004326:	e0b5      	b.n	8004494 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004334:	b29b      	uxth	r3, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a7 	beq.w	8004498 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800434a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80a2 	beq.w	8004498 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004376:	647b      	str	r3, [r7, #68]	; 0x44
 8004378:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800437c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e4      	bne.n	8004354 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	623b      	str	r3, [r7, #32]
   return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e3      	bne.n	800438a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f023 0310 	bic.w	r3, r3, #16
 80043e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	69b9      	ldr	r1, [r7, #24]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	617b      	str	r3, [r7, #20]
   return(result);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e4      	bne.n	80043d4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800440a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f85b 	bl	80044cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004416:	e03f      	b.n	8004498 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <HAL_UART_IRQHandler+0x55a>
 8004424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004438:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fbda 	bl	8004bf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004440:	e02d      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00e      	beq.n	800446c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800444e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01c      	beq.n	800449c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	4798      	blx	r3
    }
    return;
 800446a:	e017      	b.n	800449c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <HAL_UART_IRQHandler+0x5b6>
 8004478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00c      	beq.n	800449e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb8b 	bl	8004ba0 <UART_EndTransmit_IT>
    return;
 800448a:	e008      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
      return;
 800448c:	bf00      	nop
 800448e:	e006      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004490:	bf00      	nop
 8004492:	e004      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004494:	bf00      	nop
 8004496:	e002      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004498:	bf00      	nop
 800449a:	e000      	b.n	800449e <HAL_UART_IRQHandler+0x5b6>
    return;
 800449c:	bf00      	nop
  }

}
 800449e:	37e8      	adds	r7, #232	; 0xe8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <UART_SetConfig+0x254>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	6979      	ldr	r1, [r7, #20]
 8004518:	430b      	orrs	r3, r1
 800451a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	430a      	orrs	r2, r1
 8004554:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a78      	ldr	r2, [pc, #480]	; (800473c <UART_SetConfig+0x258>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d120      	bne.n	80045a2 <UART_SetConfig+0xbe>
 8004560:	4b77      	ldr	r3, [pc, #476]	; (8004740 <UART_SetConfig+0x25c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b03      	cmp	r3, #3
 800456a:	d817      	bhi.n	800459c <UART_SetConfig+0xb8>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0x90>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	08004591 	.word	0x08004591
 800457c:	08004597 	.word	0x08004597
 8004580:	0800458b 	.word	0x0800458b
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e01d      	b.n	80045c6 <UART_SetConfig+0xe2>
 800458a:	2302      	movs	r3, #2
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e01a      	b.n	80045c6 <UART_SetConfig+0xe2>
 8004590:	2304      	movs	r3, #4
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e017      	b.n	80045c6 <UART_SetConfig+0xe2>
 8004596:	2308      	movs	r3, #8
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e014      	b.n	80045c6 <UART_SetConfig+0xe2>
 800459c:	2310      	movs	r3, #16
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e011      	b.n	80045c6 <UART_SetConfig+0xe2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a67      	ldr	r2, [pc, #412]	; (8004744 <UART_SetConfig+0x260>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d102      	bne.n	80045b2 <UART_SetConfig+0xce>
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e009      	b.n	80045c6 <UART_SetConfig+0xe2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a64      	ldr	r2, [pc, #400]	; (8004748 <UART_SetConfig+0x264>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d102      	bne.n	80045c2 <UART_SetConfig+0xde>
 80045bc:	2300      	movs	r3, #0
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e001      	b.n	80045c6 <UART_SetConfig+0xe2>
 80045c2:	2310      	movs	r3, #16
 80045c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ce:	d15b      	bne.n	8004688 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d827      	bhi.n	8004626 <UART_SetConfig+0x142>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <UART_SetConfig+0xf8>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004601 	.word	0x08004601
 80045e0:	08004609 	.word	0x08004609
 80045e4:	08004611 	.word	0x08004611
 80045e8:	08004627 	.word	0x08004627
 80045ec:	08004617 	.word	0x08004617
 80045f0:	08004627 	.word	0x08004627
 80045f4:	08004627 	.word	0x08004627
 80045f8:	08004627 	.word	0x08004627
 80045fc:	0800461f 	.word	0x0800461f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004600:	f7fe f9e6 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8004604:	61b8      	str	r0, [r7, #24]
        break;
 8004606:	e013      	b.n	8004630 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004608:	f7fe fa04 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 800460c:	61b8      	str	r0, [r7, #24]
        break;
 800460e:	e00f      	b.n	8004630 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004610:	4b4e      	ldr	r3, [pc, #312]	; (800474c <UART_SetConfig+0x268>)
 8004612:	61bb      	str	r3, [r7, #24]
        break;
 8004614:	e00c      	b.n	8004630 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004616:	f7fe f965 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 800461a:	61b8      	str	r0, [r7, #24]
        break;
 800461c:	e008      	b.n	8004630 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004622:	61bb      	str	r3, [r7, #24]
        break;
 8004624:	e004      	b.n	8004630 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	77bb      	strb	r3, [r7, #30]
        break;
 800462e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d074      	beq.n	8004720 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	005a      	lsls	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	fbb2 f3f3 	udiv	r3, r2, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	2b0f      	cmp	r3, #15
 8004652:	d916      	bls.n	8004682 <UART_SetConfig+0x19e>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465a:	d212      	bcs.n	8004682 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f023 030f 	bic.w	r3, r3, #15
 8004664:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	b29a      	uxth	r2, r3
 8004672:	89fb      	ldrh	r3, [r7, #14]
 8004674:	4313      	orrs	r3, r2
 8004676:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	89fa      	ldrh	r2, [r7, #14]
 800467e:	60da      	str	r2, [r3, #12]
 8004680:	e04e      	b.n	8004720 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	77bb      	strb	r3, [r7, #30]
 8004686:	e04b      	b.n	8004720 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004688:	7ffb      	ldrb	r3, [r7, #31]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d827      	bhi.n	80046de <UART_SetConfig+0x1fa>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x1b0>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046c1 	.word	0x080046c1
 800469c:	080046c9 	.word	0x080046c9
 80046a0:	080046df 	.word	0x080046df
 80046a4:	080046cf 	.word	0x080046cf
 80046a8:	080046df 	.word	0x080046df
 80046ac:	080046df 	.word	0x080046df
 80046b0:	080046df 	.word	0x080046df
 80046b4:	080046d7 	.word	0x080046d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b8:	f7fe f98a 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80046bc:	61b8      	str	r0, [r7, #24]
        break;
 80046be:	e013      	b.n	80046e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7fe f9a8 	bl	8002a14 <HAL_RCC_GetPCLK2Freq>
 80046c4:	61b8      	str	r0, [r7, #24]
        break;
 80046c6:	e00f      	b.n	80046e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <UART_SetConfig+0x268>)
 80046ca:	61bb      	str	r3, [r7, #24]
        break;
 80046cc:	e00c      	b.n	80046e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fe f909 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80046d2:	61b8      	str	r0, [r7, #24]
        break;
 80046d4:	e008      	b.n	80046e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	61bb      	str	r3, [r7, #24]
        break;
 80046dc:	e004      	b.n	80046e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	77bb      	strb	r3, [r7, #30]
        break;
 80046e6:	bf00      	nop
    }

    if (pclk != 0U)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d018      	beq.n	8004720 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	085a      	lsrs	r2, r3, #1
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	b29b      	uxth	r3, r3
 8004702:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d908      	bls.n	800471c <UART_SetConfig+0x238>
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004710:	d204      	bcs.n	800471c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e001      	b.n	8004720 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800472c:	7fbb      	ldrb	r3, [r7, #30]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	efff69f3 	.word	0xefff69f3
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	007a1200 	.word	0x007a1200

08004750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00a      	beq.n	80047e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01a      	beq.n	8004866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d10a      	bne.n	8004866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	605a      	str	r2, [r3, #4]
  }
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a4:	f7fc fc0a 	bl	80010bc <HAL_GetTick>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d10e      	bne.n	80048d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f82d 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e023      	b.n	800491e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d10e      	bne.n	8004902 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f817 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e00d      	b.n	800491e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b09c      	sub	sp, #112	; 0x70
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	e0a5      	b.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	f000 80a1 	beq.w	8004a84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fc fbbb 	bl	80010bc <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <UART_WaitOnFlagUntilTimeout+0x32>
 8004952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004954:	2b00      	cmp	r3, #0
 8004956:	d13e      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496c:	667b      	str	r3, [r7, #100]	; 0x64
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800497c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	663b      	str	r3, [r7, #96]	; 0x60
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e067      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d04f      	beq.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f2:	d147      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3308      	adds	r3, #8
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a50:	623a      	str	r2, [r7, #32]
 8004a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e010      	b.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	f43f af4a 	beq.w	8004938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3770      	adds	r7, #112	; 0x70
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b095      	sub	sp, #84	; 0x54
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e6      	bne.n	8004ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d118      	bne.n	8004b56 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	e853 3f00 	ldrex	r3, [r3]
 8004b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f023 0310 	bic.w	r3, r3, #16
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	6979      	ldr	r1, [r7, #20]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e6      	bne.n	8004b24 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004b68:	bf00      	nop
 8004b6a:	3754      	adds	r7, #84	; 0x54
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff fc90 	bl	80044b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6979      	ldr	r1, [r7, #20]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fc5c 	bl	80044a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bec:	bf00      	nop
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <__errno>:
 8004c08:	4b01      	ldr	r3, [pc, #4]	; (8004c10 <__errno+0x8>)
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000018 	.word	0x20000018

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4d0d      	ldr	r5, [pc, #52]	; (8004c4c <__libc_init_array+0x38>)
 8004c18:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	4d0b      	ldr	r5, [pc, #44]	; (8004c54 <__libc_init_array+0x40>)
 8004c26:	4c0c      	ldr	r4, [pc, #48]	; (8004c58 <__libc_init_array+0x44>)
 8004c28:	f001 f9e2 	bl	8005ff0 <_init>
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	2600      	movs	r6, #0
 8004c32:	42a6      	cmp	r6, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3c:	4798      	blx	r3
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c46:	4798      	blx	r3
 8004c48:	3601      	adds	r6, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	080061a0 	.word	0x080061a0
 8004c50:	080061a0 	.word	0x080061a0
 8004c54:	080061a0 	.word	0x080061a0
 8004c58:	080061a4 	.word	0x080061a4

08004c5c <memset>:
 8004c5c:	4402      	add	r2, r0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d100      	bne.n	8004c66 <memset+0xa>
 8004c64:	4770      	bx	lr
 8004c66:	f803 1b01 	strb.w	r1, [r3], #1
 8004c6a:	e7f9      	b.n	8004c60 <memset+0x4>

08004c6c <srand>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <srand+0x44>)
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004c74:	4604      	mov	r4, r0
 8004c76:	b9b3      	cbnz	r3, 8004ca6 <srand+0x3a>
 8004c78:	2018      	movs	r0, #24
 8004c7a:	f000 f875 	bl	8004d68 <malloc>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	63a8      	str	r0, [r5, #56]	; 0x38
 8004c82:	b920      	cbnz	r0, 8004c8e <srand+0x22>
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <srand+0x48>)
 8004c86:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <srand+0x4c>)
 8004c88:	2142      	movs	r1, #66	; 0x42
 8004c8a:	f000 f83d 	bl	8004d08 <__assert_func>
 8004c8e:	490b      	ldr	r1, [pc, #44]	; (8004cbc <srand+0x50>)
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <srand+0x54>)
 8004c92:	e9c0 1300 	strd	r1, r3, [r0]
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <srand+0x58>)
 8004c98:	6083      	str	r3, [r0, #8]
 8004c9a:	230b      	movs	r3, #11
 8004c9c:	8183      	strh	r3, [r0, #12]
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004ca6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004ca8:	2200      	movs	r2, #0
 8004caa:	611c      	str	r4, [r3, #16]
 8004cac:	615a      	str	r2, [r3, #20]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	20000018 	.word	0x20000018
 8004cb4:	08006058 	.word	0x08006058
 8004cb8:	0800606f 	.word	0x0800606f
 8004cbc:	abcd330e 	.word	0xabcd330e
 8004cc0:	e66d1234 	.word	0xe66d1234
 8004cc4:	0005deec 	.word	0x0005deec

08004cc8 <siprintf>:
 8004cc8:	b40e      	push	{r1, r2, r3}
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <siprintf+0x38>)
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	9104      	str	r1, [sp, #16]
 8004cde:	4909      	ldr	r1, [pc, #36]	; (8004d04 <siprintf+0x3c>)
 8004ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce4:	9105      	str	r1, [sp, #20]
 8004ce6:	6800      	ldr	r0, [r0, #0]
 8004ce8:	9301      	str	r3, [sp, #4]
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	f000 f94a 	bl	8004f84 <_svfiprintf_r>
 8004cf0:	9b02      	ldr	r3, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	b01c      	add	sp, #112	; 0x70
 8004cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cfc:	b003      	add	sp, #12
 8004cfe:	4770      	bx	lr
 8004d00:	20000018 	.word	0x20000018
 8004d04:	ffff0208 	.word	0xffff0208

08004d08 <__assert_func>:
 8004d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <__assert_func+0x2c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4605      	mov	r5, r0
 8004d14:	68d8      	ldr	r0, [r3, #12]
 8004d16:	b14c      	cbz	r4, 8004d2c <__assert_func+0x24>
 8004d18:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <__assert_func+0x30>)
 8004d1a:	9100      	str	r1, [sp, #0]
 8004d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d20:	4906      	ldr	r1, [pc, #24]	; (8004d3c <__assert_func+0x34>)
 8004d22:	462b      	mov	r3, r5
 8004d24:	f000 f80e 	bl	8004d44 <fiprintf>
 8004d28:	f000 fdea 	bl	8005900 <abort>
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <__assert_func+0x38>)
 8004d2e:	461c      	mov	r4, r3
 8004d30:	e7f3      	b.n	8004d1a <__assert_func+0x12>
 8004d32:	bf00      	nop
 8004d34:	20000018 	.word	0x20000018
 8004d38:	080060ce 	.word	0x080060ce
 8004d3c:	080060db 	.word	0x080060db
 8004d40:	08006109 	.word	0x08006109

08004d44 <fiprintf>:
 8004d44:	b40e      	push	{r1, r2, r3}
 8004d46:	b503      	push	{r0, r1, lr}
 8004d48:	4601      	mov	r1, r0
 8004d4a:	ab03      	add	r3, sp, #12
 8004d4c:	4805      	ldr	r0, [pc, #20]	; (8004d64 <fiprintf+0x20>)
 8004d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d52:	6800      	ldr	r0, [r0, #0]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f000 fa3f 	bl	80051d8 <_vfiprintf_r>
 8004d5a:	b002      	add	sp, #8
 8004d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d60:	b003      	add	sp, #12
 8004d62:	4770      	bx	lr
 8004d64:	20000018 	.word	0x20000018

08004d68 <malloc>:
 8004d68:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <malloc+0xc>)
 8004d6a:	4601      	mov	r1, r0
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	f000 b853 	b.w	8004e18 <_malloc_r>
 8004d72:	bf00      	nop
 8004d74:	20000018 	.word	0x20000018

08004d78 <_free_r>:
 8004d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d048      	beq.n	8004e10 <_free_r+0x98>
 8004d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d82:	9001      	str	r0, [sp, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8a:	bfb8      	it	lt
 8004d8c:	18e4      	addlt	r4, r4, r3
 8004d8e:	f001 f805 	bl	8005d9c <__malloc_lock>
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <_free_r+0x9c>)
 8004d94:	9801      	ldr	r0, [sp, #4]
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	4615      	mov	r5, r2
 8004d9a:	b933      	cbnz	r3, 8004daa <_free_r+0x32>
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	6014      	str	r4, [r2, #0]
 8004da0:	b003      	add	sp, #12
 8004da2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da6:	f000 bfff 	b.w	8005da8 <__malloc_unlock>
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	d90b      	bls.n	8004dc6 <_free_r+0x4e>
 8004dae:	6821      	ldr	r1, [r4, #0]
 8004db0:	1862      	adds	r2, r4, r1
 8004db2:	4293      	cmp	r3, r2
 8004db4:	bf04      	itt	eq
 8004db6:	681a      	ldreq	r2, [r3, #0]
 8004db8:	685b      	ldreq	r3, [r3, #4]
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	bf04      	itt	eq
 8004dbe:	1852      	addeq	r2, r2, r1
 8004dc0:	6022      	streq	r2, [r4, #0]
 8004dc2:	602c      	str	r4, [r5, #0]
 8004dc4:	e7ec      	b.n	8004da0 <_free_r+0x28>
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	b10b      	cbz	r3, 8004dd0 <_free_r+0x58>
 8004dcc:	42a3      	cmp	r3, r4
 8004dce:	d9fa      	bls.n	8004dc6 <_free_r+0x4e>
 8004dd0:	6811      	ldr	r1, [r2, #0]
 8004dd2:	1855      	adds	r5, r2, r1
 8004dd4:	42a5      	cmp	r5, r4
 8004dd6:	d10b      	bne.n	8004df0 <_free_r+0x78>
 8004dd8:	6824      	ldr	r4, [r4, #0]
 8004dda:	4421      	add	r1, r4
 8004ddc:	1854      	adds	r4, r2, r1
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	6011      	str	r1, [r2, #0]
 8004de2:	d1dd      	bne.n	8004da0 <_free_r+0x28>
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	6053      	str	r3, [r2, #4]
 8004dea:	4421      	add	r1, r4
 8004dec:	6011      	str	r1, [r2, #0]
 8004dee:	e7d7      	b.n	8004da0 <_free_r+0x28>
 8004df0:	d902      	bls.n	8004df8 <_free_r+0x80>
 8004df2:	230c      	movs	r3, #12
 8004df4:	6003      	str	r3, [r0, #0]
 8004df6:	e7d3      	b.n	8004da0 <_free_r+0x28>
 8004df8:	6825      	ldr	r5, [r4, #0]
 8004dfa:	1961      	adds	r1, r4, r5
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	bf04      	itt	eq
 8004e00:	6819      	ldreq	r1, [r3, #0]
 8004e02:	685b      	ldreq	r3, [r3, #4]
 8004e04:	6063      	str	r3, [r4, #4]
 8004e06:	bf04      	itt	eq
 8004e08:	1949      	addeq	r1, r1, r5
 8004e0a:	6021      	streq	r1, [r4, #0]
 8004e0c:	6054      	str	r4, [r2, #4]
 8004e0e:	e7c7      	b.n	8004da0 <_free_r+0x28>
 8004e10:	b003      	add	sp, #12
 8004e12:	bd30      	pop	{r4, r5, pc}
 8004e14:	200000bc 	.word	0x200000bc

08004e18 <_malloc_r>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	1ccd      	adds	r5, r1, #3
 8004e1c:	f025 0503 	bic.w	r5, r5, #3
 8004e20:	3508      	adds	r5, #8
 8004e22:	2d0c      	cmp	r5, #12
 8004e24:	bf38      	it	cc
 8004e26:	250c      	movcc	r5, #12
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	db01      	blt.n	8004e32 <_malloc_r+0x1a>
 8004e2e:	42a9      	cmp	r1, r5
 8004e30:	d903      	bls.n	8004e3a <_malloc_r+0x22>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6033      	str	r3, [r6, #0]
 8004e36:	2000      	movs	r0, #0
 8004e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3a:	f000 ffaf 	bl	8005d9c <__malloc_lock>
 8004e3e:	4921      	ldr	r1, [pc, #132]	; (8004ec4 <_malloc_r+0xac>)
 8004e40:	680a      	ldr	r2, [r1, #0]
 8004e42:	4614      	mov	r4, r2
 8004e44:	b99c      	cbnz	r4, 8004e6e <_malloc_r+0x56>
 8004e46:	4f20      	ldr	r7, [pc, #128]	; (8004ec8 <_malloc_r+0xb0>)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b923      	cbnz	r3, 8004e56 <_malloc_r+0x3e>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f000 fc86 	bl	8005760 <_sbrk_r>
 8004e54:	6038      	str	r0, [r7, #0]
 8004e56:	4629      	mov	r1, r5
 8004e58:	4630      	mov	r0, r6
 8004e5a:	f000 fc81 	bl	8005760 <_sbrk_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	d123      	bne.n	8004eaa <_malloc_r+0x92>
 8004e62:	230c      	movs	r3, #12
 8004e64:	6033      	str	r3, [r6, #0]
 8004e66:	4630      	mov	r0, r6
 8004e68:	f000 ff9e 	bl	8005da8 <__malloc_unlock>
 8004e6c:	e7e3      	b.n	8004e36 <_malloc_r+0x1e>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	1b5b      	subs	r3, r3, r5
 8004e72:	d417      	bmi.n	8004ea4 <_malloc_r+0x8c>
 8004e74:	2b0b      	cmp	r3, #11
 8004e76:	d903      	bls.n	8004e80 <_malloc_r+0x68>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	441c      	add	r4, r3
 8004e7c:	6025      	str	r5, [r4, #0]
 8004e7e:	e004      	b.n	8004e8a <_malloc_r+0x72>
 8004e80:	6863      	ldr	r3, [r4, #4]
 8004e82:	42a2      	cmp	r2, r4
 8004e84:	bf0c      	ite	eq
 8004e86:	600b      	streq	r3, [r1, #0]
 8004e88:	6053      	strne	r3, [r2, #4]
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f000 ff8c 	bl	8005da8 <__malloc_unlock>
 8004e90:	f104 000b 	add.w	r0, r4, #11
 8004e94:	1d23      	adds	r3, r4, #4
 8004e96:	f020 0007 	bic.w	r0, r0, #7
 8004e9a:	1ac2      	subs	r2, r0, r3
 8004e9c:	d0cc      	beq.n	8004e38 <_malloc_r+0x20>
 8004e9e:	1a1b      	subs	r3, r3, r0
 8004ea0:	50a3      	str	r3, [r4, r2]
 8004ea2:	e7c9      	b.n	8004e38 <_malloc_r+0x20>
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	6864      	ldr	r4, [r4, #4]
 8004ea8:	e7cc      	b.n	8004e44 <_malloc_r+0x2c>
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d0e3      	beq.n	8004e7c <_malloc_r+0x64>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f000 fc52 	bl	8005760 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d1dd      	bne.n	8004e7c <_malloc_r+0x64>
 8004ec0:	e7cf      	b.n	8004e62 <_malloc_r+0x4a>
 8004ec2:	bf00      	nop
 8004ec4:	200000bc 	.word	0x200000bc
 8004ec8:	200000c0 	.word	0x200000c0

08004ecc <__ssputs_r>:
 8004ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	688e      	ldr	r6, [r1, #8]
 8004ed2:	429e      	cmp	r6, r3
 8004ed4:	4682      	mov	sl, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4690      	mov	r8, r2
 8004eda:	461f      	mov	r7, r3
 8004edc:	d838      	bhi.n	8004f50 <__ssputs_r+0x84>
 8004ede:	898a      	ldrh	r2, [r1, #12]
 8004ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ee4:	d032      	beq.n	8004f4c <__ssputs_r+0x80>
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	6909      	ldr	r1, [r1, #16]
 8004eea:	eba5 0901 	sub.w	r9, r5, r1
 8004eee:	6965      	ldr	r5, [r4, #20]
 8004ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ef8:	3301      	adds	r3, #1
 8004efa:	444b      	add	r3, r9
 8004efc:	106d      	asrs	r5, r5, #1
 8004efe:	429d      	cmp	r5, r3
 8004f00:	bf38      	it	cc
 8004f02:	461d      	movcc	r5, r3
 8004f04:	0553      	lsls	r3, r2, #21
 8004f06:	d531      	bpl.n	8004f6c <__ssputs_r+0xa0>
 8004f08:	4629      	mov	r1, r5
 8004f0a:	f7ff ff85 	bl	8004e18 <_malloc_r>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	b950      	cbnz	r0, 8004f28 <__ssputs_r+0x5c>
 8004f12:	230c      	movs	r3, #12
 8004f14:	f8ca 3000 	str.w	r3, [sl]
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1e:	81a3      	strh	r3, [r4, #12]
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f28:	6921      	ldr	r1, [r4, #16]
 8004f2a:	464a      	mov	r2, r9
 8004f2c:	f000 ff0e 	bl	8005d4c <memcpy>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	6126      	str	r6, [r4, #16]
 8004f3e:	6165      	str	r5, [r4, #20]
 8004f40:	444e      	add	r6, r9
 8004f42:	eba5 0509 	sub.w	r5, r5, r9
 8004f46:	6026      	str	r6, [r4, #0]
 8004f48:	60a5      	str	r5, [r4, #8]
 8004f4a:	463e      	mov	r6, r7
 8004f4c:	42be      	cmp	r6, r7
 8004f4e:	d900      	bls.n	8004f52 <__ssputs_r+0x86>
 8004f50:	463e      	mov	r6, r7
 8004f52:	4632      	mov	r2, r6
 8004f54:	6820      	ldr	r0, [r4, #0]
 8004f56:	4641      	mov	r1, r8
 8004f58:	f000 ff06 	bl	8005d68 <memmove>
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	6822      	ldr	r2, [r4, #0]
 8004f60:	1b9b      	subs	r3, r3, r6
 8004f62:	4432      	add	r2, r6
 8004f64:	60a3      	str	r3, [r4, #8]
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e7db      	b.n	8004f24 <__ssputs_r+0x58>
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	f000 ff21 	bl	8005db4 <_realloc_r>
 8004f72:	4606      	mov	r6, r0
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1e1      	bne.n	8004f3c <__ssputs_r+0x70>
 8004f78:	6921      	ldr	r1, [r4, #16]
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	f7ff fefc 	bl	8004d78 <_free_r>
 8004f80:	e7c7      	b.n	8004f12 <__ssputs_r+0x46>
	...

08004f84 <_svfiprintf_r>:
 8004f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f88:	4698      	mov	r8, r3
 8004f8a:	898b      	ldrh	r3, [r1, #12]
 8004f8c:	061b      	lsls	r3, r3, #24
 8004f8e:	b09d      	sub	sp, #116	; 0x74
 8004f90:	4607      	mov	r7, r0
 8004f92:	460d      	mov	r5, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	d50e      	bpl.n	8004fb6 <_svfiprintf_r+0x32>
 8004f98:	690b      	ldr	r3, [r1, #16]
 8004f9a:	b963      	cbnz	r3, 8004fb6 <_svfiprintf_r+0x32>
 8004f9c:	2140      	movs	r1, #64	; 0x40
 8004f9e:	f7ff ff3b 	bl	8004e18 <_malloc_r>
 8004fa2:	6028      	str	r0, [r5, #0]
 8004fa4:	6128      	str	r0, [r5, #16]
 8004fa6:	b920      	cbnz	r0, 8004fb2 <_svfiprintf_r+0x2e>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	603b      	str	r3, [r7, #0]
 8004fac:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb0:	e0d1      	b.n	8005156 <_svfiprintf_r+0x1d2>
 8004fb2:	2340      	movs	r3, #64	; 0x40
 8004fb4:	616b      	str	r3, [r5, #20]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8004fba:	2320      	movs	r3, #32
 8004fbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc4:	2330      	movs	r3, #48	; 0x30
 8004fc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005170 <_svfiprintf_r+0x1ec>
 8004fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fce:	f04f 0901 	mov.w	r9, #1
 8004fd2:	4623      	mov	r3, r4
 8004fd4:	469a      	mov	sl, r3
 8004fd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fda:	b10a      	cbz	r2, 8004fe0 <_svfiprintf_r+0x5c>
 8004fdc:	2a25      	cmp	r2, #37	; 0x25
 8004fde:	d1f9      	bne.n	8004fd4 <_svfiprintf_r+0x50>
 8004fe0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fe4:	d00b      	beq.n	8004ffe <_svfiprintf_r+0x7a>
 8004fe6:	465b      	mov	r3, fp
 8004fe8:	4622      	mov	r2, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	4638      	mov	r0, r7
 8004fee:	f7ff ff6d 	bl	8004ecc <__ssputs_r>
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f000 80aa 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8004ff8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ffa:	445a      	add	r2, fp
 8004ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80a2 	beq.w	800514c <_svfiprintf_r+0x1c8>
 8005008:	2300      	movs	r3, #0
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005012:	f10a 0a01 	add.w	sl, sl, #1
 8005016:	9304      	str	r3, [sp, #16]
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800501e:	931a      	str	r3, [sp, #104]	; 0x68
 8005020:	4654      	mov	r4, sl
 8005022:	2205      	movs	r2, #5
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	4851      	ldr	r0, [pc, #324]	; (8005170 <_svfiprintf_r+0x1ec>)
 800502a:	f7fb f8d1 	bl	80001d0 <memchr>
 800502e:	9a04      	ldr	r2, [sp, #16]
 8005030:	b9d8      	cbnz	r0, 800506a <_svfiprintf_r+0xe6>
 8005032:	06d0      	lsls	r0, r2, #27
 8005034:	bf44      	itt	mi
 8005036:	2320      	movmi	r3, #32
 8005038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800503c:	0711      	lsls	r1, r2, #28
 800503e:	bf44      	itt	mi
 8005040:	232b      	movmi	r3, #43	; 0x2b
 8005042:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005046:	f89a 3000 	ldrb.w	r3, [sl]
 800504a:	2b2a      	cmp	r3, #42	; 0x2a
 800504c:	d015      	beq.n	800507a <_svfiprintf_r+0xf6>
 800504e:	9a07      	ldr	r2, [sp, #28]
 8005050:	4654      	mov	r4, sl
 8005052:	2000      	movs	r0, #0
 8005054:	f04f 0c0a 	mov.w	ip, #10
 8005058:	4621      	mov	r1, r4
 800505a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800505e:	3b30      	subs	r3, #48	; 0x30
 8005060:	2b09      	cmp	r3, #9
 8005062:	d94e      	bls.n	8005102 <_svfiprintf_r+0x17e>
 8005064:	b1b0      	cbz	r0, 8005094 <_svfiprintf_r+0x110>
 8005066:	9207      	str	r2, [sp, #28]
 8005068:	e014      	b.n	8005094 <_svfiprintf_r+0x110>
 800506a:	eba0 0308 	sub.w	r3, r0, r8
 800506e:	fa09 f303 	lsl.w	r3, r9, r3
 8005072:	4313      	orrs	r3, r2
 8005074:	9304      	str	r3, [sp, #16]
 8005076:	46a2      	mov	sl, r4
 8005078:	e7d2      	b.n	8005020 <_svfiprintf_r+0x9c>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	1d19      	adds	r1, r3, #4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	9103      	str	r1, [sp, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfbb      	ittet	lt
 8005086:	425b      	neglt	r3, r3
 8005088:	f042 0202 	orrlt.w	r2, r2, #2
 800508c:	9307      	strge	r3, [sp, #28]
 800508e:	9307      	strlt	r3, [sp, #28]
 8005090:	bfb8      	it	lt
 8005092:	9204      	strlt	r2, [sp, #16]
 8005094:	7823      	ldrb	r3, [r4, #0]
 8005096:	2b2e      	cmp	r3, #46	; 0x2e
 8005098:	d10c      	bne.n	80050b4 <_svfiprintf_r+0x130>
 800509a:	7863      	ldrb	r3, [r4, #1]
 800509c:	2b2a      	cmp	r3, #42	; 0x2a
 800509e:	d135      	bne.n	800510c <_svfiprintf_r+0x188>
 80050a0:	9b03      	ldr	r3, [sp, #12]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	9203      	str	r2, [sp, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bfb8      	it	lt
 80050ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80050b0:	3402      	adds	r4, #2
 80050b2:	9305      	str	r3, [sp, #20]
 80050b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005180 <_svfiprintf_r+0x1fc>
 80050b8:	7821      	ldrb	r1, [r4, #0]
 80050ba:	2203      	movs	r2, #3
 80050bc:	4650      	mov	r0, sl
 80050be:	f7fb f887 	bl	80001d0 <memchr>
 80050c2:	b140      	cbz	r0, 80050d6 <_svfiprintf_r+0x152>
 80050c4:	2340      	movs	r3, #64	; 0x40
 80050c6:	eba0 000a 	sub.w	r0, r0, sl
 80050ca:	fa03 f000 	lsl.w	r0, r3, r0
 80050ce:	9b04      	ldr	r3, [sp, #16]
 80050d0:	4303      	orrs	r3, r0
 80050d2:	3401      	adds	r4, #1
 80050d4:	9304      	str	r3, [sp, #16]
 80050d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050da:	4826      	ldr	r0, [pc, #152]	; (8005174 <_svfiprintf_r+0x1f0>)
 80050dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050e0:	2206      	movs	r2, #6
 80050e2:	f7fb f875 	bl	80001d0 <memchr>
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d038      	beq.n	800515c <_svfiprintf_r+0x1d8>
 80050ea:	4b23      	ldr	r3, [pc, #140]	; (8005178 <_svfiprintf_r+0x1f4>)
 80050ec:	bb1b      	cbnz	r3, 8005136 <_svfiprintf_r+0x1b2>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	3307      	adds	r3, #7
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	3308      	adds	r3, #8
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050fc:	4433      	add	r3, r6
 80050fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005100:	e767      	b.n	8004fd2 <_svfiprintf_r+0x4e>
 8005102:	fb0c 3202 	mla	r2, ip, r2, r3
 8005106:	460c      	mov	r4, r1
 8005108:	2001      	movs	r0, #1
 800510a:	e7a5      	b.n	8005058 <_svfiprintf_r+0xd4>
 800510c:	2300      	movs	r3, #0
 800510e:	3401      	adds	r4, #1
 8005110:	9305      	str	r3, [sp, #20]
 8005112:	4619      	mov	r1, r3
 8005114:	f04f 0c0a 	mov.w	ip, #10
 8005118:	4620      	mov	r0, r4
 800511a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800511e:	3a30      	subs	r2, #48	; 0x30
 8005120:	2a09      	cmp	r2, #9
 8005122:	d903      	bls.n	800512c <_svfiprintf_r+0x1a8>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0c5      	beq.n	80050b4 <_svfiprintf_r+0x130>
 8005128:	9105      	str	r1, [sp, #20]
 800512a:	e7c3      	b.n	80050b4 <_svfiprintf_r+0x130>
 800512c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005130:	4604      	mov	r4, r0
 8005132:	2301      	movs	r3, #1
 8005134:	e7f0      	b.n	8005118 <_svfiprintf_r+0x194>
 8005136:	ab03      	add	r3, sp, #12
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	462a      	mov	r2, r5
 800513c:	4b0f      	ldr	r3, [pc, #60]	; (800517c <_svfiprintf_r+0x1f8>)
 800513e:	a904      	add	r1, sp, #16
 8005140:	4638      	mov	r0, r7
 8005142:	f3af 8000 	nop.w
 8005146:	1c42      	adds	r2, r0, #1
 8005148:	4606      	mov	r6, r0
 800514a:	d1d6      	bne.n	80050fa <_svfiprintf_r+0x176>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	065b      	lsls	r3, r3, #25
 8005150:	f53f af2c 	bmi.w	8004fac <_svfiprintf_r+0x28>
 8005154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005156:	b01d      	add	sp, #116	; 0x74
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	ab03      	add	r3, sp, #12
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	462a      	mov	r2, r5
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <_svfiprintf_r+0x1f8>)
 8005164:	a904      	add	r1, sp, #16
 8005166:	4638      	mov	r0, r7
 8005168:	f000 f9d4 	bl	8005514 <_printf_i>
 800516c:	e7eb      	b.n	8005146 <_svfiprintf_r+0x1c2>
 800516e:	bf00      	nop
 8005170:	0800610a 	.word	0x0800610a
 8005174:	08006114 	.word	0x08006114
 8005178:	00000000 	.word	0x00000000
 800517c:	08004ecd 	.word	0x08004ecd
 8005180:	08006110 	.word	0x08006110

08005184 <__sfputc_r>:
 8005184:	6893      	ldr	r3, [r2, #8]
 8005186:	3b01      	subs	r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	b410      	push	{r4}
 800518c:	6093      	str	r3, [r2, #8]
 800518e:	da08      	bge.n	80051a2 <__sfputc_r+0x1e>
 8005190:	6994      	ldr	r4, [r2, #24]
 8005192:	42a3      	cmp	r3, r4
 8005194:	db01      	blt.n	800519a <__sfputc_r+0x16>
 8005196:	290a      	cmp	r1, #10
 8005198:	d103      	bne.n	80051a2 <__sfputc_r+0x1e>
 800519a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800519e:	f000 baef 	b.w	8005780 <__swbuf_r>
 80051a2:	6813      	ldr	r3, [r2, #0]
 80051a4:	1c58      	adds	r0, r3, #1
 80051a6:	6010      	str	r0, [r2, #0]
 80051a8:	7019      	strb	r1, [r3, #0]
 80051aa:	4608      	mov	r0, r1
 80051ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <__sfputs_r>:
 80051b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	18d5      	adds	r5, r2, r3
 80051bc:	42ac      	cmp	r4, r5
 80051be:	d101      	bne.n	80051c4 <__sfputs_r+0x12>
 80051c0:	2000      	movs	r0, #0
 80051c2:	e007      	b.n	80051d4 <__sfputs_r+0x22>
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	463a      	mov	r2, r7
 80051ca:	4630      	mov	r0, r6
 80051cc:	f7ff ffda 	bl	8005184 <__sfputc_r>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d1f3      	bne.n	80051bc <__sfputs_r+0xa>
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051d8 <_vfiprintf_r>:
 80051d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051dc:	460d      	mov	r5, r1
 80051de:	b09d      	sub	sp, #116	; 0x74
 80051e0:	4614      	mov	r4, r2
 80051e2:	4698      	mov	r8, r3
 80051e4:	4606      	mov	r6, r0
 80051e6:	b118      	cbz	r0, 80051f0 <_vfiprintf_r+0x18>
 80051e8:	6983      	ldr	r3, [r0, #24]
 80051ea:	b90b      	cbnz	r3, 80051f0 <_vfiprintf_r+0x18>
 80051ec:	f000 fcaa 	bl	8005b44 <__sinit>
 80051f0:	4b89      	ldr	r3, [pc, #548]	; (8005418 <_vfiprintf_r+0x240>)
 80051f2:	429d      	cmp	r5, r3
 80051f4:	d11b      	bne.n	800522e <_vfiprintf_r+0x56>
 80051f6:	6875      	ldr	r5, [r6, #4]
 80051f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051fa:	07d9      	lsls	r1, r3, #31
 80051fc:	d405      	bmi.n	800520a <_vfiprintf_r+0x32>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	059a      	lsls	r2, r3, #22
 8005202:	d402      	bmi.n	800520a <_vfiprintf_r+0x32>
 8005204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005206:	f000 fd3b 	bl	8005c80 <__retarget_lock_acquire_recursive>
 800520a:	89ab      	ldrh	r3, [r5, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	d501      	bpl.n	8005214 <_vfiprintf_r+0x3c>
 8005210:	692b      	ldr	r3, [r5, #16]
 8005212:	b9eb      	cbnz	r3, 8005250 <_vfiprintf_r+0x78>
 8005214:	4629      	mov	r1, r5
 8005216:	4630      	mov	r0, r6
 8005218:	f000 fb04 	bl	8005824 <__swsetup_r>
 800521c:	b1c0      	cbz	r0, 8005250 <_vfiprintf_r+0x78>
 800521e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005220:	07dc      	lsls	r4, r3, #31
 8005222:	d50e      	bpl.n	8005242 <_vfiprintf_r+0x6a>
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	b01d      	add	sp, #116	; 0x74
 800522a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522e:	4b7b      	ldr	r3, [pc, #492]	; (800541c <_vfiprintf_r+0x244>)
 8005230:	429d      	cmp	r5, r3
 8005232:	d101      	bne.n	8005238 <_vfiprintf_r+0x60>
 8005234:	68b5      	ldr	r5, [r6, #8]
 8005236:	e7df      	b.n	80051f8 <_vfiprintf_r+0x20>
 8005238:	4b79      	ldr	r3, [pc, #484]	; (8005420 <_vfiprintf_r+0x248>)
 800523a:	429d      	cmp	r5, r3
 800523c:	bf08      	it	eq
 800523e:	68f5      	ldreq	r5, [r6, #12]
 8005240:	e7da      	b.n	80051f8 <_vfiprintf_r+0x20>
 8005242:	89ab      	ldrh	r3, [r5, #12]
 8005244:	0598      	lsls	r0, r3, #22
 8005246:	d4ed      	bmi.n	8005224 <_vfiprintf_r+0x4c>
 8005248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800524a:	f000 fd1a 	bl	8005c82 <__retarget_lock_release_recursive>
 800524e:	e7e9      	b.n	8005224 <_vfiprintf_r+0x4c>
 8005250:	2300      	movs	r3, #0
 8005252:	9309      	str	r3, [sp, #36]	; 0x24
 8005254:	2320      	movs	r3, #32
 8005256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800525a:	f8cd 800c 	str.w	r8, [sp, #12]
 800525e:	2330      	movs	r3, #48	; 0x30
 8005260:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005424 <_vfiprintf_r+0x24c>
 8005264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005268:	f04f 0901 	mov.w	r9, #1
 800526c:	4623      	mov	r3, r4
 800526e:	469a      	mov	sl, r3
 8005270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005274:	b10a      	cbz	r2, 800527a <_vfiprintf_r+0xa2>
 8005276:	2a25      	cmp	r2, #37	; 0x25
 8005278:	d1f9      	bne.n	800526e <_vfiprintf_r+0x96>
 800527a:	ebba 0b04 	subs.w	fp, sl, r4
 800527e:	d00b      	beq.n	8005298 <_vfiprintf_r+0xc0>
 8005280:	465b      	mov	r3, fp
 8005282:	4622      	mov	r2, r4
 8005284:	4629      	mov	r1, r5
 8005286:	4630      	mov	r0, r6
 8005288:	f7ff ff93 	bl	80051b2 <__sfputs_r>
 800528c:	3001      	adds	r0, #1
 800528e:	f000 80aa 	beq.w	80053e6 <_vfiprintf_r+0x20e>
 8005292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005294:	445a      	add	r2, fp
 8005296:	9209      	str	r2, [sp, #36]	; 0x24
 8005298:	f89a 3000 	ldrb.w	r3, [sl]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80a2 	beq.w	80053e6 <_vfiprintf_r+0x20e>
 80052a2:	2300      	movs	r3, #0
 80052a4:	f04f 32ff 	mov.w	r2, #4294967295
 80052a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ac:	f10a 0a01 	add.w	sl, sl, #1
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	9307      	str	r3, [sp, #28]
 80052b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b8:	931a      	str	r3, [sp, #104]	; 0x68
 80052ba:	4654      	mov	r4, sl
 80052bc:	2205      	movs	r2, #5
 80052be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052c2:	4858      	ldr	r0, [pc, #352]	; (8005424 <_vfiprintf_r+0x24c>)
 80052c4:	f7fa ff84 	bl	80001d0 <memchr>
 80052c8:	9a04      	ldr	r2, [sp, #16]
 80052ca:	b9d8      	cbnz	r0, 8005304 <_vfiprintf_r+0x12c>
 80052cc:	06d1      	lsls	r1, r2, #27
 80052ce:	bf44      	itt	mi
 80052d0:	2320      	movmi	r3, #32
 80052d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d6:	0713      	lsls	r3, r2, #28
 80052d8:	bf44      	itt	mi
 80052da:	232b      	movmi	r3, #43	; 0x2b
 80052dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052e0:	f89a 3000 	ldrb.w	r3, [sl]
 80052e4:	2b2a      	cmp	r3, #42	; 0x2a
 80052e6:	d015      	beq.n	8005314 <_vfiprintf_r+0x13c>
 80052e8:	9a07      	ldr	r2, [sp, #28]
 80052ea:	4654      	mov	r4, sl
 80052ec:	2000      	movs	r0, #0
 80052ee:	f04f 0c0a 	mov.w	ip, #10
 80052f2:	4621      	mov	r1, r4
 80052f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f8:	3b30      	subs	r3, #48	; 0x30
 80052fa:	2b09      	cmp	r3, #9
 80052fc:	d94e      	bls.n	800539c <_vfiprintf_r+0x1c4>
 80052fe:	b1b0      	cbz	r0, 800532e <_vfiprintf_r+0x156>
 8005300:	9207      	str	r2, [sp, #28]
 8005302:	e014      	b.n	800532e <_vfiprintf_r+0x156>
 8005304:	eba0 0308 	sub.w	r3, r0, r8
 8005308:	fa09 f303 	lsl.w	r3, r9, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	9304      	str	r3, [sp, #16]
 8005310:	46a2      	mov	sl, r4
 8005312:	e7d2      	b.n	80052ba <_vfiprintf_r+0xe2>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	1d19      	adds	r1, r3, #4
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	9103      	str	r1, [sp, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	bfbb      	ittet	lt
 8005320:	425b      	neglt	r3, r3
 8005322:	f042 0202 	orrlt.w	r2, r2, #2
 8005326:	9307      	strge	r3, [sp, #28]
 8005328:	9307      	strlt	r3, [sp, #28]
 800532a:	bfb8      	it	lt
 800532c:	9204      	strlt	r2, [sp, #16]
 800532e:	7823      	ldrb	r3, [r4, #0]
 8005330:	2b2e      	cmp	r3, #46	; 0x2e
 8005332:	d10c      	bne.n	800534e <_vfiprintf_r+0x176>
 8005334:	7863      	ldrb	r3, [r4, #1]
 8005336:	2b2a      	cmp	r3, #42	; 0x2a
 8005338:	d135      	bne.n	80053a6 <_vfiprintf_r+0x1ce>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	9203      	str	r2, [sp, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bfb8      	it	lt
 8005346:	f04f 33ff 	movlt.w	r3, #4294967295
 800534a:	3402      	adds	r4, #2
 800534c:	9305      	str	r3, [sp, #20]
 800534e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005434 <_vfiprintf_r+0x25c>
 8005352:	7821      	ldrb	r1, [r4, #0]
 8005354:	2203      	movs	r2, #3
 8005356:	4650      	mov	r0, sl
 8005358:	f7fa ff3a 	bl	80001d0 <memchr>
 800535c:	b140      	cbz	r0, 8005370 <_vfiprintf_r+0x198>
 800535e:	2340      	movs	r3, #64	; 0x40
 8005360:	eba0 000a 	sub.w	r0, r0, sl
 8005364:	fa03 f000 	lsl.w	r0, r3, r0
 8005368:	9b04      	ldr	r3, [sp, #16]
 800536a:	4303      	orrs	r3, r0
 800536c:	3401      	adds	r4, #1
 800536e:	9304      	str	r3, [sp, #16]
 8005370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005374:	482c      	ldr	r0, [pc, #176]	; (8005428 <_vfiprintf_r+0x250>)
 8005376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537a:	2206      	movs	r2, #6
 800537c:	f7fa ff28 	bl	80001d0 <memchr>
 8005380:	2800      	cmp	r0, #0
 8005382:	d03f      	beq.n	8005404 <_vfiprintf_r+0x22c>
 8005384:	4b29      	ldr	r3, [pc, #164]	; (800542c <_vfiprintf_r+0x254>)
 8005386:	bb1b      	cbnz	r3, 80053d0 <_vfiprintf_r+0x1f8>
 8005388:	9b03      	ldr	r3, [sp, #12]
 800538a:	3307      	adds	r3, #7
 800538c:	f023 0307 	bic.w	r3, r3, #7
 8005390:	3308      	adds	r3, #8
 8005392:	9303      	str	r3, [sp, #12]
 8005394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005396:	443b      	add	r3, r7
 8005398:	9309      	str	r3, [sp, #36]	; 0x24
 800539a:	e767      	b.n	800526c <_vfiprintf_r+0x94>
 800539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80053a0:	460c      	mov	r4, r1
 80053a2:	2001      	movs	r0, #1
 80053a4:	e7a5      	b.n	80052f2 <_vfiprintf_r+0x11a>
 80053a6:	2300      	movs	r3, #0
 80053a8:	3401      	adds	r4, #1
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	4620      	mov	r0, r4
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	3a30      	subs	r2, #48	; 0x30
 80053ba:	2a09      	cmp	r2, #9
 80053bc:	d903      	bls.n	80053c6 <_vfiprintf_r+0x1ee>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0c5      	beq.n	800534e <_vfiprintf_r+0x176>
 80053c2:	9105      	str	r1, [sp, #20]
 80053c4:	e7c3      	b.n	800534e <_vfiprintf_r+0x176>
 80053c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80053ca:	4604      	mov	r4, r0
 80053cc:	2301      	movs	r3, #1
 80053ce:	e7f0      	b.n	80053b2 <_vfiprintf_r+0x1da>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4b16      	ldr	r3, [pc, #88]	; (8005430 <_vfiprintf_r+0x258>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4630      	mov	r0, r6
 80053dc:	f3af 8000 	nop.w
 80053e0:	4607      	mov	r7, r0
 80053e2:	1c78      	adds	r0, r7, #1
 80053e4:	d1d6      	bne.n	8005394 <_vfiprintf_r+0x1bc>
 80053e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053e8:	07d9      	lsls	r1, r3, #31
 80053ea:	d405      	bmi.n	80053f8 <_vfiprintf_r+0x220>
 80053ec:	89ab      	ldrh	r3, [r5, #12]
 80053ee:	059a      	lsls	r2, r3, #22
 80053f0:	d402      	bmi.n	80053f8 <_vfiprintf_r+0x220>
 80053f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053f4:	f000 fc45 	bl	8005c82 <__retarget_lock_release_recursive>
 80053f8:	89ab      	ldrh	r3, [r5, #12]
 80053fa:	065b      	lsls	r3, r3, #25
 80053fc:	f53f af12 	bmi.w	8005224 <_vfiprintf_r+0x4c>
 8005400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005402:	e711      	b.n	8005228 <_vfiprintf_r+0x50>
 8005404:	ab03      	add	r3, sp, #12
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	462a      	mov	r2, r5
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <_vfiprintf_r+0x258>)
 800540c:	a904      	add	r1, sp, #16
 800540e:	4630      	mov	r0, r6
 8005410:	f000 f880 	bl	8005514 <_printf_i>
 8005414:	e7e4      	b.n	80053e0 <_vfiprintf_r+0x208>
 8005416:	bf00      	nop
 8005418:	08006160 	.word	0x08006160
 800541c:	08006180 	.word	0x08006180
 8005420:	08006140 	.word	0x08006140
 8005424:	0800610a 	.word	0x0800610a
 8005428:	08006114 	.word	0x08006114
 800542c:	00000000 	.word	0x00000000
 8005430:	080051b3 	.word	0x080051b3
 8005434:	08006110 	.word	0x08006110

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4699      	mov	r9, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	6033      	str	r3, [r6, #0]
 8005450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc26      	bgt.n	80054ce <_printf_common+0x96>
 8005480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005484:	1e13      	subs	r3, r2, #0
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d42b      	bmi.n	80054e8 <_printf_common+0xb0>
 8005490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005494:	4649      	mov	r1, r9
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	3001      	adds	r0, #1
 800549c:	d01e      	beq.n	80054dc <_printf_common+0xa4>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	68e5      	ldr	r5, [r4, #12]
 80054a2:	6832      	ldr	r2, [r6, #0]
 80054a4:	f003 0306 	and.w	r3, r3, #6
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	bf08      	it	eq
 80054ac:	1aad      	subeq	r5, r5, r2
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	2600      	movs	r6, #0
 80054c4:	341a      	adds	r4, #26
 80054c6:	42b5      	cmp	r5, r6
 80054c8:	d11a      	bne.n	8005500 <_printf_common+0xc8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e008      	b.n	80054e0 <_printf_common+0xa8>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4649      	mov	r1, r9
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c0      	blx	r8
 80054d8:	3001      	adds	r0, #1
 80054da:	d103      	bne.n	80054e4 <_printf_common+0xac>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7c6      	b.n	8005476 <_printf_common+0x3e>
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	2030      	movs	r0, #48	; 0x30
 80054ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f2:	4422      	add	r2, r4
 80054f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054fc:	3302      	adds	r3, #2
 80054fe:	e7c7      	b.n	8005490 <_printf_common+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	4622      	mov	r2, r4
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d0e6      	beq.n	80054dc <_printf_common+0xa4>
 800550e:	3601      	adds	r6, #1
 8005510:	e7d9      	b.n	80054c6 <_printf_common+0x8e>
	...

08005514 <_printf_i>:
 8005514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	460c      	mov	r4, r1
 800551a:	4691      	mov	r9, r2
 800551c:	7e27      	ldrb	r7, [r4, #24]
 800551e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005520:	2f78      	cmp	r7, #120	; 0x78
 8005522:	4680      	mov	r8, r0
 8005524:	469a      	mov	sl, r3
 8005526:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800552a:	d807      	bhi.n	800553c <_printf_i+0x28>
 800552c:	2f62      	cmp	r7, #98	; 0x62
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x32>
 8005530:	2f00      	cmp	r7, #0
 8005532:	f000 80d8 	beq.w	80056e6 <_printf_i+0x1d2>
 8005536:	2f58      	cmp	r7, #88	; 0x58
 8005538:	f000 80a3 	beq.w	8005682 <_printf_i+0x16e>
 800553c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005544:	e03a      	b.n	80055bc <_printf_i+0xa8>
 8005546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554a:	2b15      	cmp	r3, #21
 800554c:	d8f6      	bhi.n	800553c <_printf_i+0x28>
 800554e:	a001      	add	r0, pc, #4	; (adr r0, 8005554 <_printf_i+0x40>)
 8005550:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055c1 	.word	0x080055c1
 800555c:	0800553d 	.word	0x0800553d
 8005560:	0800553d 	.word	0x0800553d
 8005564:	0800553d 	.word	0x0800553d
 8005568:	0800553d 	.word	0x0800553d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800553d 	.word	0x0800553d
 8005574:	0800553d 	.word	0x0800553d
 8005578:	0800553d 	.word	0x0800553d
 800557c:	0800553d 	.word	0x0800553d
 8005580:	080056cd 	.word	0x080056cd
 8005584:	080055f1 	.word	0x080055f1
 8005588:	080056af 	.word	0x080056af
 800558c:	0800553d 	.word	0x0800553d
 8005590:	0800553d 	.word	0x0800553d
 8005594:	080056ef 	.word	0x080056ef
 8005598:	0800553d 	.word	0x0800553d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800553d 	.word	0x0800553d
 80055a4:	0800553d 	.word	0x0800553d
 80055a8:	080056b7 	.word	0x080056b7
 80055ac:	680b      	ldr	r3, [r1, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	600a      	str	r2, [r1, #0]
 80055b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a3      	b.n	8005708 <_printf_i+0x1f4>
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	6808      	ldr	r0, [r1, #0]
 80055c4:	062e      	lsls	r6, r5, #24
 80055c6:	f100 0304 	add.w	r3, r0, #4
 80055ca:	d50a      	bpl.n	80055e2 <_printf_i+0xce>
 80055cc:	6805      	ldr	r5, [r0, #0]
 80055ce:	600b      	str	r3, [r1, #0]
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	da03      	bge.n	80055dc <_printf_i+0xc8>
 80055d4:	232d      	movs	r3, #45	; 0x2d
 80055d6:	426d      	negs	r5, r5
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	485e      	ldr	r0, [pc, #376]	; (8005758 <_printf_i+0x244>)
 80055de:	230a      	movs	r3, #10
 80055e0:	e019      	b.n	8005616 <_printf_i+0x102>
 80055e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80055e6:	6805      	ldr	r5, [r0, #0]
 80055e8:	600b      	str	r3, [r1, #0]
 80055ea:	bf18      	it	ne
 80055ec:	b22d      	sxthne	r5, r5
 80055ee:	e7ef      	b.n	80055d0 <_printf_i+0xbc>
 80055f0:	680b      	ldr	r3, [r1, #0]
 80055f2:	6825      	ldr	r5, [r4, #0]
 80055f4:	1d18      	adds	r0, r3, #4
 80055f6:	6008      	str	r0, [r1, #0]
 80055f8:	0628      	lsls	r0, r5, #24
 80055fa:	d501      	bpl.n	8005600 <_printf_i+0xec>
 80055fc:	681d      	ldr	r5, [r3, #0]
 80055fe:	e002      	b.n	8005606 <_printf_i+0xf2>
 8005600:	0669      	lsls	r1, r5, #25
 8005602:	d5fb      	bpl.n	80055fc <_printf_i+0xe8>
 8005604:	881d      	ldrh	r5, [r3, #0]
 8005606:	4854      	ldr	r0, [pc, #336]	; (8005758 <_printf_i+0x244>)
 8005608:	2f6f      	cmp	r7, #111	; 0x6f
 800560a:	bf0c      	ite	eq
 800560c:	2308      	moveq	r3, #8
 800560e:	230a      	movne	r3, #10
 8005610:	2100      	movs	r1, #0
 8005612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005616:	6866      	ldr	r6, [r4, #4]
 8005618:	60a6      	str	r6, [r4, #8]
 800561a:	2e00      	cmp	r6, #0
 800561c:	bfa2      	ittt	ge
 800561e:	6821      	ldrge	r1, [r4, #0]
 8005620:	f021 0104 	bicge.w	r1, r1, #4
 8005624:	6021      	strge	r1, [r4, #0]
 8005626:	b90d      	cbnz	r5, 800562c <_printf_i+0x118>
 8005628:	2e00      	cmp	r6, #0
 800562a:	d04d      	beq.n	80056c8 <_printf_i+0x1b4>
 800562c:	4616      	mov	r6, r2
 800562e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005632:	fb03 5711 	mls	r7, r3, r1, r5
 8005636:	5dc7      	ldrb	r7, [r0, r7]
 8005638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800563c:	462f      	mov	r7, r5
 800563e:	42bb      	cmp	r3, r7
 8005640:	460d      	mov	r5, r1
 8005642:	d9f4      	bls.n	800562e <_printf_i+0x11a>
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10b      	bne.n	8005660 <_printf_i+0x14c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	07df      	lsls	r7, r3, #31
 800564c:	d508      	bpl.n	8005660 <_printf_i+0x14c>
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	6861      	ldr	r1, [r4, #4]
 8005652:	4299      	cmp	r1, r3
 8005654:	bfde      	ittt	le
 8005656:	2330      	movle	r3, #48	; 0x30
 8005658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800565c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005660:	1b92      	subs	r2, r2, r6
 8005662:	6122      	str	r2, [r4, #16]
 8005664:	f8cd a000 	str.w	sl, [sp]
 8005668:	464b      	mov	r3, r9
 800566a:	aa03      	add	r2, sp, #12
 800566c:	4621      	mov	r1, r4
 800566e:	4640      	mov	r0, r8
 8005670:	f7ff fee2 	bl	8005438 <_printf_common>
 8005674:	3001      	adds	r0, #1
 8005676:	d14c      	bne.n	8005712 <_printf_i+0x1fe>
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	b004      	add	sp, #16
 800567e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005682:	4835      	ldr	r0, [pc, #212]	; (8005758 <_printf_i+0x244>)
 8005684:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	680e      	ldr	r6, [r1, #0]
 800568c:	061f      	lsls	r7, r3, #24
 800568e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005692:	600e      	str	r6, [r1, #0]
 8005694:	d514      	bpl.n	80056c0 <_printf_i+0x1ac>
 8005696:	07d9      	lsls	r1, r3, #31
 8005698:	bf44      	itt	mi
 800569a:	f043 0320 	orrmi.w	r3, r3, #32
 800569e:	6023      	strmi	r3, [r4, #0]
 80056a0:	b91d      	cbnz	r5, 80056aa <_printf_i+0x196>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f023 0320 	bic.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2310      	movs	r3, #16
 80056ac:	e7b0      	b.n	8005610 <_printf_i+0xfc>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	f043 0320 	orr.w	r3, r3, #32
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	2378      	movs	r3, #120	; 0x78
 80056b8:	4828      	ldr	r0, [pc, #160]	; (800575c <_printf_i+0x248>)
 80056ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056be:	e7e3      	b.n	8005688 <_printf_i+0x174>
 80056c0:	065e      	lsls	r6, r3, #25
 80056c2:	bf48      	it	mi
 80056c4:	b2ad      	uxthmi	r5, r5
 80056c6:	e7e6      	b.n	8005696 <_printf_i+0x182>
 80056c8:	4616      	mov	r6, r2
 80056ca:	e7bb      	b.n	8005644 <_printf_i+0x130>
 80056cc:	680b      	ldr	r3, [r1, #0]
 80056ce:	6826      	ldr	r6, [r4, #0]
 80056d0:	6960      	ldr	r0, [r4, #20]
 80056d2:	1d1d      	adds	r5, r3, #4
 80056d4:	600d      	str	r5, [r1, #0]
 80056d6:	0635      	lsls	r5, r6, #24
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0x1cc>
 80056dc:	6018      	str	r0, [r3, #0]
 80056de:	e002      	b.n	80056e6 <_printf_i+0x1d2>
 80056e0:	0671      	lsls	r1, r6, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0x1c8>
 80056e4:	8018      	strh	r0, [r3, #0]
 80056e6:	2300      	movs	r3, #0
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	4616      	mov	r6, r2
 80056ec:	e7ba      	b.n	8005664 <_printf_i+0x150>
 80056ee:	680b      	ldr	r3, [r1, #0]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	600a      	str	r2, [r1, #0]
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	2100      	movs	r1, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7fa fd68 	bl	80001d0 <memchr>
 8005700:	b108      	cbz	r0, 8005706 <_printf_i+0x1f2>
 8005702:	1b80      	subs	r0, r0, r6
 8005704:	6060      	str	r0, [r4, #4]
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	6123      	str	r3, [r4, #16]
 800570a:	2300      	movs	r3, #0
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005710:	e7a8      	b.n	8005664 <_printf_i+0x150>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	4632      	mov	r2, r6
 8005716:	4649      	mov	r1, r9
 8005718:	4640      	mov	r0, r8
 800571a:	47d0      	blx	sl
 800571c:	3001      	adds	r0, #1
 800571e:	d0ab      	beq.n	8005678 <_printf_i+0x164>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	079b      	lsls	r3, r3, #30
 8005724:	d413      	bmi.n	800574e <_printf_i+0x23a>
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	4298      	cmp	r0, r3
 800572c:	bfb8      	it	lt
 800572e:	4618      	movlt	r0, r3
 8005730:	e7a4      	b.n	800567c <_printf_i+0x168>
 8005732:	2301      	movs	r3, #1
 8005734:	4632      	mov	r2, r6
 8005736:	4649      	mov	r1, r9
 8005738:	4640      	mov	r0, r8
 800573a:	47d0      	blx	sl
 800573c:	3001      	adds	r0, #1
 800573e:	d09b      	beq.n	8005678 <_printf_i+0x164>
 8005740:	3501      	adds	r5, #1
 8005742:	68e3      	ldr	r3, [r4, #12]
 8005744:	9903      	ldr	r1, [sp, #12]
 8005746:	1a5b      	subs	r3, r3, r1
 8005748:	42ab      	cmp	r3, r5
 800574a:	dcf2      	bgt.n	8005732 <_printf_i+0x21e>
 800574c:	e7eb      	b.n	8005726 <_printf_i+0x212>
 800574e:	2500      	movs	r5, #0
 8005750:	f104 0619 	add.w	r6, r4, #25
 8005754:	e7f5      	b.n	8005742 <_printf_i+0x22e>
 8005756:	bf00      	nop
 8005758:	0800611b 	.word	0x0800611b
 800575c:	0800612c 	.word	0x0800612c

08005760 <_sbrk_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d06      	ldr	r5, [pc, #24]	; (800577c <_sbrk_r+0x1c>)
 8005764:	2300      	movs	r3, #0
 8005766:	4604      	mov	r4, r0
 8005768:	4608      	mov	r0, r1
 800576a:	602b      	str	r3, [r5, #0]
 800576c:	f7fb fbda 	bl	8000f24 <_sbrk>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_sbrk_r+0x1a>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_sbrk_r+0x1a>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	20000530 	.word	0x20000530

08005780 <__swbuf_r>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	460e      	mov	r6, r1
 8005784:	4614      	mov	r4, r2
 8005786:	4605      	mov	r5, r0
 8005788:	b118      	cbz	r0, 8005792 <__swbuf_r+0x12>
 800578a:	6983      	ldr	r3, [r0, #24]
 800578c:	b90b      	cbnz	r3, 8005792 <__swbuf_r+0x12>
 800578e:	f000 f9d9 	bl	8005b44 <__sinit>
 8005792:	4b21      	ldr	r3, [pc, #132]	; (8005818 <__swbuf_r+0x98>)
 8005794:	429c      	cmp	r4, r3
 8005796:	d12b      	bne.n	80057f0 <__swbuf_r+0x70>
 8005798:	686c      	ldr	r4, [r5, #4]
 800579a:	69a3      	ldr	r3, [r4, #24]
 800579c:	60a3      	str	r3, [r4, #8]
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	071a      	lsls	r2, r3, #28
 80057a2:	d52f      	bpl.n	8005804 <__swbuf_r+0x84>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	b36b      	cbz	r3, 8005804 <__swbuf_r+0x84>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	6820      	ldr	r0, [r4, #0]
 80057ac:	1ac0      	subs	r0, r0, r3
 80057ae:	6963      	ldr	r3, [r4, #20]
 80057b0:	b2f6      	uxtb	r6, r6
 80057b2:	4283      	cmp	r3, r0
 80057b4:	4637      	mov	r7, r6
 80057b6:	dc04      	bgt.n	80057c2 <__swbuf_r+0x42>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f92e 	bl	8005a1c <_fflush_r>
 80057c0:	bb30      	cbnz	r0, 8005810 <__swbuf_r+0x90>
 80057c2:	68a3      	ldr	r3, [r4, #8]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	60a3      	str	r3, [r4, #8]
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	701e      	strb	r6, [r3, #0]
 80057d0:	6963      	ldr	r3, [r4, #20]
 80057d2:	3001      	adds	r0, #1
 80057d4:	4283      	cmp	r3, r0
 80057d6:	d004      	beq.n	80057e2 <__swbuf_r+0x62>
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	07db      	lsls	r3, r3, #31
 80057dc:	d506      	bpl.n	80057ec <__swbuf_r+0x6c>
 80057de:	2e0a      	cmp	r6, #10
 80057e0:	d104      	bne.n	80057ec <__swbuf_r+0x6c>
 80057e2:	4621      	mov	r1, r4
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 f919 	bl	8005a1c <_fflush_r>
 80057ea:	b988      	cbnz	r0, 8005810 <__swbuf_r+0x90>
 80057ec:	4638      	mov	r0, r7
 80057ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <__swbuf_r+0x9c>)
 80057f2:	429c      	cmp	r4, r3
 80057f4:	d101      	bne.n	80057fa <__swbuf_r+0x7a>
 80057f6:	68ac      	ldr	r4, [r5, #8]
 80057f8:	e7cf      	b.n	800579a <__swbuf_r+0x1a>
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <__swbuf_r+0xa0>)
 80057fc:	429c      	cmp	r4, r3
 80057fe:	bf08      	it	eq
 8005800:	68ec      	ldreq	r4, [r5, #12]
 8005802:	e7ca      	b.n	800579a <__swbuf_r+0x1a>
 8005804:	4621      	mov	r1, r4
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f80c 	bl	8005824 <__swsetup_r>
 800580c:	2800      	cmp	r0, #0
 800580e:	d0cb      	beq.n	80057a8 <__swbuf_r+0x28>
 8005810:	f04f 37ff 	mov.w	r7, #4294967295
 8005814:	e7ea      	b.n	80057ec <__swbuf_r+0x6c>
 8005816:	bf00      	nop
 8005818:	08006160 	.word	0x08006160
 800581c:	08006180 	.word	0x08006180
 8005820:	08006140 	.word	0x08006140

08005824 <__swsetup_r>:
 8005824:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <__swsetup_r+0xcc>)
 8005826:	b570      	push	{r4, r5, r6, lr}
 8005828:	681d      	ldr	r5, [r3, #0]
 800582a:	4606      	mov	r6, r0
 800582c:	460c      	mov	r4, r1
 800582e:	b125      	cbz	r5, 800583a <__swsetup_r+0x16>
 8005830:	69ab      	ldr	r3, [r5, #24]
 8005832:	b913      	cbnz	r3, 800583a <__swsetup_r+0x16>
 8005834:	4628      	mov	r0, r5
 8005836:	f000 f985 	bl	8005b44 <__sinit>
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <__swsetup_r+0xd0>)
 800583c:	429c      	cmp	r4, r3
 800583e:	d10f      	bne.n	8005860 <__swsetup_r+0x3c>
 8005840:	686c      	ldr	r4, [r5, #4]
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005848:	0719      	lsls	r1, r3, #28
 800584a:	d42c      	bmi.n	80058a6 <__swsetup_r+0x82>
 800584c:	06dd      	lsls	r5, r3, #27
 800584e:	d411      	bmi.n	8005874 <__swsetup_r+0x50>
 8005850:	2309      	movs	r3, #9
 8005852:	6033      	str	r3, [r6, #0]
 8005854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295
 800585e:	e03e      	b.n	80058de <__swsetup_r+0xba>
 8005860:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <__swsetup_r+0xd4>)
 8005862:	429c      	cmp	r4, r3
 8005864:	d101      	bne.n	800586a <__swsetup_r+0x46>
 8005866:	68ac      	ldr	r4, [r5, #8]
 8005868:	e7eb      	b.n	8005842 <__swsetup_r+0x1e>
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <__swsetup_r+0xd8>)
 800586c:	429c      	cmp	r4, r3
 800586e:	bf08      	it	eq
 8005870:	68ec      	ldreq	r4, [r5, #12]
 8005872:	e7e6      	b.n	8005842 <__swsetup_r+0x1e>
 8005874:	0758      	lsls	r0, r3, #29
 8005876:	d512      	bpl.n	800589e <__swsetup_r+0x7a>
 8005878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800587a:	b141      	cbz	r1, 800588e <__swsetup_r+0x6a>
 800587c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005880:	4299      	cmp	r1, r3
 8005882:	d002      	beq.n	800588a <__swsetup_r+0x66>
 8005884:	4630      	mov	r0, r6
 8005886:	f7ff fa77 	bl	8004d78 <_free_r>
 800588a:	2300      	movs	r3, #0
 800588c:	6363      	str	r3, [r4, #52]	; 0x34
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005894:	81a3      	strh	r3, [r4, #12]
 8005896:	2300      	movs	r3, #0
 8005898:	6063      	str	r3, [r4, #4]
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	f043 0308 	orr.w	r3, r3, #8
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	b94b      	cbnz	r3, 80058be <__swsetup_r+0x9a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b4:	d003      	beq.n	80058be <__swsetup_r+0x9a>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4630      	mov	r0, r6
 80058ba:	f000 fa07 	bl	8005ccc <__smakebuf_r>
 80058be:	89a0      	ldrh	r0, [r4, #12]
 80058c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c4:	f010 0301 	ands.w	r3, r0, #1
 80058c8:	d00a      	beq.n	80058e0 <__swsetup_r+0xbc>
 80058ca:	2300      	movs	r3, #0
 80058cc:	60a3      	str	r3, [r4, #8]
 80058ce:	6963      	ldr	r3, [r4, #20]
 80058d0:	425b      	negs	r3, r3
 80058d2:	61a3      	str	r3, [r4, #24]
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	b943      	cbnz	r3, 80058ea <__swsetup_r+0xc6>
 80058d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058dc:	d1ba      	bne.n	8005854 <__swsetup_r+0x30>
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	0781      	lsls	r1, r0, #30
 80058e2:	bf58      	it	pl
 80058e4:	6963      	ldrpl	r3, [r4, #20]
 80058e6:	60a3      	str	r3, [r4, #8]
 80058e8:	e7f4      	b.n	80058d4 <__swsetup_r+0xb0>
 80058ea:	2000      	movs	r0, #0
 80058ec:	e7f7      	b.n	80058de <__swsetup_r+0xba>
 80058ee:	bf00      	nop
 80058f0:	20000018 	.word	0x20000018
 80058f4:	08006160 	.word	0x08006160
 80058f8:	08006180 	.word	0x08006180
 80058fc:	08006140 	.word	0x08006140

08005900 <abort>:
 8005900:	b508      	push	{r3, lr}
 8005902:	2006      	movs	r0, #6
 8005904:	f000 faa4 	bl	8005e50 <raise>
 8005908:	2001      	movs	r0, #1
 800590a:	f7fb fa93 	bl	8000e34 <_exit>
	...

08005910 <__sflush_r>:
 8005910:	898a      	ldrh	r2, [r1, #12]
 8005912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	4605      	mov	r5, r0
 8005918:	0710      	lsls	r0, r2, #28
 800591a:	460c      	mov	r4, r1
 800591c:	d458      	bmi.n	80059d0 <__sflush_r+0xc0>
 800591e:	684b      	ldr	r3, [r1, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	dc05      	bgt.n	8005930 <__sflush_r+0x20>
 8005924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	dc02      	bgt.n	8005930 <__sflush_r+0x20>
 800592a:	2000      	movs	r0, #0
 800592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005932:	2e00      	cmp	r6, #0
 8005934:	d0f9      	beq.n	800592a <__sflush_r+0x1a>
 8005936:	2300      	movs	r3, #0
 8005938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800593c:	682f      	ldr	r7, [r5, #0]
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	d032      	beq.n	80059a8 <__sflush_r+0x98>
 8005942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005944:	89a3      	ldrh	r3, [r4, #12]
 8005946:	075a      	lsls	r2, r3, #29
 8005948:	d505      	bpl.n	8005956 <__sflush_r+0x46>
 800594a:	6863      	ldr	r3, [r4, #4]
 800594c:	1ac0      	subs	r0, r0, r3
 800594e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005950:	b10b      	cbz	r3, 8005956 <__sflush_r+0x46>
 8005952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005954:	1ac0      	subs	r0, r0, r3
 8005956:	2300      	movs	r3, #0
 8005958:	4602      	mov	r2, r0
 800595a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800595c:	6a21      	ldr	r1, [r4, #32]
 800595e:	4628      	mov	r0, r5
 8005960:	47b0      	blx	r6
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	d106      	bne.n	8005976 <__sflush_r+0x66>
 8005968:	6829      	ldr	r1, [r5, #0]
 800596a:	291d      	cmp	r1, #29
 800596c:	d82c      	bhi.n	80059c8 <__sflush_r+0xb8>
 800596e:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <__sflush_r+0x108>)
 8005970:	40ca      	lsrs	r2, r1
 8005972:	07d6      	lsls	r6, r2, #31
 8005974:	d528      	bpl.n	80059c8 <__sflush_r+0xb8>
 8005976:	2200      	movs	r2, #0
 8005978:	6062      	str	r2, [r4, #4]
 800597a:	04d9      	lsls	r1, r3, #19
 800597c:	6922      	ldr	r2, [r4, #16]
 800597e:	6022      	str	r2, [r4, #0]
 8005980:	d504      	bpl.n	800598c <__sflush_r+0x7c>
 8005982:	1c42      	adds	r2, r0, #1
 8005984:	d101      	bne.n	800598a <__sflush_r+0x7a>
 8005986:	682b      	ldr	r3, [r5, #0]
 8005988:	b903      	cbnz	r3, 800598c <__sflush_r+0x7c>
 800598a:	6560      	str	r0, [r4, #84]	; 0x54
 800598c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800598e:	602f      	str	r7, [r5, #0]
 8005990:	2900      	cmp	r1, #0
 8005992:	d0ca      	beq.n	800592a <__sflush_r+0x1a>
 8005994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005998:	4299      	cmp	r1, r3
 800599a:	d002      	beq.n	80059a2 <__sflush_r+0x92>
 800599c:	4628      	mov	r0, r5
 800599e:	f7ff f9eb 	bl	8004d78 <_free_r>
 80059a2:	2000      	movs	r0, #0
 80059a4:	6360      	str	r0, [r4, #52]	; 0x34
 80059a6:	e7c1      	b.n	800592c <__sflush_r+0x1c>
 80059a8:	6a21      	ldr	r1, [r4, #32]
 80059aa:	2301      	movs	r3, #1
 80059ac:	4628      	mov	r0, r5
 80059ae:	47b0      	blx	r6
 80059b0:	1c41      	adds	r1, r0, #1
 80059b2:	d1c7      	bne.n	8005944 <__sflush_r+0x34>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0c4      	beq.n	8005944 <__sflush_r+0x34>
 80059ba:	2b1d      	cmp	r3, #29
 80059bc:	d001      	beq.n	80059c2 <__sflush_r+0xb2>
 80059be:	2b16      	cmp	r3, #22
 80059c0:	d101      	bne.n	80059c6 <__sflush_r+0xb6>
 80059c2:	602f      	str	r7, [r5, #0]
 80059c4:	e7b1      	b.n	800592a <__sflush_r+0x1a>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	e7ad      	b.n	800592c <__sflush_r+0x1c>
 80059d0:	690f      	ldr	r7, [r1, #16]
 80059d2:	2f00      	cmp	r7, #0
 80059d4:	d0a9      	beq.n	800592a <__sflush_r+0x1a>
 80059d6:	0793      	lsls	r3, r2, #30
 80059d8:	680e      	ldr	r6, [r1, #0]
 80059da:	bf08      	it	eq
 80059dc:	694b      	ldreq	r3, [r1, #20]
 80059de:	600f      	str	r7, [r1, #0]
 80059e0:	bf18      	it	ne
 80059e2:	2300      	movne	r3, #0
 80059e4:	eba6 0807 	sub.w	r8, r6, r7
 80059e8:	608b      	str	r3, [r1, #8]
 80059ea:	f1b8 0f00 	cmp.w	r8, #0
 80059ee:	dd9c      	ble.n	800592a <__sflush_r+0x1a>
 80059f0:	6a21      	ldr	r1, [r4, #32]
 80059f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059f4:	4643      	mov	r3, r8
 80059f6:	463a      	mov	r2, r7
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b0      	blx	r6
 80059fc:	2800      	cmp	r0, #0
 80059fe:	dc06      	bgt.n	8005a0e <__sflush_r+0xfe>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	e78e      	b.n	800592c <__sflush_r+0x1c>
 8005a0e:	4407      	add	r7, r0
 8005a10:	eba8 0800 	sub.w	r8, r8, r0
 8005a14:	e7e9      	b.n	80059ea <__sflush_r+0xda>
 8005a16:	bf00      	nop
 8005a18:	20400001 	.word	0x20400001

08005a1c <_fflush_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	690b      	ldr	r3, [r1, #16]
 8005a20:	4605      	mov	r5, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	b913      	cbnz	r3, 8005a2c <_fflush_r+0x10>
 8005a26:	2500      	movs	r5, #0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	b118      	cbz	r0, 8005a36 <_fflush_r+0x1a>
 8005a2e:	6983      	ldr	r3, [r0, #24]
 8005a30:	b90b      	cbnz	r3, 8005a36 <_fflush_r+0x1a>
 8005a32:	f000 f887 	bl	8005b44 <__sinit>
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <_fflush_r+0x6c>)
 8005a38:	429c      	cmp	r4, r3
 8005a3a:	d11b      	bne.n	8005a74 <_fflush_r+0x58>
 8005a3c:	686c      	ldr	r4, [r5, #4]
 8005a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0ef      	beq.n	8005a26 <_fflush_r+0xa>
 8005a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a48:	07d0      	lsls	r0, r2, #31
 8005a4a:	d404      	bmi.n	8005a56 <_fflush_r+0x3a>
 8005a4c:	0599      	lsls	r1, r3, #22
 8005a4e:	d402      	bmi.n	8005a56 <_fflush_r+0x3a>
 8005a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a52:	f000 f915 	bl	8005c80 <__retarget_lock_acquire_recursive>
 8005a56:	4628      	mov	r0, r5
 8005a58:	4621      	mov	r1, r4
 8005a5a:	f7ff ff59 	bl	8005910 <__sflush_r>
 8005a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a60:	07da      	lsls	r2, r3, #31
 8005a62:	4605      	mov	r5, r0
 8005a64:	d4e0      	bmi.n	8005a28 <_fflush_r+0xc>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	059b      	lsls	r3, r3, #22
 8005a6a:	d4dd      	bmi.n	8005a28 <_fflush_r+0xc>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6e:	f000 f908 	bl	8005c82 <__retarget_lock_release_recursive>
 8005a72:	e7d9      	b.n	8005a28 <_fflush_r+0xc>
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <_fflush_r+0x70>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d101      	bne.n	8005a7e <_fflush_r+0x62>
 8005a7a:	68ac      	ldr	r4, [r5, #8]
 8005a7c:	e7df      	b.n	8005a3e <_fflush_r+0x22>
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <_fflush_r+0x74>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	bf08      	it	eq
 8005a84:	68ec      	ldreq	r4, [r5, #12]
 8005a86:	e7da      	b.n	8005a3e <_fflush_r+0x22>
 8005a88:	08006160 	.word	0x08006160
 8005a8c:	08006180 	.word	0x08006180
 8005a90:	08006140 	.word	0x08006140

08005a94 <std>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	b510      	push	{r4, lr}
 8005a98:	4604      	mov	r4, r0
 8005a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aa2:	6083      	str	r3, [r0, #8]
 8005aa4:	8181      	strh	r1, [r0, #12]
 8005aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8005aa8:	81c2      	strh	r2, [r0, #14]
 8005aaa:	6183      	str	r3, [r0, #24]
 8005aac:	4619      	mov	r1, r3
 8005aae:	2208      	movs	r2, #8
 8005ab0:	305c      	adds	r0, #92	; 0x5c
 8005ab2:	f7ff f8d3 	bl	8004c5c <memset>
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <std+0x38>)
 8005ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <std+0x3c>)
 8005abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005abe:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <std+0x40>)
 8005ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <std+0x44>)
 8005ac4:	6224      	str	r4, [r4, #32]
 8005ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	bf00      	nop
 8005acc:	08005e89 	.word	0x08005e89
 8005ad0:	08005eab 	.word	0x08005eab
 8005ad4:	08005ee3 	.word	0x08005ee3
 8005ad8:	08005f07 	.word	0x08005f07

08005adc <_cleanup_r>:
 8005adc:	4901      	ldr	r1, [pc, #4]	; (8005ae4 <_cleanup_r+0x8>)
 8005ade:	f000 b8af 	b.w	8005c40 <_fwalk_reent>
 8005ae2:	bf00      	nop
 8005ae4:	08005a1d 	.word	0x08005a1d

08005ae8 <__sfmoreglue>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	1e4a      	subs	r2, r1, #1
 8005aec:	2568      	movs	r5, #104	; 0x68
 8005aee:	4355      	muls	r5, r2
 8005af0:	460e      	mov	r6, r1
 8005af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005af6:	f7ff f98f 	bl	8004e18 <_malloc_r>
 8005afa:	4604      	mov	r4, r0
 8005afc:	b140      	cbz	r0, 8005b10 <__sfmoreglue+0x28>
 8005afe:	2100      	movs	r1, #0
 8005b00:	e9c0 1600 	strd	r1, r6, [r0]
 8005b04:	300c      	adds	r0, #12
 8005b06:	60a0      	str	r0, [r4, #8]
 8005b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b0c:	f7ff f8a6 	bl	8004c5c <memset>
 8005b10:	4620      	mov	r0, r4
 8005b12:	bd70      	pop	{r4, r5, r6, pc}

08005b14 <__sfp_lock_acquire>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__sfp_lock_acquire+0x8>)
 8005b16:	f000 b8b3 	b.w	8005c80 <__retarget_lock_acquire_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	2000052c 	.word	0x2000052c

08005b20 <__sfp_lock_release>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__sfp_lock_release+0x8>)
 8005b22:	f000 b8ae 	b.w	8005c82 <__retarget_lock_release_recursive>
 8005b26:	bf00      	nop
 8005b28:	2000052c 	.word	0x2000052c

08005b2c <__sinit_lock_acquire>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sinit_lock_acquire+0x8>)
 8005b2e:	f000 b8a7 	b.w	8005c80 <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	20000527 	.word	0x20000527

08005b38 <__sinit_lock_release>:
 8005b38:	4801      	ldr	r0, [pc, #4]	; (8005b40 <__sinit_lock_release+0x8>)
 8005b3a:	f000 b8a2 	b.w	8005c82 <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20000527 	.word	0x20000527

08005b44 <__sinit>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4604      	mov	r4, r0
 8005b48:	f7ff fff0 	bl	8005b2c <__sinit_lock_acquire>
 8005b4c:	69a3      	ldr	r3, [r4, #24]
 8005b4e:	b11b      	cbz	r3, 8005b58 <__sinit+0x14>
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b54:	f7ff bff0 	b.w	8005b38 <__sinit_lock_release>
 8005b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <__sinit+0x68>)
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <__sinit+0x6c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b66:	42a3      	cmp	r3, r4
 8005b68:	bf04      	itt	eq
 8005b6a:	2301      	moveq	r3, #1
 8005b6c:	61a3      	streq	r3, [r4, #24]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f820 	bl	8005bb4 <__sfp>
 8005b74:	6060      	str	r0, [r4, #4]
 8005b76:	4620      	mov	r0, r4
 8005b78:	f000 f81c 	bl	8005bb4 <__sfp>
 8005b7c:	60a0      	str	r0, [r4, #8]
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f000 f818 	bl	8005bb4 <__sfp>
 8005b84:	2200      	movs	r2, #0
 8005b86:	60e0      	str	r0, [r4, #12]
 8005b88:	2104      	movs	r1, #4
 8005b8a:	6860      	ldr	r0, [r4, #4]
 8005b8c:	f7ff ff82 	bl	8005a94 <std>
 8005b90:	68a0      	ldr	r0, [r4, #8]
 8005b92:	2201      	movs	r2, #1
 8005b94:	2109      	movs	r1, #9
 8005b96:	f7ff ff7d 	bl	8005a94 <std>
 8005b9a:	68e0      	ldr	r0, [r4, #12]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	2112      	movs	r1, #18
 8005ba0:	f7ff ff78 	bl	8005a94 <std>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	61a3      	str	r3, [r4, #24]
 8005ba8:	e7d2      	b.n	8005b50 <__sinit+0xc>
 8005baa:	bf00      	nop
 8005bac:	08006054 	.word	0x08006054
 8005bb0:	08005add 	.word	0x08005add

08005bb4 <__sfp>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	4607      	mov	r7, r0
 8005bb8:	f7ff ffac 	bl	8005b14 <__sfp_lock_acquire>
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <__sfp+0x84>)
 8005bbe:	681e      	ldr	r6, [r3, #0]
 8005bc0:	69b3      	ldr	r3, [r6, #24]
 8005bc2:	b913      	cbnz	r3, 8005bca <__sfp+0x16>
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f7ff ffbd 	bl	8005b44 <__sinit>
 8005bca:	3648      	adds	r6, #72	; 0x48
 8005bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	d503      	bpl.n	8005bdc <__sfp+0x28>
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	b30b      	cbz	r3, 8005c1c <__sfp+0x68>
 8005bd8:	6836      	ldr	r6, [r6, #0]
 8005bda:	e7f7      	b.n	8005bcc <__sfp+0x18>
 8005bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005be0:	b9d5      	cbnz	r5, 8005c18 <__sfp+0x64>
 8005be2:	4b16      	ldr	r3, [pc, #88]	; (8005c3c <__sfp+0x88>)
 8005be4:	60e3      	str	r3, [r4, #12]
 8005be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bea:	6665      	str	r5, [r4, #100]	; 0x64
 8005bec:	f000 f847 	bl	8005c7e <__retarget_lock_init_recursive>
 8005bf0:	f7ff ff96 	bl	8005b20 <__sfp_lock_release>
 8005bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bfc:	6025      	str	r5, [r4, #0]
 8005bfe:	61a5      	str	r5, [r4, #24]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4629      	mov	r1, r5
 8005c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c08:	f7ff f828 	bl	8004c5c <memset>
 8005c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c14:	4620      	mov	r0, r4
 8005c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c18:	3468      	adds	r4, #104	; 0x68
 8005c1a:	e7d9      	b.n	8005bd0 <__sfp+0x1c>
 8005c1c:	2104      	movs	r1, #4
 8005c1e:	4638      	mov	r0, r7
 8005c20:	f7ff ff62 	bl	8005ae8 <__sfmoreglue>
 8005c24:	4604      	mov	r4, r0
 8005c26:	6030      	str	r0, [r6, #0]
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d1d5      	bne.n	8005bd8 <__sfp+0x24>
 8005c2c:	f7ff ff78 	bl	8005b20 <__sfp_lock_release>
 8005c30:	230c      	movs	r3, #12
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	e7ee      	b.n	8005c14 <__sfp+0x60>
 8005c36:	bf00      	nop
 8005c38:	08006054 	.word	0x08006054
 8005c3c:	ffff0001 	.word	0xffff0001

08005c40 <_fwalk_reent>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4606      	mov	r6, r0
 8005c46:	4688      	mov	r8, r1
 8005c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c4c:	2700      	movs	r7, #0
 8005c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c52:	f1b9 0901 	subs.w	r9, r9, #1
 8005c56:	d505      	bpl.n	8005c64 <_fwalk_reent+0x24>
 8005c58:	6824      	ldr	r4, [r4, #0]
 8005c5a:	2c00      	cmp	r4, #0
 8005c5c:	d1f7      	bne.n	8005c4e <_fwalk_reent+0xe>
 8005c5e:	4638      	mov	r0, r7
 8005c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c64:	89ab      	ldrh	r3, [r5, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d907      	bls.n	8005c7a <_fwalk_reent+0x3a>
 8005c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	d003      	beq.n	8005c7a <_fwalk_reent+0x3a>
 8005c72:	4629      	mov	r1, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	47c0      	blx	r8
 8005c78:	4307      	orrs	r7, r0
 8005c7a:	3568      	adds	r5, #104	; 0x68
 8005c7c:	e7e9      	b.n	8005c52 <_fwalk_reent+0x12>

08005c7e <__retarget_lock_init_recursive>:
 8005c7e:	4770      	bx	lr

08005c80 <__retarget_lock_acquire_recursive>:
 8005c80:	4770      	bx	lr

08005c82 <__retarget_lock_release_recursive>:
 8005c82:	4770      	bx	lr

08005c84 <__swhatbuf_r>:
 8005c84:	b570      	push	{r4, r5, r6, lr}
 8005c86:	460e      	mov	r6, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	2900      	cmp	r1, #0
 8005c8e:	b096      	sub	sp, #88	; 0x58
 8005c90:	4614      	mov	r4, r2
 8005c92:	461d      	mov	r5, r3
 8005c94:	da07      	bge.n	8005ca6 <__swhatbuf_r+0x22>
 8005c96:	2300      	movs	r3, #0
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	89b3      	ldrh	r3, [r6, #12]
 8005c9c:	061a      	lsls	r2, r3, #24
 8005c9e:	d410      	bmi.n	8005cc2 <__swhatbuf_r+0x3e>
 8005ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca4:	e00e      	b.n	8005cc4 <__swhatbuf_r+0x40>
 8005ca6:	466a      	mov	r2, sp
 8005ca8:	f000 f954 	bl	8005f54 <_fstat_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	dbf2      	blt.n	8005c96 <__swhatbuf_r+0x12>
 8005cb0:	9a01      	ldr	r2, [sp, #4]
 8005cb2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cb6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cba:	425a      	negs	r2, r3
 8005cbc:	415a      	adcs	r2, r3
 8005cbe:	602a      	str	r2, [r5, #0]
 8005cc0:	e7ee      	b.n	8005ca0 <__swhatbuf_r+0x1c>
 8005cc2:	2340      	movs	r3, #64	; 0x40
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	b016      	add	sp, #88	; 0x58
 8005cca:	bd70      	pop	{r4, r5, r6, pc}

08005ccc <__smakebuf_r>:
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cd0:	079d      	lsls	r5, r3, #30
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	d507      	bpl.n	8005ce8 <__smakebuf_r+0x1c>
 8005cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	6163      	str	r3, [r4, #20]
 8005ce4:	b002      	add	sp, #8
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	ab01      	add	r3, sp, #4
 8005cea:	466a      	mov	r2, sp
 8005cec:	f7ff ffca 	bl	8005c84 <__swhatbuf_r>
 8005cf0:	9900      	ldr	r1, [sp, #0]
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff f88f 	bl	8004e18 <_malloc_r>
 8005cfa:	b948      	cbnz	r0, 8005d10 <__smakebuf_r+0x44>
 8005cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d00:	059a      	lsls	r2, r3, #22
 8005d02:	d4ef      	bmi.n	8005ce4 <__smakebuf_r+0x18>
 8005d04:	f023 0303 	bic.w	r3, r3, #3
 8005d08:	f043 0302 	orr.w	r3, r3, #2
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	e7e3      	b.n	8005cd8 <__smakebuf_r+0xc>
 8005d10:	4b0d      	ldr	r3, [pc, #52]	; (8005d48 <__smakebuf_r+0x7c>)
 8005d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	6020      	str	r0, [r4, #0]
 8005d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	9b00      	ldr	r3, [sp, #0]
 8005d20:	6163      	str	r3, [r4, #20]
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	6120      	str	r0, [r4, #16]
 8005d26:	b15b      	cbz	r3, 8005d40 <__smakebuf_r+0x74>
 8005d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f000 f923 	bl	8005f78 <_isatty_r>
 8005d32:	b128      	cbz	r0, 8005d40 <__smakebuf_r+0x74>
 8005d34:	89a3      	ldrh	r3, [r4, #12]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	81a3      	strh	r3, [r4, #12]
 8005d40:	89a0      	ldrh	r0, [r4, #12]
 8005d42:	4305      	orrs	r5, r0
 8005d44:	81a5      	strh	r5, [r4, #12]
 8005d46:	e7cd      	b.n	8005ce4 <__smakebuf_r+0x18>
 8005d48:	08005add 	.word	0x08005add

08005d4c <memcpy>:
 8005d4c:	440a      	add	r2, r1
 8005d4e:	4291      	cmp	r1, r2
 8005d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d54:	d100      	bne.n	8005d58 <memcpy+0xc>
 8005d56:	4770      	bx	lr
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d62:	4291      	cmp	r1, r2
 8005d64:	d1f9      	bne.n	8005d5a <memcpy+0xe>
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <memmove>:
 8005d68:	4288      	cmp	r0, r1
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	eb01 0402 	add.w	r4, r1, r2
 8005d70:	d902      	bls.n	8005d78 <memmove+0x10>
 8005d72:	4284      	cmp	r4, r0
 8005d74:	4623      	mov	r3, r4
 8005d76:	d807      	bhi.n	8005d88 <memmove+0x20>
 8005d78:	1e43      	subs	r3, r0, #1
 8005d7a:	42a1      	cmp	r1, r4
 8005d7c:	d008      	beq.n	8005d90 <memmove+0x28>
 8005d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d86:	e7f8      	b.n	8005d7a <memmove+0x12>
 8005d88:	4402      	add	r2, r0
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	428a      	cmp	r2, r1
 8005d8e:	d100      	bne.n	8005d92 <memmove+0x2a>
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d9a:	e7f7      	b.n	8005d8c <memmove+0x24>

08005d9c <__malloc_lock>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	; (8005da4 <__malloc_lock+0x8>)
 8005d9e:	f7ff bf6f 	b.w	8005c80 <__retarget_lock_acquire_recursive>
 8005da2:	bf00      	nop
 8005da4:	20000528 	.word	0x20000528

08005da8 <__malloc_unlock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	; (8005db0 <__malloc_unlock+0x8>)
 8005daa:	f7ff bf6a 	b.w	8005c82 <__retarget_lock_release_recursive>
 8005dae:	bf00      	nop
 8005db0:	20000528 	.word	0x20000528

08005db4 <_realloc_r>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	4607      	mov	r7, r0
 8005db8:	4614      	mov	r4, r2
 8005dba:	460e      	mov	r6, r1
 8005dbc:	b921      	cbnz	r1, 8005dc8 <_realloc_r+0x14>
 8005dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	f7ff b828 	b.w	8004e18 <_malloc_r>
 8005dc8:	b922      	cbnz	r2, 8005dd4 <_realloc_r+0x20>
 8005dca:	f7fe ffd5 	bl	8004d78 <_free_r>
 8005dce:	4625      	mov	r5, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd4:	f000 f8f2 	bl	8005fbc <_malloc_usable_size_r>
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d20f      	bcs.n	8005dfc <_realloc_r+0x48>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff f81a 	bl	8004e18 <_malloc_r>
 8005de4:	4605      	mov	r5, r0
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d0f2      	beq.n	8005dd0 <_realloc_r+0x1c>
 8005dea:	4631      	mov	r1, r6
 8005dec:	4622      	mov	r2, r4
 8005dee:	f7ff ffad 	bl	8005d4c <memcpy>
 8005df2:	4631      	mov	r1, r6
 8005df4:	4638      	mov	r0, r7
 8005df6:	f7fe ffbf 	bl	8004d78 <_free_r>
 8005dfa:	e7e9      	b.n	8005dd0 <_realloc_r+0x1c>
 8005dfc:	4635      	mov	r5, r6
 8005dfe:	e7e7      	b.n	8005dd0 <_realloc_r+0x1c>

08005e00 <_raise_r>:
 8005e00:	291f      	cmp	r1, #31
 8005e02:	b538      	push	{r3, r4, r5, lr}
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	d904      	bls.n	8005e14 <_raise_r+0x14>
 8005e0a:	2316      	movs	r3, #22
 8005e0c:	6003      	str	r3, [r0, #0]
 8005e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e16:	b112      	cbz	r2, 8005e1e <_raise_r+0x1e>
 8005e18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e1c:	b94b      	cbnz	r3, 8005e32 <_raise_r+0x32>
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f830 	bl	8005e84 <_getpid_r>
 8005e24:	462a      	mov	r2, r5
 8005e26:	4601      	mov	r1, r0
 8005e28:	4620      	mov	r0, r4
 8005e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e2e:	f000 b817 	b.w	8005e60 <_kill_r>
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d00a      	beq.n	8005e4c <_raise_r+0x4c>
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	d103      	bne.n	8005e42 <_raise_r+0x42>
 8005e3a:	2316      	movs	r3, #22
 8005e3c:	6003      	str	r3, [r0, #0]
 8005e3e:	2001      	movs	r0, #1
 8005e40:	e7e7      	b.n	8005e12 <_raise_r+0x12>
 8005e42:	2400      	movs	r4, #0
 8005e44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e48:	4628      	mov	r0, r5
 8005e4a:	4798      	blx	r3
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e7e0      	b.n	8005e12 <_raise_r+0x12>

08005e50 <raise>:
 8005e50:	4b02      	ldr	r3, [pc, #8]	; (8005e5c <raise+0xc>)
 8005e52:	4601      	mov	r1, r0
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	f7ff bfd3 	b.w	8005e00 <_raise_r>
 8005e5a:	bf00      	nop
 8005e5c:	20000018 	.word	0x20000018

08005e60 <_kill_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d07      	ldr	r5, [pc, #28]	; (8005e80 <_kill_r+0x20>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	602b      	str	r3, [r5, #0]
 8005e6e:	f7fa ffd1 	bl	8000e14 <_kill>
 8005e72:	1c43      	adds	r3, r0, #1
 8005e74:	d102      	bne.n	8005e7c <_kill_r+0x1c>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	b103      	cbz	r3, 8005e7c <_kill_r+0x1c>
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	bd38      	pop	{r3, r4, r5, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000530 	.word	0x20000530

08005e84 <_getpid_r>:
 8005e84:	f7fa bfbe 	b.w	8000e04 <_getpid>

08005e88 <__sread>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e90:	f000 f89c 	bl	8005fcc <_read_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	bfab      	itete	ge
 8005e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e9c:	181b      	addge	r3, r3, r0
 8005e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ea2:	bfac      	ite	ge
 8005ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ea6:	81a3      	strhlt	r3, [r4, #12]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__swrite>:
 8005eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	461f      	mov	r7, r3
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	05db      	lsls	r3, r3, #23
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4616      	mov	r6, r2
 8005eba:	d505      	bpl.n	8005ec8 <__swrite+0x1e>
 8005ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f000 f868 	bl	8005f98 <_lseek_r>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ed2:	81a3      	strh	r3, [r4, #12]
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	f000 b817 	b.w	8005f10 <_write_r>

08005ee2 <__sseek>:
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eea:	f000 f855 	bl	8005f98 <_lseek_r>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	bf15      	itete	ne
 8005ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005efe:	81a3      	strheq	r3, [r4, #12]
 8005f00:	bf18      	it	ne
 8005f02:	81a3      	strhne	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__sclose>:
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 b813 	b.w	8005f34 <_close_r>
	...

08005f10 <_write_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d07      	ldr	r5, [pc, #28]	; (8005f30 <_write_r+0x20>)
 8005f14:	4604      	mov	r4, r0
 8005f16:	4608      	mov	r0, r1
 8005f18:	4611      	mov	r1, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f7fa ffaf 	bl	8000e82 <_write>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_write_r+0x1e>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_write_r+0x1e>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	20000530 	.word	0x20000530

08005f34 <_close_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d06      	ldr	r5, [pc, #24]	; (8005f50 <_close_r+0x1c>)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	602b      	str	r3, [r5, #0]
 8005f40:	f7fa ffbb 	bl	8000eba <_close>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_close_r+0x1a>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_close_r+0x1a>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000530 	.word	0x20000530

08005f54 <_fstat_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4d07      	ldr	r5, [pc, #28]	; (8005f74 <_fstat_r+0x20>)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	f7fa ffb6 	bl	8000ed2 <_fstat>
 8005f66:	1c43      	adds	r3, r0, #1
 8005f68:	d102      	bne.n	8005f70 <_fstat_r+0x1c>
 8005f6a:	682b      	ldr	r3, [r5, #0]
 8005f6c:	b103      	cbz	r3, 8005f70 <_fstat_r+0x1c>
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	bf00      	nop
 8005f74:	20000530 	.word	0x20000530

08005f78 <_isatty_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d06      	ldr	r5, [pc, #24]	; (8005f94 <_isatty_r+0x1c>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	602b      	str	r3, [r5, #0]
 8005f84:	f7fa ffb5 	bl	8000ef2 <_isatty>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_isatty_r+0x1a>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_isatty_r+0x1a>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000530 	.word	0x20000530

08005f98 <_lseek_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	; (8005fb8 <_lseek_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fa ffae 	bl	8000f08 <_lseek>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_lseek_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_lseek_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20000530 	.word	0x20000530

08005fbc <_malloc_usable_size_r>:
 8005fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc0:	1f18      	subs	r0, r3, #4
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	bfbc      	itt	lt
 8005fc6:	580b      	ldrlt	r3, [r1, r0]
 8005fc8:	18c0      	addlt	r0, r0, r3
 8005fca:	4770      	bx	lr

08005fcc <_read_r>:
 8005fcc:	b538      	push	{r3, r4, r5, lr}
 8005fce:	4d07      	ldr	r5, [pc, #28]	; (8005fec <_read_r+0x20>)
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	4608      	mov	r0, r1
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	602a      	str	r2, [r5, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f7fa ff34 	bl	8000e48 <_read>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_read_r+0x1e>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_read_r+0x1e>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20000530 	.word	0x20000530

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

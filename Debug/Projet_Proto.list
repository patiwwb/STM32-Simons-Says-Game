
Projet_Proto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004560  08004560  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004560  08004560  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004560  08004560  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  20000010  08004578  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004578  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001072e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002067  00000000  00000000  0003076e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000327d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  000334e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001585a  00000000  00000000  00034130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100cd  00000000  00000000  0004998a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000875a8  00000000  00000000  00059a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0fff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  000e1054  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004510 	.word	0x08004510

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004510 	.word	0x08004510

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc08 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f828 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f94e 	bl	8000474 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001d8:	f000 f87c 	bl	80002d4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f912 	bl	8000404 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80001e0:	f000 f8e8 	bl	80003b4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart2, (uint8_t *)" UART pOLLING METHOD\r\n", sizeof(" UART pOLLING METHOD\r\n"), 300);
  //HAL_UART_Transmit(&huart2, (uint8_t *)"UART INTERUpT\r\n", sizeof("UART INTERUpT\r\n"), 300);
  HAL_TIM_Base_Start(&htim2);
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <main+0x4c>)
 80001e6:	f002 faff 	bl	80027e8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <main+0x50>)
 80001ec:	f002 fafc 	bl	80027e8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80001f0:	2100      	movs	r1, #0
 80001f2:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x4c>)
 80001f4:	f002 fba6 	bl	8002944 <HAL_TIM_IC_Start_IT>
  //int f_test = 40000;
  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <main+0x50>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001fe:	b29a      	uxth	r2, r3
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <main+0x54>)
 8000202:	801a      	strh	r2, [r3, #0]
  timer_val_get = timer_val;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <main+0x54>)
 8000206:	881a      	ldrh	r2, [r3, #0]
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <main+0x58>)
 800020a:	801a      	strh	r2, [r3, #0]
	  }
	  */
	  //HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);

	  while(1){
		  test_PIN();
 800020c:	f000 fa56 	bl	80006bc <test_PIN>
 8000210:	e7fc      	b.n	800020c <main+0x44>
 8000212:	bf00      	nop
 8000214:	2000038c 	.word	0x2000038c
 8000218:	2000045c 	.word	0x2000045c
 800021c:	20000048 	.word	0x20000048
 8000220:	2000004a 	.word	0x2000004a

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b09c      	sub	sp, #112	; 0x70
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f004 f964 	bl	8004500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2230      	movs	r2, #48	; 0x30
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f004 f956 	bl	8004500 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000254:	2302      	movs	r3, #2
 8000256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025c:	2310      	movs	r3, #16
 800025e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000260:	2300      	movs	r3, #0
 8000262:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000268:	4618      	mov	r0, r3
 800026a:	f000 ff6f 	bl	800114c <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000274:	f000 fa6a 	bl	800074c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800027c:	2300      	movs	r3, #0
 800027e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fe62 	bl	8001f5c <HAL_RCC_ClockConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800029e:	f000 fa55 	bl	800074c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 80002a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 f8be 	bl	8002430 <HAL_RCCEx_PeriphCLKConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ba:	f000 fa47 	bl	800074c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002be:	2200      	movs	r2, #0
 80002c0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80002c4:	2000      	movs	r0, #0
 80002c6:	f001 ffc5 	bl	8002254 <HAL_RCC_MCOConfig>
}
 80002ca:	bf00      	nop
 80002cc:	3770      	adds	r7, #112	; 0x70
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08c      	sub	sp, #48	; 0x30
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002da:	f107 0320 	add.w	r3, r7, #32
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000308:	4b29      	ldr	r3, [pc, #164]	; (80003b0 <MX_TIM2_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800030e:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000314:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000316:	f04f 32ff 	mov.w	r2, #4294967295
 800031a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031c:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <MX_TIM2_Init+0xdc>)
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000328:	4821      	ldr	r0, [pc, #132]	; (80003b0 <MX_TIM2_Init+0xdc>)
 800032a:	f002 fa05 	bl	8002738 <HAL_TIM_Base_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000334:	f000 fa0a 	bl	800074c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033e:	f107 0320 	add.w	r3, r7, #32
 8000342:	4619      	mov	r1, r3
 8000344:	481a      	ldr	r0, [pc, #104]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000346:	f002 fde6 	bl	8002f16 <HAL_TIM_ConfigClockSource>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000350:	f000 f9fc 	bl	800074c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000354:	4816      	ldr	r0, [pc, #88]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000356:	f002 fa93 	bl	8002880 <HAL_TIM_IC_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000360:	f000 f9f4 	bl	800074c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	4619      	mov	r1, r3
 8000372:	480f      	ldr	r0, [pc, #60]	; (80003b0 <MX_TIM2_Init+0xdc>)
 8000374:	f003 f93e 	bl	80035f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800037e:	f000 f9e5 	bl	800074c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_TIM2_Init+0xdc>)
 800039a:	f002 fd20 	bl	8002dde <HAL_TIM_IC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80003a4:	f000 f9d2 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3730      	adds	r7, #48	; 0x30
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000038c 	.word	0x2000038c

080003b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_TIM16_Init+0x48>)
 80003ba:	4a11      	ldr	r2, [pc, #68]	; (8000400 <MX_TIM16_Init+0x4c>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_TIM16_Init+0x48>)
 80003c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80003c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_TIM16_Init+0x48>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65536 - 1;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_TIM16_Init+0x48>)
 80003ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_TIM16_Init+0x48>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_TIM16_Init+0x48>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_TIM16_Init+0x48>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_TIM16_Init+0x48>)
 80003e8:	f002 f9a6 	bl	8002738 <HAL_TIM_Base_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80003f2:	f000 f9ab 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000045c 	.word	0x2000045c
 8000400:	40014400 	.word	0x40014400

08000404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_USART2_UART_Init+0x64>)
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <MX_USART2_UART_Init+0x68>)
 800040c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800040e:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_USART2_UART_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000422:	4b11      	ldr	r3, [pc, #68]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_USART2_UART_Init+0x64>)
 800042a:	220c      	movs	r2, #12
 800042c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <MX_USART2_UART_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000446:	4808      	ldr	r0, [pc, #32]	; (8000468 <MX_USART2_UART_Init+0x64>)
 8000448:	f003 f958 	bl	80036fc <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000452:	f000 f97b 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  USART1->CR1 |= (USART_CR1_TE | USART_CR1_RXNEIE | USART_CR1_RE | USART_CR1_UE);
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x6c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x6c>)
 800045c:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000460:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	200003d8 	.word	0x200003d8
 800046c:	40004400 	.word	0x40004400
 8000470:	40013800 	.word	0x40013800

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800048a:	4b31      	ldr	r3, [pc, #196]	; (8000550 <MX_GPIO_Init+0xdc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a30      	ldr	r2, [pc, #192]	; (8000550 <MX_GPIO_Init+0xdc>)
 8000490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b2e      	ldr	r3, [pc, #184]	; (8000550 <MX_GPIO_Init+0xdc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a2a      	ldr	r2, [pc, #168]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b28      	ldr	r3, [pc, #160]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ba:	4b25      	ldr	r3, [pc, #148]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a24      	ldr	r2, [pc, #144]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <MX_GPIO_Init+0xdc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	21c0      	movs	r1, #192	; 0xc0
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fe05 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	210b      	movs	r1, #11
 80004e2:	481c      	ldr	r0, [pc, #112]	; (8000554 <MX_GPIO_Init+0xe0>)
 80004e4:	f000 fe00 	bl	80010e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 80004e8:	23c0      	movs	r3, #192	; 0xc0
 80004ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000502:	f000 fc7f 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin|LD3_Pin;
 8000506:	230b      	movs	r3, #11
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <MX_GPIO_Init+0xe0>)
 800051e:	f000 fc71 	bl	8000e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000528:	2302      	movs	r3, #2
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000534:	2300      	movs	r3, #0
 8000536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000542:	f000 fc5f 	bl	8000e04 <HAL_GPIO_Init>

}
 8000546:	bf00      	nop
 8000548:	3720      	adds	r7, #32
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400

08000558 <HAL_TIM_IC_CaptureCallback>:
	  }
	  */
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 )
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a4a      	ldr	r2, [pc, #296]	; (800068c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000564:	4293      	cmp	r3, r2
 8000566:	f040 808d 	bne.w	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
	{
		  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	7f1b      	ldrb	r3, [r3, #28]
 800056e:	2b01      	cmp	r3, #1
 8000570:	f040 8088 	bne.w	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
		   {
		    if (Is_First_Captured==0)  // is the first value captured ?
 8000574:	4b46      	ldr	r3, [pc, #280]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10a      	bne.n	8000592 <HAL_TIM_IC_CaptureCallback+0x3a>
		    {
		     IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 800057c:	2100      	movs	r1, #0
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f002 fd92 	bl	80030a8 <HAL_TIM_ReadCapturedValue>
 8000584:	4603      	mov	r3, r0
 8000586:	4a43      	ldr	r2, [pc, #268]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000588:	6013      	str	r3, [r2, #0]
		     Is_First_Captured =1;  // set the first value captured as true
 800058a:	4b41      	ldr	r3, [pc, #260]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x138>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
		    }
		   }
	}


}
 8000590:	e078      	b.n	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
		    else if (Is_First_Captured)  // if the first is captured
 8000592:	4b3f      	ldr	r3, [pc, #252]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d074      	beq.n	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
		     IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 800059a:	2100      	movs	r1, #0
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f002 fd83 	bl	80030a8 <HAL_TIM_ReadCapturedValue>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a3c      	ldr	r2, [pc, #240]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005a6:	6013      	str	r3, [r2, #0]
		     if (IC_Value2 > IC_Value1)
 80005a8:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b39      	ldr	r3, [pc, #228]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d907      	bls.n	80005c4 <HAL_TIM_IC_CaptureCallback+0x6c>
		      Difference = IC_Value2-IC_Value1;   // calculate the difference
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	4a37      	ldr	r2, [pc, #220]	; (800069c <HAL_TIM_IC_CaptureCallback+0x144>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	e011      	b.n	80005e8 <HAL_TIM_IC_CaptureCallback+0x90>
		     else if (IC_Value2 < IC_Value1)
 80005c4:	4b34      	ldr	r3, [pc, #208]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b32      	ldr	r3, [pc, #200]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d209      	bcs.n	80005e4 <HAL_TIM_IC_CaptureCallback+0x8c>
		      Difference = ((0xffff-IC_Value1)+IC_Value2) +1;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <HAL_TIM_IC_CaptureCallback+0x140>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80005de:	4a2f      	ldr	r2, [pc, #188]	; (800069c <HAL_TIM_IC_CaptureCallback+0x144>)
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	e001      	b.n	80005e8 <HAL_TIM_IC_CaptureCallback+0x90>
		      Error_Handler();
 80005e4:	f000 f8b2 	bl	800074c <Error_Handler>
		     Frequency = HAL_RCC_GetPCLK1Freq()/Difference;  // calculate frequency
 80005e8:	f001 fede 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <HAL_TIM_IC_CaptureCallback+0x144>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f6:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005f8:	6013      	str	r3, [r2, #0]
		     Is_First_Captured = 0;  // reset the first captured
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <HAL_TIM_IC_CaptureCallback+0x138>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
		     if(__HAL_TIM_GET_COUNTER(&htim16) - timer_val >= 1000)
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000606:	4a28      	ldr	r2, [pc, #160]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000608:	8812      	ldrh	r2, [r2, #0]
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000610:	d338      	bcc.n	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
				  test += 1;
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x154>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a24      	ldr	r2, [pc, #144]	; (80006ac <HAL_TIM_IC_CaptureCallback+0x154>)
 800061a:	6013      	str	r3, [r2, #0]
				  timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000626:	801a      	strh	r2, [r3, #0]
				  if(Frequency < 10000)
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <HAL_TIM_IC_CaptureCallback+0x148>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000630:	4293      	cmp	r3, r2
 8000632:	d827      	bhi.n	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
				  		  if(ALLUME_LED == 0)
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d106      	bne.n	800064a <HAL_TIM_IC_CaptureCallback+0xf2>
				  			  ALLUME_LED = 1;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_TIM_IC_CaptureCallback+0x158>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
				  			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000642:	2108      	movs	r1, #8
 8000644:	481b      	ldr	r0, [pc, #108]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000646:	f000 fd67 	bl	8001118 <HAL_GPIO_TogglePin>
				  		  if(ALLUME_START == 1)
 800064a:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_TIM_IC_CaptureCallback+0x160>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d118      	bne.n	8000684 <HAL_TIM_IC_CaptureCallback+0x12c>
				  			ALLUME_START = 0;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
				  			HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000660:	f000 fd42 	bl	80010e8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2102      	movs	r1, #2
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 800066a:	f000 fd3d 	bl	80010e8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000676:	f000 fd37 	bl	80010e8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2101      	movs	r1, #1
 800067e:	480d      	ldr	r0, [pc, #52]	; (80006b4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000680:	f000 fd32 	bl	80010e8 <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000038c 	.word	0x2000038c
 8000690:	20000040 	.word	0x20000040
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000030 	.word	0x20000030
 800069c:	20000034 	.word	0x20000034
 80006a0:	20000038 	.word	0x20000038
 80006a4:	2000045c 	.word	0x2000045c
 80006a8:	20000048 	.word	0x20000048
 80006ac:	2000003c 	.word	0x2000003c
 80006b0:	20000044 	.word	0x20000044
 80006b4:	48000400 	.word	0x48000400
 80006b8:	20000000 	.word	0x20000000

080006bc <test_PIN>:
	}
	 right_sequence(); //Як послідовність вірна, викличемо функцію right_sequence
}

void test_PIN()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
	bool flag;
    flag = false;
 80006c2:	2300      	movs	r3, #0
 80006c4:	71fb      	strb	r3, [r7, #7]
	int temp_freq = Frequency;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <test_PIN+0x80>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	603b      	str	r3, [r7, #0]
	while(flag == false)
 80006cc:	e02a      	b.n	8000724 <test_PIN+0x68>
	{
		while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
		{
			if(Frequency != temp_freq )
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <test_PIN+0x80>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d015      	beq.n	8000704 <test_PIN+0x48>
			{
				Frequency = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <test_PIN+0x80>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
				temp_freq = Frequency;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <test_PIN+0x80>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	603b      	str	r3, [r7, #0]
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2108      	movs	r1, #8
 80006e8:	4815      	ldr	r0, [pc, #84]	; (8000740 <test_PIN+0x84>)
 80006ea:	f000 fcfd 	bl	80010e8 <HAL_GPIO_WritePin>
				flag=true;
 80006ee:	2301      	movs	r3, #1
 80006f0:	71fb      	strb	r3, [r7, #7]
				HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f000 f9d9 	bl	8000aac <HAL_Delay>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <test_PIN+0x84>)
 8000700:	f000 fcf2 	bl	80010e8 <HAL_GPIO_WritePin>
		while (__HAL_TIM_GET_COUNTER(&htim16) - timer_val_get <= 1500)
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <test_PIN+0x88>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <test_PIN+0x8c>)
 800070c:	8812      	ldrh	r2, [r2, #0]
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000714:	4293      	cmp	r3, r2
 8000716:	d9da      	bls.n	80006ce <test_PIN+0x12>
			}
		}
		timer_val_get = __HAL_TIM_GET_COUNTER(&htim16);
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <test_PIN+0x88>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <test_PIN+0x8c>)
 8000722:	801a      	strh	r2, [r3, #0]
	while(flag == false)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d1e9      	bne.n	8000704 <test_PIN+0x48>
	}
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000038 	.word	0x20000038
 8000740:	48000400 	.word	0x48000400
 8000744:	2000045c 	.word	0x2000045c
 8000748:	2000004a 	.word	0x2000004a

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <HAL_MspInit+0x44>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_MspInit+0x44>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x44>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x44>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c0:	d131      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e4:	6153      	str	r3, [r2, #20]
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f2:	2301      	movs	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000802:	2301      	movs	r3, #1
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 faf8 	bl	8000e04 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	201c      	movs	r0, #28
 800081a:	f000 fa46 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800081e:	201c      	movs	r0, #28
 8000820:	f000 fa5f 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000824:	e010      	b.n	8000848 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_TIM_Base_MspInit+0xb4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d10b      	bne.n	8000848 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 8000836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b04      	ldr	r3, [pc, #16]	; (8000850 <HAL_TIM_Base_MspInit+0xb0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	40014400 	.word	0x40014400

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d130      	bne.n	80008dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x90>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0x90>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ba:	2307      	movs	r3, #7
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fa9c 	bl	8000e04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2026      	movs	r0, #38	; 0x26
 80008d2:	f000 f9ea 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d6:	2026      	movs	r0, #38	; 0x26
 80008d8:	f000 fa03 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f898 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM2_IRQHandler+0x10>)
 8000946:	f002 f92b 	bl	8002ba0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000038c 	.word	0x2000038c

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	 char ch;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART2_IRQHandler+0x10>)
 800095a:	f002 ff1d 	bl	8003798 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200003d8 	.word	0x200003d8

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <SystemInit+0x20>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <SystemInit+0x20>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009b6:	f7ff ffd7 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f003 fd7d 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009be:	f7ff fc03 	bl	80001c8 <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009d0:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 80009d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009d8:	200004ac 	.word	0x200004ac

080009dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f94f 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff feac 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f967 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f92f 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000004 	.word	0x20000004
 8000a64:	2000000c 	.word	0x2000000c
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	200004a8 	.word	0x200004a8

08000a94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200004a8 	.word	0x200004a8

08000aac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff ffee 	bl	8000a94 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Delay+0x44>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffde 	bl	8000a94 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000000c 	.word	0x2000000c

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	; (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	; (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	; 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	; 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff29 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff3e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff31 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d008      	beq.n	8000d3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e020      	b.n	8000d7c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020e 	bic.w	r2, r2, #14
 8000d48:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d005      	beq.n	8000daa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2204      	movs	r2, #4
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e027      	b.n	8000dfa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 020e 	bic.w	r2, r2, #14
 8000db8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	4798      	blx	r3
    } 
  }
  return status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e14e      	b.n	80010b2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8140 	beq.w	80010ac <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x40>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f003 0201 	and.w	r2, r3, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0203 	and.w	r2, r3, #3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 809a 	beq.w	80010ac <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b55      	ldr	r3, [pc, #340]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a54      	ldr	r2, [pc, #336]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <HAL_GPIO_Init+0x2cc>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a46      	ldr	r2, [pc, #280]	; (80010d8 <HAL_GPIO_Init+0x2d4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1dc>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a45      	ldr	r2, [pc, #276]	; (80010dc <HAL_GPIO_Init+0x2d8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1d8>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1d4>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1e2>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1e2>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1e2>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1e2>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001028:	4a2e      	ldr	r2, [pc, #184]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001052:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f aea9 	bne.w	8000e14 <HAL_GPIO_Init+0x10>
  }
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000c00 	.word	0x48000c00
 80010e4:	40010400 	.word	0x40010400

080010e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f8:	787b      	ldrb	r3, [r7, #1]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fe:	887a      	ldrh	r2, [r7, #2]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001104:	e002      	b.n	800110c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4013      	ands	r3, r2
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43d9      	mvns	r1, r3
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	400b      	ands	r3, r1
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001152:	af00      	add	r7, sp, #0
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f000 bef4 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 816a 	beq.w	800144a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001176:	4bb3      	ldr	r3, [pc, #716]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001182:	4bb0      	ldr	r3, [pc, #704]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b08      	cmp	r3, #8
 800118c:	d159      	bne.n	8001242 <HAL_RCC_OscConfig+0xf6>
 800118e:	4bad      	ldr	r3, [pc, #692]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119a:	d152      	bne.n	8001242 <HAL_RCC_OscConfig+0xf6>
 800119c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d102      	bne.n	80011ce <HAL_RCC_OscConfig+0x82>
 80011c8:	4b9e      	ldr	r3, [pc, #632]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0xae>
 80011ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011f6:	4b93      	ldr	r3, [pc, #588]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001202:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001206:	fa92 f2a2 	rbit	r2, r2
 800120a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800120e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001212:	fab2 f282 	clz	r2, r2
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	f042 0220 	orr.w	r2, r2, #32
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f002 021f 	and.w	r2, r2, #31
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 810c 	beq.w	8001448 <HAL_RCC_OscConfig+0x2fc>
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 8106 	bne.w	8001448 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	f000 be86 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x110>
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7c      	ldr	r2, [pc, #496]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e030      	b.n	80012be <HAL_RCC_OscConfig+0x172>
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x134>
 8001266:	4b77      	ldr	r3, [pc, #476]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a76      	ldr	r2, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b74      	ldr	r3, [pc, #464]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a73      	ldr	r2, [pc, #460]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01e      	b.n	80012be <HAL_RCC_OscConfig+0x172>
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128a:	d10c      	bne.n	80012a6 <HAL_RCC_OscConfig+0x15a>
 800128c:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a69      	ldr	r2, [pc, #420]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e00b      	b.n	80012be <HAL_RCC_OscConfig+0x172>
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a66      	ldr	r2, [pc, #408]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a63      	ldr	r2, [pc, #396]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b61      	ldr	r3, [pc, #388]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	f023 020f 	bic.w	r2, r3, #15
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	495d      	ldr	r1, [pc, #372]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d059      	beq.n	8001390 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbda 	bl	8000a94 <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e6:	f7ff fbd5 	bl	8000a94 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d902      	bls.n	80012fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	f000 be29 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001310:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <HAL_RCC_OscConfig+0x1e2>
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	e015      	b.n	800135a <HAL_RCC_OscConfig+0x20e>
 800132e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001332:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001336:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800133a:	fa93 f3a3 	rbit	r3, r3
 800133e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001346:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800134a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800135e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001362:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001366:	fa92 f2a2 	rbit	r2, r2
 800136a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800136e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001372:	fab2 f282 	clz	r2, r2
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	f042 0220 	orr.w	r2, r2, #32
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f002 021f 	and.w	r2, r2, #31
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ab      	beq.n	80012e6 <HAL_RCC_OscConfig+0x19a>
 800138e:	e05c      	b.n	800144a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb80 	bl	8000a94 <HAL_GetTick>
 8001394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139a:	f7ff fb7b 	bl	8000a94 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d902      	bls.n	80013b0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f000 bdcf 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
 80013b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013bc:	fa93 f3a3 	rbit	r3, r3
 80013c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <HAL_RCC_OscConfig+0x296>
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	e015      	b.n	800140e <HAL_RCC_OscConfig+0x2c2>
 80013e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001402:	fa93 f3a3 	rbit	r3, r3
 8001406:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_RCC_OscConfig+0x2f8>)
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001412:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001416:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800141a:	fa92 f2a2 	rbit	r2, r2
 800141e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001422:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001426:	fab2 f282 	clz	r2, r2
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	f042 0220 	orr.w	r2, r2, #32
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f002 021f 	and.w	r2, r2, #31
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ab      	bne.n	800139a <HAL_RCC_OscConfig+0x24e>
 8001442:	e002      	b.n	800144a <HAL_RCC_OscConfig+0x2fe>
 8001444:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 816f 	beq.w	8001738 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800145a:	4bd0      	ldr	r3, [pc, #832]	; (800179c <HAL_RCC_OscConfig+0x650>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001466:	4bcd      	ldr	r3, [pc, #820]	; (800179c <HAL_RCC_OscConfig+0x650>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	2b08      	cmp	r3, #8
 8001470:	d16c      	bne.n	800154c <HAL_RCC_OscConfig+0x400>
 8001472:	4bca      	ldr	r3, [pc, #808]	; (800179c <HAL_RCC_OscConfig+0x650>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d166      	bne.n	800154c <HAL_RCC_OscConfig+0x400>
 800147e:	2302      	movs	r3, #2
 8001480:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001484:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001490:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d102      	bne.n	80014ae <HAL_RCC_OscConfig+0x362>
 80014a8:	4bbc      	ldr	r3, [pc, #752]	; (800179c <HAL_RCC_OscConfig+0x650>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	e013      	b.n	80014d6 <HAL_RCC_OscConfig+0x38a>
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014c0:	2302      	movs	r3, #2
 80014c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014d2:	4bb2      	ldr	r3, [pc, #712]	; (800179c <HAL_RCC_OscConfig+0x650>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	2202      	movs	r2, #2
 80014d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014e0:	fa92 f2a2 	rbit	r2, r2
 80014e4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014e8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014ec:	fab2 f282 	clz	r2, r2
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	f042 0220 	orr.w	r2, r2, #32
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	f002 021f 	and.w	r2, r2, #31
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_RCC_OscConfig+0x3cc>
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d002      	beq.n	8001518 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	f000 bd1b 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4ba0      	ldr	r3, [pc, #640]	; (800179c <HAL_RCC_OscConfig+0x650>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	21f8      	movs	r1, #248	; 0xf8
 8001528:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001530:	fa91 f1a1 	rbit	r1, r1
 8001534:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001538:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800153c:	fab1 f181 	clz	r1, r1
 8001540:	b2c9      	uxtb	r1, r1
 8001542:	408b      	lsls	r3, r1
 8001544:	4995      	ldr	r1, [pc, #596]	; (800179c <HAL_RCC_OscConfig+0x650>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e0f5      	b.n	8001738 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8085 	beq.w	8001662 <HAL_RCC_OscConfig+0x516>
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001562:	fa93 f3a3 	rbit	r3, r3
 8001566:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800156a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001578:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	461a      	mov	r2, r3
 8001580:	2301      	movs	r3, #1
 8001582:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fa86 	bl	8000a94 <HAL_GetTick>
 8001588:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff fa81 	bl	8000a94 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d902      	bls.n	80015a4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	f000 bcd5 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x488>
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x650>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	e013      	b.n	80015fc <HAL_RCC_OscConfig+0x4b0>
 80015d4:	2302      	movs	r3, #2
 80015d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015de:	fa93 f3a3 	rbit	r3, r3
 80015e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015f0:	fa93 f3a3 	rbit	r3, r3
 80015f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x650>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	2202      	movs	r2, #2
 80015fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001602:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001606:	fa92 f2a2 	rbit	r2, r2
 800160a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800160e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0af      	beq.n	800158e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b5b      	ldr	r3, [pc, #364]	; (800179c <HAL_RCC_OscConfig+0x650>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	21f8      	movs	r1, #248	; 0xf8
 800163e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001646:	fa91 f1a1 	rbit	r1, r1
 800164a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800164e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001652:	fab1 f181 	clz	r1, r1
 8001656:	b2c9      	uxtb	r1, r1
 8001658:	408b      	lsls	r3, r1
 800165a:	4950      	ldr	r1, [pc, #320]	; (800179c <HAL_RCC_OscConfig+0x650>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e06a      	b.n	8001738 <HAL_RCC_OscConfig+0x5ec>
 8001662:	2301      	movs	r3, #1
 8001664:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001682:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	461a      	mov	r2, r3
 800168a:	2300      	movs	r3, #0
 800168c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fa01 	bl	8000a94 <HAL_GetTick>
 8001692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff f9fc 	bl	8000a94 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d902      	bls.n	80016ae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f000 bc50 	b.w	8001f4e <HAL_RCC_OscConfig+0xe02>
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x592>
 80016d8:	4b30      	ldr	r3, [pc, #192]	; (800179c <HAL_RCC_OscConfig+0x650>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e013      	b.n	8001706 <HAL_RCC_OscConfig+0x5ba>
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001702:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_RCC_OscConfig+0x650>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2202      	movs	r2, #2
 8001708:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800170c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001710:	fa92 f2a2 	rbit	r2, r2
 8001714:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001718:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800171c:	fab2 f282 	clz	r2, r2
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1af      	bne.n	8001698 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80da 	beq.w	80018fc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d069      	beq.n	8001826 <HAL_RCC_OscConfig+0x6da>
 8001752:	2301      	movs	r3, #1
 8001754:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800175c:	fa93 f3a3 	rbit	r3, r3
 8001760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x654>)
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	2301      	movs	r3, #1
 800177a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f98a 	bl	8000a94 <HAL_GetTick>
 8001780:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001784:	e00e      	b.n	80017a4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff f985 	bl	8000a94 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d906      	bls.n	80017a4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e3d9      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	10908120 	.word	0x10908120
 80017a4:	2302      	movs	r3, #2
 80017a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4ba5      	ldr	r3, [pc, #660]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80017e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ee:	2102      	movs	r1, #2
 80017f0:	6019      	str	r1, [r3, #0]
 80017f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f1a3 	rbit	r1, r3
 80017fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001800:	6019      	str	r1, [r3, #0]
  return result;
 8001802:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f003 031f 	and.w	r3, r3, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0b0      	beq.n	8001786 <HAL_RCC_OscConfig+0x63a>
 8001824:	e06a      	b.n	80018fc <HAL_RCC_OscConfig+0x7b0>
 8001826:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800183c:	601a      	str	r2, [r3, #0]
  return result;
 800183e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001842:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b8c      	ldr	r3, [pc, #560]	; (8001a80 <HAL_RCC_OscConfig+0x934>)
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	461a      	mov	r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff f91c 	bl	8000a94 <HAL_GetTick>
 800185c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e009      	b.n	8001876 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff f917 	bl	8000a94 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e36b      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001876:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800187a:	2202      	movs	r2, #2
 800187c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	fa93 f2a3 	rbit	r2, r3
 8001888:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018be:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80018c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018c6:	2102      	movs	r1, #2
 80018c8:	6019      	str	r1, [r3, #0]
 80018ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	fa93 f1a3 	rbit	r1, r3
 80018d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018d8:	6019      	str	r1, [r3, #0]
  return result;
 80018da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1b2      	bne.n	8001862 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8158 	beq.w	8001bbc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d112      	bne.n	8001944 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a56      	ldr	r2, [pc, #344]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11a      	bne.n	8001986 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195c:	f7ff f89a 	bl	8000a94 <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	e009      	b.n	800197a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001966:	f7ff f895 	bl	8000a94 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e2e9      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <HAL_RCC_OscConfig+0x938>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ef      	beq.n	8001966 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x852>
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a39      	ldr	r2, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e02f      	b.n	80019fe <HAL_RCC_OscConfig+0x8b2>
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x876>
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a33      	ldr	r2, [pc, #204]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e01d      	b.n	80019fe <HAL_RCC_OscConfig+0x8b2>
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x89a>
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x8b2>
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d06b      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f844 	bl	8000a94 <HAL_GetTick>
 8001a0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00b      	b.n	8001a2a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff f83f 	bl	8000a94 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e291      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001a2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a58:	601a      	str	r2, [r3, #0]
  return result;
 8001a5a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_OscConfig+0x93c>
 8001a74:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <HAL_RCC_OscConfig+0x930>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x958>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	10908120 	.word	0x10908120
 8001a84:	40007000 	.word	0x40007000
 8001a88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4bbb      	ldr	r3, [pc, #748]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	6011      	str	r1, [r2, #0]
 8001aac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	fa92 f1a2 	rbit	r1, r2
 8001ab6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001aba:	6011      	str	r1, [r2, #0]
  return result;
 8001abc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	fab2 f282 	clz	r2, r2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	f002 021f 	and.w	r2, r2, #31
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d099      	beq.n	8001a12 <HAL_RCC_OscConfig+0x8c6>
 8001ade:	e063      	b.n	8001ba8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe ffd8 	bl	8000a94 <HAL_GetTick>
 8001ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7fe ffd3 	bl	8000a94 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e225      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001b02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b30:	601a      	str	r2, [r3, #0]
  return result;
 8001b32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b38:	fab3 f383 	clz	r3, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	095b      	lsrs	r3, r3, #5
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d102      	bne.n	8001b52 <HAL_RCC_OscConfig+0xa06>
 8001b4c:	4b90      	ldr	r3, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	e00d      	b.n	8001b6e <HAL_RCC_OscConfig+0xa22>
 8001b52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b56:	2202      	movs	r2, #2
 8001b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fa93 f2a3 	rbit	r2, r3
 8001b64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b72:	2102      	movs	r1, #2
 8001b74:	6011      	str	r1, [r2, #0]
 8001b76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	fa92 f1a2 	rbit	r1, r2
 8001b80:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b84:	6011      	str	r1, [r2, #0]
  return result;
 8001b86:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	fab2 f282 	clz	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f002 021f 	and.w	r2, r2, #31
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1a0      	bne.n	8001aea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ba8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	4a76      	ldr	r2, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 81c2 	beq.w	8001f4c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc8:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	f000 819c 	beq.w	8001f0e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	f040 8114 	bne.w	8001e0a <HAL_RCC_OscConfig+0xcbe>
 8001be2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001be6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	461a      	mov	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff3c 	bl	8000a94 <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7fe ff37 	bl	8000a94 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e18b      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001c36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0xb24>
 8001c6a:	4b49      	ldr	r3, [pc, #292]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e01b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xb5c>
 8001c70:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cc0:	6011      	str	r1, [r2, #0]
  return result;
 8001cc2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d19e      	bne.n	8001c22 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	4925      	ldr	r1, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
 8001d00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d18:	601a      	str	r2, [r3, #0]
  return result;
 8001d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d1e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	461a      	mov	r2, r3
 8001d32:	2301      	movs	r3, #1
 8001d34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fead 	bl	8000a94 <HAL_GetTick>
 8001d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3e:	e009      	b.n	8001d54 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7fe fea8 	bl	8000a94 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0fc      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d6c:	601a      	str	r2, [r3, #0]
  return result;
 8001d6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0xc48>
 8001d88:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <HAL_RCC_OscConfig+0xc44>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	e01e      	b.n	8001dcc <HAL_RCC_OscConfig+0xc80>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	fa93 f2a3 	rbit	r2, r3
 8001da8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	fa93 f2a3 	rbit	r2, r3
 8001dc2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0xe0c>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dd4:	6011      	str	r1, [r2, #0]
 8001dd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	fa92 f1a2 	rbit	r1, r2
 8001de0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001de4:	6011      	str	r1, [r2, #0]
  return result;
 8001de6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f042 0220 	orr.w	r2, r2, #32
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f002 021f 	and.w	r2, r2, #31
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d09b      	beq.n	8001d40 <HAL_RCC_OscConfig+0xbf4>
 8001e08:	e0a0      	b.n	8001f4c <HAL_RCC_OscConfig+0xe00>
 8001e0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	fa93 f2a3 	rbit	r2, r3
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7fe fe28 	bl	8000a94 <HAL_GetTick>
 8001e44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	e009      	b.n	8001e5e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe fe23 	bl	8000a94 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e077      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
 8001e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f2a3 	rbit	r2, r3
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	601a      	str	r2, [r3, #0]
  return result;
 8001e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_OscConfig+0xd4c>
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_OscConfig+0xe0c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e01b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd84>
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_RCC_OscConfig+0xe0c>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f107 0210 	add.w	r2, r7, #16
 8001ed4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	f107 0210 	add.w	r2, r7, #16
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	fa92 f1a2 	rbit	r1, r2
 8001ee4:	f107 020c 	add.w	r2, r7, #12
 8001ee8:	6011      	str	r1, [r2, #0]
  return result;
 8001eea:	f107 020c 	add.w	r2, r7, #12
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	fab2 f282 	clz	r2, r2
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f042 0220 	orr.w	r2, r2, #32
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	f002 021f 	and.w	r2, r2, #31
 8001f00:	2101      	movs	r1, #1
 8001f02:	fa01 f202 	lsl.w	r2, r1, r2
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d19e      	bne.n	8001e4a <HAL_RCC_OscConfig+0xcfe>
 8001f0c:	e01e      	b.n	8001f4c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_RCC_OscConfig+0xe0c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f24:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000

08001f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b09e      	sub	sp, #120	; 0x78
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e162      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	498b      	ldr	r1, [pc, #556]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e14a      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b82      	ldr	r3, [pc, #520]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	497f      	ldr	r1, [pc, #508]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80dc 	beq.w	8002188 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d13c      	bne.n	8002052 <HAL_RCC_ClockConfig+0xf6>
 8001fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fdc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe8:	fab3 f383 	clz	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d102      	bne.n	8002002 <HAL_RCC_ClockConfig+0xa6>
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e00f      	b.n	8002022 <HAL_RCC_ClockConfig+0xc6>
 8002002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002006:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	667b      	str	r3, [r7, #100]	; 0x64
 8002010:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002014:	663b      	str	r3, [r7, #96]	; 0x60
 8002016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002026:	65ba      	str	r2, [r7, #88]	; 0x58
 8002028:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002032:	fab2 f282 	clz	r2, r2
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	f042 0220 	orr.w	r2, r2, #32
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f002 021f 	and.w	r2, r2, #31
 8002042:	2101      	movs	r1, #1
 8002044:	fa01 f202 	lsl.w	r2, r1, r2
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d17b      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0f3      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d13c      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x178>
 800205a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800205e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	095b      	lsrs	r3, r3, #5
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d102      	bne.n	8002084 <HAL_RCC_ClockConfig+0x128>
 800207e:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_ClockConfig+0x148>
 8002084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	647b      	str	r3, [r7, #68]	; 0x44
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	643b      	str	r3, [r7, #64]	; 0x40
 8002098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80020aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ac:	fa92 f2a2 	rbit	r2, r2
 80020b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f042 0220 	orr.w	r2, r2, #32
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f002 021f 	and.w	r2, r2, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d13a      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0b2      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
 80020d4:	2302      	movs	r3, #2
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_ClockConfig+0x1a0>
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e00d      	b.n	8002118 <HAL_RCC_ClockConfig+0x1bc>
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
 800210c:	6a3b      	ldr	r3, [r7, #32]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2202      	movs	r2, #2
 800211a:	61ba      	str	r2, [r7, #24]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	fa92 f2a2 	rbit	r2, r2
 8002122:	617a      	str	r2, [r7, #20]
  return result;
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e079      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	491a      	ldr	r1, [pc, #104]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fc9c 	bl	8000a94 <HAL_GetTick>
 800215c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fc98 	bl	8000a94 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e061      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_ClockConfig+0x260>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d214      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4906      	ldr	r1, [pc, #24]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_RCC_ClockConfig+0x25c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e040      	b.n	800223a <HAL_RCC_ClockConfig+0x2de>
 80021b8:	40022000 	.word	0x40022000
 80021bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_ClockConfig+0x2e8>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	491a      	ldr	r1, [pc, #104]	; (8002244 <HAL_RCC_ClockConfig+0x2e8>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_RCC_ClockConfig+0x2e8>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4912      	ldr	r1, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x2e8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021fe:	f000 f85d 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8002202:	4601      	mov	r1, r0
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_RCC_ClockConfig+0x2e8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	22f0      	movs	r2, #240	; 0xf0
 800220e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	fa92 f2a2 	rbit	r2, r2
 8002216:	60fa      	str	r2, [r7, #12]
  return result;
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	40d3      	lsrs	r3, r2
 8002222:	4a09      	ldr	r2, [pc, #36]	; (8002248 <HAL_RCC_ClockConfig+0x2ec>)
 8002224:	5cd3      	ldrb	r3, [r2, r3]
 8002226:	fa21 f303 	lsr.w	r3, r1, r3
 800222a:	4a08      	ldr	r2, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x2f0>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_ClockConfig+0x2f4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fbea 	bl	8000a0c <HAL_InitTick>
  
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3778      	adds	r7, #120	; 0x78
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	08004528 	.word	0x08004528
 800224c:	20000004 	.word	0x20000004
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 800226c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002270:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_RCC_MCOConfig+0x64>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <HAL_RCC_MCOConfig+0x64>)
 800227c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002280:	6153      	str	r3, [r2, #20]
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_RCC_MCOConfig+0x64>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	4619      	mov	r1, r3
 8002294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002298:	f7fe fdb4 	bl	8000e04 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_MCOConfig+0x64>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_MCOConfig+0x64>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80022d6:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d002      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x30>
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d003      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x36>
 80022ea:	e03c      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ee:	623b      	str	r3, [r7, #32]
      break;
 80022f0:	e03c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	607a      	str	r2, [r7, #4]
  return result;
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	40d3      	lsrs	r3, r2
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	220f      	movs	r2, #15
 8002320:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	fa92 f2a2 	rbit	r2, r2
 8002328:	60fa      	str	r2, [r7, #12]
  return result;
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	40d3      	lsrs	r3, r2
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	fbb2 f2f3 	udiv	r2, r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e004      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_GetSysClockFreq+0xd0>)
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	623b      	str	r3, [r7, #32]
      break;
 8002364:	e002      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002368:	623b      	str	r3, [r7, #32]
      break;
 800236a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236c:	6a3b      	ldr	r3, [r7, #32]
}
 800236e:	4618      	mov	r0, r3
 8002370:	372c      	adds	r7, #44	; 0x2c
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	08004540 	.word	0x08004540
 8002388:	08004550 	.word	0x08004550
 800238c:	003d0900 	.word	0x003d0900

08002390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000004 	.word	0x20000004

080023a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023ae:	f7ff ffef 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023b2:	4601      	mov	r1, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	fa92 f2a2 	rbit	r2, r2
 80023c8:	603a      	str	r2, [r7, #0]
  return result;
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	fab2 f282 	clz	r2, r2
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	40d3      	lsrs	r3, r2
 80023d4:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08004538 	.word	0x08004538

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023f2:	f7ff ffcd 	bl	8002390 <HAL_RCC_GetHCLKFreq>
 80023f6:	4601      	mov	r1, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002400:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002404:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	fa92 f2a2 	rbit	r2, r2
 800240c:	603a      	str	r2, [r7, #0]
  return result;
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	fab2 f282 	clz	r2, r2
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	40d3      	lsrs	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_RCC_GetPCLK2Freq+0x40>)
 800241a:	5cd3      	ldrb	r3, [r2, r3]
 800241c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	08004538 	.word	0x08004538

08002430 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b092      	sub	sp, #72	; 0x48
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	f000 80d4 	beq.w	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002454:	4b4e      	ldr	r3, [pc, #312]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10e      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246a:	61d3      	str	r3, [r2, #28]
 800246c:	4b48      	ldr	r3, [pc, #288]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a41      	ldr	r2, [pc, #260]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe fafd 	bl	8000a94 <HAL_GetTick>
 800249a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe faf9 	bl	8000a94 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e13c      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024bc:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8084 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d07c      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024dc:	4b2c      	ldr	r3, [pc, #176]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b26      	ldr	r3, [pc, #152]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	461a      	mov	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2300      	movs	r3, #0
 800252c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002532:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d04b      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253e:	f7fe faa9 	bl	8000a94 <HAL_GetTick>
 8002542:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe faa5 	bl	8000a94 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0e6      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800255c:	2302      	movs	r3, #2
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	fa93 f3a3 	rbit	r3, r3
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	61fb      	str	r3, [r7, #28]
  return result;
 8002574:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0302 	orr.w	r3, r3, #2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d108      	bne.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800258a:	4b01      	ldr	r3, [pc, #4]	; (8002590 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	e00d      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
 8002598:	10908100 	.word	0x10908100
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	2202      	movs	r2, #2
 80025ae:	613a      	str	r2, [r7, #16]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	fa92 f2a2 	rbit	r2, r2
 80025b6:	60fa      	str	r2, [r7, #12]
  return result;
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	fab2 f282 	clz	r2, r2
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f002 021f 	and.w	r2, r2, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f202 	lsl.w	r2, r1, r2
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0b7      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025d6:	4b57      	ldr	r3, [pc, #348]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4954      	ldr	r1, [pc, #336]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b50      	ldr	r3, [pc, #320]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002608:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4947      	ldr	r1, [pc, #284]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002616:	4313      	orrs	r3, r2
 8002618:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f023 0210 	bic.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4940      	ldr	r1, [pc, #256]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002634:	4313      	orrs	r3, r2
 8002636:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f023 0220 	bic.w	r2, r3, #32
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4938      	ldr	r1, [pc, #224]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002652:	4313      	orrs	r3, r2
 8002654:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	4931      	ldr	r1, [pc, #196]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4929      	ldr	r1, [pc, #164]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800268e:	4313      	orrs	r3, r2
 8002690:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800269e:	4b25      	ldr	r3, [pc, #148]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	4922      	ldr	r1, [pc, #136]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026da:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	4913      	ldr	r1, [pc, #76]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	490b      	ldr	r1, [pc, #44]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002706:	4313      	orrs	r3, r2
 8002708:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002716:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	4904      	ldr	r1, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002724:	4313      	orrs	r3, r2
 8002726:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3748      	adds	r7, #72	; 0x48
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e049      	b.n	80027de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe f81e 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 fd02 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d001      	beq.n	8002800 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e033      	b.n	8002868 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <HAL_TIM_Base_Start+0x8c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_TIM_Base_Start+0x3e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d004      	beq.n	8002826 <HAL_TIM_Base_Start+0x3e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a15      	ldr	r2, [pc, #84]	; (8002878 <HAL_TIM_Base_Start+0x90>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d115      	bne.n	8002852 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_TIM_Base_Start+0x94>)
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d015      	beq.n	8002864 <HAL_TIM_Base_Start+0x7c>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283e:	d011      	beq.n	8002864 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0201 	orr.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002850:	e008      	b.n	8002864 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e000      	b.n	8002866 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40014000 	.word	0x40014000
 800287c:	00010007 	.word	0x00010007

08002880 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e049      	b.n	8002926 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f841 	bl	800292e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f000 fc5e 	bl	8003180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_TIM_IC_Start_IT+0x1e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	e023      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x66>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d104      	bne.n	8002972 <HAL_TIM_IC_Start_IT+0x2e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e01b      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x66>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d104      	bne.n	8002982 <HAL_TIM_IC_Start_IT+0x3e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297e:	b2db      	uxtb	r3, r3
 8002980:	e013      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x66>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d104      	bne.n	8002992 <HAL_TIM_IC_Start_IT+0x4e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	e00b      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x66>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d104      	bne.n	80029a2 <HAL_TIM_IC_Start_IT+0x5e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e003      	b.n	80029aa <HAL_TIM_IC_Start_IT+0x66>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d104      	bne.n	80029bc <HAL_TIM_IC_Start_IT+0x78>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e013      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xa0>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d104      	bne.n	80029cc <HAL_TIM_IC_Start_IT+0x88>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e00b      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xa0>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d104      	bne.n	80029dc <HAL_TIM_IC_Start_IT+0x98>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e003      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0xa0>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0c9      	b.n	8002b8a <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_IC_Start_IT+0xc2>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	e023      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0x10a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_IC_Start_IT+0xd2>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a14:	e01b      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0x10a>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_IC_Start_IT+0xe2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a24:	e013      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0x10a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_IC_Start_IT+0xf2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a34:	e00b      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0x10a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_IC_Start_IT+0x102>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a44:	e003      	b.n	8002a4e <HAL_TIM_IC_Start_IT+0x10a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Start_IT+0x11a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a5c:	e013      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x142>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_IC_Start_IT+0x12a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x142>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_IC_Start_IT+0x13a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a7c:	e003      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x142>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	d841      	bhi.n	8002b10 <HAL_TIM_IC_Start_IT+0x1cc>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_TIM_IC_Start_IT+0x150>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002b11 	.word	0x08002b11
 8002a9c:	08002b11 	.word	0x08002b11
 8002aa0:	08002b11 	.word	0x08002b11
 8002aa4:	08002adb 	.word	0x08002adb
 8002aa8:	08002b11 	.word	0x08002b11
 8002aac:	08002b11 	.word	0x08002b11
 8002ab0:	08002b11 	.word	0x08002b11
 8002ab4:	08002aed 	.word	0x08002aed
 8002ab8:	08002b11 	.word	0x08002b11
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002b11 	.word	0x08002b11
 8002ac4:	08002aff 	.word	0x08002aff
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0202 	orr.w	r2, r2, #2
 8002ad6:	60da      	str	r2, [r3, #12]
      break;
 8002ad8:	e01d      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0204 	orr.w	r2, r2, #4
 8002ae8:	60da      	str	r2, [r3, #12]
      break;
 8002aea:	e014      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	60da      	str	r2, [r3, #12]
      break;
 8002afc:	e00b      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0210 	orr.w	r2, r2, #16
 8002b0c:	60da      	str	r2, [r3, #12]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      break;
 8002b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d135      	bne.n	8002b88 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2201      	movs	r2, #1
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fd3f 	bl	80035a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_TIM_IC_Start_IT+0x250>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_TIM_IC_Start_IT+0x204>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d004      	beq.n	8002b48 <HAL_TIM_IC_Start_IT+0x204>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <HAL_TIM_IC_Start_IT+0x254>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d115      	bne.n	8002b74 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_TIM_IC_Start_IT+0x258>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d015      	beq.n	8002b86 <HAL_TIM_IC_Start_IT+0x242>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b60:	d011      	beq.n	8002b86 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b72:	e008      	b.n	8002b86 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e000      	b.n	8002b88 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	00010007 	.word	0x00010007

08002ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d122      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d11b      	bne.n	8002bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0202 	mvn.w	r2, #2
 8002bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fd fcb8 	bl	8000558 <HAL_TIM_IC_CaptureCallback>
 8002be8:	e005      	b.n	8002bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 faaa 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fab1 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d122      	bne.n	8002c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d11b      	bne.n	8002c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0204 	mvn.w	r2, #4
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2202      	movs	r2, #2
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fc8e 	bl	8000558 <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fa80 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa87 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d122      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d11b      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0208 	mvn.w	r2, #8
 8002c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd fc64 	bl	8000558 <HAL_TIM_IC_CaptureCallback>
 8002c90:	e005      	b.n	8002c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa56 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa5d 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d122      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d11b      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0210 	mvn.w	r2, #16
 8002cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fc3a 	bl	8000558 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e005      	b.n	8002cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa2c 	bl	8003144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa33 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0201 	mvn.w	r2, #1
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa06 	bl	8003130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fcc2 	bl	80036d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d10e      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b80      	cmp	r3, #128	; 0x80
 8002d6c:	d107      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fcb5 	bl	80036e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d10e      	bne.n	8002daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	2b40      	cmp	r3, #64	; 0x40
 8002d98:	d107      	bne.n	8002daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f9e1 	bl	800316c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d10e      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	d107      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0220 	mvn.w	r2, #32
 8002dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fc75 	bl	80036c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b086      	sub	sp, #24
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_TIM_IC_ConfigChannel+0x1e>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e088      	b.n	8002f0e <HAL_TIM_IC_ConfigChannel+0x130>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11b      	bne.n	8002e42 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6819      	ldr	r1, [r3, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f000 fa1f 	bl	800325c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 020c 	bic.w	r2, r2, #12
 8002e2c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6999      	ldr	r1, [r3, #24]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	619a      	str	r2, [r3, #24]
 8002e40:	e060      	b.n	8002f04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11c      	bne.n	8002e82 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6819      	ldr	r1, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f000 fa85 	bl	8003366 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e6a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6999      	ldr	r1, [r3, #24]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	021a      	lsls	r2, r3, #8
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]
 8002e80:	e040      	b.n	8002f04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d11b      	bne.n	8002ec0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f000 fad2 	bl	8003440 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 020c 	bic.w	r2, r2, #12
 8002eaa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69d9      	ldr	r1, [r3, #28]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	61da      	str	r2, [r3, #28]
 8002ebe:	e021      	b.n	8002f04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d11c      	bne.n	8002f00 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6818      	ldr	r0, [r3, #0]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	6819      	ldr	r1, [r3, #0]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f000 faef 	bl	80034b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ee8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69d9      	ldr	r1, [r3, #28]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	021a      	lsls	r2, r3, #8
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	e001      	b.n	8002f04 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_ConfigClockSource+0x1c>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e0b6      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x18a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6e:	d03e      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0xd8>
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f74:	f200 8087 	bhi.w	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	f000 8086 	beq.w	800308c <HAL_TIM_ConfigClockSource+0x176>
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d87f      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002f86:	2b70      	cmp	r3, #112	; 0x70
 8002f88:	d01a      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0xaa>
 8002f8a:	2b70      	cmp	r3, #112	; 0x70
 8002f8c:	d87b      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002f8e:	2b60      	cmp	r3, #96	; 0x60
 8002f90:	d050      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x11e>
 8002f92:	2b60      	cmp	r3, #96	; 0x60
 8002f94:	d877      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002f96:	2b50      	cmp	r3, #80	; 0x50
 8002f98:	d03c      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0xfe>
 8002f9a:	2b50      	cmp	r3, #80	; 0x50
 8002f9c:	d873      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d058      	beq.n	8003054 <HAL_TIM_ConfigClockSource+0x13e>
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d86f      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002fa6:	2b30      	cmp	r3, #48	; 0x30
 8002fa8:	d064      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x15e>
 8002faa:	2b30      	cmp	r3, #48	; 0x30
 8002fac:	d86b      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d060      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x15e>
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d867      	bhi.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d05c      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x15e>
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d05a      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0x15e>
 8002fbe:	e062      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f000 faca 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
      break;
 8002fec:	e04f      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	f000 fab3 	bl	8003568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003010:	609a      	str	r2, [r3, #8]
      break;
 8003012:	e03c      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	461a      	mov	r2, r3
 8003022:	f000 f971 	bl	8003308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2150      	movs	r1, #80	; 0x50
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa80 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8003032:	e02c      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	461a      	mov	r2, r3
 8003042:	f000 f9cd 	bl	80033e0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2160      	movs	r1, #96	; 0x60
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa70 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8003052:	e01c      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	461a      	mov	r2, r3
 8003062:	f000 f951 	bl	8003308 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2140      	movs	r1, #64	; 0x40
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fa60 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8003072:	e00c      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 fa57 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8003084:	e003      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
      break;
 800308a:	e000      	b.n	800308e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800308c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d831      	bhi.n	8003120 <HAL_TIM_ReadCapturedValue+0x78>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	08003121 	.word	0x08003121
 80030cc:	08003121 	.word	0x08003121
 80030d0:	08003121 	.word	0x08003121
 80030d4:	08003103 	.word	0x08003103
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08003121 	.word	0x08003121
 80030e0:	08003121 	.word	0x08003121
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003121 	.word	0x08003121
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003121 	.word	0x08003121
 80030f4:	08003117 	.word	0x08003117
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fe:	60fb      	str	r3, [r7, #12]

      break;
 8003100:	e00f      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	60fb      	str	r3, [r7, #12]

      break;
 800310a:	e00a      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003112:	60fb      	str	r3, [r7, #12]

      break;
 8003114:	e005      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	60fb      	str	r3, [r7, #12]

      break;
 800311e:	e000      	b.n	8003122 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003120:	bf00      	nop
  }

  return tmpreg;
 8003122:	68fb      	ldr	r3, [r7, #12]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <TIM_Base_SetConfig+0xcc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <TIM_Base_SetConfig+0x20>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d108      	bne.n	80031b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a25      	ldr	r2, [pc, #148]	; (800324c <TIM_Base_SetConfig+0xcc>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0x5a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0x5a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a22      	ldr	r2, [pc, #136]	; (8003250 <TIM_Base_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0x5a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a21      	ldr	r2, [pc, #132]	; (8003254 <TIM_Base_SetConfig+0xd4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x5a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a20      	ldr	r2, [pc, #128]	; (8003258 <TIM_Base_SetConfig+0xd8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <TIM_Base_SetConfig+0xcc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0xb0>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <TIM_Base_SetConfig+0xd0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0xb0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <TIM_Base_SetConfig+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <TIM_Base_SetConfig+0xd8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800

0800325c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f023 0201 	bic.w	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <TIM_TI1_SetConfig+0xa4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d007      	beq.n	800329a <TIM_TI1_SetConfig+0x3e>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d003      	beq.n	800329a <TIM_TI1_SetConfig+0x3e>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <TIM_TI1_SetConfig+0xa8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <TIM_TI1_SetConfig+0x42>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <TIM_TI1_SetConfig+0x44>
 800329e:	2300      	movs	r3, #0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	e003      	b.n	80032be <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f023 030a 	bic.w	r3, r3, #10
 80032d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f003 030a 	and.w	r3, r3, #10
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40014000 	.word	0x40014000

08003308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 030a 	bic.w	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 0210 	bic.w	r2, r3, #16
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	031b      	lsls	r3, r3, #12
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	621a      	str	r2, [r3, #32]
}
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f023 0210 	bic.w	r2, r3, #16
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800340a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	031b      	lsls	r3, r3, #12
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800341c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 0303 	bic.w	r3, r3, #3
 800346c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	b2db      	uxtb	r3, r3
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003490:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	031b      	lsls	r3, r3, #12
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4313      	orrs	r3, r2
 8003502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800350a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	031b      	lsls	r3, r3, #12
 8003510:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	f043 0307 	orr.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	401a      	ands	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 031f 	and.w	r3, r3, #31
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003608:	2302      	movs	r3, #2
 800360a:	e04f      	b.n	80036ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d108      	bne.n	8003648 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800363c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d004      	beq.n	8003680 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10c      	bne.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003686:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	4313      	orrs	r3, r2
 8003690:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40014000 	.word	0x40014000

080036c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e040      	b.n	8003790 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f89a 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fb2a 	bl	8003d94 <UART_SetConfig>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fc54 	bl	8004000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003776:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fcdb 	bl	8004144 <UART_CheckIdleState>
 800378e:	4603      	mov	r3, r0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b0ba      	sub	sp, #232	; 0xe8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80037c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80037c6:	4013      	ands	r3, r2
 80037c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80037cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d115      	bne.n	8003800 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 82a3 	beq.w	8003d3c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
      }
      return;
 80037fe:	e29d      	b.n	8003d3c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003800:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 8117 	beq.w	8003a38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003816:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800381a:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_UART_IRQHandler+0x298>)
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 810a 	beq.w	8003a38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d011      	beq.n	8003854 <HAL_UART_IRQHandler+0xbc>
 8003830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384a:	f043 0201 	orr.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_UART_IRQHandler+0xec>
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2202      	movs	r2, #2
 8003872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387a:	f043 0204 	orr.w	r2, r3, #4
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d011      	beq.n	80038b4 <HAL_UART_IRQHandler+0x11c>
 8003890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2204      	movs	r2, #4
 80038a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038aa:	f043 0202 	orr.w	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d017      	beq.n	80038f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e6:	f043 0208 	orr.w	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <HAL_UART_IRQHandler+0x18a>
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8209 	beq.w	8003d40 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800393a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d007      	beq.n	8003956 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800395c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800396e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003972:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003976:	2b00      	cmp	r3, #0
 8003978:	d04f      	beq.n	8003a1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fcef 	bl	800435e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d141      	bne.n	8003a12 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3308      	adds	r3, #8
 80039b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1d9      	bne.n	800398e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <HAL_UART_IRQHandler+0x29c>)
 80039e8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f9ca 	bl	8000d88 <HAL_DMA_Abort_IT>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d017      	beq.n	8003a2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003a04:	4610      	mov	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e00f      	b.n	8003a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9ac 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a10:	e00b      	b.n	8003a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9a8 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	e007      	b.n	8003a2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f9a4 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a28:	e18a      	b.n	8003d40 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2a:	bf00      	nop
    return;
 8003a2c:	e188      	b.n	8003d40 <HAL_UART_IRQHandler+0x5a8>
 8003a2e:	bf00      	nop
 8003a30:	04000120 	.word	0x04000120
 8003a34:	08004425 	.word	0x08004425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 8143 	bne.w	8003cc8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 813c 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8135 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b40      	cmp	r3, #64	; 0x40
 8003a72:	f040 80b1 	bne.w	8003bd8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 815c 	beq.w	8003d44 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a96:	429a      	cmp	r2, r3
 8003a98:	f080 8154 	bcs.w	8003d44 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	f000 8085 	beq.w	8003bbc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ac6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ace:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003adc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ae0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ae8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1da      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b20:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b24:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e1      	bne.n	8003afc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3308      	adds	r3, #8
 8003b58:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b5c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	f023 0310 	bic.w	r3, r3, #16
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e4      	bne.n	8003b7c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd f8ad 	bl	8000d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8d3 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bd6:	e0b5      	b.n	8003d44 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80a7 	beq.w	8003d48 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003bfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80a2 	beq.w	8003d48 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c26:	647b      	str	r3, [r7, #68]	; 0x44
 8003c28:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e4      	bne.n	8003c04 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	623b      	str	r3, [r7, #32]
   return(result);
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c5e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e3      	bne.n	8003c3a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ca6:	61fb      	str	r3, [r7, #28]
 8003ca8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1e4      	bne.n	8003c84 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f85b 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cc6:	e03f      	b.n	8003d48 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x55a>
 8003cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ce8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fbda 	bl	80044a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cf0:	e02d      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01c      	beq.n	8003d4c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
    }
    return;
 8003d1a:	e017      	b.n	8003d4c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d012      	beq.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
 8003d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fb8b 	bl	8004450 <UART_EndTransmit_IT>
    return;
 8003d3a:	e008      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003d3c:	bf00      	nop
 8003d3e:	e006      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003d40:	bf00      	nop
 8003d42:	e004      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003d44:	bf00      	nop
 8003d46:	e002      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003d4c:	bf00      	nop
  }

}
 8003d4e:	37e8      	adds	r7, #232	; 0xe8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b8a      	ldr	r3, [pc, #552]	; (8003fe8 <UART_SetConfig+0x254>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	6979      	ldr	r1, [r7, #20]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a78      	ldr	r2, [pc, #480]	; (8003fec <UART_SetConfig+0x258>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d120      	bne.n	8003e52 <UART_SetConfig+0xbe>
 8003e10:	4b77      	ldr	r3, [pc, #476]	; (8003ff0 <UART_SetConfig+0x25c>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d817      	bhi.n	8003e4c <UART_SetConfig+0xb8>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x90>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e41 	.word	0x08003e41
 8003e2c:	08003e47 	.word	0x08003e47
 8003e30:	08003e3b 	.word	0x08003e3b
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e01d      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e01a      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e40:	2304      	movs	r3, #4
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e017      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e46:	2308      	movs	r3, #8
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e014      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e011      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a67      	ldr	r2, [pc, #412]	; (8003ff4 <UART_SetConfig+0x260>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <UART_SetConfig+0xce>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e009      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a64      	ldr	r2, [pc, #400]	; (8003ff8 <UART_SetConfig+0x264>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <UART_SetConfig+0xde>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e001      	b.n	8003e76 <UART_SetConfig+0xe2>
 8003e72:	2310      	movs	r3, #16
 8003e74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d15b      	bne.n	8003f38 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8003e80:	7ffb      	ldrb	r3, [r7, #31]
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d827      	bhi.n	8003ed6 <UART_SetConfig+0x142>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <UART_SetConfig+0xf8>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003eb1 	.word	0x08003eb1
 8003e90:	08003eb9 	.word	0x08003eb9
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003ed7 	.word	0x08003ed7
 8003e9c:	08003ec7 	.word	0x08003ec7
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
 8003eac:	08003ecf 	.word	0x08003ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fe fa7a 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003eb4:	61b8      	str	r0, [r7, #24]
        break;
 8003eb6:	e013      	b.n	8003ee0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb8:	f7fe fa98 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003ebc:	61b8      	str	r0, [r7, #24]
        break;
 8003ebe:	e00f      	b.n	8003ee0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec0:	4b4e      	ldr	r3, [pc, #312]	; (8003ffc <UART_SetConfig+0x268>)
 8003ec2:	61bb      	str	r3, [r7, #24]
        break;
 8003ec4:	e00c      	b.n	8003ee0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec6:	f7fe f9f9 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003eca:	61b8      	str	r0, [r7, #24]
        break;
 8003ecc:	e008      	b.n	8003ee0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ed2:	61bb      	str	r3, [r7, #24]
        break;
 8003ed4:	e004      	b.n	8003ee0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77bb      	strb	r3, [r7, #30]
        break;
 8003ede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d074      	beq.n	8003fd0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	005a      	lsls	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	441a      	add	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b0f      	cmp	r3, #15
 8003f02:	d916      	bls.n	8003f32 <UART_SetConfig+0x19e>
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0a:	d212      	bcs.n	8003f32 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f023 030f 	bic.w	r3, r3, #15
 8003f14:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	085b      	lsrs	r3, r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	89fa      	ldrh	r2, [r7, #14]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	e04e      	b.n	8003fd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77bb      	strb	r3, [r7, #30]
 8003f36:	e04b      	b.n	8003fd0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d827      	bhi.n	8003f8e <UART_SetConfig+0x1fa>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x1b0>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003f8f 	.word	0x08003f8f
 8003f54:	08003f7f 	.word	0x08003f7f
 8003f58:	08003f8f 	.word	0x08003f8f
 8003f5c:	08003f8f 	.word	0x08003f8f
 8003f60:	08003f8f 	.word	0x08003f8f
 8003f64:	08003f87 	.word	0x08003f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7fe fa1e 	bl	80023a8 <HAL_RCC_GetPCLK1Freq>
 8003f6c:	61b8      	str	r0, [r7, #24]
        break;
 8003f6e:	e013      	b.n	8003f98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7fe fa3c 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8003f74:	61b8      	str	r0, [r7, #24]
        break;
 8003f76:	e00f      	b.n	8003f98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <UART_SetConfig+0x268>)
 8003f7a:	61bb      	str	r3, [r7, #24]
        break;
 8003f7c:	e00c      	b.n	8003f98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7fe f99d 	bl	80022bc <HAL_RCC_GetSysClockFreq>
 8003f82:	61b8      	str	r0, [r7, #24]
        break;
 8003f84:	e008      	b.n	8003f98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8a:	61bb      	str	r3, [r7, #24]
        break;
 8003f8c:	e004      	b.n	8003f98 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	77bb      	strb	r3, [r7, #30]
        break;
 8003f96:	bf00      	nop
    }

    if (pclk != 0U)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	085a      	lsrs	r2, r3, #1
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	441a      	add	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b0f      	cmp	r3, #15
 8003fb8:	d908      	bls.n	8003fcc <UART_SetConfig+0x238>
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d204      	bcs.n	8003fcc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e001      	b.n	8003fd0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	efff69f3 	.word	0xefff69f3
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	007a1200 	.word	0x007a1200

08004000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d10a      	bne.n	8004116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004154:	f7fc fc9e 	bl	8000a94 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d10e      	bne.n	8004186 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f82d 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e023      	b.n	80041ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b04      	cmp	r3, #4
 8004192:	d10e      	bne.n	80041b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f817 	bl	80041d6 <UART_WaitOnFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00d      	b.n	80041ce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b09c      	sub	sp, #112	; 0x70
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e6:	e0a5      	b.n	8004334 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	f000 80a1 	beq.w	8004334 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fc fc4f 	bl	8000a94 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <UART_WaitOnFlagUntilTimeout+0x32>
 8004202:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004204:	2b00      	cmp	r3, #0
 8004206:	d13e      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800421c:	667b      	str	r3, [r7, #100]	; 0x64
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004228:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800422c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e6      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	663b      	str	r3, [r7, #96]	; 0x60
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3308      	adds	r3, #8
 8004258:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800425a:	64ba      	str	r2, [r7, #72]	; 0x48
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004262:	e841 2300 	strex	r3, r2, [r1]
 8004266:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e5      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e067      	b.n	8004356 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d04f      	beq.n	8004334 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a2:	d147      	bne.n	8004334 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	613b      	str	r3, [r7, #16]
   return(result);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004300:	623a      	str	r2, [r7, #32]
 8004302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	61bb      	str	r3, [r7, #24]
   return(result);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e010      	b.n	8004356 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	429a      	cmp	r2, r3
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	429a      	cmp	r2, r3
 8004350:	f43f af4a 	beq.w	80041e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3770      	adds	r7, #112	; 0x70
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800435e:	b480      	push	{r7}
 8004360:	b095      	sub	sp, #84	; 0x54
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004384:	643b      	str	r3, [r7, #64]	; 0x40
 8004386:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d118      	bne.n	8004406 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 0310 	bic.w	r3, r3, #16
 80043e8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004418:	bf00      	nop
 800441a:	3754      	adds	r7, #84	; 0x54
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff fc90 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	60bb      	str	r3, [r7, #8]
   return(result);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6979      	ldr	r1, [r7, #20]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	613b      	str	r3, [r7, #16]
   return(result);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e6      	bne.n	8004458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fc5c 	bl	8003d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449c:	bf00      	nop
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4d0d      	ldr	r5, [pc, #52]	; (80044f0 <__libc_init_array+0x38>)
 80044bc:	4c0d      	ldr	r4, [pc, #52]	; (80044f4 <__libc_init_array+0x3c>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	2600      	movs	r6, #0
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	4d0b      	ldr	r5, [pc, #44]	; (80044f8 <__libc_init_array+0x40>)
 80044ca:	4c0c      	ldr	r4, [pc, #48]	; (80044fc <__libc_init_array+0x44>)
 80044cc:	f000 f820 	bl	8004510 <_init>
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	10a4      	asrs	r4, r4, #2
 80044d4:	2600      	movs	r6, #0
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	08004560 	.word	0x08004560
 80044f4:	08004560 	.word	0x08004560
 80044f8:	08004560 	.word	0x08004560
 80044fc:	08004564 	.word	0x08004564

08004500 <memset>:
 8004500:	4402      	add	r2, r0
 8004502:	4603      	mov	r3, r0
 8004504:	4293      	cmp	r3, r2
 8004506:	d100      	bne.n	800450a <memset+0xa>
 8004508:	4770      	bx	lr
 800450a:	f803 1b01 	strb.w	r1, [r3], #1
 800450e:	e7f9      	b.n	8004504 <memset+0x4>

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
